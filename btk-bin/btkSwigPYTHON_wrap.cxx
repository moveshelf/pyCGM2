/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGPYTHON
#define SWIGPYTHON
#endif

#define SWIG_PYTHON_DIRECTOR_NO_VTABLE


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#if defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)
/* Use debug wrappers with the Python release dll */
# undef _DEBUG
# include <Python.h>
# define _DEBUG
#else
# include <Python.h>
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define PyString_AS_STRING(x) PyUnicode_AS_STRING(x)
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Warning: This function will allocate a new string in Python 3,
 * so please call SWIG_Python_str_DelForPy3(x) to free the space.
 */
SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03000000
  char *cstr;
  char *newstr;
  Py_ssize_t len;
  str = PyUnicode_AsUTF8String(str);
  PyBytes_AsStringAndSize(str, &cstr, &len);
  newstr = (char *) malloc(len+1);
  memcpy(newstr, cstr, len+1);
  Py_XDECREF(str);
  return newstr;
#else
  return PyString_AsString(str);
#endif
}

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_DelForPy3(x) free( (void*) (x) )
#else
#  define SWIG_Python_str_DelForPy3(x) 
#endif


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
#  define PyOS_snprintf _snprintf
# else
#  define PyOS_snprintf snprintf
# endif
#endif

/* A crude PyString_FromFormat implementation for old Pythons */
#if PY_VERSION_HEX < 0x02020000

#ifndef SWIG_PYBUFFER_SIZE
# define SWIG_PYBUFFER_SIZE 1024
#endif

static PyObject *
PyString_FromFormat(const char *fmt, ...) {
  va_list ap;
  char buf[SWIG_PYBUFFER_SIZE * 2];
  int res;
  va_start(ap, fmt);
  res = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return (res < 0 || res >= (int)sizeof(buf)) ? 0 : PyString_FromString(buf);
}
#endif

#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* A crude PyExc_StopIteration exception for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# ifndef PyExc_StopIteration
#  define PyExc_StopIteration PyExc_RuntimeError
# endif
# ifndef PyObject_GenericGetAttr
#  define PyObject_GenericGetAttr 0
# endif
#endif

/* Py_NotImplemented is defined in 2.1 and up. */
#if PY_VERSION_HEX < 0x02010000
# ifndef Py_NotImplemented
#  define Py_NotImplemented PyExc_RuntimeError
# endif
#endif

/* A crude PyString_AsStringAndSize implementation for old Pythons */
#if PY_VERSION_HEX < 0x02010000
# ifndef PyString_AsStringAndSize
#  define PyString_AsStringAndSize(obj, s, len) {*s = PyString_AsString(obj); *len = *s ? strlen(*s) : 0;}
# endif
#endif

/* PySequence_Size for old Pythons */
#if PY_VERSION_HEX < 0x02000000
# ifndef PySequence_Size
#  define PySequence_Size PySequence_Length
# endif
#endif

/* PyBool_FromLong for old Pythons */
#if PY_VERSION_HEX < 0x02030000
static
PyObject *PyBool_FromLong(long ok)
{
  PyObject *result = ok ? Py_True : Py_False;
  Py_INCREF(result);
  return result;
}
#endif

/* Py_ssize_t for old Pythons */
/* This code is as recommended by: */
/* http://www.python.org/dev/peps/pep-0353/#conversion-guidelines */
#if PY_VERSION_HEX < 0x02050000 && !defined(PY_SSIZE_T_MIN)
typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
typedef inquiry lenfunc;
typedef intargfunc ssizeargfunc;
typedef intintargfunc ssizessizeargfunc;
typedef intobjargproc ssizeobjargproc;
typedef intintobjargproc ssizessizeobjargproc;
typedef getreadbufferproc readbufferproc;
typedef getwritebufferproc writebufferproc;
typedef getsegcountproc segcountproc;
typedef getcharbufferproc charbufferproc;
static long PyNumber_AsSsize_t (PyObject *x, void *SWIGUNUSEDPARM(exc))
{
  long result = 0;
  PyObject *i = PyNumber_Int(x);
  if (i) {
    result = PyInt_AsLong(i);
    Py_DECREF(i);
  }
  return result;
}
#endif

#if PY_VERSION_HEX < 0x02050000
#define PyInt_FromSize_t(x) PyInt_FromLong((long)x)
#endif

#if PY_VERSION_HEX < 0x02040000
#define Py_VISIT(op)				\
  do { 						\
    if (op) {					\
      int vret = visit((op), arg);		\
      if (vret)					\
        return vret;				\
    }						\
  } while (0)
#endif

#if PY_VERSION_HEX < 0x02030000
typedef struct {
  PyTypeObject type;
  PyNumberMethods as_number;
  PyMappingMethods as_mapping;
  PySequenceMethods as_sequence;
  PyBufferProcs as_buffer;
  PyObject *name, *slots;
} PyHeapTypeObject;
#endif

#if PY_VERSION_HEX < 0x02030000
typedef destructor freefunc;
#endif

#if ((PY_MAJOR_VERSION == 2 && PY_MINOR_VERSION > 6) || \
     (PY_MAJOR_VERSION == 3 && PY_MINOR_VERSION > 0) || \
     (PY_MAJOR_VERSION > 3))
# define SWIGPY_USE_CAPSULE
# define SWIGPY_CAPSULE_NAME ((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION ".type_pointer_capsule" SWIG_TYPE_TABLE_NAME)
#endif

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred()) PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    char *tmp;
    PyObject *old_str = PyObject_Str(value);
    PyErr_Clear();
    Py_XINCREF(type);

    PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    if (PY_VERSION_HEX >= 0x02030000) /* For 2.3 or later, use the PyGILState calls */
#      define SWIG_PYTHON_USE_GIL
#    endif
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;


/* -----------------------------------------------------------------------------
 * Wrapper of PyInstanceMethod_New() used in Python 3
 * It is exported to the generated module, used for -fastproxy
 * ----------------------------------------------------------------------------- */
#if PY_VERSION_HEX >= 0x03000000
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func)
{
  return PyInstanceMethod_New(func);
}
#else
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(func))
{
  return NULL;
}
#endif

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);                            
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
#if !defined(SWIG_PYTHON_OUTPUT_TUPLE)
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
#else
  PyObject*   o2;
  PyObject*   o3;
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyTuple_Check(result)) {
      o2 = result;
      result = PyTuple_New(1);
      PyTuple_SET_ITEM(result, 0, o2);
    }
    o3 = PyTuple_New(1);
    PyTuple_SET_ITEM(o3, 0, obj);
    o2 = result;
    result = PySequence_Concat(o2, o3);
    Py_DECREF(o2);
    Py_DECREF(o3);
  }
  return result;
#endif
}

/* Unpack the argument tuple */

SWIGINTERN Py_ssize_t
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      Py_ssize_t i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      Py_ssize_t i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

/* A functor is a function object with one single object argument */
#if PY_VERSION_HEX >= 0x02020000
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);
#else
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunction(functor, "O", obj);
#endif

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/*  How to access Py_None */
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  ifndef SWIG_PYTHON_NO_BUILD_NONE
#    ifndef SWIG_PYTHON_BUILD_NONE
#      define SWIG_PYTHON_BUILD_NONE
#    endif
#  endif
#endif

#ifdef SWIG_PYTHON_BUILD_NONE
#  ifdef Py_None
#   undef Py_None
#   define Py_None SWIG_Py_None()
#  endif
SWIGRUNTIMEINLINE PyObject * 
_SWIG_Py_None(void)
{
  PyObject *none = Py_BuildValue((char*)"");
  Py_DECREF(none);
  return none;
}
SWIGRUNTIME PyObject * 
SWIG_Py_None(void)
{
  static PyObject *SWIG_STATIC_POINTER(none) = _SWIG_Py_None();
  return none;
}
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  return data ? data->implicitconv : 0;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
#if (PY_VERSION_HEX < 0x02020000)
      data->newraw = 0;
#else
      data->newraw = PyObject_GetAttrString(data->klass, (char *)"__new__");
#endif
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, (char *)"__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
#ifdef METH_O
      data->delargs = !(flags & (METH_O));
#else
      data->delargs = 0;
#endif
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data) {
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;


#ifdef SWIGPYTHON_BUILTIN

SWIGRUNTIME PyObject *
SwigPyObject_get___dict__(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;

  if (!sobj->dict)
    sobj->dict = PyDict_New();

  Py_INCREF(sobj->dict);
  return sobj->dict;
}

#endif

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, SwigPyObject_long(v)) == 0) {
      PyObject *ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
	res = PyUnicode_Format(ofmt,args);
#else
	res = PyString_Format(ofmt,args);
#endif
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
#ifdef METH_NOARGS
SwigPyObject_repr(SwigPyObject *v)
#else
SwigPyObject_repr(SwigPyObject *v, PyObject *args)
#endif
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"), (void *)v);
  if (v->next) {
# ifdef METH_NOARGS
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
# else
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next, args);
# endif
# if PY_VERSION_HEX >= 0x03000000
    PyObject *joined = PyUnicode_Concat(repr, nrep);
    Py_DecRef(repr);
    Py_DecRef(nrep);
    repr = joined;
# else
    PyString_ConcatAndDel(&repr,nrep);
# endif
  }
  return repr;  
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
#ifdef SWIGPYTHON_BUILTIN
  PyTypeObject *target_tp = SwigPyObject_type();
  if (PyType_IsSubtype(op->ob_type, target_tp))
    return 1;
  return (strcmp(op->ob_type->tp_name, "SwigPyObject") == 0);
#else
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;

      /* PyObject_CallFunction() has the potential to silently drop
         the active active exception.  In cases of unnamed temporary
         variable or where we just finished iterating over a generator
         StopIteration will be active right now, and this needs to
         remain true upon return from SwigPyObject_dealloc.  So save
         and restore. */
      
      PyObject *val = NULL, *type = NULL, *tb = NULL;
      PyErr_Fetch(&val, &type, &tb);

      if (data->delargs) {
        /* we need to create a temporary object to carry the destroy operation */
        PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
        res = SWIG_Python_CallFunctor(destroy, tmp);
        Py_DECREF(tmp);
      } else {
        PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
        PyObject *mself = PyCFunction_GET_SELF(destroy);
        res = ((*meth)(mself, v));
      }
      if (!res)
        PyErr_WriteUnraisable(destroy);

      PyErr_Restore(val, type, tb);

      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
#ifndef METH_O
  PyObject *tmp = 0;
  if (!PyArg_ParseTuple(next,(char *)"O:append", &tmp)) return NULL;
  next = tmp;
#endif
  if (!SwigPyObject_Check(next)) {
    PyErr_SetString(PyExc_TypeError, "Attempt to append a non SwigPyObject");
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
#ifdef METH_NOARGS
SwigPyObject_next(PyObject* v)
#else
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_disown(PyObject *v)
#else
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_acquire(PyObject *v)
#else
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
#if (PY_VERSION_HEX < 0x02020000)
  if (!PyArg_ParseTuple(args,(char *)"|O:own",&val))
#elif (PY_VERSION_HEX < 0x02050000)
  if (!PyArg_UnpackTuple(args, (char *)"own", 0, 1, &val)) 
#else
  if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) 
#endif
    {
      return NULL;
    } 
  else
    {
      SwigPyObject *sobj = (SwigPyObject *)v;
      PyObject *obj = PyBool_FromLong(sobj->own);
      if (val) {
#ifdef METH_NOARGS
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v);
	} else {
	  SwigPyObject_disown(v);
	}
#else
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v,args);
	} else {
	  SwigPyObject_disown(v,args);
	}
#endif
      } 
      return obj;
    }
}

#ifdef METH_O
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_NOARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_NOARGS,  (char *)"acquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS, (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_O,       (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_NOARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,    METH_NOARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#else
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_VARARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_VARARGS,  (char *)"acquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS,  (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_VARARGS,  (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_VARARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,   METH_VARARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#endif

#if PY_VERSION_HEX < 0x02020000
SWIGINTERN PyObject *
SwigPyObject_getattr(SwigPyObject *sobj,char *name)
{
  return Py_FindMethod(swigobject_methods, (PyObject *)sobj, name);
}
#endif

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";

  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03050000 /* 3.5 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_matrix_multiply */
#elif PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#elif PY_VERSION_HEX >= 0x02050000 /* 2.5.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#elif PY_VERSION_HEX >= 0x02020000 /* 2.2.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */
#elif PY_VERSION_HEX >= 0x02000000 /* 2.0.0 */
    0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_or */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
      /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyObject",               /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
      0,				    /* tp_print */
#if PY_VERSION_HEX < 0x02020000
      (getattrfunc)SwigPyObject_getattr,    /* tp_getattr */
#else
      (getattrfunc)0,                       /* tp_getattr */
#endif
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      0,				    /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
      0,                                    /* tp_prev */
#endif
      0                                     /* tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpyobject_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpyobject_type) < 0)
      return NULL;
#endif
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME int
SwigPyPacked_print(SwigPyPacked *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char result[SWIG_BUFFER_SIZE];
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->ty->name,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == SwigPyPacked_TypeOnce()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
      /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyPacked",               /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
      (printfunc)SwigPyPacked_print,        /* tp_print */
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
      0,                                    /* tp_prev */
#endif
      0                                     /* tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpypacked_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpypacked_type) < 0)
      return NULL;
#endif
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIMEINLINE PyObject *
_SWIG_This(void)
{
    return SWIG_Python_str_FromChar("this");
}

static PyObject *swig_this = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (swig_this == NULL)
    swig_this = _SWIG_This();
  return swig_this;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
    pyobj = PyWeakref_GET_OBJECT(pyobj);
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if (!defined(SWIG_PYTHON_SLOW_GETSET_THIS) && (PY_VERSION_HEX >= 0x02030000))
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;
  int implicit_conv = (flags & SWIG_POINTER_IMPLICIT_CONV) != 0;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None && !implicit_conv) {
    if (ptr)
      *ptr = 0;
    return SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (own)
      *own = *own | sobj->own;
    if (flags & SWIG_POINTER_DISOWN) {
      sobj->own = 0;
    }
    res = SWIG_OK;
  } else {
    if (implicit_conv) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            Py_DECREF(impconv);
          }
        }
      }
    }
    if (!SWIG_IsOK(res) && obj == Py_None) {
      if (ptr)
        *ptr = 0;
      if (PyErr_Occurred())
        PyErr_Clear();
      res = SWIG_OK;
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    
    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc) 
      return SWIG_ERROR;
    if (ty) {
      swig_cast_info *tc = SWIG_TypeCheck(desc,ty);
      if (tc) {
        int newmemory = 0;
        *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
        assert(!newmemory); /* newmemory handling not yet implemented */
      } else {
        return SWIG_ERROR;
      }
    } else {
      *ptr = vptr;
    }
    return SWIG_OK;
  }
}

/* Convert a packed value value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
#if (PY_VERSION_HEX >= 0x02020000)
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      PyObject *key = SWIG_This();
      PyObject_SetAttr(inst, key, swig_this);
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    inst = ((PyTypeObject*) data->newargs)->tp_new((PyTypeObject*) data->newargs, Py_None, Py_None);
    if (inst) {
      PyObject_SetAttr(inst, SWIG_This(), swig_this);
      Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
    }
#else
    PyObject *dict = PyDict_New();
    if (dict) {
      PyDict_SetItem(dict, SWIG_This(), swig_this);
      inst = PyInstance_NewRaw(data->newargs, dict);
      Py_DECREF(dict);
    }
#endif
  }
  return inst;
#else
#if (PY_VERSION_HEX >= 0x02010000)
  PyObject *inst = 0;
  PyObject *dict = PyDict_New();
  if (dict) {
    PyDict_SetItem(dict, SWIG_This(), swig_this);
    inst = PyInstance_NewRaw(data->newargs, dict);
    Py_DECREF(dict);
  }
  return (PyObject *) inst;
#else
  PyInstanceObject *inst = PyObject_NEW(PyInstanceObject, &PyInstance_Type);
  if (inst == NULL) {
    return NULL;
  }
  inst->in_class = (PyClassObject *)data->newargs;
  Py_INCREF(inst->in_class);
  inst->in_dict = PyDict_New();
  if (inst->in_dict == NULL) {
    Py_DECREF(inst);
    return NULL;
  }
#ifdef Py_TPFLAGS_HAVE_WEAKREFS
  inst->in_weakreflist = NULL;
#endif
#ifdef Py_TPFLAGS_GC
  PyObject_GC_Init(inst);
#endif
  PyDict_SetItem(inst->in_dict, SWIG_This(), swig_this);
  return (PyObject *) inst;
#endif
#endif
}

SWIGRUNTIME void
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
 PyObject *dict;
#if (PY_VERSION_HEX >= 0x02020000) && !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
 PyObject **dictptr = _PyObject_GetDictPtr(inst);
 if (dictptr != NULL) {
   dict = *dictptr;
   if (dict == NULL) {
     dict = PyDict_New();
     *dictptr = dict;
   }
   PyDict_SetItem(dict, SWIG_This(), swig_this);
   return;
 }
#endif
 dict = PyObject_GetAttrString(inst, (char*)"__dict__");
 PyDict_SetItem(dict, SWIG_This(), swig_this);
 Py_DECREF(dict);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      SwigPyObject_append((PyObject*) sthis, obj[1]);
    } else {
      SWIG_Python_SetSwigThis(obj[0], obj[1]);
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
        PyObject *next_self = clientdata->pytype->tp_alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
#ifdef SWIGPYTHON_BUILTIN
        newobj->dict = 0;
#endif
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
#ifdef SWIGPYTHON_BUILTIN
      newobj->dict = 0;
#endif
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    Py_DECREF(robj);
    robj = inst;
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
# ifdef SWIGPY_USE_CAPSULE
    type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
# else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
# endif
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

#if PY_MAJOR_VERSION < 2
/* PyModule_AddObject function was introduced in Python 2.0.  The following function
   is copied out of Python/modsupport.c in python version 2.3.4 */
SWIGINTERN int
PyModule_AddObject(PyObject *m, char *name, PyObject *o)
{
  PyObject *dict;
  if (!PyModule_Check(m)) {
    PyErr_SetString(PyExc_TypeError, "PyModule_AddObject() needs module as first arg");
    return SWIG_ERROR;
  }
  if (!o) {
    PyErr_SetString(PyExc_TypeError, "PyModule_AddObject() needs non-NULL value");
    return SWIG_ERROR;
  }
  
  dict = PyModule_GetDict(m);
  if (dict == NULL) {
    /* Internal error -- modules must have a dict! */
    PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
		 PyModule_GetName(m));
    return SWIG_ERROR;
  }
  if (PyDict_SetItemString(dict, name, o))
    return SWIG_ERROR;
  Py_DECREF(o);
  return SWIG_OK;
}
#endif

SWIGRUNTIME void
#ifdef SWIGPY_USE_CAPSULE
SWIG_Python_DestroyModule(PyObject *obj)
#else
SWIG_Python_DestroyModule(void *vptr)
#endif
{
#ifdef SWIGPY_USE_CAPSULE
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
#else
  swig_module_info *swig_module = (swig_module_info *) vptr;
#endif
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  swig_this = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
#ifdef SWIGPY_USE_CAPSULE
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer_capsule" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#else
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#endif
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
#ifdef SWIGPY_USE_CAPSULE
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
#else
    descriptor = (swig_type_info *) PyCObject_AsVoidPtr(obj);
#endif
  } else {
    swig_module_info *swig_module = SWIG_GetModule(0);
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
#ifdef SWIGPY_USE_CAPSULE
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
#else
      obj = PyCObject_FromVoidPtr(descriptor, NULL);
#endif
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      char *tmp;
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, tmp = SWIG_Python_str_AsChar(old_str));
      } else {
	PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
      }
      SWIG_Python_str_DelForPy3(tmp);
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : "";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
          SWIG_Python_str_DelForPy3(cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
#if SWIG_POINTER_EXCEPTION
    if (flags) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
#endif
  }
  return result;
}

#ifdef SWIGPYTHON_BUILTIN
SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res = -1;

# ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
# else
  if (!PyString_Check(name))
# endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) < 0)
      goto done;
  }

  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  Py_DECREF(name);
  return res;
}
#endif


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_ExtractionOption swig_types[0]
#define SWIGTYPE_p_allocator_type swig_types[1]
#define SWIGTYPE_p_btkANBFileIO swig_types[2]
#define SWIGTYPE_p_btkANBFileIO_impl swig_types[3]
#define SWIGTYPE_p_btkANCFileIO swig_types[4]
#define SWIGTYPE_p_btkANCFileIO_impl swig_types[5]
#define SWIGTYPE_p_btkANGFileIO swig_types[6]
#define SWIGTYPE_p_btkANGFileIO_impl swig_types[7]
#define SWIGTYPE_p_btkAcquisition swig_types[8]
#define SWIGTYPE_p_btkAcquisitionFileIO swig_types[9]
#define SWIGTYPE_p_btkAcquisitionFileIO_impl swig_types[10]
#define SWIGTYPE_p_btkAcquisitionFileIO_shared swig_types[11]
#define SWIGTYPE_p_btkAcquisitionFileReader swig_types[12]
#define SWIGTYPE_p_btkAcquisitionFileReader_impl swig_types[13]
#define SWIGTYPE_p_btkAcquisitionFileWriter swig_types[14]
#define SWIGTYPE_p_btkAcquisitionFileWriter_impl swig_types[15]
#define SWIGTYPE_p_btkAcquisitionUnitConverter swig_types[16]
#define SWIGTYPE_p_btkAcquisitionUnitConverter_impl swig_types[17]
#define SWIGTYPE_p_btkAcquisition_impl swig_types[18]
#define SWIGTYPE_p_btkAnalog swig_types[19]
#define SWIGTYPE_p_btkAnalogCollection swig_types[20]
#define SWIGTYPE_p_btkAnalogCollectionIterator swig_types[21]
#define SWIGTYPE_p_btkAnalogCollection_impl swig_types[22]
#define SWIGTYPE_p_btkAnalogData swig_types[23]
#define SWIGTYPE_p_btkAnalogData_impl swig_types[24]
#define SWIGTYPE_p_btkAnalogIterator swig_types[25]
#define SWIGTYPE_p_btkAnalogOffsetRemover swig_types[26]
#define SWIGTYPE_p_btkAnalogOffsetRemover_impl swig_types[27]
#define SWIGTYPE_p_btkAnalog_impl swig_types[28]
#define SWIGTYPE_p_btkC3DFileIO swig_types[29]
#define SWIGTYPE_p_btkC3DFileIO_impl swig_types[30]
#define SWIGTYPE_p_btkCALForcePlateFileIO swig_types[31]
#define SWIGTYPE_p_btkCALForcePlateFileIO_impl swig_types[32]
#define SWIGTYPE_p_btkCLBFileIO swig_types[33]
#define SWIGTYPE_p_btkCLBFileIO_impl swig_types[34]
#define SWIGTYPE_p_btkDataObject_impl swig_types[35]
#define SWIGTYPE_p_btkDelsysEMGFileIO swig_types[36]
#define SWIGTYPE_p_btkDelsysEMGFileIO_impl swig_types[37]
#define SWIGTYPE_p_btkEMFFileIO swig_types[38]
#define SWIGTYPE_p_btkEMFFileIO_impl swig_types[39]
#define SWIGTYPE_p_btkEMxFileIO swig_types[40]
#define SWIGTYPE_p_btkEMxFileIO_impl swig_types[41]
#define SWIGTYPE_p_btkEvent swig_types[42]
#define SWIGTYPE_p_btkEventCollection swig_types[43]
#define SWIGTYPE_p_btkEventCollectionIterator swig_types[44]
#define SWIGTYPE_p_btkEventCollection_impl swig_types[45]
#define SWIGTYPE_p_btkEvent_impl swig_types[46]
#define SWIGTYPE_p_btkForcePlatform swig_types[47]
#define SWIGTYPE_p_btkForcePlatformCollection swig_types[48]
#define SWIGTYPE_p_btkForcePlatformCollectionIterator swig_types[49]
#define SWIGTYPE_p_btkForcePlatformCollection_impl swig_types[50]
#define SWIGTYPE_p_btkForcePlatformWrenchFilter swig_types[51]
#define SWIGTYPE_p_btkForcePlatformWrenchFilter_impl swig_types[52]
#define SWIGTYPE_p_btkForcePlatform_impl swig_types[53]
#define SWIGTYPE_p_btkForcePlatformsExtractor swig_types[54]
#define SWIGTYPE_p_btkForcePlatformsExtractor_impl swig_types[55]
#define SWIGTYPE_p_btkGRxFileIO swig_types[56]
#define SWIGTYPE_p_btkGRxFileIO_impl swig_types[57]
#define SWIGTYPE_p_btkGroundReactionWrenchFilter swig_types[58]
#define SWIGTYPE_p_btkGroundReactionWrenchFilter_impl swig_types[59]
#define SWIGTYPE_p_btkIMU swig_types[60]
#define SWIGTYPE_p_btkIMUCollection swig_types[61]
#define SWIGTYPE_p_btkIMUCollectionIterator swig_types[62]
#define SWIGTYPE_p_btkIMUCollection_impl swig_types[63]
#define SWIGTYPE_p_btkIMU_impl swig_types[64]
#define SWIGTYPE_p_btkIMUsExtractor swig_types[65]
#define SWIGTYPE_p_btkIMUsExtractor_impl swig_types[66]
#define SWIGTYPE_p_btkMDFFileIO swig_types[67]
#define SWIGTYPE_p_btkMDFFileIO_impl swig_types[68]
#define SWIGTYPE_p_btkMOMFileIO swig_types[69]
#define SWIGTYPE_p_btkMOMFileIO_impl swig_types[70]
#define SWIGTYPE_p_btkMergeAcquisitionFilter swig_types[71]
#define SWIGTYPE_p_btkMergeAcquisitionFilter_impl swig_types[72]
#define SWIGTYPE_p_btkMetaData swig_types[73]
#define SWIGTYPE_p_btkMetaDataInfo swig_types[74]
#define SWIGTYPE_p_btkMetaDataInfo_impl swig_types[75]
#define SWIGTYPE_p_btkMetaDataIterator swig_types[76]
#define SWIGTYPE_p_btkMetaData_impl swig_types[77]
#define SWIGTYPE_p_btkPWRFileIO swig_types[78]
#define SWIGTYPE_p_btkPWRFileIO_impl swig_types[79]
#define SWIGTYPE_p_btkPoint swig_types[80]
#define SWIGTYPE_p_btkPointCollection swig_types[81]
#define SWIGTYPE_p_btkPointCollectionIterator swig_types[82]
#define SWIGTYPE_p_btkPointCollection_impl swig_types[83]
#define SWIGTYPE_p_btkPointData swig_types[84]
#define SWIGTYPE_p_btkPointData_impl swig_types[85]
#define SWIGTYPE_p_btkPoint_impl swig_types[86]
#define SWIGTYPE_p_btkProcessObject_impl swig_types[87]
#define SWIGTYPE_p_btkRAxFileIO swig_types[88]
#define SWIGTYPE_p_btkRAxFileIO_impl swig_types[89]
#define SWIGTYPE_p_btkRICFileIO swig_types[90]
#define SWIGTYPE_p_btkRICFileIO_impl swig_types[91]
#define SWIGTYPE_p_btkSeparateKnownVirtualMarkersFilter swig_types[92]
#define SWIGTYPE_p_btkSeparateKnownVirtualMarkersFilter_impl swig_types[93]
#define SWIGTYPE_p_btkSpecializedPointsExtractor swig_types[94]
#define SWIGTYPE_p_btkSpecializedPointsExtractor_impl swig_types[95]
#define SWIGTYPE_p_btkStringAxes swig_types[96]
#define SWIGTYPE_p_btkSubAcquisitionFilter swig_types[97]
#define SWIGTYPE_p_btkSubAcquisitionFilter_impl swig_types[98]
#define SWIGTYPE_p_btkTDFFileIO swig_types[99]
#define SWIGTYPE_p_btkTDFFileIO_impl swig_types[100]
#define SWIGTYPE_p_btkTRBFileIO swig_types[101]
#define SWIGTYPE_p_btkTRBFileIO_impl swig_types[102]
#define SWIGTYPE_p_btkTRCFileIO swig_types[103]
#define SWIGTYPE_p_btkTRCFileIO_impl swig_types[104]
#define SWIGTYPE_p_btkVerticalGroundReactionForceGaitEventDetector swig_types[105]
#define SWIGTYPE_p_btkVerticalGroundReactionForceGaitEventDetector_impl swig_types[106]
#define SWIGTYPE_p_btkWrench swig_types[107]
#define SWIGTYPE_p_btkWrenchCollection swig_types[108]
#define SWIGTYPE_p_btkWrenchCollectionDownsampleFilter swig_types[109]
#define SWIGTYPE_p_btkWrenchCollectionDownsampleFilter_impl swig_types[110]
#define SWIGTYPE_p_btkWrenchCollectionIterator swig_types[111]
#define SWIGTYPE_p_btkWrenchCollection_impl swig_types[112]
#define SWIGTYPE_p_btkWrenchDirectionAngleFilter swig_types[113]
#define SWIGTYPE_p_btkWrenchDirectionAngleFilter_impl swig_types[114]
#define SWIGTYPE_p_btkWrenchDownsampleFilter swig_types[115]
#define SWIGTYPE_p_btkWrenchDownsampleFilter_impl swig_types[116]
#define SWIGTYPE_p_btkWrench_impl swig_types[117]
#define SWIGTYPE_p_btkXLSOrthoTrakFileIO swig_types[118]
#define SWIGTYPE_p_btkXLSOrthoTrakFileIO_impl swig_types[119]
#define SWIGTYPE_p_btkXMOVEFileIO swig_types[120]
#define SWIGTYPE_p_btkXMOVEFileIO_impl swig_types[121]
#define SWIGTYPE_p_btk__Analog__Values swig_types[122]
#define SWIGTYPE_p_btk__ForcePlatform__CalMatrix swig_types[123]
#define SWIGTYPE_p_btk__ForcePlatform__Corner swig_types[124]
#define SWIGTYPE_p_btk__ForcePlatform__Corners swig_types[125]
#define SWIGTYPE_p_btk__ForcePlatform__Origin swig_types[126]
#define SWIGTYPE_p_btk__IMU__CalMatrix swig_types[127]
#define SWIGTYPE_p_btk__IMU__Rotation swig_types[128]
#define SWIGTYPE_p_btk__MetaDataInfo__Format swig_types[129]
#define SWIGTYPE_p_btk__Point__Residuals swig_types[130]
#define SWIGTYPE_p_btk__Point__Values swig_types[131]
#define SWIGTYPE_p_char swig_types[132]
#define SWIGTYPE_p_difference_type swig_types[133]
#define SWIGTYPE_p_double swig_types[134]
#define SWIGTYPE_p_int swig_types[135]
#define SWIGTYPE_p_p_PyObject swig_types[136]
#define SWIGTYPE_p_size_type swig_types[137]
#define SWIGTYPE_p_std__allocatorT_btkStringAxes_t swig_types[138]
#define SWIGTYPE_p_std__allocatorT_double_t swig_types[139]
#define SWIGTYPE_p_std__allocatorT_int_t swig_types[140]
#define SWIGTYPE_p_std__allocatorT_std__string_t swig_types[141]
#define SWIGTYPE_p_std__invalid_argument swig_types[142]
#define SWIGTYPE_p_std__listT_btkStringAxes_std__allocatorT_btkStringAxes_t_t swig_types[143]
#define SWIGTYPE_p_std__listT_std__string_std__allocatorT_std__string_t_t swig_types[144]
#define SWIGTYPE_p_std__string swig_types[145]
#define SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t swig_types[146]
#define SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t swig_types[147]
#define SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t swig_types[148]
#define SWIGTYPE_p_swig__SwigPyIterator swig_types[149]
#define SWIGTYPE_p_value_type swig_types[150]
static swig_type_info *swig_types[152];
static swig_module_info swig_module = {swig_types, 151, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#if (PY_VERSION_HEX <= 0x02000000)
# if !defined(SWIG_PYTHON_CLASSIC)
#  error "This python version requires swig to be run with the '-classic' option"
# endif
#endif

/*-----------------------------------------------
              @(target):= _btk.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__btk

#else
#  define SWIG_init    init_btk

#endif
#define SWIG_name    "_btk"

#define SWIGVERSION 0x030010 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(_obj);      
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_XINCREF(_obj);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      SWIG_PYTHON_THREAD_END_BLOCK;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XDECREF(_obj);
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#include "btkException.h"


#include "btkCommonSwig.h"


#include <string>


#include <iostream>

#if PY_VERSION_HEX >= 0x03020000
# define SWIGPY_SLICE_ARG(obj) ((PyObject*) (obj))
#else
# define SWIGPY_SLICE_ARG(obj) ((PySliceObject*) (obj))
#endif


#include <stdexcept>


#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <stddef.h>


namespace swig {
  struct stop_iteration {
  };

  struct SwigPyIterator {
  private:
    SwigPtr_PyObject _seq;

  protected:
    SwigPyIterator(PyObject *seq) : _seq(seq)
    {
    }
      
  public:
    virtual ~SwigPyIterator() {}

    // Access iterator method, required by Python
    virtual PyObject *value() const = 0;

    // Forward iterator method, required by Python
    virtual SwigPyIterator *incr(size_t n = 1) = 0;
    
    // Backward iterator method, very common in C++, but not required in Python
    virtual SwigPyIterator *decr(size_t /*n*/ = 1)
    {
      throw stop_iteration();
    }

    // Random access iterator methods, but not required in Python
    virtual ptrdiff_t distance(const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }

    virtual bool equal (const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }
    
    // C++ common/needed methods
    virtual SwigPyIterator *copy() const = 0;

    PyObject *next()     
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      PyObject *obj = value();
      incr();       
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads
      return obj;     
    }

    /* Make an alias for Python 3.x */
    PyObject *__next__()
    {
      return next();
    }

    PyObject *previous()
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      decr();
      PyObject *obj = value();
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads       
      return obj;
    }

    SwigPyIterator *advance(ptrdiff_t n)
    {
      return  (n > 0) ?  incr(n) : decr(-n);
    }
      
    bool operator == (const SwigPyIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const SwigPyIterator& x) const
    {
      return ! operator==(x);
    }
      
    SwigPyIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    SwigPyIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    SwigPyIterator* operator + (ptrdiff_t n) const
    {
      return copy()->advance(n);
    }

    SwigPyIterator* operator - (ptrdiff_t n) const
    {
      return copy()->advance(-n);
    }
      
    ptrdiff_t operator - (const SwigPyIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::SwigPyIterator *");
	init = 1;
      }	
      return desc;
    }    
  };

#if defined(SWIGPYTHON_BUILTIN)
  inline PyObject* make_output_iterator_builtin (PyObject *pyself)
  {
    Py_INCREF(pyself);
    return pyself;
  }
#endif
}


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
#if PY_VERSION_HEX < 0x03000000
  } else if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
#endif
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else
#endif
  if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


#if defined(LLONG_MAX) && !defined(SWIG_LONG_LONG_AVAILABLE)
#  define SWIG_LONG_LONG_AVAILABLE
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN int
SWIG_AsVal_unsigned_SS_long_SS_long (PyObject *obj, unsigned long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    unsigned long long v = PyLong_AsUnsignedLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      res = SWIG_OverflowError;
    }
  } else {
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, mant_max)) {
      if (val) *val = (unsigned long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_size_t (PyObject * obj, size_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(size_t) <= sizeof(unsigned long long)) {
    unsigned long long v;
    res = SWIG_AsVal_unsigned_SS_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  }
#endif
  return res;
}


  #define SWIG_From_long   PyInt_FromLong 


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE PyObject* 
SWIG_From_long_SS_long  (long long value)
{
  return ((value < LONG_MIN) || (value > LONG_MAX)) ?
    PyLong_FromLongLong(value) : PyInt_FromLong(static_cast< long >(value));
}
#endif


SWIGINTERNINLINE PyObject *
SWIG_From_ptrdiff_t  (ptrdiff_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(ptrdiff_t) <= sizeof(long)) {
#endif
    return SWIG_From_long  (static_cast< long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(ptrdiff_t) <= sizeof(long long) */
    return SWIG_From_long_SS_long  (static_cast< long long >(value));
  }
#endif
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else
#endif
  if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN int
SWIG_AsVal_long_SS_long (PyObject *obj, long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    long long v = PyLong_AsLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      res = SWIG_OverflowError;
    }
  } else {
    long v;
    res = SWIG_AsVal_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    const double mant_min = -mant_max;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, mant_min, mant_max)) {
      if (val) *val = (long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t (PyObject * obj, ptrdiff_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(ptrdiff_t) <= sizeof(long)) {
#endif
    long v;
    res = SWIG_AsVal_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(ptrdiff_t) <= sizeof(long long)) {
    long long v;
    res = SWIG_AsVal_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
  }
#endif
  return res;
}


#include <algorithm>


#include <vector>


  #define SWIG_FILE_WITH_INIT
  #include <Eigen/Core>


#ifndef SWIG_FILE_WITH_INIT
#define NO_IMPORT_ARRAY
#endif
#include "stdio.h"
#define NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION
#include <numpy/arrayobject.h>


SWIGINTERNINLINE PyObject*
  SWIG_From_int  (int value)
{
  return PyInt_FromLong((long) value);
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
  if (PyBytes_Check(obj))
#else
  if (PyUnicode_Check(obj))
#endif
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
#if PY_VERSION_HEX>=0x03000000
#if !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    if (!alloc && cptr) {
        /* We can't allow converting without allocation, since the internal
           representation of string in Python 3 is UCS-2/UCS-4 but we require
           a UTF-8 representation.
           TODO(bhy) More detailed explanation */
        return SWIG_RuntimeError;
    }
    obj = PyUnicode_AsUTF8String(obj);
    if(alloc) *alloc = SWIG_NEWOBJ;
#endif
    PyBytes_AsStringAndSize(obj, &cstr, &len);
#else
    PyString_AsStringAndSize(obj, &cstr, &len);
#endif
    if (cptr) {
      if (alloc) {
	/* 
	   In python the user should not be able to modify the inner
	   string representation. To warranty that, if you define
	   SWIG_PYTHON_SAFE_CSTRINGS, a new/copy of the python string
	   buffer is always returned.

	   The default behavior is just to return the pointer value,
	   so, be careful.
	*/ 
#if defined(SWIG_PYTHON_SAFE_CSTRINGS)
	if (*alloc != SWIG_OLDOBJ) 
#else
	if (*alloc == SWIG_NEWOBJ) 
#endif
	{
	  *cptr = reinterpret_cast< char* >(memcpy((new char[len + 1]), cstr, sizeof(char)*(len + 1)));
	  *alloc = SWIG_NEWOBJ;
	} else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
	*cptr = PyBytes_AsString(obj);
#else
	assert(0); /* Should never reach here with Unicode strings in Python 3 */
#endif
#else
	*cptr = SWIG_Python_str_AsChar(obj);
#endif
      }
    }
    if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000 && !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    Py_XDECREF(obj);
#endif
    return SWIG_OK;
  } else {
#if defined(SWIG_PYTHON_2_UNICODE)
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
#error "Cannot use both SWIG_PYTHON_2_UNICODE and SWIG_PYTHON_STRICT_BYTE_CHAR at once"
#endif
#if PY_VERSION_HEX<0x03000000
    if (PyUnicode_Check(obj)) {
      char *cstr; Py_ssize_t len;
      if (!alloc && cptr) {
        return SWIG_RuntimeError;
      }
      obj = PyUnicode_AsUTF8String(obj);
      if (PyString_AsStringAndSize(obj, &cstr, &len) != -1) {
        if (cptr) {
          if (alloc) *alloc = SWIG_NEWOBJ;
          *cptr = reinterpret_cast< char* >(memcpy((new char[len + 1]), cstr, sizeof(char)*(len + 1)));
        }
        if (psize) *psize = len + 1;

        Py_XDECREF(obj);
        return SWIG_OK;
      } else {
        Py_XDECREF(obj);
      }
    }
#endif
#endif

    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsPtr_std_string (PyObject * obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_InternalNewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
      return PyBytes_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#else
#if PY_VERSION_HEX >= 0x03010000
      return PyUnicode_DecodeUTF8(carray, static_cast< Py_ssize_t >(size), "surrogateescape");
#else
      return PyUnicode_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#endif
#endif
#else
      return PyString_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject *
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}


  #define SWIG_From_double   PyFloat_FromDouble 


SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyInt_FromLong(static_cast< long >(value));
}

SWIGINTERN double btkAnalog_GetValue(btkAnalog const *self,int idx){        if ((idx < 0) || (idx >= (*self)->GetValues().rows()))          throw(btk::OutOfRangeException("Index out of bounds."));        return (*self)->GetValues().coeff(idx);      }
SWIGINTERN void btkAnalog_SetValue(btkAnalog *self,int idx,double v){        if ((idx < 0) || (idx >= (*self)->GetValues().rows()))          throw(btk::OutOfRangeException("Index out of bounds."));        (*self)->GetValues().coeffRef(idx) = v;        (*self)->Modified();      }

#if NPY_API_VERSION < 0x00000007
#define NPY_ARRAY_DEFAULT NPY_DEFAULT
#define NPY_ARRAY_FARRAY  NPY_FARRAY
#define NPY_FORTRANORDER  NPY_FORTRAN
#endif


/* Macros to extract array attributes.
 */
#if NPY_API_VERSION < 0x00000007
#define is_array(a)            ((a) && PyArray_Check((PyArrayObject*)a))
#define array_type(a)          (int)(PyArray_TYPE((PyArrayObject*)a))
#define array_numdims(a)       (((PyArrayObject*)a)->nd)
#define array_dimensions(a)    (((PyArrayObject*)a)->dimensions)
#define array_size(a,i)        (((PyArrayObject*)a)->dimensions[i])
#define array_strides(a)       (((PyArrayObject*)a)->strides)
#define array_stride(a,i)      (((PyArrayObject*)a)->strides[i])
#define array_data(a)          (((PyArrayObject*)a)->data)
#define array_descr(a)         (((PyArrayObject*)a)->descr)
#define array_flags(a)         (((PyArrayObject*)a)->flags)
#define array_enableflags(a,f) (((PyArrayObject*)a)->flags) = f
#else
#define is_array(a)            ((a) && PyArray_Check(a))
#define array_type(a)          PyArray_TYPE((PyArrayObject*)a)
#define array_numdims(a)       PyArray_NDIM((PyArrayObject*)a)
#define array_dimensions(a)    PyArray_DIMS((PyArrayObject*)a)
#define array_strides(a)       PyArray_STRIDES((PyArrayObject*)a)
#define array_stride(a,i)      PyArray_STRIDE((PyArrayObject*)a,i)
#define array_size(a,i)        PyArray_DIM((PyArrayObject*)a,i)
#define array_data(a)          PyArray_DATA((PyArrayObject*)a)
#define array_descr(a)         PyArray_DESCR((PyArrayObject*)a)
#define array_flags(a)         PyArray_FLAGS((PyArrayObject*)a)
#define array_enableflags(a,f) PyArray_ENABLEFLAGS((PyArrayObject*)a,f)
#endif
#define array_is_contiguous(a) (PyArray_ISCONTIGUOUS((PyArrayObject*)a))
#define array_is_native(a)     (PyArray_ISNOTSWAPPED((PyArrayObject*)a))
#define array_is_fortran(a)    (PyArray_ISFORTRAN((PyArrayObject*)a))


  /* Given a PyObject, return a string describing its type.
   */
  const char* pytype_string(PyObject* py_obj)
  {
    if (py_obj == NULL          ) return "C NULL value";
    if (py_obj == Py_None       ) return "Python None" ;
    if (PyCallable_Check(py_obj)) return "callable"    ;
    if (PyString_Check(  py_obj)) return "string"      ;
    if (PyInt_Check(     py_obj)) return "int"         ;
    if (PyFloat_Check(   py_obj)) return "float"       ;
    if (PyDict_Check(    py_obj)) return "dict"        ;
    if (PyList_Check(    py_obj)) return "list"        ;
    if (PyTuple_Check(   py_obj)) return "tuple"       ;
#if PY_MAJOR_VERSION < 3
    if (PyFile_Check(    py_obj)) return "file"        ;
    if (PyModule_Check(  py_obj)) return "module"      ;
    if (PyInstance_Check(py_obj)) return "instance"    ;
#endif

    return "unkown type";
  }

  /* Given a NumPy typecode, return a string describing the type.
   */
  const char* typecode_string(int typecode)
  {
    static const char* type_names[25] = {"bool",
                                         "byte",
                                         "unsigned byte",
                                         "short",
                                         "unsigned short",
                                         "int",
                                         "unsigned int",
                                         "long",
                                         "unsigned long",
                                         "long long",
                                         "unsigned long long",
                                         "float",
                                         "double",
                                         "long double",
                                         "complex float",
                                         "complex double",
                                         "complex long double",
                                         "object",
                                         "string",
                                         "unicode",
                                         "void",
                                         "ntypes",
                                         "notype",
                                         "char",
                                         "unknown"};
    return typecode < 24 ? type_names[typecode] : type_names[24];
  }

  /* Make sure input has correct numpy type.  This now just calls
     PyArray_EquivTypenums().
   */
  int type_match(int actual_type,
                 int desired_type)
  {
    return PyArray_EquivTypenums(actual_type, desired_type);
  }

#ifdef SWIGPY_USE_CAPSULE
  void free_cap(PyObject * cap)
  {
    void* array = (void*) PyCapsule_GetPointer(cap,SWIGPY_CAPSULE_NAME);
    if (array != NULL) free(array);
  }
#endif




  /* Given a PyObject pointer, cast it to a PyArrayObject pointer if
   * legal.  If not, set the python error string appropriately and
   * return NULL.
   */
  PyArrayObject* obj_to_array_no_conversion(PyObject* input,
                                            int        typecode)
  {
    PyArrayObject* ary = NULL;
    if (is_array(input) && (typecode == NPY_NOTYPE ||
                            PyArray_EquivTypenums(array_type(input), typecode)))
    {
      ary = (PyArrayObject*) input;
    }
    else if is_array(input)
    {
      const char* desired_type = typecode_string(typecode);
      const char* actual_type  = typecode_string(array_type(input));
      PyErr_Format(PyExc_TypeError,
                   "Array of type '%s' required.  Array of type '%s' given",
                   desired_type, actual_type);
      ary = NULL;
    }
    else
    {
      const char* desired_type = typecode_string(typecode);
      const char* actual_type  = pytype_string(input);
      PyErr_Format(PyExc_TypeError,
                   "Array of type '%s' required.  A '%s' was given",
                   desired_type,
                   actual_type);
      ary = NULL;
    }
    return ary;
  }

  /* Convert the given PyObject to a NumPy array with the given
   * typecode.  On success, return a valid PyArrayObject* with the
   * correct type.  On failure, the python error string will be set and
   * the routine returns NULL.
   */
  PyArrayObject* obj_to_array_allow_conversion(PyObject* input,
                                               int       typecode,
                                               int*      is_new_object)
  {
    PyArrayObject* ary = NULL;
    PyObject*      py_obj;
    if (is_array(input) && (typecode == NPY_NOTYPE ||
                            PyArray_EquivTypenums(array_type(input),typecode)))
    {
      ary = (PyArrayObject*) input;
      *is_new_object = 0;
    }
    else
    {
      py_obj = PyArray_FROMANY(input, typecode, 0, 0, NPY_ARRAY_DEFAULT);
      /* If NULL, PyArray_FromObject will have set python error value.*/
      ary = (PyArrayObject*) py_obj;
      *is_new_object = 1;
    }
    return ary;
  }

  /* Given a PyArrayObject, check to see if it is contiguous.  If so,
   * return the input pointer and flag it as not a new object.  If it is
   * not contiguous, create a new PyArrayObject using the original data,
   * flag it as a new object and return the pointer.
   */
  PyArrayObject* make_contiguous(PyArrayObject* ary,
                                 int*           is_new_object,
                                 int            min_dims,
                                 int            max_dims)
  {
    PyArrayObject* result;
    if (array_is_contiguous(ary))
    {
      result = ary;
      *is_new_object = 0;
    }
    else
    {
      result = (PyArrayObject*) PyArray_ContiguousFromObject((PyObject*)ary,
                                                              array_type(ary),
                                                              min_dims,
                                                              max_dims);
      *is_new_object = 1;
    }
    return result;
  }

  /* Given a PyArrayObject, check to see if it is Fortran-contiguous.
   * If so, return the input pointer, but do not flag it as not a new
   * object.  If it is not Fortran-contiguous, create a new
   * PyArrayObject using the original data, flag it as a new object
   * and return the pointer.
   */
  PyArrayObject* make_fortran(PyArrayObject* ary,
                              int*           is_new_object)
  {
    PyArrayObject* result;
    if (array_is_fortran(ary))
    {
      result = ary;
      *is_new_object = 0;
    }
    else
    {
      Py_INCREF(array_descr(ary));
      result = (PyArrayObject*) PyArray_FromArray(ary,
                                                  array_descr(ary),
                                                  NPY_FORTRANORDER);
      *is_new_object = 1;
    }
    return result;
  }

  /* Convert a given PyObject to a contiguous PyArrayObject of the
   * specified type.  If the input object is not a contiguous
   * PyArrayObject, a new one will be created and the new object flag
   * will be set.
   */
  PyArrayObject* obj_to_array_contiguous_allow_conversion(PyObject* input,
                                                          int       typecode,
                                                          int*      is_new_object)
  {
    int is_new1 = 0;
    int is_new2 = 0;
    PyArrayObject* ary2;
    PyArrayObject* ary1 = obj_to_array_allow_conversion(input,
                                                        typecode,
                                                        &is_new1);
    if (ary1)
    {
      ary2 = make_contiguous(ary1, &is_new2, 0, 0);
      if ( is_new1 && is_new2)
      {
        Py_DECREF(ary1);
      }
      ary1 = ary2;
    }
    *is_new_object = is_new1 || is_new2;
    return ary1;
  }

  /* Convert a given PyObject to a Fortran-ordered PyArrayObject of the
   * specified type.  If the input object is not a Fortran-ordered
   * PyArrayObject, a new one will be created and the new object flag
   * will be set.
   */
  PyArrayObject* obj_to_array_fortran_allow_conversion(PyObject* input,
                                                       int       typecode,
                                                       int*      is_new_object)
  {
    int is_new1 = 0;
    int is_new2 = 0;
    PyArrayObject* ary2;
    PyArrayObject* ary1 = obj_to_array_allow_conversion(input,
                                                        typecode,
                                                        &is_new1);
    if (ary1)
    {
      ary2 = make_fortran(ary1, &is_new2);
      if (is_new1 && is_new2)
      {
        Py_DECREF(ary1);
      }
      ary1 = ary2;
    }
    *is_new_object = is_new1 || is_new2;
    return ary1;
  }


  /* Test whether a python object is contiguous.  If array is
   * contiguous, return 1.  Otherwise, set the python error string and
   * return 0.
   */
  int require_contiguous(PyArrayObject* ary)
  {
    int contiguous = 1;
    if (!array_is_contiguous(ary))
    {
      PyErr_SetString(PyExc_TypeError,
                      "Array must be contiguous.  A non-contiguous array was given");
      contiguous = 0;
    }
    return contiguous;
  }

  /* Require that a numpy array is not byte-swapped.  If the array is
   * not byte-swapped, return 1.  Otherwise, set the python error string
   * and return 0.
   */
  int require_native(PyArrayObject* ary)
  {
    int native = 1;
    if (!array_is_native(ary))
    {
      PyErr_SetString(PyExc_TypeError,
                      "Array must have native byteorder.  "
                      "A byte-swapped array was given");
      native = 0;
    }
    return native;
  }

  /* Require the given PyArrayObject to have a specified number of
   * dimensions.  If the array has the specified number of dimensions,
   * return 1.  Otherwise, set the python error string and return 0.
   */
  int require_dimensions(PyArrayObject* ary,
                         int            exact_dimensions)
  {
    int success = 1;
    if (array_numdims(ary) != exact_dimensions)
    {
      PyErr_Format(PyExc_TypeError,
                   "Array must have %d dimensions.  Given array has %d dimensions",
                   exact_dimensions,
                   array_numdims(ary));
      success = 0;
    }
    return success;
  }

  /* Require the given PyArrayObject to have one of a list of specified
   * number of dimensions.  If the array has one of the specified number
   * of dimensions, return 1.  Otherwise, set the python error string
   * and return 0.
   */
  int require_dimensions_n(PyArrayObject* ary,
                           int*           exact_dimensions,
                           int            n)
  {
    int success = 0;
    int i;
    char dims_str[255] = "";
    char s[255];
    for (i = 0; i < n && !success; i++)
    {
      if (array_numdims(ary) == exact_dimensions[i])
      {
        success = 1;
      }
    }
    if (!success)
    {
      for (i = 0; i < n-1; i++)
      {
        sprintf(s, "%d, ", exact_dimensions[i]);
        strcat(dims_str,s);
      }
      sprintf(s, " or %d", exact_dimensions[n-1]);
      strcat(dims_str,s);
      PyErr_Format(PyExc_TypeError,
                   "Array must have %s dimensions.  Given array has %d dimensions",
                   dims_str,
                   array_numdims(ary));
    }
    return success;
  }

  /* Require the given PyArrayObject to have a specified shape.  If the
   * array has the specified shape, return 1.  Otherwise, set the python
   * error string and return 0.
   */
  int require_size(PyArrayObject* ary,
                   npy_intp*      size,
                   int            n)
  {
    int i;
    int success = 1;
    int len;
    char desired_dims[255] = "[";
    char s[255];
    char actual_dims[255] = "[";
    for(i=0; i < n;i++)
    {
      if (size[i] != -1 &&  size[i] != array_size(ary,i))
      {
        success = 0;
      }
    }
    if (!success)
    {
      for (i = 0; i < n; i++)
      {
        if (size[i] == -1)
        {
          sprintf(s, "*,");
        }
        else
        {
          sprintf(s, "%ld,", (long int)size[i]);
        }
        strcat(desired_dims,s);
      }
      len = strlen(desired_dims);
      desired_dims[len-1] = ']';
      for (i = 0; i < n; i++)
      {
        sprintf(s, "%ld,", (long int)array_size(ary,i));
        strcat(actual_dims,s);
      }
      len = strlen(actual_dims);
      actual_dims[len-1] = ']';
      PyErr_Format(PyExc_TypeError,
                   "Array must have shape of %s.  Given array has shape of %s",
                   desired_dims,
                   actual_dims);
    }
    return success;
  }

  /* Require the given PyArrayObject to to be Fortran ordered.  If the
   * the PyArrayObject is already Fortran ordered, do nothing.  Else,
   * set the Fortran ordering flag and recompute the strides.
   */
  int require_fortran(PyArrayObject* ary)
  {
    int success = 1;
    int nd = array_numdims(ary);
    int i;
    npy_intp * strides = array_strides(ary);
    if (array_is_fortran(ary)) return success;
    /* Set the Fortran ordered flag */
    array_enableflags(ary,NPY_ARRAY_FARRAY);
    /* Recompute the strides */
    strides[0] = strides[nd-1];
    for (i=1; i < nd; ++i)
      strides[i] = strides[i-1] * array_size(ary,i-1);
    return success;
  }




  template <typename T> int NumPyType() {return -1;};
  
  template <class Derived>
  void ConvertFromNumpyToEigenMatrix(Eigen::MatrixBase<Derived>* out, PyObject* in)
  {
    int rows = 0;
    int cols = 0;
    // Check object type
    if (!is_array(in))
    {
      PyErr_SetString(PyExc_ValueError, "The given input is not known as a NumPy array or matrix.");
      return;
    }
    // Check data type
    else if (array_type(in) != NumPyType<typename Derived::Scalar>())
    {
      PyErr_SetString(PyExc_ValueError, "Type mismatch between NumPy and Eigen objects.");
      return;
    }
    // Check dimensions
    else if (array_numdims(in) > 2)
    {
      PyErr_SetString(PyExc_ValueError, "Eigen only support 1D or 2D array.");
      return;
    }
    else if (array_numdims(in) == 1)
    {
      rows = array_size(in,0);
      cols = 1;
      if ((Derived::RowsAtCompileTime != Eigen::Dynamic) && (Derived::RowsAtCompileTime != rows))
      {
        PyErr_SetString(PyExc_ValueError, "Row dimension mismatch between NumPy and Eigen objects (1D).");
        return;
      }
      else if ((Derived::ColsAtCompileTime != Eigen::Dynamic) && (Derived::ColsAtCompileTime != 1))
      {
        PyErr_SetString(PyExc_ValueError, "Column dimension mismatch between NumPy and Eigen objects (1D).");
        return;
      }
    }
    else if (array_numdims(in) == 2)
    {
      rows = array_size(in,0);
      cols = array_size(in,1);
      if ((Derived::RowsAtCompileTime != Eigen::Dynamic) && (Derived::RowsAtCompileTime != array_size(in,0)))
      {
        PyErr_SetString(PyExc_ValueError, "Row dimension mismatch between NumPy and Eigen objects (2D).");
        return;
      }
      else if ((Derived::ColsAtCompileTime != Eigen::Dynamic) && (Derived::ColsAtCompileTime != array_size(in,1)))
      {
        PyErr_SetString(PyExc_ValueError, "Column dimension mismatch between NumPy and Eigen objects (2D).");
        return;
      }
    }
    // Extract data
    int isNewObject = 0;
    PyArrayObject* temp = obj_to_array_contiguous_allow_conversion(in, array_type(in), &isNewObject);
    if (temp == NULL)
    {
      PyErr_SetString(PyExc_ValueError, "Impossible to convert the input into a Python array object.");
      return;
    }
    out->derived().setZero(rows, cols);
    typename Derived::Scalar* data = static_cast<typename Derived::Scalar*>(PyArray_DATA(temp));
    for (int i = 0; i != rows; ++i)
      for (int j = 0; j != cols; ++j)
        out->coeffRef(i,j) = data[i*cols+j];
  };  

  // Copies values from Eigen type into an existing NumPy type
  template <class Derived>
  void CopyFromEigenToNumPyMatrix(PyObject* out, Eigen::MatrixBase<Derived>* in)
  {
    int rows = 0;
    int cols = 0;
    // Check object type
    if (!is_array(out))
    {
      PyErr_SetString(PyExc_ValueError, "The given input is not known as a NumPy array or matrix.");
      return;
    }
    // Check data type
    else if (array_type(out) != NumPyType<typename Derived::Scalar>())
    {
      PyErr_SetString(PyExc_ValueError, "Type mismatch between NumPy and Eigen objects.");
      return;
    }
    // Check dimensions
    else if (array_numdims(out) > 2)
    {
      PyErr_SetString(PyExc_ValueError, "Eigen only support 1D or 2D array.");
      return;
    }
    else if (array_numdims(out) == 1)
    {
      rows = array_size(out,0);
      cols = 1;
      if ((Derived::RowsAtCompileTime != Eigen::Dynamic) && (Derived::RowsAtCompileTime != rows))
      {
        PyErr_SetString(PyExc_ValueError, "Row dimension mismatch between NumPy and Eigen objects (1D).");
        return;
      }
      else if ((Derived::ColsAtCompileTime != Eigen::Dynamic) && (Derived::ColsAtCompileTime != 1))
      {
        PyErr_SetString(PyExc_ValueError, "Column dimension mismatch between NumPy and Eigen objects (1D).");
        return;
      }
    }
    else if (array_numdims(out) == 2)
    {
      rows = array_size(out,0);
      cols = array_size(out,1);
    }

    if (in->cols() != cols || in->rows() != rows) {
      /// TODO: be forgiving and simply create or resize the array
      PyErr_SetString(PyExc_ValueError, "Dimension mismatch between NumPy and Eigen object (return argument).");
      return;
    }

    // Extract data
    int isNewObject = 0;
    PyArrayObject* temp = obj_to_array_contiguous_allow_conversion(out, array_type(out), &isNewObject);
    if (temp == NULL)
    {
      PyErr_SetString(PyExc_ValueError, "Impossible to convert the input into a Python array object.");
      return;
    }
   
    typename Derived::Scalar* data = static_cast<typename Derived::Scalar*>(PyArray_DATA(temp));

    for (int i = 0; i != in->rows(); ++i) {
      for (int j = 0; j != in->cols(); ++j) {
        data[i*in->cols()+j] = in->coeff(i,j);
      }
    }
  };
  
  template <class Derived>
  void ConvertFromEigenToNumPyMatrix(PyObject** out, Eigen::MatrixBase<Derived>* in)
  {
    npy_intp dims[2] = {in->rows(), in->cols()};
    *out = PyArray_SimpleNew(2, dims, NumPyType<typename Derived::Scalar>());
    typename Derived::Scalar* data = static_cast<typename Derived::Scalar*>(PyArray_DATA((PyArrayObject*)*out));
    for (int i = 0; i != dims[0]; ++i)
      for (int j = 0; j != dims[1]; ++j)
        data[i*dims[1]+j] = in->coeff(i,j);
  };

  template<> int NumPyType<double>() {return NPY_DOUBLE;};


SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r;
  if (!PyBool_Check(obj))
    return SWIG_ERROR;
  r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}

SWIGINTERN double btkAnalogData_GetValue(btkAnalogData const *self,int idx){        if ((idx < 0) || (idx >= (*self)->GetValues().rows()))          throw(btk::OutOfRangeException("Index out of bounds."));        return (*self)->GetValues().coeff(idx);      }
SWIGINTERN void btkAnalogData_SetValue(btkAnalogData *self,int idx,double v){        if ((idx < 0) || (idx >= (*self)->GetValues().rows()))          throw(btk::OutOfRangeException("Index out of bounds."));        (*self)->GetValues().coeffRef(idx) = v;        (*self)->Modified();      }
SWIGINTERN double btkPoint_GetValue(btkPoint const *self,int row,int col){        if ((row < 0) || (row >= (*self)->GetValues().rows()) || (col < 0) || (col >= (*self)->GetValues().cols()))          throw(btk::OutOfRangeException("Index out of bounds."));        return (*self)->GetValues().coeff(row, col);      }
SWIGINTERN void btkPoint_SetValue(btkPoint *self,int row,int col,double v){        if ((row < 0) || (row >= (*self)->GetValues().rows()) || (col < 0) || (col >= (*self)->GetValues().cols()))          throw(btk::OutOfRangeException("Index out of bounds."));        (*self)->GetValues().coeffRef(row, col) = v;        (*self)->Modified();      }
SWIGINTERN double btkPoint_GetResidual(btkPoint const *self,int idx){        if ((idx < 0) || (idx >= (*self)->GetResiduals().rows()))          throw(btk::OutOfRangeException("Index out of bounds."));        return (*self)->GetResiduals().coeff(idx);      }
SWIGINTERN void btkPoint_SetResidual(btkPoint *self,int idx,double v){        if ((idx < 0) || (idx >= (*self)->GetResiduals().rows()))          throw(btk::OutOfRangeException("Index out of bounds."));        (*self)->GetResiduals().coeffRef(idx) = v;        (*self)->Modified();      }
SWIGINTERN double btkPointData_GetValue(btkPointData const *self,int row,int col){        if ((row < 0) || (row >= (*self)->GetValues().rows()) || (col < 0) || (col >= (*self)->GetValues().cols()))          throw(btk::OutOfRangeException("Index out of bounds."));        return (*self)->GetValues().coeff(row, col);      }
SWIGINTERN void btkPointData_SetValue(btkPointData *self,int row,int col,double v){        if ((row < 0) || (row >= (*self)->GetValues().rows()) || (col < 0) || (col >= (*self)->GetValues().cols()))          throw(btk::OutOfRangeException("Index out of bounds."));        (*self)->GetValues().coeffRef(row, col) = v;        (*self)->Modified();      }
SWIGINTERN double btkPointData_GetResidual(btkPointData const *self,int idx){        if ((idx < 0) || (idx >= (*self)->GetResiduals().rows()))          throw(btk::OutOfRangeException("Index out of bounds."));        return (*self)->GetResiduals().coeff(idx);      }
SWIGINTERN void btkPointData_SetResidual(btkPointData *self,int idx,double v){        if ((idx < 0) || (idx >= (*self)->GetResiduals().rows()))          throw(btk::OutOfRangeException("Index out of bounds."));        (*self)->GetResiduals().coeffRef(idx) = v;        (*self)->Modified();      }

namespace swig {
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type>
  struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category>
  struct traits_as { };

  template <class Type, class Category>
  struct traits_check { };

}


namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static PyObject *from(Type *val, int owner = 0) {
      return SWIG_InternalNewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static PyObject *from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static PyObject *from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static PyObject *from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline PyObject *from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline PyObject *from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(PyObject *obj, Type **val) {
      Type *p;
      int res = SWIG_ConvertPtr(obj, (void**)&p, type_info<Type>(), 0);
      if (SWIG_IsOK(res)) {
	if (val) *val = p;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(PyObject *obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(PyObject *obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(PyObject *obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(PyObject *obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type v;
      int res = asval(obj, &v);
      if (!obj || !SWIG_IsOK(res)) {
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	// Uninitialized return value, no Type() constructor required.
	static Type *v_def = (Type*) malloc(sizeof(Type));
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	memset(v_def,0,sizeof(Type));
	return *v_def;
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	return 0;
      }
    }
  };
    
  template <class Type>
  inline Type as(PyObject *obj, bool te = false) {
    return traits_as<Type, typename traits<Type>::category>::as(obj, te);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(PyObject *obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


#include <functional>

namespace std {
  template <>
  struct less <PyObject *>: public binary_function<PyObject *, PyObject *, bool>
  {
    bool
    operator()(PyObject * v, PyObject *w) const
    { 
      bool res;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      res = PyObject_RichCompareBool(v, w, Py_LT) ? true : false;
      /* This may fall into a case of inconsistent
               eg. ObjA > ObjX > ObjB
               but ObjA < ObjB
      */
      if( PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError) )
      {
        /* Objects can't be compared, this mostly occurred in Python 3.0 */
        /* Compare their ptr directly for a workaround */
        res = (v < w);
        PyErr_Clear();
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return res;
    }
  };

  template <>
  struct less <swig::SwigPtr_PyObject>: public binary_function<swig::SwigPtr_PyObject, swig::SwigPtr_PyObject, bool>
  {
    bool
    operator()(const swig::SwigPtr_PyObject& v, const swig::SwigPtr_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

  template <>
  struct less <swig::SwigVar_PyObject>: public binary_function<swig::SwigVar_PyObject, swig::SwigVar_PyObject, bool>
  {
    bool
    operator()(const swig::SwigVar_PyObject& v, const swig::SwigVar_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

}

namespace swig {
  template <> struct traits<PyObject *> {
    typedef value_category category;
    static const char* type_name() { return "PyObject *"; }
  };  

  template <>  struct traits_asval<PyObject * > {   
    typedef PyObject * value_type;
    static int asval(PyObject *obj, value_type *val) {
      if (val) *val = obj;
      return SWIG_OK;
    }
  };

  template <> 
  struct traits_check<PyObject *, value_category> {
    static bool check(PyObject *) {
      return true;
    }
  };

  template <>  struct traits_from<PyObject *> {
    typedef PyObject * value_type;
    static PyObject *from(const value_type& val) {
      Py_XINCREF(val);
      return val;
    }
  };
  
}

namespace swig {
  template <class Difference>
  inline size_t
  check_index(Difference i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    throw std::out_of_range("index out of range");
  }

  template <class Difference>
  void
  slice_adjust(Difference i, Difference j, Py_ssize_t step, size_t size, Difference &ii, Difference &jj, bool insert = false) {
    if (step == 0) {
      throw std::invalid_argument("slice step cannot be zero");
    } else if (step > 0) {
      // Required range: 0 <= i < size, 0 <= j < size
      if (i < 0) {
        ii = 0;
      } else if (i < (Difference)size) {
        ii = i;
      } else if (insert && (i >= (Difference)size)) {
        ii = (Difference)size;
      }
      if ( j < 0 ) {
        jj = 0;
      } else {
        jj = (j < (Difference)size) ? j : (Difference)size;
      }
    } else {
      // Required range: -1 <= i < size-1, -1 <= j < size-1
      if (i < -1) {
        ii = -1;
      } else if (i < (Difference) size) {
        ii = i;
      } else if (i >= (Difference)(size-1)) {
        ii = (Difference)(size-1);
      }
      if (j < -1) {
        jj = -1;
      } else {
        jj = (j < (Difference)size ) ? j : (Difference)(size-1);
      }
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence>
  inline void
  erase(Sequence* seq, const typename Sequence::iterator& position) {
    seq->erase(position);
  }

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj);

    if (step > 0) {
      typename Sequence::const_iterator sb = self->begin();
      typename Sequence::const_iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      if (step == 1) {
        return new Sequence(sb, se);
      } else {
        Sequence *sequence = new Sequence();
        typename Sequence::const_iterator it = sb;
        while (it!=se) {
          sequence->push_back(*it);
          for (Py_ssize_t c=0; c<step && it!=se; ++c)
            it++;
        }
        return sequence;
      } 
    } else {
      Sequence *sequence = new Sequence();
      if (ii > jj) {
        typename Sequence::const_reverse_iterator sb = self->rbegin();
        typename Sequence::const_reverse_iterator se = self->rbegin();
        std::advance(sb,size-ii-1);
        std::advance(se,size-jj-1);
        typename Sequence::const_reverse_iterator it = sb;
        while (it!=se) {
          sequence->push_back(*it);
          for (Py_ssize_t c=0; c<-step && it!=se; ++c)
            it++;
        }
      }
      return sequence;
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, Py_ssize_t step, const InputSeq& is = InputSeq()) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      if (jj < ii)
        jj = ii;
      if (step == 1) {
        size_t ssize = jj - ii;
        if (ssize <= is.size()) {
          // expanding/staying the same size
          typename Sequence::iterator sb = self->begin();
          typename InputSeq::const_iterator isit = is.begin();
          std::advance(sb,ii);
          std::advance(isit, jj - ii);
          self->insert(std::copy(is.begin(), isit, sb), isit, is.end());
        } else {
          // shrinking
          typename Sequence::iterator sb = self->begin();
          typename Sequence::iterator se = self->begin();
          std::advance(sb,ii);
          std::advance(se,jj);
          self->erase(sb,se);
          sb = self->begin();
          std::advance(sb,ii);
          self->insert(sb, is.begin(), is.end());
        }
      } else {
        size_t replacecount = (jj - ii + step - 1) / step;
        if (is.size() != replacecount) {
          char msg[1024];
          sprintf(msg, "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
          throw std::invalid_argument(msg);
        }
        typename Sequence::const_iterator isit = is.begin();
        typename Sequence::iterator it = self->begin();
        std::advance(it,ii);
        for (size_t rc=0; rc<replacecount; ++rc) {
          *it++ = *isit++;
          for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
            it++;
        }
      }
    } else {
      if (jj > ii)
        jj = ii;
      size_t replacecount = (ii - jj - step - 1) / -step;
      if (is.size() != replacecount) {
        char msg[1024];
        sprintf(msg, "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
        throw std::invalid_argument(msg);
      }
      typename Sequence::const_iterator isit = is.begin();
      typename Sequence::reverse_iterator it = self->rbegin();
      std::advance(it,size-ii-1);
      for (size_t rc=0; rc<replacecount; ++rc) {
        *it++ = *isit++;
        for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
          it++;
      }
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      if (jj > ii) {
        typename Sequence::iterator sb = self->begin();
        std::advance(sb,ii);
        if (step == 1) {
          typename Sequence::iterator se = self->begin();
          std::advance(se,jj);
          self->erase(sb,se);
        } else {
          typename Sequence::iterator it = sb;
          size_t delcount = (jj - ii + step - 1) / step;
          while (delcount) {
            it = self->erase(it);
            for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
              it++;
            delcount--;
          }
        }
      }
    } else {
      if (ii > jj) {
        typename Sequence::reverse_iterator sb = self->rbegin();
        std::advance(sb,size-ii-1);
        typename Sequence::reverse_iterator it = sb;
        size_t delcount = (ii - jj - step - 1) / -step;
        while (delcount) {
          it = typename Sequence::reverse_iterator(self->erase((++it).base()));
          for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
            it++;
          delcount--;
        }
      }
    }
  }
}


#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std {
  template <class Iterator>
  struct iterator_traits {
    typedef ptrdiff_t difference_type;
    typedef typename Iterator::value_type value_type;
  };

  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>
  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {
    typedef Distance difference_type;
    typedef T value_type;
  };

  template <class T>
  struct iterator_traits<T*> {
    typedef T value_type;
    typedef ptrdiff_t difference_type;
  };

  template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }
}
#endif


namespace swig {
  template<typename OutIterator>
  class SwigPyIterator_T :  public SwigPyIterator
  {
  public:
    typedef OutIterator out_iterator;
    typedef typename std::iterator_traits<out_iterator>::value_type value_type;    
    typedef SwigPyIterator_T<out_iterator> self_type;

    SwigPyIterator_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator(seq), current(curr)
    {
    }

    const out_iterator& get_current() const
    {
      return current;
    }

    
    bool equal (const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    ptrdiff_t distance(const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }    
    
  protected:
    out_iterator current;
  };
  
  template <class ValueType>
  struct from_oper 
  {
    typedef const ValueType& argument_type;
    typedef PyObject *result_type;
    result_type operator()(argument_type v) const
    {
      return swig::from(v);
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorOpen_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorOpen_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq)
    {
    }
    
    PyObject *value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	++base::current;
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	--base::current;
      }
      return this;
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorClosed_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;    
    typedef SwigPyIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    PyObject *value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	if (base::current == end) {
	  throw stop_iteration();
	} else {
	  ++base::current;
	}
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	if (base::current == begin) {
	  throw stop_iteration();
	} else {
	  --base::current;
	}
      }
      return this;
    }

  private:
    out_iterator begin;
    out_iterator end;
  };

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new SwigPyIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new SwigPyIteratorOpen_T<OutIter>(current, seq);
  }

}


namespace swig
{
  template <class T>
  struct SwigPySequence_Ref
  {
    SwigPySequence_Ref(PyObject* seq, Py_ssize_t index)
      : _seq(seq), _index(index)
    {
    }
    
    operator T () const
    {
      swig::SwigVar_PyObject item = PySequence_GetItem(_seq, _index);
      try {
	return swig::as<T>(item, true);
      } catch (std::exception& e) {
	char msg[1024];
	sprintf(msg, "in sequence element %d ", (int)_index);
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<T>());
	}
	SWIG_Python_AddErrorMsg(msg);
	SWIG_Python_AddErrorMsg(e.what());
	throw;
      }
    }

    SwigPySequence_Ref& operator=(const T& v)
    {
      PySequence_SetItem(_seq, _index, swig::from<T>(v));
      return *this;
    }

  private:
    PyObject* _seq;
    Py_ssize_t _index;
  };

  template <class T>
  struct SwigPySequence_ArrowProxy
  {
    SwigPySequence_ArrowProxy(const T& x): m_value(x) {}
    const T* operator->() const { return &m_value; }
    operator const T*() const { return &m_value; }
    T m_value;
  };

  template <class T, class Reference >
  struct SwigPySequence_InputIterator
  {
    typedef SwigPySequence_InputIterator<T, Reference > self;

    typedef std::random_access_iterator_tag iterator_category;
    typedef Reference reference;
    typedef T value_type;
    typedef T* pointer;
    typedef Py_ssize_t difference_type;

    SwigPySequence_InputIterator()
    {
    }

    SwigPySequence_InputIterator(PyObject* seq, Py_ssize_t index)
      : _seq(seq), _index(index)
    {
    }

    reference operator*() const
    {
      return reference(_seq, _index);
    }

    SwigPySequence_ArrowProxy<T>
    operator->() const {
      return SwigPySequence_ArrowProxy<T>(operator*());
    }

    bool operator==(const self& ri) const
    {
      return (_index == ri._index) && (_seq == ri._seq);
    }

    bool operator!=(const self& ri) const
    {
      return !(operator==(ri));
    }

    self& operator ++ ()
    {
      ++_index;
      return *this;
    }

    self& operator -- ()
    {
      --_index;
      return *this;
    }

    self& operator += (difference_type n)
    {
      _index += n;
      return *this;
    }

    self operator +(difference_type n) const
    {
      return self(_seq, _index + n);
    }

    self& operator -= (difference_type n)
    {
      _index -= n;
      return *this;
    }

    self operator -(difference_type n) const
    {
      return self(_seq, _index - n);
    }

    difference_type operator - (const self& ri) const
    {
      return _index - ri._index;
    }

    bool operator < (const self& ri) const
    {
      return _index < ri._index;
    }

    reference
    operator[](difference_type n) const
    {
      return reference(_seq, _index + n);
    }

  private:
    PyObject* _seq;
    difference_type _index;
  };

  // STL container wrapper around a Python sequence
  template <class T>
  struct SwigPySequence_Cont
  {
    typedef SwigPySequence_Ref<T> reference;
    typedef const SwigPySequence_Ref<T> const_reference;
    typedef T value_type;
    typedef T* pointer;
    typedef Py_ssize_t difference_type;
    typedef size_t size_type;
    typedef const pointer const_pointer;
    typedef SwigPySequence_InputIterator<T, reference> iterator;
    typedef SwigPySequence_InputIterator<T, const_reference> const_iterator;

    SwigPySequence_Cont(PyObject* seq) : _seq(0)
    {
      if (!PySequence_Check(seq)) {
	throw std::invalid_argument("a sequence is expected");
      }
      _seq = seq;
      Py_INCREF(_seq);
    }

    ~SwigPySequence_Cont()
    {
      Py_XDECREF(_seq);
    }

    size_type size() const
    {
      return static_cast<size_type>(PySequence_Size(_seq));
    }

    bool empty() const
    {
      return size() == 0;
    }

    iterator begin()
    {
      return iterator(_seq, 0);
    }

    const_iterator begin() const
    {
      return const_iterator(_seq, 0);
    }

    iterator end()
    {
      return iterator(_seq, size());
    }

    const_iterator end() const
    {
      return const_iterator(_seq, size());
    }

    reference operator[](difference_type n)
    {
      return reference(_seq, n);
    }

    const_reference operator[](difference_type n)  const
    {
      return const_reference(_seq, n);
    }

    bool check(bool set_err = true) const
    {
      Py_ssize_t s = size();
      for (Py_ssize_t i = 0; i < s; ++i) {
	swig::SwigVar_PyObject item = PySequence_GetItem(_seq, i);
	if (!swig::check<value_type>(item)) {
	  if (set_err) {
	    char msg[1024];
	    sprintf(msg, "in sequence element %d", (int)i);
	    SWIG_Error(SWIG_RuntimeError, msg);
	  }
	  return false;
	}
      }
      return true;
    }

  private:
    PyObject* _seq;
  };

}


SWIGINTERN int
SWIG_AsVal_std_string (PyObject * obj, std::string *val)
{
  std::string* v = (std::string *) 0;
  int res = SWIG_AsPtr_std_string (obj, &v);
  if (!SWIG_IsOK(res)) return res;
  if (v) {
    if (val) *val = *v;
    if (SWIG_IsNewObj(res)) {
      delete v;
      res = SWIG_DelNewMask(res);
    }
    return res;
  }
  return SWIG_ERROR;
}


namespace swig {
  template <> struct traits< std::string > {
    typedef value_category category;
    static const char* type_name() { return"std::string"; }
  };
  template <>  struct traits_asval< std::string > {
    typedef std::string value_type;
    static int asval(PyObject *obj, value_type *val) {
      return SWIG_AsVal_std_string (obj, val);
    }
  };
  template <>  struct traits_from< std::string > {
    typedef std::string value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_std_string  (val);
    }
  };
}


namespace swig {
  template <class SwigPySeq, class Seq>
  inline void
  assign(const SwigPySeq& swigpyseq, Seq* seq) {
    // seq->assign(swigpyseq.begin(), swigpyseq.end()); // not used as not always implemented
    typedef typename SwigPySeq::value_type value_type;
    typename SwigPySeq::const_iterator it = swigpyseq.begin();
    for (;it != swigpyseq.end(); ++it) {
      seq->insert(seq->end(),(value_type)(*it));
    }
  }

  template <class Seq, class T = typename Seq::value_type >
  struct traits_asptr_stdseq {
    typedef Seq sequence;
    typedef T value_type;

    static int asptr(PyObject *obj, sequence **seq) {
      if (obj == Py_None || SWIG_Python_GetSwigThis(obj)) {
	sequence *p;
	if (::SWIG_ConvertPtr(obj,(void**)&p,
			      swig::type_info<sequence>(),0) == SWIG_OK) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      } else if (PySequence_Check(obj)) {
	try {
	  SwigPySequence_Cont<value_type> swigpyseq(obj);
	  if (seq) {
	    sequence *pseq = new sequence();
	    assign(swigpyseq, pseq);
	    *seq = pseq;
	    return SWIG_NEWOBJ;
	  } else {
	    return swigpyseq.check() ? SWIG_OK : SWIG_ERROR;
	  }
	} catch (std::exception& e) {
	  if (seq) {
	    if (!PyErr_Occurred()) {
	      PyErr_SetString(PyExc_TypeError, e.what());
	    }
	  }
	  return SWIG_ERROR;
	}
      }
      return SWIG_ERROR;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_from_stdseq {
    typedef Seq sequence;
    typedef T value_type;
    typedef typename Seq::size_type size_type;
    typedef typename sequence::const_iterator const_iterator;

    static PyObject *from(const sequence& seq) {
#ifdef SWIG_PYTHON_EXTRA_NATIVE_CONTAINERS
      swig_type_info *desc = swig::type_info<sequence>();
      if (desc && desc->clientdata) {
	return SWIG_NewPointerObj(new sequence(seq), desc, SWIG_POINTER_OWN);
      }
#endif
      size_type size = seq.size();
      if (size <= (size_type)INT_MAX) {
	PyObject *obj = PyTuple_New((Py_ssize_t)size);
	Py_ssize_t i = 0;
	for (const_iterator it = seq.begin(); it != seq.end(); ++it, ++i) {
	  PyTuple_SetItem(obj,i,swig::from<value_type>(*it));
	}
	return obj;
      } else {
	PyErr_SetString(PyExc_OverflowError,"sequence size not valid in python");
	return NULL;
      }
    }
  };
}


  namespace swig {
    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(PyObject *obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static PyObject *from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< std::string, std::allocator< std::string > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::string" "," "std::allocator< std::string >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_std_string_Sg__iterator(std::vector< std::string > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_std_string_Sg____nonzero__(std::vector< std::string > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_std_string_Sg____bool__(std::vector< std::string > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::string >::size_type std_vector_Sl_std_string_Sg____len__(std::vector< std::string > const *self){
      return self->size();
    }

#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long_SS_long  (unsigned long long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLongLong(value) : PyInt_FromLong(static_cast< long >(value));
}
#endif


SWIGINTERNINLINE PyObject *
SWIG_From_size_t  (size_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(size_t) <= sizeof(unsigned long long) */
    return SWIG_From_unsigned_SS_long_SS_long  (static_cast< unsigned long long >(value));
  }
#endif
}

SWIGINTERN std::vector< std::string,std::allocator< std::string > > *std_vector_Sl_std_string_Sg____getslice__(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____setslice____SWIG_0(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< std::string,std::allocator< std::string > >());
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____setslice____SWIG_1(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::difference_type j,std::vector< std::string,std::allocator< std::string > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____delslice__(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____delitem____SWIG_0(std::vector< std::string > *self,std::vector< std::string >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< std::string,std::allocator< std::string > > *std_vector_Sl_std_string_Sg____getitem____SWIG_0(std::vector< std::string > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::string,std::allocator< std::string > >::difference_type id = i;
      std::vector< std::string,std::allocator< std::string > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____setitem____SWIG_0(std::vector< std::string > *self,PySliceObject *slice,std::vector< std::string,std::allocator< std::string > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::string,std::allocator< std::string > >::difference_type id = i;
      std::vector< std::string,std::allocator< std::string > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____setitem____SWIG_1(std::vector< std::string > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::string,std::allocator< std::string > >::difference_type id = i;
      std::vector< std::string,std::allocator< std::string > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____delitem____SWIG_1(std::vector< std::string > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::string,std::allocator< std::string > >::difference_type id = i;
      std::vector< std::string,std::allocator< std::string > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< std::string >::value_type const &std_vector_Sl_std_string_Sg____getitem____SWIG_1(std::vector< std::string > const *self,std::vector< std::string >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____setitem____SWIG_2(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< std::string >::value_type std_vector_Sl_std_string_Sg__pop(std::vector< std::string > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< std::string,std::allocator< std::string > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_std_string_Sg__append(std::vector< std::string > *self,std::vector< std::string >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< std::string >::iterator std_vector_Sl_std_string_Sg__erase__SWIG_0(std::vector< std::string > *self,std::vector< std::string >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< std::string >::iterator std_vector_Sl_std_string_Sg__erase__SWIG_1(std::vector< std::string > *self,std::vector< std::string >::iterator first,std::vector< std::string >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< std::string >::iterator std_vector_Sl_std_string_Sg__insert__SWIG_0(std::vector< std::string > *self,std::vector< std::string >::iterator pos,std::vector< std::string >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_std_string_Sg__insert__SWIG_1(std::vector< std::string > *self,std::vector< std::string >::iterator pos,std::vector< std::string >::size_type n,std::vector< std::string >::value_type const &x){ self->insert(pos, n, x); }

namespace swig {
  template <> struct traits< int > {
    typedef value_category category;
    static const char* type_name() { return"int"; }
  };
  template <>  struct traits_asval< int > {
    typedef int value_type;
    static int asval(PyObject *obj, value_type *val) {
      return SWIG_AsVal_int (obj, val);
    }
  };
  template <>  struct traits_from< int > {
    typedef int value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_int  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector< int, std::allocator< int > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "int" "," "std::allocator< int >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_int_Sg__iterator(std::vector< int > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_int_Sg____nonzero__(std::vector< int > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_int_Sg____bool__(std::vector< int > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< int >::size_type std_vector_Sl_int_Sg____len__(std::vector< int > const *self){
      return self->size();
    }
SWIGINTERN std::vector< int,std::allocator< int > > *std_vector_Sl_int_Sg____getslice__(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_int_Sg____setslice____SWIG_0(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< int,std::allocator< int > >());
    }
SWIGINTERN void std_vector_Sl_int_Sg____setslice____SWIG_1(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::difference_type j,std::vector< int,std::allocator< int > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_int_Sg____delslice__(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_int_Sg____delitem____SWIG_0(std::vector< int > *self,std::vector< int >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< int,std::allocator< int > > *std_vector_Sl_int_Sg____getitem____SWIG_0(std::vector< int > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< int,std::allocator< int > >::difference_type id = i;
      std::vector< int,std::allocator< int > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_int_Sg____setitem____SWIG_0(std::vector< int > *self,PySliceObject *slice,std::vector< int,std::allocator< int > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< int,std::allocator< int > >::difference_type id = i;
      std::vector< int,std::allocator< int > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_int_Sg____setitem____SWIG_1(std::vector< int > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< int,std::allocator< int > >::difference_type id = i;
      std::vector< int,std::allocator< int > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_int_Sg____delitem____SWIG_1(std::vector< int > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< int,std::allocator< int > >::difference_type id = i;
      std::vector< int,std::allocator< int > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< int >::value_type const &std_vector_Sl_int_Sg____getitem____SWIG_1(std::vector< int > const *self,std::vector< int >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_int_Sg____setitem____SWIG_2(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< int >::value_type std_vector_Sl_int_Sg__pop(std::vector< int > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< int,std::allocator< int > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_int_Sg__append(std::vector< int > *self,std::vector< int >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< int >::iterator std_vector_Sl_int_Sg__erase__SWIG_0(std::vector< int > *self,std::vector< int >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< int >::iterator std_vector_Sl_int_Sg__erase__SWIG_1(std::vector< int > *self,std::vector< int >::iterator first,std::vector< int >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< int >::iterator std_vector_Sl_int_Sg__insert__SWIG_0(std::vector< int > *self,std::vector< int >::iterator pos,std::vector< int >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_int_Sg__insert__SWIG_1(std::vector< int > *self,std::vector< int >::iterator pos,std::vector< int >::size_type n,std::vector< int >::value_type const &x){ self->insert(pos, n, x); }

namespace swig {
  template <> struct traits< double > {
    typedef value_category category;
    static const char* type_name() { return"double"; }
  };
  template <>  struct traits_asval< double > {
    typedef double value_type;
    static int asval(PyObject *obj, value_type *val) {
      return SWIG_AsVal_double (obj, val);
    }
  };
  template <>  struct traits_from< double > {
    typedef double value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_double  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector< double, std::allocator< double > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "double" "," "std::allocator< double >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_double_Sg__iterator(std::vector< double > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_double_Sg____nonzero__(std::vector< double > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_double_Sg____bool__(std::vector< double > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< double >::size_type std_vector_Sl_double_Sg____len__(std::vector< double > const *self){
      return self->size();
    }
SWIGINTERN std::vector< double,std::allocator< double > > *std_vector_Sl_double_Sg____getslice__(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_double_Sg____setslice____SWIG_0(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< double,std::allocator< double > >());
    }
SWIGINTERN void std_vector_Sl_double_Sg____setslice____SWIG_1(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j,std::vector< double,std::allocator< double > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_double_Sg____delslice__(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_double_Sg____delitem____SWIG_0(std::vector< double > *self,std::vector< double >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< double,std::allocator< double > > *std_vector_Sl_double_Sg____getitem____SWIG_0(std::vector< double > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< double,std::allocator< double > >::difference_type id = i;
      std::vector< double,std::allocator< double > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_double_Sg____setitem____SWIG_0(std::vector< double > *self,PySliceObject *slice,std::vector< double,std::allocator< double > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< double,std::allocator< double > >::difference_type id = i;
      std::vector< double,std::allocator< double > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_double_Sg____setitem____SWIG_1(std::vector< double > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< double,std::allocator< double > >::difference_type id = i;
      std::vector< double,std::allocator< double > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_double_Sg____delitem____SWIG_1(std::vector< double > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< double,std::allocator< double > >::difference_type id = i;
      std::vector< double,std::allocator< double > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< double >::value_type const &std_vector_Sl_double_Sg____getitem____SWIG_1(std::vector< double > const *self,std::vector< double >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_double_Sg____setitem____SWIG_2(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< double >::value_type std_vector_Sl_double_Sg__pop(std::vector< double > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< double,std::allocator< double > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_double_Sg__append(std::vector< double > *self,std::vector< double >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< double >::iterator std_vector_Sl_double_Sg__erase__SWIG_0(std::vector< double > *self,std::vector< double >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< double >::iterator std_vector_Sl_double_Sg__erase__SWIG_1(std::vector< double > *self,std::vector< double >::iterator first,std::vector< double >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< double >::iterator std_vector_Sl_double_Sg__insert__SWIG_0(std::vector< double > *self,std::vector< double >::iterator pos,std::vector< double >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_double_Sg__insert__SWIG_1(std::vector< double > *self,std::vector< double >::iterator pos,std::vector< double >::size_type n,std::vector< double >::value_type const &x){ self->insert(pos, n, x); }
SWIGINTERN int btkMetaDataInfo_GetDimension(btkMetaDataInfo const *self,int idx){return (*self)->GetDimension(idx);}
SWIGINTERN void btkMetaDataInfo_SetDimension(btkMetaDataInfo *self,int idx,int val){(*self)->SetDimension(idx, static_cast<uint8_t>(val));}
SWIGINTERN std::vector< int,std::allocator< int > > const btkMetaDataInfo_GetDimensions(btkMetaDataInfo const *self){return btkSwigConvert<int>((*self)->GetDimensions());}
SWIGINTERN void btkMetaDataInfo_SetDimensions(btkMetaDataInfo *self,std::vector< int,std::allocator< int > > const &dims){(*self)->SetDimensions(btkSwigConvert<uint8_t>(dims));}
SWIGINTERN int btkMetaDataInfo_GetValueNumber(btkMetaDataInfo const *self){return (*self)->GetValues().size();}
SWIGINTERN void btkMetaDataInfo_SetValue__SWIG_0(btkMetaDataInfo *self,int idx,std::string const &val){(*self)->SetValue(idx, val);}
SWIGINTERN void btkMetaDataInfo_SetValue__SWIG_1(btkMetaDataInfo *self,int idx,int val){(*self)->SetValue(idx, static_cast<int16_t>(val));}
SWIGINTERN void btkMetaDataInfo_SetValue__SWIG_2(btkMetaDataInfo *self,int idx,double val){(*self)->SetValue(idx, static_cast<float>(val));}
SWIGINTERN void btkMetaDataInfo_SetValues__SWIG_0(btkMetaDataInfo *self,int val){(*self)->SetValues(static_cast<int16_t>(val));}
SWIGINTERN void btkMetaDataInfo_SetValues__SWIG_1(btkMetaDataInfo *self,double val){(*self)->SetValues(static_cast<float>(val));}
SWIGINTERN void btkMetaDataInfo_SetValues__SWIG_2(btkMetaDataInfo *self,std::string const &val){(*self)->SetValues(val);}
SWIGINTERN void btkMetaDataInfo_SetValues__SWIG_3(btkMetaDataInfo *self,std::vector< int,std::allocator< int > > const &val){(*self)->SetValues(btkSwigConvert<int16_t>(val));}
SWIGINTERN void btkMetaDataInfo_SetValues__SWIG_4(btkMetaDataInfo *self,std::vector< double,std::allocator< double > > const &val){(*self)->SetValues(btkSwigConvert<float>(val));}
SWIGINTERN void btkMetaDataInfo_SetValues__SWIG_5(btkMetaDataInfo *self,std::vector< std::string,std::allocator< std::string > > const &val){(*self)->SetValues(val);}
SWIGINTERN void btkMetaDataInfo_SetValues__SWIG_6(btkMetaDataInfo *self,std::vector< int,std::allocator< int > > const &dims,std::vector< int,std::allocator< int > > const &val){(*self)->SetValues(btkSwigConvert<uint8_t>(dims), btkSwigConvert<int16_t>(val));}
SWIGINTERN void btkMetaDataInfo_SetValues__SWIG_7(btkMetaDataInfo *self,std::vector< int,std::allocator< int > > const &dims,std::vector< double,std::allocator< double > > const &val){(*self)->SetValues(btkSwigConvert<uint8_t>(dims), btkSwigConvert<float>(val));}
SWIGINTERN void btkMetaDataInfo_SetValues__SWIG_8(btkMetaDataInfo *self,std::vector< int,std::allocator< int > > const &dims,std::vector< std::string,std::allocator< std::string > > const &val){(*self)->SetValues(btkSwigConvert<uint8_t>(dims), val);}
SWIGINTERN bool btkMetaDataInfo_operator_Se__Se_(btkMetaDataInfo *self,btkMetaDataInfo const &rRHS){return *(*self) == *rRHS;}
SWIGINTERN bool btkMetaDataInfo_operator_SN__Se_(btkMetaDataInfo *self,btkMetaDataInfo const &rRHS){return *(*self) != *rRHS;}
SWIGINTERN bool btkMetaData_operator_Se__Se_(btkMetaData *self,btkMetaData const &rRHS){return *(*self) == *rRHS;}
SWIGINTERN bool btkMetaData_operator_SN__Se_(btkMetaData *self,btkMetaData const &rRHS){return *(*self) != *rRHS;}

  btkMetaData btkMetaDataCreateChild(btkMetaData parent, const std::string& label) {return btk::MetaDataCreateChild(parent, label);};
  void btkMetaDataCreateChild(btkMetaData parent, const std::string& label, int val) {btk::MetaDataCreateChild(parent, label, static_cast<int16_t>(val));};
  void btkMetaDataCreateChild(btkMetaData parent, const std::string& label, double val) {btk::MetaDataCreateChild(parent, label, static_cast<float>(val));};
  void btkMetaDataCreateChild(btkMetaData parent, const std::string& label, const std::string& val) {btk::MetaDataCreateChild(parent, label, val);};
  void btkMetaDataCreateChild(btkMetaData parent, const std::string& label, const std::vector<int>& val) {btk::MetaDataCreateChild(parent, label, btkSwigConvert<int16_t>(val));};
  void btkMetaDataCreateChild(btkMetaData parent, const std::string& label, const std::vector<double>& val) {btk::MetaDataCreateChild(parent, label, btkSwigConvert<float>(val));};
  void btkMetaDataCreateChild(btkMetaData parent, const std::string& label, const std::vector<std::string>& val) {btk::MetaDataCreateChild(parent, label, val);};
  void btkMetaDataCreateChild(btkMetaData parent, const std::string& label, const std::vector<int>& val, int numCol) {btk::MetaDataCreateChild(parent, label, btkSwigConvert<int16_t>(val), numCol);};
  void btkMetaDataCreateChild(btkMetaData parent, const std::string& label, const std::vector<double>& val, int numCol) {btk::MetaDataCreateChild(parent, label, btkSwigConvert<float>(val), numCol);};
  void btkMetaDataCreateChild(btkMetaData parent, const std::string& label, const std::vector<std::string>& val, int numCol) {btk::MetaDataCreateChild(parent, label, val, numCol);};
  std::vector<int> btkMetaDataCollapseChildrenValuesInt(btkMetaData parent, const std::string& baselabel, int targetFinalSize = -1, int blankReplacement = 0)
  {
    std::vector<int16_t> target;
    btk::MetaDataCollapseChildrenValues<int16_t>(target, parent, baselabel, targetFinalSize, static_cast<int16_t>(blankReplacement));
    return btkSwigConvert<int>(target);
  };
  std::vector<double> btkMetaDataCollapseChildrenValuesDouble(btkMetaData parent, const std::string& baselabel, int targetFinalSize = -1, double blankReplacement = 0.0)
  {
    std::vector<float> target;
    btk::MetaDataCollapseChildrenValues<float>(target, parent, baselabel, targetFinalSize, static_cast<float>(blankReplacement));
    return btkSwigConvert<double>(target);
  };
  std::vector<std::string> btkMetaDataCollapseChildrenValuesString(btkMetaData parent, const std::string& baselabel, int targetFinalSize = -1, const std::string& blankReplacement = "")
  {
    std::vector<std::string> target;
    btk::MetaDataCollapseChildrenValues<std::string>(target, parent, baselabel, targetFinalSize, blankReplacement);
    return target;
  };


#include "btkCommonSwig.h"
#include "btkIOSwig.h"

SWIGINTERN btkAcquisitionFileIO btkAcquisitionFileReader_GetAcquisitionIO(btkAcquisitionFileReader *self){return btkAcquisitionFileIO((*self)->btkAcquisitionFileReader_impl::GetAcquisitionIO());}
SWIGINTERN void btkAcquisitionFileReader__reset(btkAcquisitionFileReader *self){self->reset();}
SWIGINTERN btkAcquisitionFileIO btkAcquisitionFileWriter_GetAcquisitionIO(btkAcquisitionFileWriter *self){return btkAcquisitionFileIO((*self)->btkAcquisitionFileWriter_impl::GetAcquisitionIO());}

#include "btkCommonSwig.h"
#include "btkBasicFiltersSwig.h"


#include <list>

SWIGINTERN btkSubAcquisitionFilter::ExtractionOption btkSubAcquisitionFilter_GetExtractionOption__SWIG_0(btkSubAcquisitionFilter const *self){return static_cast<btkSubAcquisitionFilter::ExtractionOption>((*self)->GetExtractionOption());}
SWIGINTERN void btkSubAcquisitionFilter_SetExtractionOption__SWIG_0(btkSubAcquisitionFilter *self,btkSubAcquisitionFilter::ExtractionOption option){(*self)->SetExtractionOption(static_cast<btk::SubAcquisitionFilter::ExtractionOption>(option));}
SWIGINTERN btkSubAcquisitionFilter::ExtractionOption btkSubAcquisitionFilter_GetExtractionOption__SWIG_1(btkSubAcquisitionFilter const *self,std::vector< int,std::allocator< int > > &ids){
    std::list<int> ids_;
    btk::SubAcquisitionFilter::ExtractionOption option = (*self)->GetExtractionOption(ids_);
    ids.resize(ids_.size());
    int inc = 0;
    for (std::list<int>::const_iterator it = ids_.begin() ; it != ids_.end() ; ++it)
      ids[inc++] = *it;
    return static_cast<btkSubAcquisitionFilter::ExtractionOption>(option);
  }
SWIGINTERN void btkSubAcquisitionFilter_SetExtractionOption__SWIG_1(btkSubAcquisitionFilter *self,btkSubAcquisitionFilter::ExtractionOption option,std::vector< int,std::allocator< int > > const &ids){
    std::list<int> ids_;
    for (size_t i = 0 ; i < ids.size() ; ++i)
      ids_.push_back(ids[i]);
    (*self)->SetExtractionOption(static_cast<btk::SubAcquisitionFilter::ExtractionOption>(option), ids_);
  }

  typedef btkSeparateKnownVirtualMarkersFilter_impl::StringAxes btkStringAxes;


  namespace swig {
    template <>  struct traits< btkStringAxes > {
      typedef pointer_category category;
      static const char* type_name() { return"btkStringAxes"; }
    };
  }


  namespace swig {
    template <class T >
    struct traits_asptr<std::list<T> >  {
      static int asptr(PyObject *obj, std::list<T> **lis) {
	return traits_asptr_stdseq<std::list<T> >::asptr(obj, lis);
      }
    };

    template <class T>
    struct traits_from<std::list<T> > {
      static PyObject *from(const std::list<T> & vec) {
	return traits_from_stdseq<std::list<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::list< btkStringAxes, std::allocator< btkStringAxes > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::list<" "btkStringAxes" ", " "std::allocator< btkStringAxes >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_list_Sl_btkStringAxes_Sg__iterator(std::list< btkStringAxes > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_list_Sl_btkStringAxes_Sg____nonzero__(std::list< btkStringAxes > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_list_Sl_btkStringAxes_Sg____bool__(std::list< btkStringAxes > const *self){
      return !(self->empty());
    }
SWIGINTERN std::list< btkStringAxes >::size_type std_list_Sl_btkStringAxes_Sg____len__(std::list< btkStringAxes > const *self){
      return self->size();
    }
SWIGINTERN std::list< btkStringAxes,std::allocator< btkStringAxes > > *std_list_Sl_btkStringAxes_Sg____getslice__(std::list< btkStringAxes > *self,std::list< btkStringAxes >::difference_type i,std::list< btkStringAxes >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_list_Sl_btkStringAxes_Sg____setslice____SWIG_0(std::list< btkStringAxes > *self,std::list< btkStringAxes >::difference_type i,std::list< btkStringAxes >::difference_type j){
      swig::setslice(self, i, j, 1, std::list< btkStringAxes,std::allocator< btkStringAxes > >());
    }
SWIGINTERN void std_list_Sl_btkStringAxes_Sg____setslice____SWIG_1(std::list< btkStringAxes > *self,std::list< btkStringAxes >::difference_type i,std::list< btkStringAxes >::difference_type j,std::list< btkStringAxes,std::allocator< btkStringAxes > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_list_Sl_btkStringAxes_Sg____delslice__(std::list< btkStringAxes > *self,std::list< btkStringAxes >::difference_type i,std::list< btkStringAxes >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_list_Sl_btkStringAxes_Sg____delitem____SWIG_0(std::list< btkStringAxes > *self,std::list< btkStringAxes >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::list< btkStringAxes,std::allocator< btkStringAxes > > *std_list_Sl_btkStringAxes_Sg____getitem____SWIG_0(std::list< btkStringAxes > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::list< btkStringAxes,std::allocator< btkStringAxes > >::difference_type id = i;
      std::list< btkStringAxes,std::allocator< btkStringAxes > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_list_Sl_btkStringAxes_Sg____setitem____SWIG_0(std::list< btkStringAxes > *self,PySliceObject *slice,std::list< btkStringAxes,std::allocator< btkStringAxes > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::list< btkStringAxes,std::allocator< btkStringAxes > >::difference_type id = i;
      std::list< btkStringAxes,std::allocator< btkStringAxes > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_list_Sl_btkStringAxes_Sg____setitem____SWIG_1(std::list< btkStringAxes > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::list< btkStringAxes,std::allocator< btkStringAxes > >::difference_type id = i;
      std::list< btkStringAxes,std::allocator< btkStringAxes > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_list_Sl_btkStringAxes_Sg____delitem____SWIG_1(std::list< btkStringAxes > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::list< btkStringAxes,std::allocator< btkStringAxes > >::difference_type id = i;
      std::list< btkStringAxes,std::allocator< btkStringAxes > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::list< btkStringAxes >::value_type const &std_list_Sl_btkStringAxes_Sg____getitem____SWIG_1(std::list< btkStringAxes > const *self,std::list< btkStringAxes >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_list_Sl_btkStringAxes_Sg____setitem____SWIG_2(std::list< btkStringAxes > *self,std::list< btkStringAxes >::difference_type i,std::list< btkStringAxes >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::list< btkStringAxes >::value_type std_list_Sl_btkStringAxes_Sg__pop(std::list< btkStringAxes > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::list< btkStringAxes,std::allocator< btkStringAxes > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_list_Sl_btkStringAxes_Sg__append(std::list< btkStringAxes > *self,std::list< btkStringAxes >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::list< btkStringAxes >::iterator std_list_Sl_btkStringAxes_Sg__erase__SWIG_0(std::list< btkStringAxes > *self,std::list< btkStringAxes >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::list< btkStringAxes >::iterator std_list_Sl_btkStringAxes_Sg__erase__SWIG_1(std::list< btkStringAxes > *self,std::list< btkStringAxes >::iterator first,std::list< btkStringAxes >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::list< btkStringAxes >::iterator std_list_Sl_btkStringAxes_Sg__insert__SWIG_0(std::list< btkStringAxes > *self,std::list< btkStringAxes >::iterator pos,std::list< btkStringAxes >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_list_Sl_btkStringAxes_Sg__insert__SWIG_1(std::list< btkStringAxes > *self,std::list< btkStringAxes >::iterator pos,std::list< btkStringAxes >::size_type n,std::list< btkStringAxes >::value_type const &x){ self->insert(pos, n, x); }

      namespace swig {
	template <>  struct traits<std::list< std::string, std::allocator< std::string > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::list<" "std::string" ", " "std::allocator< std::string >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_list_Sl_std_string_Sg__iterator(std::list< std::string > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_list_Sl_std_string_Sg____nonzero__(std::list< std::string > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_list_Sl_std_string_Sg____bool__(std::list< std::string > const *self){
      return !(self->empty());
    }
SWIGINTERN std::list< std::string >::size_type std_list_Sl_std_string_Sg____len__(std::list< std::string > const *self){
      return self->size();
    }
SWIGINTERN std::list< std::string,std::allocator< std::string > > *std_list_Sl_std_string_Sg____getslice__(std::list< std::string > *self,std::list< std::string >::difference_type i,std::list< std::string >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_list_Sl_std_string_Sg____setslice____SWIG_0(std::list< std::string > *self,std::list< std::string >::difference_type i,std::list< std::string >::difference_type j){
      swig::setslice(self, i, j, 1, std::list< std::string,std::allocator< std::string > >());
    }
SWIGINTERN void std_list_Sl_std_string_Sg____setslice____SWIG_1(std::list< std::string > *self,std::list< std::string >::difference_type i,std::list< std::string >::difference_type j,std::list< std::string,std::allocator< std::string > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_list_Sl_std_string_Sg____delslice__(std::list< std::string > *self,std::list< std::string >::difference_type i,std::list< std::string >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_list_Sl_std_string_Sg____delitem____SWIG_0(std::list< std::string > *self,std::list< std::string >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::list< std::string,std::allocator< std::string > > *std_list_Sl_std_string_Sg____getitem____SWIG_0(std::list< std::string > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::list< std::string,std::allocator< std::string > >::difference_type id = i;
      std::list< std::string,std::allocator< std::string > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_list_Sl_std_string_Sg____setitem____SWIG_0(std::list< std::string > *self,PySliceObject *slice,std::list< std::string,std::allocator< std::string > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::list< std::string,std::allocator< std::string > >::difference_type id = i;
      std::list< std::string,std::allocator< std::string > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_list_Sl_std_string_Sg____setitem____SWIG_1(std::list< std::string > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::list< std::string,std::allocator< std::string > >::difference_type id = i;
      std::list< std::string,std::allocator< std::string > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_list_Sl_std_string_Sg____delitem____SWIG_1(std::list< std::string > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::list< std::string,std::allocator< std::string > >::difference_type id = i;
      std::list< std::string,std::allocator< std::string > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::list< std::string >::value_type const &std_list_Sl_std_string_Sg____getitem____SWIG_1(std::list< std::string > const *self,std::list< std::string >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_list_Sl_std_string_Sg____setitem____SWIG_2(std::list< std::string > *self,std::list< std::string >::difference_type i,std::list< std::string >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::list< std::string >::value_type std_list_Sl_std_string_Sg__pop(std::list< std::string > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::list< std::string,std::allocator< std::string > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_list_Sl_std_string_Sg__append(std::list< std::string > *self,std::list< std::string >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::list< std::string >::iterator std_list_Sl_std_string_Sg__erase__SWIG_0(std::list< std::string > *self,std::list< std::string >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::list< std::string >::iterator std_list_Sl_std_string_Sg__erase__SWIG_1(std::list< std::string > *self,std::list< std::string >::iterator first,std::list< std::string >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::list< std::string >::iterator std_list_Sl_std_string_Sg__insert__SWIG_0(std::list< std::string > *self,std::list< std::string >::iterator pos,std::list< std::string >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_list_Sl_std_string_Sg__insert__SWIG_1(std::list< std::string > *self,std::list< std::string >::iterator pos,std::list< std::string >::size_type n,std::list< std::string >::value_type const &x){ self->insert(pos, n, x); }
#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_delete_SwigPyIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SwigPyIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SwigPyIterator" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  {
    try {
      delete arg1;
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_value",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_value" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  {
    try {
      try {
        result = (PyObject *)((swig::SwigPyIterator const *)arg1)->value();
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_incr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_incr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      try {
        result = (swig::SwigPyIterator *)(arg1)->incr(arg2);
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_incr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  {
    try {
      try {
        result = (swig::SwigPyIterator *)(arg1)->incr();
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_incr__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_incr__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SwigPyIterator_incr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swig::SwigPyIterator::incr(size_t)\n"
    "    swig::SwigPyIterator::incr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_decr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_decr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      try {
        result = (swig::SwigPyIterator *)(arg1)->decr(arg2);
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_decr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  {
    try {
      try {
        result = (swig::SwigPyIterator *)(arg1)->decr();
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_decr__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_decr__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SwigPyIterator_decr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swig::SwigPyIterator::decr(size_t)\n"
    "    swig::SwigPyIterator::decr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ptrdiff_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_distance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_distance" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  {
    try {
      try {
        result = ((swig::SwigPyIterator const *)arg1)->distance((swig::SwigPyIterator const &)*arg2);
      }
      catch(std::invalid_argument &_e) {
        SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_equal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_equal",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_equal" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  {
    try {
      try {
        result = (bool)((swig::SwigPyIterator const *)arg1)->equal((swig::SwigPyIterator const &)*arg2);
      }
      catch(std::invalid_argument &_e) {
        SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_copy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_copy" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->copy();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_next" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  {
    try {
      try {
        result = (PyObject *)(arg1)->next();
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___next__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator___next__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___next__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  {
    try {
      try {
        result = (PyObject *)(arg1)->__next__();
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_previous(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_previous",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_previous" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  {
    try {
      try {
        result = (PyObject *)(arg1)->previous();
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_advance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_advance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_advance" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_advance" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  {
    try {
      try {
        result = (swig::SwigPyIterator *)(arg1)->advance(arg2);
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___eq__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  {
    try {
      result = (bool)((swig::SwigPyIterator const *)arg1)->operator ==((swig::SwigPyIterator const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___ne__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  {
    try {
      result = (bool)((swig::SwigPyIterator const *)arg1)->operator !=((swig::SwigPyIterator const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___iadd__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___iadd__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  {
    try {
      try {
        result = (swig::SwigPyIterator *) &(arg1)->operator +=(arg2);
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___isub__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___isub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  {
    try {
      try {
        result = (swig::SwigPyIterator *) &(arg1)->operator -=(arg2);
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___add__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___add__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  {
    try {
      try {
        result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator +(arg2);
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  {
    try {
      try {
        result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator -(arg2);
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ptrdiff_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  {
    try {
      result = ((swig::SwigPyIterator const *)arg1)->operator -((swig::SwigPyIterator const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_swig__SwigPyIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_0(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *SwigPyIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_swig__SwigPyIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_btkEvent__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEvent *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_btkEvent")) SWIG_fail;
  {
    try {
      result = (btkEvent *)new btkEvent();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkEvent, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkEvent__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  double arg2 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  int arg7 ;
  int res1 = SWIG_OLDOBJ ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int val4 ;
  int ecode4 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  int res6 = SWIG_OLDOBJ ;
  int val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  btkEvent *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:new_btkEvent",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkEvent" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkEvent" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_btkEvent" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_btkEvent" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkEvent" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_btkEvent" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_btkEvent" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkEvent" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    arg5 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res6 = SWIG_AsPtr_std_string(obj5, &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_btkEvent" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkEvent" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    arg6 = ptr;
  }
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_btkEvent" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  {
    try {
      result = (btkEvent *)new btkEvent((std::string const &)*arg1,arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5,(std::string const &)*arg6,arg7);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkEvent, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkEvent__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  double arg2 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int val4 ;
  int ecode4 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  int res6 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  btkEvent *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_btkEvent",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkEvent" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkEvent" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_btkEvent" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_btkEvent" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkEvent" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_btkEvent" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_btkEvent" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkEvent" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    arg5 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res6 = SWIG_AsPtr_std_string(obj5, &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_btkEvent" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkEvent" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    arg6 = ptr;
  }
  {
    try {
      result = (btkEvent *)new btkEvent((std::string const &)*arg1,arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5,(std::string const &)*arg6);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkEvent, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkEvent__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  double arg2 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  std::string *arg5 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int val4 ;
  int ecode4 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  btkEvent *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_btkEvent",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkEvent" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkEvent" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_btkEvent" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_btkEvent" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkEvent" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_btkEvent" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_btkEvent" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkEvent" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    arg5 = ptr;
  }
  {
    try {
      result = (btkEvent *)new btkEvent((std::string const &)*arg1,arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkEvent, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkEvent__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  double arg2 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  int res1 = SWIG_OLDOBJ ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  btkEvent *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_btkEvent",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkEvent" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkEvent" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_btkEvent" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_btkEvent" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkEvent" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_btkEvent" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (btkEvent *)new btkEvent((std::string const &)*arg1,arg2,(std::string const &)*arg3,arg4);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkEvent, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkEvent__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  double arg2 ;
  std::string *arg3 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  btkEvent *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_btkEvent",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkEvent" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkEvent" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_btkEvent" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_btkEvent" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkEvent" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = (btkEvent *)new btkEvent((std::string const &)*arg1,arg2,(std::string const &)*arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkEvent, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkEvent__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  double arg2 ;
  int res1 = SWIG_OLDOBJ ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  btkEvent *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_btkEvent",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkEvent" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkEvent" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_btkEvent" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (btkEvent *)new btkEvent((std::string const &)*arg1,arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkEvent, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkEvent__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  int arg7 ;
  int res1 = SWIG_OLDOBJ ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int val4 ;
  int ecode4 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  int res6 = SWIG_OLDOBJ ;
  int val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  btkEvent *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:new_btkEvent",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkEvent" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkEvent" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_btkEvent" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_btkEvent" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkEvent" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_btkEvent" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_btkEvent" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkEvent" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    arg5 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res6 = SWIG_AsPtr_std_string(obj5, &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_btkEvent" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkEvent" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    arg6 = ptr;
  }
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_btkEvent" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  {
    try {
      result = (btkEvent *)new btkEvent((std::string const &)*arg1,arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5,(std::string const &)*arg6,arg7);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkEvent, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkEvent__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int val4 ;
  int ecode4 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  int res6 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  btkEvent *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_btkEvent",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkEvent" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkEvent" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_btkEvent" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_btkEvent" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkEvent" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_btkEvent" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_btkEvent" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkEvent" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    arg5 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res6 = SWIG_AsPtr_std_string(obj5, &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_btkEvent" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkEvent" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    arg6 = ptr;
  }
  {
    try {
      result = (btkEvent *)new btkEvent((std::string const &)*arg1,arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5,(std::string const &)*arg6);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkEvent, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkEvent__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  std::string *arg5 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int val4 ;
  int ecode4 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  btkEvent *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_btkEvent",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkEvent" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkEvent" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_btkEvent" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_btkEvent" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkEvent" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_btkEvent" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_btkEvent" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkEvent" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    arg5 = ptr;
  }
  {
    try {
      result = (btkEvent *)new btkEvent((std::string const &)*arg1,arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkEvent, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkEvent__SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  int res1 = SWIG_OLDOBJ ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  btkEvent *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_btkEvent",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkEvent" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkEvent" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_btkEvent" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_btkEvent" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkEvent" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_btkEvent" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (btkEvent *)new btkEvent((std::string const &)*arg1,arg2,(std::string const &)*arg3,arg4);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkEvent, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkEvent__SWIG_11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  btkEvent *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_btkEvent",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkEvent" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkEvent" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_btkEvent" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_btkEvent" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkEvent" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = (btkEvent *)new btkEvent((std::string const &)*arg1,arg2,(std::string const &)*arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkEvent, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkEvent__SWIG_12(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int arg2 ;
  int res1 = SWIG_OLDOBJ ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  btkEvent *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_btkEvent",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkEvent" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkEvent" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_btkEvent" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (btkEvent *)new btkEvent((std::string const &)*arg1,arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkEvent, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkEvent__SWIG_13(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  double arg2 ;
  int arg3 ;
  std::string *arg4 = 0 ;
  int arg5 ;
  std::string *arg6 = 0 ;
  std::string *arg7 = 0 ;
  int arg8 ;
  int res1 = SWIG_OLDOBJ ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  int val5 ;
  int ecode5 = 0 ;
  int res6 = SWIG_OLDOBJ ;
  int res7 = SWIG_OLDOBJ ;
  int val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  btkEvent *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:new_btkEvent",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkEvent" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkEvent" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_btkEvent" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_btkEvent" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_btkEvent" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkEvent" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_btkEvent" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    std::string *ptr = (std::string *)0;
    res6 = SWIG_AsPtr_std_string(obj5, &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_btkEvent" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkEvent" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    arg6 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res7 = SWIG_AsPtr_std_string(obj6, &ptr);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "new_btkEvent" "', argument " "7"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkEvent" "', argument " "7"" of type '" "std::string const &""'"); 
    }
    arg7 = ptr;
  }
  ecode8 = SWIG_AsVal_int(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_btkEvent" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  {
    try {
      result = (btkEvent *)new btkEvent((std::string const &)*arg1,arg2,arg3,(std::string const &)*arg4,arg5,(std::string const &)*arg6,(std::string const &)*arg7,arg8);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkEvent, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res6)) delete arg6;
  if (SWIG_IsNewObj(res7)) delete arg7;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res6)) delete arg6;
  if (SWIG_IsNewObj(res7)) delete arg7;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkEvent__SWIG_14(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  double arg2 ;
  int arg3 ;
  std::string *arg4 = 0 ;
  int arg5 ;
  std::string *arg6 = 0 ;
  std::string *arg7 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  int val5 ;
  int ecode5 = 0 ;
  int res6 = SWIG_OLDOBJ ;
  int res7 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  btkEvent *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:new_btkEvent",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkEvent" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkEvent" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_btkEvent" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_btkEvent" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_btkEvent" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkEvent" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_btkEvent" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    std::string *ptr = (std::string *)0;
    res6 = SWIG_AsPtr_std_string(obj5, &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_btkEvent" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkEvent" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    arg6 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res7 = SWIG_AsPtr_std_string(obj6, &ptr);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "new_btkEvent" "', argument " "7"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkEvent" "', argument " "7"" of type '" "std::string const &""'"); 
    }
    arg7 = ptr;
  }
  {
    try {
      result = (btkEvent *)new btkEvent((std::string const &)*arg1,arg2,arg3,(std::string const &)*arg4,arg5,(std::string const &)*arg6,(std::string const &)*arg7);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkEvent, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res6)) delete arg6;
  if (SWIG_IsNewObj(res7)) delete arg7;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res6)) delete arg6;
  if (SWIG_IsNewObj(res7)) delete arg7;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkEvent__SWIG_15(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  double arg2 ;
  int arg3 ;
  std::string *arg4 = 0 ;
  int arg5 ;
  std::string *arg6 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  int val5 ;
  int ecode5 = 0 ;
  int res6 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  btkEvent *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_btkEvent",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkEvent" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkEvent" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_btkEvent" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_btkEvent" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_btkEvent" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkEvent" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_btkEvent" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    std::string *ptr = (std::string *)0;
    res6 = SWIG_AsPtr_std_string(obj5, &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_btkEvent" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkEvent" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    arg6 = ptr;
  }
  {
    try {
      result = (btkEvent *)new btkEvent((std::string const &)*arg1,arg2,arg3,(std::string const &)*arg4,arg5,(std::string const &)*arg6);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkEvent, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res6)) delete arg6;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res6)) delete arg6;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkEvent__SWIG_16(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  double arg2 ;
  int arg3 ;
  std::string *arg4 = 0 ;
  int arg5 ;
  int res1 = SWIG_OLDOBJ ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  btkEvent *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_btkEvent",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkEvent" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkEvent" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_btkEvent" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_btkEvent" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_btkEvent" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkEvent" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_btkEvent" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      result = (btkEvent *)new btkEvent((std::string const &)*arg1,arg2,arg3,(std::string const &)*arg4,arg5);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkEvent, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkEvent__SWIG_17(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  double arg2 ;
  int arg3 ;
  std::string *arg4 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  btkEvent *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_btkEvent",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkEvent" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkEvent" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_btkEvent" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_btkEvent" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_btkEvent" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkEvent" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      result = (btkEvent *)new btkEvent((std::string const &)*arg1,arg2,arg3,(std::string const &)*arg4);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkEvent, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkEvent__SWIG_18(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  double arg2 ;
  int arg3 ;
  int res1 = SWIG_OLDOBJ ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  btkEvent *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_btkEvent",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkEvent" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkEvent" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_btkEvent" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_btkEvent" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (btkEvent *)new btkEvent((std::string const &)*arg1,arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkEvent, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkEvent(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[9] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 8) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_btkEvent__SWIG_0(self, args);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_btkEvent__SWIG_12(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_btkEvent__SWIG_6(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_btkEvent__SWIG_11(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_btkEvent__SWIG_18(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_btkEvent__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_btkEvent__SWIG_10(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_btkEvent__SWIG_17(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_btkEvent__SWIG_4(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_new_btkEvent__SWIG_9(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_btkEvent__SWIG_16(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_new_btkEvent__SWIG_3(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsPtr_std_string(argv[5], (std::string**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_new_btkEvent__SWIG_8(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = SWIG_AsPtr_std_string(argv[5], (std::string**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_new_btkEvent__SWIG_15(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsPtr_std_string(argv[5], (std::string**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_new_btkEvent__SWIG_2(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsPtr_std_string(argv[5], (std::string**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                {
                  int res = SWIG_AsVal_int(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_new_btkEvent__SWIG_7(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = SWIG_AsPtr_std_string(argv[5], (std::string**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsPtr_std_string(argv[6], (std::string**)(0));
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_new_btkEvent__SWIG_14(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsPtr_std_string(argv[5], (std::string**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                {
                  int res = SWIG_AsVal_int(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_new_btkEvent__SWIG_1(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = SWIG_AsPtr_std_string(argv[5], (std::string**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsPtr_std_string(argv[6], (std::string**)(0));
                _v = SWIG_CheckState(res);
                if (_v) {
                  {
                    int res = SWIG_AsVal_int(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_new_btkEvent__SWIG_13(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_btkEvent'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkEvent::btkEvent()\n"
    "    btkEvent::btkEvent(std::string const &,double,std::string const &,int,std::string const &,std::string const &,int)\n"
    "    btkEvent::btkEvent(std::string const &,double,std::string const &,int,std::string const &,std::string const &)\n"
    "    btkEvent::btkEvent(std::string const &,double,std::string const &,int,std::string const &)\n"
    "    btkEvent::btkEvent(std::string const &,double,std::string const &,int)\n"
    "    btkEvent::btkEvent(std::string const &,double,std::string const &)\n"
    "    btkEvent::btkEvent(std::string const &,double)\n"
    "    btkEvent::btkEvent(std::string const &,int,std::string const &,int,std::string const &,std::string const &,int)\n"
    "    btkEvent::btkEvent(std::string const &,int,std::string const &,int,std::string const &,std::string const &)\n"
    "    btkEvent::btkEvent(std::string const &,int,std::string const &,int,std::string const &)\n"
    "    btkEvent::btkEvent(std::string const &,int,std::string const &,int)\n"
    "    btkEvent::btkEvent(std::string const &,int,std::string const &)\n"
    "    btkEvent::btkEvent(std::string const &,int)\n"
    "    btkEvent::btkEvent(std::string const &,double,int,std::string const &,int,std::string const &,std::string const &,int)\n"
    "    btkEvent::btkEvent(std::string const &,double,int,std::string const &,int,std::string const &,std::string const &)\n"
    "    btkEvent::btkEvent(std::string const &,double,int,std::string const &,int,std::string const &)\n"
    "    btkEvent::btkEvent(std::string const &,double,int,std::string const &,int)\n"
    "    btkEvent::btkEvent(std::string const &,double,int,std::string const &)\n"
    "    btkEvent::btkEvent(std::string const &,double,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkEvent_Clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEvent *arg1 = (btkEvent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkEvent result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkEvent_Clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEvent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEvent_Clone" "', argument " "1"" of type '" "btkEvent *""'"); 
  }
  arg1 = reinterpret_cast< btkEvent * >(argp1);
  {
    try {
      result = (arg1)->Clone();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkEvent(static_cast< const btkEvent& >(result))), SWIGTYPE_p_btkEvent, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEvent___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEvent *arg1 = (btkEvent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkEvent_impl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkEvent___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEvent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEvent___deref__" "', argument " "1"" of type '" "btkEvent const *""'"); 
  }
  arg1 = reinterpret_cast< btkEvent * >(argp1);
  {
    try {
      result = (btkEvent_impl *)((btkEvent const *)arg1)->operator ->();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkEvent_impl, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_btkEvent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEvent *arg1 = (btkEvent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_btkEvent",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEvent, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_btkEvent" "', argument " "1"" of type '" "btkEvent *""'"); 
  }
  arg1 = reinterpret_cast< btkEvent * >(argp1);
  {
    try {
      delete arg1;
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEvent_GetLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEvent *arg1 = (btkEvent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkEvent_GetLabel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEvent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEvent_GetLabel" "', argument " "1"" of type '" "btkEvent const *""'"); 
  }
  arg1 = reinterpret_cast< btkEvent * >(argp1);
  {
    try {
      result = (std::string *) &(*arg1)->GetLabel();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEvent_SetLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEvent *arg1 = (btkEvent *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkEvent_SetLabel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEvent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEvent_SetLabel" "', argument " "1"" of type '" "btkEvent *""'"); 
  }
  arg1 = reinterpret_cast< btkEvent * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkEvent_SetLabel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkEvent_SetLabel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->SetLabel((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEvent_GetDescription(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEvent *arg1 = (btkEvent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkEvent_GetDescription",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEvent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEvent_GetDescription" "', argument " "1"" of type '" "btkEvent const *""'"); 
  }
  arg1 = reinterpret_cast< btkEvent * >(argp1);
  {
    try {
      result = (std::string *) &(*arg1)->GetDescription();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEvent_SetDescription(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEvent *arg1 = (btkEvent *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkEvent_SetDescription",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEvent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEvent_SetDescription" "', argument " "1"" of type '" "btkEvent *""'"); 
  }
  arg1 = reinterpret_cast< btkEvent * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkEvent_SetDescription" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkEvent_SetDescription" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->SetDescription((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEvent_GetContext(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEvent *arg1 = (btkEvent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkEvent_GetContext",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEvent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEvent_GetContext" "', argument " "1"" of type '" "btkEvent const *""'"); 
  }
  arg1 = reinterpret_cast< btkEvent * >(argp1);
  {
    try {
      result = (std::string *) &(*arg1)->GetContext();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEvent_SetContext(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEvent *arg1 = (btkEvent *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkEvent_SetContext",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEvent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEvent_SetContext" "', argument " "1"" of type '" "btkEvent *""'"); 
  }
  arg1 = reinterpret_cast< btkEvent * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkEvent_SetContext" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkEvent_SetContext" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->SetContext((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEvent_GetSubject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEvent *arg1 = (btkEvent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkEvent_GetSubject",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEvent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEvent_GetSubject" "', argument " "1"" of type '" "btkEvent const *""'"); 
  }
  arg1 = reinterpret_cast< btkEvent * >(argp1);
  {
    try {
      result = (std::string *) &(*arg1)->GetSubject();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEvent_SetSubject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEvent *arg1 = (btkEvent *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkEvent_SetSubject",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEvent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEvent_SetSubject" "', argument " "1"" of type '" "btkEvent *""'"); 
  }
  arg1 = reinterpret_cast< btkEvent * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkEvent_SetSubject" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkEvent_SetSubject" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->SetSubject((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEvent_GetTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEvent *arg1 = (btkEvent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkEvent_GetTime",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEvent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEvent_GetTime" "', argument " "1"" of type '" "btkEvent const *""'"); 
  }
  arg1 = reinterpret_cast< btkEvent * >(argp1);
  {
    try {
      result = (double)(*arg1)->GetTime();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEvent_SetTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEvent *arg1 = (btkEvent *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkEvent_SetTime",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEvent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEvent_SetTime" "', argument " "1"" of type '" "btkEvent *""'"); 
  }
  arg1 = reinterpret_cast< btkEvent * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkEvent_SetTime" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (*arg1)->SetTime(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEvent_GetFrame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEvent *arg1 = (btkEvent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkEvent_GetFrame",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEvent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEvent_GetFrame" "', argument " "1"" of type '" "btkEvent const *""'"); 
  }
  arg1 = reinterpret_cast< btkEvent * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetFrame();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEvent_SetFrame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEvent *arg1 = (btkEvent *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkEvent_SetFrame",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEvent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEvent_SetFrame" "', argument " "1"" of type '" "btkEvent *""'"); 
  }
  arg1 = reinterpret_cast< btkEvent * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkEvent_SetFrame" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->SetFrame(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEvent_GetDetectionFlags(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEvent *arg1 = (btkEvent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkEvent_GetDetectionFlags",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEvent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEvent_GetDetectionFlags" "', argument " "1"" of type '" "btkEvent const *""'"); 
  }
  arg1 = reinterpret_cast< btkEvent * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetDetectionFlags();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEvent_SetDetectionFlags(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEvent *arg1 = (btkEvent *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkEvent_SetDetectionFlags",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEvent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEvent_SetDetectionFlags" "', argument " "1"" of type '" "btkEvent *""'"); 
  }
  arg1 = reinterpret_cast< btkEvent * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkEvent_SetDetectionFlags" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->SetDetectionFlags(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEvent_HasDetectionFlag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEvent *arg1 = (btkEvent *) 0 ;
  btkEvent_impl::DetectionFlag arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkEvent_HasDetectionFlag",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEvent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEvent_HasDetectionFlag" "', argument " "1"" of type '" "btkEvent *""'"); 
  }
  arg1 = reinterpret_cast< btkEvent * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkEvent_HasDetectionFlag" "', argument " "2"" of type '" "btkEvent_impl::DetectionFlag""'");
  } 
  arg2 = static_cast< btkEvent_impl::DetectionFlag >(val2);
  {
    try {
      result = (bool)(*arg1)->HasDetectionFlag(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEvent_GetId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEvent *arg1 = (btkEvent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkEvent_GetId",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEvent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEvent_GetId" "', argument " "1"" of type '" "btkEvent const *""'"); 
  }
  arg1 = reinterpret_cast< btkEvent * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetId();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEvent_SetId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEvent *arg1 = (btkEvent *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkEvent_SetId",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEvent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEvent_SetId" "', argument " "1"" of type '" "btkEvent *""'"); 
  }
  arg1 = reinterpret_cast< btkEvent * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkEvent_SetId" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->SetId(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEvent_Update(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEvent *arg1 = (btkEvent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkEvent_Update",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEvent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEvent_Update" "', argument " "1"" of type '" "btkEvent *""'"); 
  }
  arg1 = reinterpret_cast< btkEvent * >(argp1);
  {
    try {
      (*arg1)->Update();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEvent_GetTimestamp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEvent *arg1 = (btkEvent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkEvent_GetTimestamp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEvent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEvent_GetTimestamp" "', argument " "1"" of type '" "btkEvent const *""'"); 
  }
  arg1 = reinterpret_cast< btkEvent * >(argp1);
  {
    try {
      result = (unsigned long)(*arg1)->GetTimestamp();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *btkEvent_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_btkEvent, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_btkAnalog__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  btkAnalog *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_btkAnalog",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkAnalog" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkAnalog" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_btkAnalog" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkAnalog" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (btkAnalog *)new btkAnalog((std::string const &)*arg1,(std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkAnalog, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkAnalog__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  btkAnalog *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_btkAnalog",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkAnalog" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkAnalog" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (btkAnalog *)new btkAnalog((std::string const &)*arg1);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkAnalog, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkAnalog__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalog *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_btkAnalog")) SWIG_fail;
  {
    try {
      result = (btkAnalog *)new btkAnalog();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkAnalog, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkAnalog__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAnalog *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_btkAnalog",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_btkAnalog" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (btkAnalog *)new btkAnalog(arg1);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkAnalog, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkAnalog__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int arg2 ;
  int res1 = SWIG_OLDOBJ ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  btkAnalog *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_btkAnalog",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkAnalog" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkAnalog" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_btkAnalog" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (btkAnalog *)new btkAnalog((std::string const &)*arg1,arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkAnalog, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkAnalog(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_btkAnalog__SWIG_2(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_btkAnalog__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_btkAnalog__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_btkAnalog__SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_btkAnalog__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_btkAnalog'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkAnalog::btkAnalog(std::string const &,std::string const &)\n"
    "    btkAnalog::btkAnalog(std::string const &)\n"
    "    btkAnalog::btkAnalog()\n"
    "    btkAnalog::btkAnalog(int)\n"
    "    btkAnalog::btkAnalog(std::string const &,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkAnalog_Clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalog *arg1 = (btkAnalog *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAnalog result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAnalog_Clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalog, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalog_Clone" "', argument " "1"" of type '" "btkAnalog *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalog * >(argp1);
  {
    try {
      result = (arg1)->Clone();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkAnalog(static_cast< const btkAnalog& >(result))), SWIGTYPE_p_btkAnalog, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalog___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalog *arg1 = (btkAnalog *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAnalog_impl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAnalog___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalog, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalog___deref__" "', argument " "1"" of type '" "btkAnalog const *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalog * >(argp1);
  {
    try {
      result = (btkAnalog_impl *)((btkAnalog const *)arg1)->operator ->();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkAnalog_impl, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalog_GetValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalog *arg1 = (btkAnalog *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAnalog_GetValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalog, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalog_GetValue" "', argument " "1"" of type '" "btkAnalog const *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalog * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkAnalog_GetValue" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)btkAnalog_GetValue((btkAnalog const *)arg1,arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalog_SetValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalog *arg1 = (btkAnalog *) 0 ;
  int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkAnalog_SetValue",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalog, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalog_SetValue" "', argument " "1"" of type '" "btkAnalog *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalog * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkAnalog_SetValue" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkAnalog_SetValue" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      btkAnalog_SetValue(arg1,arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_btkAnalog(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalog *arg1 = (btkAnalog *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_btkAnalog",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalog, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_btkAnalog" "', argument " "1"" of type '" "btkAnalog *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalog * >(argp1);
  {
    try {
      delete arg1;
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalog_GetLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalog *arg1 = (btkAnalog *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAnalog_GetLabel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalog, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalog_GetLabel" "', argument " "1"" of type '" "btkAnalog const *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalog * >(argp1);
  {
    try {
      result = (std::string *) &(*arg1)->GetLabel();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalog_SetLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalog *arg1 = (btkAnalog *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAnalog_SetLabel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalog, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalog_SetLabel" "', argument " "1"" of type '" "btkAnalog *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalog * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkAnalog_SetLabel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkAnalog_SetLabel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->SetLabel((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalog_GetDescription(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalog *arg1 = (btkAnalog *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAnalog_GetDescription",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalog, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalog_GetDescription" "', argument " "1"" of type '" "btkAnalog const *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalog * >(argp1);
  {
    try {
      result = (std::string *) &(*arg1)->GetDescription();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalog_SetDescription(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalog *arg1 = (btkAnalog *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAnalog_SetDescription",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalog, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalog_SetDescription" "', argument " "1"" of type '" "btkAnalog *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalog * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkAnalog_SetDescription" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkAnalog_SetDescription" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->SetDescription((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalog_GetValues(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalog *arg1 = (btkAnalog *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btk::Analog::Values *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAnalog_GetValues",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalog, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalog_GetValues" "', argument " "1"" of type '" "btkAnalog const *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalog * >(argp1);
  {
    try {
      result = (btk::Analog::Values *) &(*arg1)->GetValues();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  {
    ConvertFromEigenToNumPyMatrix<btk::Analog::Values>(&resultobj, result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalog_SetValues(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalog *arg1 = (btkAnalog *) 0 ;
  btk::Analog::Values *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  btk::Analog::Values temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAnalog_SetValues",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalog, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalog_SetValues" "', argument " "1"" of type '" "btkAnalog *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalog * >(argp1);
  {
    // In: const&
    ConvertFromNumpyToEigenMatrix<btk::Analog::Values>(&temp2, obj1);
    arg2 = &temp2;
  }
  {
    try {
      (*arg1)->SetValues((btk::Analog::Values const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalog_GetFrameNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalog *arg1 = (btkAnalog *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAnalog_GetFrameNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalog, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalog_GetFrameNumber" "', argument " "1"" of type '" "btkAnalog const *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalog * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetFrameNumber();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalog_SetFrameNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalog *arg1 = (btkAnalog *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAnalog_SetFrameNumber",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalog, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalog_SetFrameNumber" "', argument " "1"" of type '" "btkAnalog *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalog * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkAnalog_SetFrameNumber" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->SetFrameNumber(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalog_GetUnit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalog *arg1 = (btkAnalog *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAnalog_GetUnit",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalog, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalog_GetUnit" "', argument " "1"" of type '" "btkAnalog const *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalog * >(argp1);
  {
    try {
      result = (std::string *) &(*arg1)->GetUnit();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalog_SetUnit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalog *arg1 = (btkAnalog *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAnalog_SetUnit",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalog, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalog_SetUnit" "', argument " "1"" of type '" "btkAnalog *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalog * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkAnalog_SetUnit" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkAnalog_SetUnit" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->SetUnit((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalog_GetGain(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalog *arg1 = (btkAnalog *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAnalog_impl::Gain result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAnalog_GetGain",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalog, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalog_GetGain" "', argument " "1"" of type '" "btkAnalog const *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalog * >(argp1);
  {
    try {
      result = (btkAnalog_impl::Gain)(*arg1)->GetGain();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalog_SetGain(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalog *arg1 = (btkAnalog *) 0 ;
  btkAnalog_impl::Gain arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAnalog_SetGain",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalog, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalog_SetGain" "', argument " "1"" of type '" "btkAnalog *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalog * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkAnalog_SetGain" "', argument " "2"" of type '" "btkAnalog_impl::Gain""'");
  } 
  arg2 = static_cast< btkAnalog_impl::Gain >(val2);
  {
    try {
      (*arg1)->SetGain(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalog_GetOffset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalog *arg1 = (btkAnalog *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAnalog_GetOffset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalog, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalog_GetOffset" "', argument " "1"" of type '" "btkAnalog const *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalog * >(argp1);
  {
    try {
      result = (double)(*arg1)->GetOffset();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalog_SetOffset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalog *arg1 = (btkAnalog *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAnalog_SetOffset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalog, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalog_SetOffset" "', argument " "1"" of type '" "btkAnalog *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalog * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkAnalog_SetOffset" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (*arg1)->SetOffset(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalog_GetScale(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalog *arg1 = (btkAnalog *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAnalog_GetScale",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalog, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalog_GetScale" "', argument " "1"" of type '" "btkAnalog const *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalog * >(argp1);
  {
    try {
      result = (double)(*arg1)->GetScale();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalog_SetScale(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalog *arg1 = (btkAnalog *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAnalog_SetScale",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalog, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalog_SetScale" "', argument " "1"" of type '" "btkAnalog *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalog * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkAnalog_SetScale" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (*arg1)->SetScale(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalog_GetData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalog *arg1 = (btkAnalog *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< btkAnalogData > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAnalog_GetData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalog, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalog_GetData" "', argument " "1"" of type '" "btkAnalog const *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalog * >(argp1);
  {
    try {
      result = (*arg1)->GetData();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkAnalogData(static_cast< const btkAnalogData& >(result))), SWIGTYPE_p_btkAnalogData, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalog_SetData__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalog *arg1 = (btkAnalog *) 0 ;
  SwigValueWrapper< btkAnalogData > arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkAnalog_SetData",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalog, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalog_SetData" "', argument " "1"" of type '" "btkAnalog *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalog * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkAnalogData,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkAnalog_SetData" "', argument " "2"" of type '" "btkAnalogData""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkAnalog_SetData" "', argument " "2"" of type '" "btkAnalogData""'");
    } else {
      btkAnalogData * temp = reinterpret_cast< btkAnalogData * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkAnalog_SetData" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (*arg1)->SetData(arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalog_SetData__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalog *arg1 = (btkAnalog *) 0 ;
  SwigValueWrapper< btkAnalogData > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAnalog_SetData",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalog, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalog_SetData" "', argument " "1"" of type '" "btkAnalog *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalog * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkAnalogData,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkAnalog_SetData" "', argument " "2"" of type '" "btkAnalogData""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkAnalog_SetData" "', argument " "2"" of type '" "btkAnalogData""'");
    } else {
      btkAnalogData * temp = reinterpret_cast< btkAnalogData * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->SetData(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalog_SetData(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkAnalog, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_btkAnalogData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_btkAnalog_SetData__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkAnalog, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_btkAnalogData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_btkAnalog_SetData__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkAnalog_SetData'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkAnalog_impl::SetData(btkAnalogData,bool)\n"
    "    btkAnalog_impl::SetData(btkAnalogData)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkAnalog_SetDataSlice(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalog *arg1 = (btkAnalog *) 0 ;
  int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkAnalog_SetDataSlice",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalog, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalog_SetDataSlice" "', argument " "1"" of type '" "btkAnalog *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalog * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkAnalog_SetDataSlice" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkAnalog_SetDataSlice" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      (*arg1)->SetDataSlice(arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalog_Update(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalog *arg1 = (btkAnalog *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAnalog_Update",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalog, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalog_Update" "', argument " "1"" of type '" "btkAnalog *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalog * >(argp1);
  {
    try {
      (*arg1)->Update();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalog_GetTimestamp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalog *arg1 = (btkAnalog *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAnalog_GetTimestamp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalog, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalog_GetTimestamp" "', argument " "1"" of type '" "btkAnalog const *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalog * >(argp1);
  {
    try {
      result = (unsigned long)(*arg1)->GetTimestamp();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *btkAnalog_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_btkAnalog, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_btkAnalogData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAnalogData *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_btkAnalogData",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_btkAnalogData" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (btkAnalogData *)new btkAnalogData(arg1);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkAnalogData, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalogData_Clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalogData *arg1 = (btkAnalogData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< btkAnalogData > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAnalogData_Clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalogData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalogData_Clone" "', argument " "1"" of type '" "btkAnalogData *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalogData * >(argp1);
  {
    try {
      result = (arg1)->Clone();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkAnalogData(static_cast< const btkAnalogData& >(result))), SWIGTYPE_p_btkAnalogData, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalogData___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalogData *arg1 = (btkAnalogData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAnalogData_impl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAnalogData___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalogData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalogData___deref__" "', argument " "1"" of type '" "btkAnalogData const *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalogData * >(argp1);
  {
    try {
      result = (btkAnalogData_impl *)((btkAnalogData const *)arg1)->operator ->();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkAnalogData_impl, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalogData_GetValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalogData *arg1 = (btkAnalogData *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAnalogData_GetValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalogData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalogData_GetValue" "', argument " "1"" of type '" "btkAnalogData const *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalogData * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkAnalogData_GetValue" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)btkAnalogData_GetValue((btkAnalogData const *)arg1,arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalogData_SetValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalogData *arg1 = (btkAnalogData *) 0 ;
  int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkAnalogData_SetValue",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalogData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalogData_SetValue" "', argument " "1"" of type '" "btkAnalogData *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalogData * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkAnalogData_SetValue" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkAnalogData_SetValue" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      btkAnalogData_SetValue(arg1,arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_btkAnalogData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalogData *arg1 = (btkAnalogData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_btkAnalogData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalogData, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_btkAnalogData" "', argument " "1"" of type '" "btkAnalogData *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalogData * >(argp1);
  {
    try {
      delete arg1;
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalogData_GetValues(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalogData *arg1 = (btkAnalogData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btk::Analog::Values *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAnalogData_GetValues",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalogData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalogData_GetValues" "', argument " "1"" of type '" "btkAnalogData const *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalogData * >(argp1);
  {
    try {
      result = (btk::Analog::Values *) &(*arg1)->GetValues();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  {
    ConvertFromEigenToNumPyMatrix<btk::Analog::Values>(&resultobj, result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalogData_SetValues(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalogData *arg1 = (btkAnalogData *) 0 ;
  btk::Analog::Values *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  btk::Analog::Values temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAnalogData_SetValues",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalogData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalogData_SetValues" "', argument " "1"" of type '" "btkAnalogData *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalogData * >(argp1);
  {
    // In: const&
    ConvertFromNumpyToEigenMatrix<btk::Analog::Values>(&temp2, obj1);
    arg2 = &temp2;
  }
  {
    try {
      (*arg1)->SetValues((btk::Analog::Values const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalogData_Resize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalogData *arg1 = (btkAnalogData *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAnalogData_Resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalogData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalogData_Resize" "', argument " "1"" of type '" "btkAnalogData *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalogData * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkAnalogData_Resize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->Resize(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalogData_Update(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalogData *arg1 = (btkAnalogData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAnalogData_Update",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalogData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalogData_Update" "', argument " "1"" of type '" "btkAnalogData *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalogData * >(argp1);
  {
    try {
      (*arg1)->Update();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalogData_GetTimestamp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalogData *arg1 = (btkAnalogData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAnalogData_GetTimestamp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalogData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalogData_GetTimestamp" "', argument " "1"" of type '" "btkAnalogData const *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalogData * >(argp1);
  {
    try {
      result = (unsigned long)(*arg1)->GetTimestamp();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *btkAnalogData_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_btkAnalogData, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_btkPoint__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  btkPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_btkPoint",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_btkPoint" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (btkPoint *)new btkPoint(arg1);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkPoint, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkPoint__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int arg2 ;
  btkPoint_impl::Type arg3 ;
  std::string *arg4 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  btkPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_btkPoint",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkPoint" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkPoint" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_btkPoint" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_btkPoint" "', argument " "3"" of type '" "btkPoint_impl::Type""'");
  } 
  arg3 = static_cast< btkPoint_impl::Type >(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_btkPoint" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkPoint" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      result = (btkPoint *)new btkPoint((std::string const &)*arg1,arg2,arg3,(std::string const &)*arg4);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkPoint, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkPoint__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int arg2 ;
  btkPoint_impl::Type arg3 ;
  int res1 = SWIG_OLDOBJ ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  btkPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_btkPoint",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkPoint" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkPoint" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_btkPoint" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_btkPoint" "', argument " "3"" of type '" "btkPoint_impl::Type""'");
  } 
  arg3 = static_cast< btkPoint_impl::Type >(val3);
  {
    try {
      result = (btkPoint *)new btkPoint((std::string const &)*arg1,arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkPoint, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkPoint__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int arg2 ;
  int res1 = SWIG_OLDOBJ ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  btkPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_btkPoint",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkPoint" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkPoint" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_btkPoint" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (btkPoint *)new btkPoint((std::string const &)*arg1,arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkPoint, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkPoint(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_btkPoint__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_btkPoint__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_btkPoint__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_btkPoint__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_btkPoint'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkPoint::btkPoint(int)\n"
    "    btkPoint::btkPoint(std::string const &,int,btkPoint_impl::Type,std::string const &)\n"
    "    btkPoint::btkPoint(std::string const &,int,btkPoint_impl::Type)\n"
    "    btkPoint::btkPoint(std::string const &,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkPoint_Clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPoint *arg1 = (btkPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< btkPoint > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkPoint_Clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPoint_Clone" "', argument " "1"" of type '" "btkPoint *""'"); 
  }
  arg1 = reinterpret_cast< btkPoint * >(argp1);
  {
    try {
      result = (arg1)->Clone();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkPoint(static_cast< const btkPoint& >(result))), SWIGTYPE_p_btkPoint, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPoint___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPoint *arg1 = (btkPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkPoint_impl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkPoint___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPoint___deref__" "', argument " "1"" of type '" "btkPoint const *""'"); 
  }
  arg1 = reinterpret_cast< btkPoint * >(argp1);
  {
    try {
      result = (btkPoint_impl *)((btkPoint const *)arg1)->operator ->();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkPoint_impl, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPoint_GetValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPoint *arg1 = (btkPoint *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkPoint_GetValue",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPoint_GetValue" "', argument " "1"" of type '" "btkPoint const *""'"); 
  }
  arg1 = reinterpret_cast< btkPoint * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkPoint_GetValue" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkPoint_GetValue" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (double)btkPoint_GetValue((btkPoint const *)arg1,arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPoint_SetValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPoint *arg1 = (btkPoint *) 0 ;
  int arg2 ;
  int arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:btkPoint_SetValue",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPoint_SetValue" "', argument " "1"" of type '" "btkPoint *""'"); 
  }
  arg1 = reinterpret_cast< btkPoint * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkPoint_SetValue" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkPoint_SetValue" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "btkPoint_SetValue" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      btkPoint_SetValue(arg1,arg2,arg3,arg4);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPoint_GetResidual(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPoint *arg1 = (btkPoint *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkPoint_GetResidual",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPoint_GetResidual" "', argument " "1"" of type '" "btkPoint const *""'"); 
  }
  arg1 = reinterpret_cast< btkPoint * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkPoint_GetResidual" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)btkPoint_GetResidual((btkPoint const *)arg1,arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPoint_SetResidual(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPoint *arg1 = (btkPoint *) 0 ;
  int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkPoint_SetResidual",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPoint_SetResidual" "', argument " "1"" of type '" "btkPoint *""'"); 
  }
  arg1 = reinterpret_cast< btkPoint * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkPoint_SetResidual" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkPoint_SetResidual" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      btkPoint_SetResidual(arg1,arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_btkPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPoint *arg1 = (btkPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_btkPoint",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPoint, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_btkPoint" "', argument " "1"" of type '" "btkPoint *""'"); 
  }
  arg1 = reinterpret_cast< btkPoint * >(argp1);
  {
    try {
      delete arg1;
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPoint_GetLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPoint *arg1 = (btkPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkPoint_GetLabel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPoint_GetLabel" "', argument " "1"" of type '" "btkPoint const *""'"); 
  }
  arg1 = reinterpret_cast< btkPoint * >(argp1);
  {
    try {
      result = (std::string *) &(*arg1)->GetLabel();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPoint_SetLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPoint *arg1 = (btkPoint *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkPoint_SetLabel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPoint_SetLabel" "', argument " "1"" of type '" "btkPoint *""'"); 
  }
  arg1 = reinterpret_cast< btkPoint * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkPoint_SetLabel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkPoint_SetLabel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->SetLabel((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPoint_GetDescription(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPoint *arg1 = (btkPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkPoint_GetDescription",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPoint_GetDescription" "', argument " "1"" of type '" "btkPoint const *""'"); 
  }
  arg1 = reinterpret_cast< btkPoint * >(argp1);
  {
    try {
      result = (std::string *) &(*arg1)->GetDescription();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPoint_SetDescription(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPoint *arg1 = (btkPoint *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkPoint_SetDescription",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPoint_SetDescription" "', argument " "1"" of type '" "btkPoint *""'"); 
  }
  arg1 = reinterpret_cast< btkPoint * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkPoint_SetDescription" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkPoint_SetDescription" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->SetDescription((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPoint_GetValues(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPoint *arg1 = (btkPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btk::Point::Values *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkPoint_GetValues",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPoint_GetValues" "', argument " "1"" of type '" "btkPoint const *""'"); 
  }
  arg1 = reinterpret_cast< btkPoint * >(argp1);
  {
    try {
      result = (btk::Point::Values *) &(*arg1)->GetValues();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  {
    ConvertFromEigenToNumPyMatrix<btk::Point::Values>(&resultobj, result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPoint_SetValues(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPoint *arg1 = (btkPoint *) 0 ;
  btk::Point::Values *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  btk::Point::Values temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkPoint_SetValues",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPoint_SetValues" "', argument " "1"" of type '" "btkPoint *""'"); 
  }
  arg1 = reinterpret_cast< btkPoint * >(argp1);
  {
    // In: const&
    ConvertFromNumpyToEigenMatrix<btk::Point::Values>(&temp2, obj1);
    arg2 = &temp2;
  }
  {
    try {
      (*arg1)->SetValues((btk::Point::Values const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPoint_GetResiduals(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPoint *arg1 = (btkPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btk::Point::Residuals *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkPoint_GetResiduals",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPoint_GetResiduals" "', argument " "1"" of type '" "btkPoint const *""'"); 
  }
  arg1 = reinterpret_cast< btkPoint * >(argp1);
  {
    try {
      result = (btk::Point::Residuals *) &(*arg1)->GetResiduals();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  {
    ConvertFromEigenToNumPyMatrix<btk::Point::Residuals>(&resultobj, result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPoint_SetResiduals(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPoint *arg1 = (btkPoint *) 0 ;
  btk::Point::Residuals *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  btk::Point::Residuals temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkPoint_SetResiduals",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPoint_SetResiduals" "', argument " "1"" of type '" "btkPoint *""'"); 
  }
  arg1 = reinterpret_cast< btkPoint * >(argp1);
  {
    // In: const&
    ConvertFromNumpyToEigenMatrix<btk::Point::Residuals>(&temp2, obj1);
    arg2 = &temp2;
  }
  {
    try {
      (*arg1)->SetResiduals((btk::Point::Residuals const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPoint_GetFrameNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPoint *arg1 = (btkPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkPoint_GetFrameNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPoint_GetFrameNumber" "', argument " "1"" of type '" "btkPoint const *""'"); 
  }
  arg1 = reinterpret_cast< btkPoint * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetFrameNumber();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPoint_SetFrameNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPoint *arg1 = (btkPoint *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkPoint_SetFrameNumber",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPoint_SetFrameNumber" "', argument " "1"" of type '" "btkPoint *""'"); 
  }
  arg1 = reinterpret_cast< btkPoint * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkPoint_SetFrameNumber" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->SetFrameNumber(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPoint_GetType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPoint *arg1 = (btkPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkPoint_impl::Type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkPoint_GetType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPoint_GetType" "', argument " "1"" of type '" "btkPoint const *""'"); 
  }
  arg1 = reinterpret_cast< btkPoint * >(argp1);
  {
    try {
      result = (btkPoint_impl::Type)(*arg1)->GetType();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPoint_SetType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPoint *arg1 = (btkPoint *) 0 ;
  btkPoint_impl::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkPoint_SetType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPoint_SetType" "', argument " "1"" of type '" "btkPoint *""'"); 
  }
  arg1 = reinterpret_cast< btkPoint * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkPoint_SetType" "', argument " "2"" of type '" "btkPoint_impl::Type""'");
  } 
  arg2 = static_cast< btkPoint_impl::Type >(val2);
  {
    try {
      (*arg1)->SetType(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPoint_GetData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPoint *arg1 = (btkPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< btkPointData > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkPoint_GetData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPoint_GetData" "', argument " "1"" of type '" "btkPoint const *""'"); 
  }
  arg1 = reinterpret_cast< btkPoint * >(argp1);
  {
    try {
      result = (*arg1)->GetData();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkPointData(static_cast< const btkPointData& >(result))), SWIGTYPE_p_btkPointData, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPoint_SetData__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPoint *arg1 = (btkPoint *) 0 ;
  SwigValueWrapper< btkPointData > arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkPoint_SetData",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPoint_SetData" "', argument " "1"" of type '" "btkPoint *""'"); 
  }
  arg1 = reinterpret_cast< btkPoint * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkPointData,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkPoint_SetData" "', argument " "2"" of type '" "btkPointData""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkPoint_SetData" "', argument " "2"" of type '" "btkPointData""'");
    } else {
      btkPointData * temp = reinterpret_cast< btkPointData * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkPoint_SetData" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (*arg1)->SetData(arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPoint_SetData__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPoint *arg1 = (btkPoint *) 0 ;
  SwigValueWrapper< btkPointData > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkPoint_SetData",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPoint_SetData" "', argument " "1"" of type '" "btkPoint *""'"); 
  }
  arg1 = reinterpret_cast< btkPoint * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkPointData,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkPoint_SetData" "', argument " "2"" of type '" "btkPointData""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkPoint_SetData" "', argument " "2"" of type '" "btkPointData""'");
    } else {
      btkPointData * temp = reinterpret_cast< btkPointData * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->SetData(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPoint_SetData(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkPoint, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_btkPointData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_btkPoint_SetData__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkPoint, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_btkPointData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_btkPoint_SetData__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkPoint_SetData'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkPoint_impl::SetData(btkPointData,bool)\n"
    "    btkPoint_impl::SetData(btkPointData)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkPoint_SetDataSlice__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPoint *arg1 = (btkPoint *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:btkPoint_SetDataSlice",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPoint_SetDataSlice" "', argument " "1"" of type '" "btkPoint *""'"); 
  }
  arg1 = reinterpret_cast< btkPoint * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkPoint_SetDataSlice" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkPoint_SetDataSlice" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "btkPoint_SetDataSlice" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "btkPoint_SetDataSlice" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "btkPoint_SetDataSlice" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    try {
      (*arg1)->SetDataSlice(arg2,arg3,arg4,arg5,arg6);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPoint_SetDataSlice__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPoint *arg1 = (btkPoint *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:btkPoint_SetDataSlice",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPoint_SetDataSlice" "', argument " "1"" of type '" "btkPoint *""'"); 
  }
  arg1 = reinterpret_cast< btkPoint * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkPoint_SetDataSlice" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkPoint_SetDataSlice" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "btkPoint_SetDataSlice" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "btkPoint_SetDataSlice" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      (*arg1)->SetDataSlice(arg2,arg3,arg4,arg5);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPoint_SetDataSlice(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkPoint, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_btkPoint_SetDataSlice__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkPoint, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_btkPoint_SetDataSlice__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkPoint_SetDataSlice'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkPoint_impl::SetDataSlice(int,double,double,double,double)\n"
    "    btkPoint_impl::SetDataSlice(int,double,double,double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkPoint_Update(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPoint *arg1 = (btkPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkPoint_Update",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPoint_Update" "', argument " "1"" of type '" "btkPoint *""'"); 
  }
  arg1 = reinterpret_cast< btkPoint * >(argp1);
  {
    try {
      (*arg1)->Update();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPoint_GetTimestamp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPoint *arg1 = (btkPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkPoint_GetTimestamp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPoint_GetTimestamp" "', argument " "1"" of type '" "btkPoint const *""'"); 
  }
  arg1 = reinterpret_cast< btkPoint * >(argp1);
  {
    try {
      result = (unsigned long)(*arg1)->GetTimestamp();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *btkPoint_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_btkPoint, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_btkPointData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  btkPointData *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_btkPointData",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_btkPointData" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (btkPointData *)new btkPointData(arg1);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkPointData, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPointData_Clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPointData *arg1 = (btkPointData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< btkPointData > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkPointData_Clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPointData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPointData_Clone" "', argument " "1"" of type '" "btkPointData *""'"); 
  }
  arg1 = reinterpret_cast< btkPointData * >(argp1);
  {
    try {
      result = (arg1)->Clone();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkPointData(static_cast< const btkPointData& >(result))), SWIGTYPE_p_btkPointData, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPointData___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPointData *arg1 = (btkPointData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkPointData_impl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkPointData___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPointData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPointData___deref__" "', argument " "1"" of type '" "btkPointData const *""'"); 
  }
  arg1 = reinterpret_cast< btkPointData * >(argp1);
  {
    try {
      result = (btkPointData_impl *)((btkPointData const *)arg1)->operator ->();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkPointData_impl, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPointData_GetValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPointData *arg1 = (btkPointData *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkPointData_GetValue",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPointData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPointData_GetValue" "', argument " "1"" of type '" "btkPointData const *""'"); 
  }
  arg1 = reinterpret_cast< btkPointData * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkPointData_GetValue" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkPointData_GetValue" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (double)btkPointData_GetValue((btkPointData const *)arg1,arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPointData_SetValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPointData *arg1 = (btkPointData *) 0 ;
  int arg2 ;
  int arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:btkPointData_SetValue",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPointData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPointData_SetValue" "', argument " "1"" of type '" "btkPointData *""'"); 
  }
  arg1 = reinterpret_cast< btkPointData * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkPointData_SetValue" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkPointData_SetValue" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "btkPointData_SetValue" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      btkPointData_SetValue(arg1,arg2,arg3,arg4);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPointData_GetResidual(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPointData *arg1 = (btkPointData *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkPointData_GetResidual",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPointData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPointData_GetResidual" "', argument " "1"" of type '" "btkPointData const *""'"); 
  }
  arg1 = reinterpret_cast< btkPointData * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkPointData_GetResidual" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)btkPointData_GetResidual((btkPointData const *)arg1,arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPointData_SetResidual(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPointData *arg1 = (btkPointData *) 0 ;
  int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkPointData_SetResidual",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPointData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPointData_SetResidual" "', argument " "1"" of type '" "btkPointData *""'"); 
  }
  arg1 = reinterpret_cast< btkPointData * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkPointData_SetResidual" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkPointData_SetResidual" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      btkPointData_SetResidual(arg1,arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_btkPointData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPointData *arg1 = (btkPointData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_btkPointData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPointData, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_btkPointData" "', argument " "1"" of type '" "btkPointData *""'"); 
  }
  arg1 = reinterpret_cast< btkPointData * >(argp1);
  {
    try {
      delete arg1;
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPointData_GetValues(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPointData *arg1 = (btkPointData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btk::Point::Values *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkPointData_GetValues",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPointData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPointData_GetValues" "', argument " "1"" of type '" "btkPointData const *""'"); 
  }
  arg1 = reinterpret_cast< btkPointData * >(argp1);
  {
    try {
      result = (btk::Point::Values *) &(*arg1)->GetValues();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  {
    ConvertFromEigenToNumPyMatrix<btk::Point::Values>(&resultobj, result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPointData_SetValues(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPointData *arg1 = (btkPointData *) 0 ;
  btk::Point::Values *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  btk::Point::Values temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkPointData_SetValues",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPointData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPointData_SetValues" "', argument " "1"" of type '" "btkPointData *""'"); 
  }
  arg1 = reinterpret_cast< btkPointData * >(argp1);
  {
    // In: const&
    ConvertFromNumpyToEigenMatrix<btk::Point::Values>(&temp2, obj1);
    arg2 = &temp2;
  }
  {
    try {
      (*arg1)->SetValues((btk::Point::Values const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPointData_GetResiduals(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPointData *arg1 = (btkPointData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btk::Point::Residuals *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkPointData_GetResiduals",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPointData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPointData_GetResiduals" "', argument " "1"" of type '" "btkPointData const *""'"); 
  }
  arg1 = reinterpret_cast< btkPointData * >(argp1);
  {
    try {
      result = (btk::Point::Residuals *) &(*arg1)->GetResiduals();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  {
    ConvertFromEigenToNumPyMatrix<btk::Point::Residuals>(&resultobj, result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPointData_SetResiduals(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPointData *arg1 = (btkPointData *) 0 ;
  btk::Point::Residuals *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  btk::Point::Residuals temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkPointData_SetResiduals",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPointData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPointData_SetResiduals" "', argument " "1"" of type '" "btkPointData *""'"); 
  }
  arg1 = reinterpret_cast< btkPointData * >(argp1);
  {
    // In: const&
    ConvertFromNumpyToEigenMatrix<btk::Point::Residuals>(&temp2, obj1);
    arg2 = &temp2;
  }
  {
    try {
      (*arg1)->SetResiduals((btk::Point::Residuals const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPointData_Resize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPointData *arg1 = (btkPointData *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkPointData_Resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPointData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPointData_Resize" "', argument " "1"" of type '" "btkPointData *""'"); 
  }
  arg1 = reinterpret_cast< btkPointData * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkPointData_Resize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->Resize(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPointData_Update(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPointData *arg1 = (btkPointData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkPointData_Update",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPointData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPointData_Update" "', argument " "1"" of type '" "btkPointData *""'"); 
  }
  arg1 = reinterpret_cast< btkPointData * >(argp1);
  {
    try {
      (*arg1)->Update();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPointData_GetTimestamp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPointData *arg1 = (btkPointData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkPointData_GetTimestamp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPointData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPointData_GetTimestamp" "', argument " "1"" of type '" "btkPointData const *""'"); 
  }
  arg1 = reinterpret_cast< btkPointData * >(argp1);
  {
    try {
      result = (unsigned long)(*arg1)->GetTimestamp();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *btkPointData_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_btkPointData, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_btkForcePlatform_Clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatform *arg1 = (btkForcePlatform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< btkForcePlatform > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkForcePlatform_Clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatform_Clone" "', argument " "1"" of type '" "btkForcePlatform *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatform * >(argp1);
  {
    try {
      result = (arg1)->Clone();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkForcePlatform(static_cast< const btkForcePlatform& >(result))), SWIGTYPE_p_btkForcePlatform, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatform___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatform *arg1 = (btkForcePlatform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkForcePlatform_impl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkForcePlatform___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatform___deref__" "', argument " "1"" of type '" "btkForcePlatform const *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatform * >(argp1);
  {
    try {
      result = (btkForcePlatform_impl *)((btkForcePlatform const *)arg1)->operator ->();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkForcePlatform_impl, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_btkForcePlatform(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatform *arg1 = (btkForcePlatform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_btkForcePlatform",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatform, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_btkForcePlatform" "', argument " "1"" of type '" "btkForcePlatform *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatform * >(argp1);
  {
    try {
      delete arg1;
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatform_Begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatform *arg1 = (btkForcePlatform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkForcePlatform_impl::Iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkForcePlatform_Begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatform_Begin" "', argument " "1"" of type '" "btkForcePlatform *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatform * >(argp1);
  {
    try {
      result = (*arg1)->Begin();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkForcePlatform_impl::Iterator(static_cast< const btkForcePlatform_impl::Iterator& >(result))), SWIGTYPE_p_btkAnalogIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatform_End(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatform *arg1 = (btkForcePlatform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkForcePlatform_impl::Iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkForcePlatform_End",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatform_End" "', argument " "1"" of type '" "btkForcePlatform *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatform * >(argp1);
  {
    try {
      result = (*arg1)->End();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkForcePlatform_impl::Iterator(static_cast< const btkForcePlatform_impl::Iterator& >(result))), SWIGTYPE_p_btkAnalogIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatform_GetChannelNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatform *arg1 = (btkForcePlatform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkForcePlatform_GetChannelNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatform_GetChannelNumber" "', argument " "1"" of type '" "btkForcePlatform const *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatform * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetChannelNumber();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatform_GetChannel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatform *arg1 = (btkForcePlatform *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  btkAnalog result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkForcePlatform_GetChannel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatform_GetChannel" "', argument " "1"" of type '" "btkForcePlatform *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatform * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkForcePlatform_GetChannel" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (*arg1)->GetChannel(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkAnalog(static_cast< const btkAnalog& >(result))), SWIGTYPE_p_btkAnalog, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatform_SetChannel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatform *arg1 = (btkForcePlatform *) 0 ;
  int arg2 ;
  btkAnalog arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkForcePlatform_SetChannel",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatform_SetChannel" "', argument " "1"" of type '" "btkForcePlatform *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatform * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkForcePlatform_SetChannel" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkAnalog,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkForcePlatform_SetChannel" "', argument " "3"" of type '" "btkAnalog""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkForcePlatform_SetChannel" "', argument " "3"" of type '" "btkAnalog""'");
    } else {
      btkAnalog * temp = reinterpret_cast< btkAnalog * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->SetChannel(arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatform_GetChannels(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatform *arg1 = (btkForcePlatform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAnalogCollection result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkForcePlatform_GetChannels",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatform_GetChannels" "', argument " "1"" of type '" "btkForcePlatform const *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatform * >(argp1);
  {
    try {
      result = (*arg1)->GetChannels();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkAnalogCollection(static_cast< const btkAnalogCollection& >(result))), SWIGTYPE_p_btkAnalogCollection, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatform_GetOrigin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatform *arg1 = (btkForcePlatform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btk::ForcePlatform::Origin *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkForcePlatform_GetOrigin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatform_GetOrigin" "', argument " "1"" of type '" "btkForcePlatform const *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatform * >(argp1);
  {
    try {
      result = (btk::ForcePlatform::Origin *) &(*arg1)->GetOrigin();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  {
    ConvertFromEigenToNumPyMatrix<btk::ForcePlatform::Origin>(&resultobj, result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatform__set_origin_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatform *arg1 = (btkForcePlatform *) 0 ;
  btk::ForcePlatform::Origin *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  btk::ForcePlatform::Origin temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkForcePlatform__set_origin_1",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatform__set_origin_1" "', argument " "1"" of type '" "btkForcePlatform *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatform * >(argp1);
  {
    // In: const&
    ConvertFromNumpyToEigenMatrix<btk::ForcePlatform::Origin>(&temp2, obj1);
    arg2 = &temp2;
  }
  {
    try {
      (*arg1)->SetOrigin((btk::ForcePlatform::Origin const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatform__set_origin_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatform *arg1 = (btkForcePlatform *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:btkForcePlatform__set_origin_2",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatform__set_origin_2" "', argument " "1"" of type '" "btkForcePlatform *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatform * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkForcePlatform__set_origin_2" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkForcePlatform__set_origin_2" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "btkForcePlatform__set_origin_2" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      (*arg1)->SetOrigin(arg2,arg3,arg4);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatform_GetCorner(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatform *arg1 = (btkForcePlatform *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  btk::ForcePlatform::Corner result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkForcePlatform_GetCorner",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatform_GetCorner" "', argument " "1"" of type '" "btkForcePlatform const *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatform * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkForcePlatform_GetCorner" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (*arg1)->GetCorner(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  {
    ConvertFromEigenToNumPyMatrix<btk::ForcePlatform::Corner>(&resultobj, &result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatform__set_corner_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatform *arg1 = (btkForcePlatform *) 0 ;
  int arg2 ;
  int arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:btkForcePlatform__set_corner_2",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatform__set_corner_2" "', argument " "1"" of type '" "btkForcePlatform *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatform * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkForcePlatform__set_corner_2" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkForcePlatform__set_corner_2" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "btkForcePlatform__set_corner_2" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      (*arg1)->SetCorner(arg2,arg3,arg4);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatform__set_corner_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatform *arg1 = (btkForcePlatform *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:btkForcePlatform__set_corner_3",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatform__set_corner_3" "', argument " "1"" of type '" "btkForcePlatform *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatform * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkForcePlatform__set_corner_3" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkForcePlatform__set_corner_3" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "btkForcePlatform__set_corner_3" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "btkForcePlatform__set_corner_3" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      (*arg1)->SetCorner(arg2,arg3,arg4,arg5);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatform__set_corner_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatform *arg1 = (btkForcePlatform *) 0 ;
  int arg2 ;
  btk::ForcePlatform::Corner *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  btk::ForcePlatform::Corner temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkForcePlatform__set_corner_1",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatform__set_corner_1" "', argument " "1"" of type '" "btkForcePlatform *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatform * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkForcePlatform__set_corner_1" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    // In: const&
    ConvertFromNumpyToEigenMatrix<btk::ForcePlatform::Corner>(&temp3, obj2);
    arg3 = &temp3;
  }
  {
    try {
      (*arg1)->SetCorner(arg2,(btk::ForcePlatform::Corner const &)*arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatform_GetCorners(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatform *arg1 = (btkForcePlatform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btk::ForcePlatform::Corners *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkForcePlatform_GetCorners",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatform_GetCorners" "', argument " "1"" of type '" "btkForcePlatform const *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatform * >(argp1);
  {
    try {
      result = (btk::ForcePlatform::Corners *) &(*arg1)->GetCorners();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  {
    ConvertFromEigenToNumPyMatrix<btk::ForcePlatform::Corners>(&resultobj, result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatform_SetCorners(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatform *arg1 = (btkForcePlatform *) 0 ;
  btk::ForcePlatform::Corners *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  btk::ForcePlatform::Corners temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkForcePlatform_SetCorners",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatform_SetCorners" "', argument " "1"" of type '" "btkForcePlatform *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatform * >(argp1);
  {
    // In: const&
    ConvertFromNumpyToEigenMatrix<btk::ForcePlatform::Corners>(&temp2, obj1);
    arg2 = &temp2;
  }
  {
    try {
      (*arg1)->SetCorners((btk::ForcePlatform::Corners const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatform_GetCalMatrix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatform *arg1 = (btkForcePlatform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btk::ForcePlatform::CalMatrix *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkForcePlatform_GetCalMatrix",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatform_GetCalMatrix" "', argument " "1"" of type '" "btkForcePlatform const *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatform * >(argp1);
  {
    try {
      result = (btk::ForcePlatform::CalMatrix *) &(*arg1)->GetCalMatrix();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  {
    ConvertFromEigenToNumPyMatrix<btk::ForcePlatform::CalMatrix>(&resultobj, result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatform_SetCalMatrix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatform *arg1 = (btkForcePlatform *) 0 ;
  btk::ForcePlatform::CalMatrix *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  btk::ForcePlatform::CalMatrix temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkForcePlatform_SetCalMatrix",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatform_SetCalMatrix" "', argument " "1"" of type '" "btkForcePlatform *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatform * >(argp1);
  {
    // In: const&
    ConvertFromNumpyToEigenMatrix<btk::ForcePlatform::CalMatrix>(&temp2, obj1);
    arg2 = &temp2;
  }
  {
    try {
      (*arg1)->SetCalMatrix((btk::ForcePlatform::CalMatrix const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatform_GetType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatform *arg1 = (btkForcePlatform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkForcePlatform_GetType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatform_GetType" "', argument " "1"" of type '" "btkForcePlatform const *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatform * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetType();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatform_Update(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatform *arg1 = (btkForcePlatform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkForcePlatform_Update",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatform_Update" "', argument " "1"" of type '" "btkForcePlatform *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatform * >(argp1);
  {
    try {
      (*arg1)->Update();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatform_GetTimestamp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatform *arg1 = (btkForcePlatform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkForcePlatform_GetTimestamp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatform_GetTimestamp" "', argument " "1"" of type '" "btkForcePlatform const *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatform * >(argp1);
  {
    try {
      result = (unsigned long)(*arg1)->GetTimestamp();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *btkForcePlatform_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_btkForcePlatform, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_btkForcePlatformType1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< btkForcePlatform > result;
  
  if (!PyArg_ParseTuple(args,(char *)":btkForcePlatformType1")) SWIG_fail;
  {
    try {
      result = btkForcePlatformType1();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkForcePlatform(static_cast< const btkForcePlatform& >(result))), SWIGTYPE_p_btkForcePlatform, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatformType2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< btkForcePlatform > result;
  
  if (!PyArg_ParseTuple(args,(char *)":btkForcePlatformType2")) SWIG_fail;
  {
    try {
      result = btkForcePlatformType2();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkForcePlatform(static_cast< const btkForcePlatform& >(result))), SWIGTYPE_p_btkForcePlatform, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatformType3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< btkForcePlatform > result;
  
  if (!PyArg_ParseTuple(args,(char *)":btkForcePlatformType3")) SWIG_fail;
  {
    try {
      result = btkForcePlatformType3();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkForcePlatform(static_cast< const btkForcePlatform& >(result))), SWIGTYPE_p_btkForcePlatform, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatformType4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< btkForcePlatform > result;
  
  if (!PyArg_ParseTuple(args,(char *)":btkForcePlatformType4")) SWIG_fail;
  {
    try {
      result = btkForcePlatformType4();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkForcePlatform(static_cast< const btkForcePlatform& >(result))), SWIGTYPE_p_btkForcePlatform, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatformType5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< btkForcePlatform > result;
  
  if (!PyArg_ParseTuple(args,(char *)":btkForcePlatformType5")) SWIG_fail;
  {
    try {
      result = btkForcePlatformType5();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkForcePlatform(static_cast< const btkForcePlatform& >(result))), SWIGTYPE_p_btkForcePlatform, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatformType6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< btkForcePlatform > result;
  
  if (!PyArg_ParseTuple(args,(char *)":btkForcePlatformType6")) SWIG_fail;
  {
    try {
      result = btkForcePlatformType6();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkForcePlatform(static_cast< const btkForcePlatform& >(result))), SWIGTYPE_p_btkForcePlatform, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkWrench__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  btkWrench *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_btkWrench",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkWrench" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkWrench" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (btkWrench *)new btkWrench((std::string const &)*arg1);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkWrench, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkWrench__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrench *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_btkWrench")) SWIG_fail;
  {
    try {
      result = (btkWrench *)new btkWrench();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkWrench, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkWrench__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  btkWrench *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_btkWrench",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_btkWrench" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (btkWrench *)new btkWrench(arg1);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkWrench, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkWrench__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int arg2 ;
  int res1 = SWIG_OLDOBJ ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  btkWrench *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_btkWrench",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkWrench" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkWrench" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_btkWrench" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (btkWrench *)new btkWrench((std::string const &)*arg1,arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkWrench, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkWrench(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_btkWrench__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_btkWrench__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_btkWrench__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_btkWrench__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_btkWrench'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkWrench::btkWrench(std::string const &)\n"
    "    btkWrench::btkWrench()\n"
    "    btkWrench::btkWrench(int)\n"
    "    btkWrench::btkWrench(std::string const &,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkWrench_Clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrench *arg1 = (btkWrench *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkWrench result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkWrench_Clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrench, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrench_Clone" "', argument " "1"" of type '" "btkWrench *""'"); 
  }
  arg1 = reinterpret_cast< btkWrench * >(argp1);
  {
    try {
      result = (arg1)->Clone();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkWrench(static_cast< const btkWrench& >(result))), SWIGTYPE_p_btkWrench, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkWrench___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrench *arg1 = (btkWrench *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkWrench_impl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkWrench___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrench, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrench___deref__" "', argument " "1"" of type '" "btkWrench const *""'"); 
  }
  arg1 = reinterpret_cast< btkWrench * >(argp1);
  {
    try {
      result = (btkWrench_impl *)((btkWrench const *)arg1)->operator ->();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkWrench_impl, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_btkWrench(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrench *arg1 = (btkWrench *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_btkWrench",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrench, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_btkWrench" "', argument " "1"" of type '" "btkWrench *""'"); 
  }
  arg1 = reinterpret_cast< btkWrench * >(argp1);
  {
    try {
      delete arg1;
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkWrench_GetPosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrench *arg1 = (btkWrench *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< btkPoint > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkWrench_GetPosition",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrench, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrench_GetPosition" "', argument " "1"" of type '" "btkWrench const *""'"); 
  }
  arg1 = reinterpret_cast< btkWrench * >(argp1);
  {
    try {
      result = (*arg1)->GetPosition();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkPoint(static_cast< const btkPoint& >(result))), SWIGTYPE_p_btkPoint, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkWrench_SetPosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrench *arg1 = (btkWrench *) 0 ;
  SwigValueWrapper< btkPoint > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkWrench_SetPosition",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrench, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrench_SetPosition" "', argument " "1"" of type '" "btkWrench *""'"); 
  }
  arg1 = reinterpret_cast< btkWrench * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkPoint,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkWrench_SetPosition" "', argument " "2"" of type '" "btkPoint const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkWrench_SetPosition" "', argument " "2"" of type '" "btkPoint const""'");
    } else {
      btkPoint * temp = reinterpret_cast< btkPoint * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->SetPosition(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkWrench_GetForce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrench *arg1 = (btkWrench *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< btkPoint > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkWrench_GetForce",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrench, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrench_GetForce" "', argument " "1"" of type '" "btkWrench const *""'"); 
  }
  arg1 = reinterpret_cast< btkWrench * >(argp1);
  {
    try {
      result = (*arg1)->GetForce();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkPoint(static_cast< const btkPoint& >(result))), SWIGTYPE_p_btkPoint, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkWrench_SetForce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrench *arg1 = (btkWrench *) 0 ;
  SwigValueWrapper< btkPoint > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkWrench_SetForce",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrench, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrench_SetForce" "', argument " "1"" of type '" "btkWrench *""'"); 
  }
  arg1 = reinterpret_cast< btkWrench * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkPoint,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkWrench_SetForce" "', argument " "2"" of type '" "btkPoint const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkWrench_SetForce" "', argument " "2"" of type '" "btkPoint const""'");
    } else {
      btkPoint * temp = reinterpret_cast< btkPoint * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->SetForce(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkWrench_GetMoment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrench *arg1 = (btkWrench *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< btkPoint > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkWrench_GetMoment",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrench, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrench_GetMoment" "', argument " "1"" of type '" "btkWrench const *""'"); 
  }
  arg1 = reinterpret_cast< btkWrench * >(argp1);
  {
    try {
      result = (*arg1)->GetMoment();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkPoint(static_cast< const btkPoint& >(result))), SWIGTYPE_p_btkPoint, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkWrench_SetMoment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrench *arg1 = (btkWrench *) 0 ;
  SwigValueWrapper< btkPoint > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkWrench_SetMoment",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrench, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrench_SetMoment" "', argument " "1"" of type '" "btkWrench *""'"); 
  }
  arg1 = reinterpret_cast< btkWrench * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkPoint,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkWrench_SetMoment" "', argument " "2"" of type '" "btkPoint const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkWrench_SetMoment" "', argument " "2"" of type '" "btkPoint const""'");
    } else {
      btkPoint * temp = reinterpret_cast< btkPoint * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->SetMoment(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkWrench_GetComponent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrench *arg1 = (btkWrench *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< btkPoint > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkWrench_GetComponent",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrench, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrench_GetComponent" "', argument " "1"" of type '" "btkWrench *""'"); 
  }
  arg1 = reinterpret_cast< btkWrench * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkWrench_GetComponent" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (*arg1)->GetComponent(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkPoint(static_cast< const btkPoint& >(result))), SWIGTYPE_p_btkPoint, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkWrench_SetFrameNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrench *arg1 = (btkWrench *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkWrench_SetFrameNumber",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrench, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrench_SetFrameNumber" "', argument " "1"" of type '" "btkWrench *""'"); 
  }
  arg1 = reinterpret_cast< btkWrench * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkWrench_SetFrameNumber" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->SetFrameNumber(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkWrench_Update(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrench *arg1 = (btkWrench *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkWrench_Update",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrench, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrench_Update" "', argument " "1"" of type '" "btkWrench *""'"); 
  }
  arg1 = reinterpret_cast< btkWrench * >(argp1);
  {
    try {
      (*arg1)->Update();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkWrench_GetTimestamp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrench *arg1 = (btkWrench *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkWrench_GetTimestamp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrench, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrench_GetTimestamp" "', argument " "1"" of type '" "btkWrench const *""'"); 
  }
  arg1 = reinterpret_cast< btkWrench * >(argp1);
  {
    try {
      result = (unsigned long)(*arg1)->GetTimestamp();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *btkWrench_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_btkWrench, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_btkIMU_Clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMU *arg1 = (btkIMU *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< btkIMU > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkIMU_Clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkIMU, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMU_Clone" "', argument " "1"" of type '" "btkIMU *""'"); 
  }
  arg1 = reinterpret_cast< btkIMU * >(argp1);
  {
    try {
      result = (arg1)->Clone();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkIMU(static_cast< const btkIMU& >(result))), SWIGTYPE_p_btkIMU, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMU___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMU *arg1 = (btkIMU *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkIMU_impl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkIMU___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkIMU, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMU___deref__" "', argument " "1"" of type '" "btkIMU const *""'"); 
  }
  arg1 = reinterpret_cast< btkIMU * >(argp1);
  {
    try {
      result = (btkIMU_impl *)((btkIMU const *)arg1)->operator ->();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkIMU_impl, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_btkIMU(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMU *arg1 = (btkIMU *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_btkIMU",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkIMU, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_btkIMU" "', argument " "1"" of type '" "btkIMU *""'"); 
  }
  arg1 = reinterpret_cast< btkIMU * >(argp1);
  {
    try {
      delete arg1;
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMU_GetLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMU *arg1 = (btkIMU *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkIMU_GetLabel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkIMU, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMU_GetLabel" "', argument " "1"" of type '" "btkIMU const *""'"); 
  }
  arg1 = reinterpret_cast< btkIMU * >(argp1);
  {
    try {
      result = (std::string *) &(*arg1)->GetLabel();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMU_SetLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMU *arg1 = (btkIMU *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkIMU_SetLabel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkIMU, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMU_SetLabel" "', argument " "1"" of type '" "btkIMU *""'"); 
  }
  arg1 = reinterpret_cast< btkIMU * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkIMU_SetLabel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkIMU_SetLabel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->SetLabel((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMU_GetDescription(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMU *arg1 = (btkIMU *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkIMU_GetDescription",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkIMU, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMU_GetDescription" "', argument " "1"" of type '" "btkIMU const *""'"); 
  }
  arg1 = reinterpret_cast< btkIMU * >(argp1);
  {
    try {
      result = (std::string *) &(*arg1)->GetDescription();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMU_SetDescription(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMU *arg1 = (btkIMU *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkIMU_SetDescription",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkIMU, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMU_SetDescription" "', argument " "1"" of type '" "btkIMU *""'"); 
  }
  arg1 = reinterpret_cast< btkIMU * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkIMU_SetDescription" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkIMU_SetDescription" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->SetDescription((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMU_SetChannels(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMU *arg1 = (btkIMU *) 0 ;
  btkAnalog arg2 ;
  btkAnalog arg3 ;
  btkAnalog arg4 ;
  btkAnalog arg5 ;
  btkAnalog arg6 ;
  btkAnalog arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:btkIMU_SetChannels",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkIMU, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMU_SetChannels" "', argument " "1"" of type '" "btkIMU *""'"); 
  }
  arg1 = reinterpret_cast< btkIMU * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkAnalog,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkIMU_SetChannels" "', argument " "2"" of type '" "btkAnalog""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkIMU_SetChannels" "', argument " "2"" of type '" "btkAnalog""'");
    } else {
      btkAnalog * temp = reinterpret_cast< btkAnalog * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkAnalog,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkIMU_SetChannels" "', argument " "3"" of type '" "btkAnalog""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkIMU_SetChannels" "', argument " "3"" of type '" "btkAnalog""'");
    } else {
      btkAnalog * temp = reinterpret_cast< btkAnalog * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_btkAnalog,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "btkIMU_SetChannels" "', argument " "4"" of type '" "btkAnalog""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkIMU_SetChannels" "', argument " "4"" of type '" "btkAnalog""'");
    } else {
      btkAnalog * temp = reinterpret_cast< btkAnalog * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_btkAnalog,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "btkIMU_SetChannels" "', argument " "5"" of type '" "btkAnalog""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkIMU_SetChannels" "', argument " "5"" of type '" "btkAnalog""'");
    } else {
      btkAnalog * temp = reinterpret_cast< btkAnalog * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_btkAnalog,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "btkIMU_SetChannels" "', argument " "6"" of type '" "btkAnalog""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkIMU_SetChannels" "', argument " "6"" of type '" "btkAnalog""'");
    } else {
      btkAnalog * temp = reinterpret_cast< btkAnalog * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  {
    res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_btkAnalog,  0  | 0);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "btkIMU_SetChannels" "', argument " "7"" of type '" "btkAnalog""'"); 
    }  
    if (!argp7) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkIMU_SetChannels" "', argument " "7"" of type '" "btkAnalog""'");
    } else {
      btkAnalog * temp = reinterpret_cast< btkAnalog * >(argp7);
      arg7 = *temp;
      if (SWIG_IsNewObj(res7)) delete temp;
    }
  }
  {
    try {
      (*arg1)->SetChannels(arg2,arg3,arg4,arg5,arg6,arg7);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMU_GetChannels(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMU *arg1 = (btkIMU *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAnalogCollection result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkIMU_GetChannels",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkIMU, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMU_GetChannels" "', argument " "1"" of type '" "btkIMU *""'"); 
  }
  arg1 = reinterpret_cast< btkIMU * >(argp1);
  {
    try {
      result = (*arg1)->GetChannels();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkAnalogCollection(static_cast< const btkAnalogCollection& >(result))), SWIGTYPE_p_btkAnalogCollection, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMU_SetChannel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMU *arg1 = (btkIMU *) 0 ;
  int arg2 ;
  btkAnalog arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkIMU_SetChannel",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkIMU, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMU_SetChannel" "', argument " "1"" of type '" "btkIMU *""'"); 
  }
  arg1 = reinterpret_cast< btkIMU * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkIMU_SetChannel" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkAnalog,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkIMU_SetChannel" "', argument " "3"" of type '" "btkAnalog""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkIMU_SetChannel" "', argument " "3"" of type '" "btkAnalog""'");
    } else {
      btkAnalog * temp = reinterpret_cast< btkAnalog * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->SetChannel(arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMU_GetChannel__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMU *arg1 = (btkIMU *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  btkAnalog result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkIMU_GetChannel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkIMU, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMU_GetChannel" "', argument " "1"" of type '" "btkIMU *""'"); 
  }
  arg1 = reinterpret_cast< btkIMU * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkIMU_GetChannel" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (*arg1)->GetChannel(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkAnalog(static_cast< const btkAnalog& >(result))), SWIGTYPE_p_btkAnalog, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMU_GetChannel__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMU *arg1 = (btkIMU *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  btkAnalog result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkIMU_GetChannel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkIMU, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMU_GetChannel" "', argument " "1"" of type '" "btkIMU *""'"); 
  }
  arg1 = reinterpret_cast< btkIMU * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkIMU_GetChannel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkIMU_GetChannel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (*arg1)->GetChannel((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkAnalog(static_cast< const btkAnalog& >(result))), SWIGTYPE_p_btkAnalog, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMU_GetChannel(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkIMU, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_btkIMU_GetChannel__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkIMU, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_btkIMU_GetChannel__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkIMU_GetChannel'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkIMU_impl::GetChannel(int)\n"
    "    btkIMU_impl::GetChannel(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkIMU_GetChannelNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMU *arg1 = (btkIMU *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkIMU_GetChannelNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkIMU, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMU_GetChannelNumber" "', argument " "1"" of type '" "btkIMU const *""'"); 
  }
  arg1 = reinterpret_cast< btkIMU * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetChannelNumber();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMU_GetType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMU *arg1 = (btkIMU *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkIMU_GetType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkIMU, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMU_GetType" "', argument " "1"" of type '" "btkIMU const *""'"); 
  }
  arg1 = reinterpret_cast< btkIMU * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetType();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMU_GetFrameNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMU *arg1 = (btkIMU *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkIMU_GetFrameNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkIMU, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMU_GetFrameNumber" "', argument " "1"" of type '" "btkIMU const *""'"); 
  }
  arg1 = reinterpret_cast< btkIMU * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetFrameNumber();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMU_SetFrameNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMU *arg1 = (btkIMU *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkIMU_SetFrameNumber",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkIMU, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMU_SetFrameNumber" "', argument " "1"" of type '" "btkIMU *""'"); 
  }
  arg1 = reinterpret_cast< btkIMU * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkIMU_SetFrameNumber" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->SetFrameNumber(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMU_GetFrequency(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMU *arg1 = (btkIMU *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkIMU_GetFrequency",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkIMU, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMU_GetFrequency" "', argument " "1"" of type '" "btkIMU const *""'"); 
  }
  arg1 = reinterpret_cast< btkIMU * >(argp1);
  {
    try {
      result = (double)(*arg1)->GetFrequency();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMU_SetFrequency(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMU *arg1 = (btkIMU *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkIMU_SetFrequency",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkIMU, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMU_SetFrequency" "', argument " "1"" of type '" "btkIMU *""'"); 
  }
  arg1 = reinterpret_cast< btkIMU * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkIMU_SetFrequency" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (*arg1)->SetFrequency(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMU_GetCalMatrix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMU *arg1 = (btkIMU *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btk::IMU::CalMatrix *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkIMU_GetCalMatrix",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkIMU, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMU_GetCalMatrix" "', argument " "1"" of type '" "btkIMU const *""'"); 
  }
  arg1 = reinterpret_cast< btkIMU * >(argp1);
  {
    try {
      result = (btk::IMU::CalMatrix *) &(*arg1)->GetCalMatrix();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  {
    ConvertFromEigenToNumPyMatrix<btk::IMU::CalMatrix>(&resultobj, result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMU_SetCalMatrix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMU *arg1 = (btkIMU *) 0 ;
  btk::IMU::CalMatrix *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  btk::IMU::CalMatrix temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkIMU_SetCalMatrix",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkIMU, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMU_SetCalMatrix" "', argument " "1"" of type '" "btkIMU *""'"); 
  }
  arg1 = reinterpret_cast< btkIMU * >(argp1);
  {
    // In: const&
    ConvertFromNumpyToEigenMatrix<btk::IMU::CalMatrix>(&temp2, obj1);
    arg2 = &temp2;
  }
  {
    try {
      (*arg1)->SetCalMatrix((btk::IMU::CalMatrix const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMU_GetAccelerometerX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMU *arg1 = (btkIMU *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAnalog result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkIMU_GetAccelerometerX",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkIMU, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMU_GetAccelerometerX" "', argument " "1"" of type '" "btkIMU *""'"); 
  }
  arg1 = reinterpret_cast< btkIMU * >(argp1);
  {
    try {
      result = (*arg1)->GetAccelerometerX();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkAnalog(static_cast< const btkAnalog& >(result))), SWIGTYPE_p_btkAnalog, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMU_GetAccelerometerY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMU *arg1 = (btkIMU *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAnalog result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkIMU_GetAccelerometerY",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkIMU, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMU_GetAccelerometerY" "', argument " "1"" of type '" "btkIMU *""'"); 
  }
  arg1 = reinterpret_cast< btkIMU * >(argp1);
  {
    try {
      result = (*arg1)->GetAccelerometerY();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkAnalog(static_cast< const btkAnalog& >(result))), SWIGTYPE_p_btkAnalog, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMU_GetAccelerometerZ(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMU *arg1 = (btkIMU *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAnalog result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkIMU_GetAccelerometerZ",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkIMU, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMU_GetAccelerometerZ" "', argument " "1"" of type '" "btkIMU *""'"); 
  }
  arg1 = reinterpret_cast< btkIMU * >(argp1);
  {
    try {
      result = (*arg1)->GetAccelerometerZ();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkAnalog(static_cast< const btkAnalog& >(result))), SWIGTYPE_p_btkAnalog, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMU_GetGyroscopeX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMU *arg1 = (btkIMU *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAnalog result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkIMU_GetGyroscopeX",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkIMU, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMU_GetGyroscopeX" "', argument " "1"" of type '" "btkIMU *""'"); 
  }
  arg1 = reinterpret_cast< btkIMU * >(argp1);
  {
    try {
      result = (*arg1)->GetGyroscopeX();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkAnalog(static_cast< const btkAnalog& >(result))), SWIGTYPE_p_btkAnalog, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMU_GetGyroscopeY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMU *arg1 = (btkIMU *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAnalog result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkIMU_GetGyroscopeY",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkIMU, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMU_GetGyroscopeY" "', argument " "1"" of type '" "btkIMU *""'"); 
  }
  arg1 = reinterpret_cast< btkIMU * >(argp1);
  {
    try {
      result = (*arg1)->GetGyroscopeY();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkAnalog(static_cast< const btkAnalog& >(result))), SWIGTYPE_p_btkAnalog, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMU_GetGyroscopeZ(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMU *arg1 = (btkIMU *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAnalog result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkIMU_GetGyroscopeZ",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkIMU, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMU_GetGyroscopeZ" "', argument " "1"" of type '" "btkIMU *""'"); 
  }
  arg1 = reinterpret_cast< btkIMU * >(argp1);
  {
    try {
      result = (*arg1)->GetGyroscopeZ();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkAnalog(static_cast< const btkAnalog& >(result))), SWIGTYPE_p_btkAnalog, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMU_Rotate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMU *arg1 = (btkIMU *) 0 ;
  btk::IMU::Rotation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  btk::IMU::Rotation temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkIMU_Rotate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkIMU, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMU_Rotate" "', argument " "1"" of type '" "btkIMU *""'"); 
  }
  arg1 = reinterpret_cast< btkIMU * >(argp1);
  {
    // In: const&
    ConvertFromNumpyToEigenMatrix<btk::IMU::Rotation>(&temp2, obj1);
    arg2 = &temp2;
  }
  {
    try {
      (*arg1)->Rotate((btk::IMU::Rotation const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMU_Update(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMU *arg1 = (btkIMU *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkIMU_Update",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkIMU, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMU_Update" "', argument " "1"" of type '" "btkIMU *""'"); 
  }
  arg1 = reinterpret_cast< btkIMU * >(argp1);
  {
    try {
      (*arg1)->Update();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMU_GetTimestamp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMU *arg1 = (btkIMU *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkIMU_GetTimestamp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkIMU, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMU_GetTimestamp" "', argument " "1"" of type '" "btkIMU const *""'"); 
  }
  arg1 = reinterpret_cast< btkIMU * >(argp1);
  {
    try {
      result = (unsigned long)(*arg1)->GetTimestamp();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *btkIMU_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_btkIMU, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_btkIMUType1__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< btkIMU > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkIMUType1",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMUType1" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkIMUType1" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkIMUType1" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkIMUType1" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkIMUType1" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      result = btkIMUType1((std::string const &)*arg1,(std::string const &)*arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkIMU(static_cast< const btkIMU& >(result))), SWIGTYPE_p_btkIMU, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMUType1__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< btkIMU > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkIMUType1",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMUType1" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkIMUType1" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkIMUType1" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkIMUType1" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = btkIMUType1((std::string const &)*arg1,(std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkIMU(static_cast< const btkIMU& >(result))), SWIGTYPE_p_btkIMU, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMUType1__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< btkIMU > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkIMUType1",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMUType1" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkIMUType1" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = btkIMUType1((std::string const &)*arg1);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkIMU(static_cast< const btkIMU& >(result))), SWIGTYPE_p_btkIMU, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMUType1__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< btkIMU > result;
  
  if (!PyArg_ParseTuple(args,(char *)":btkIMUType1")) SWIG_fail;
  {
    try {
      result = btkIMUType1();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkIMU(static_cast< const btkIMU& >(result))), SWIGTYPE_p_btkIMU, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMUType1(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_btkIMUType1__SWIG_3(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_btkIMUType1__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_btkIMUType1__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_btkIMUType1__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkIMUType1'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkIMUType1(std::string const &,std::string const &,bool)\n"
    "    btkIMUType1(std::string const &,std::string const &)\n"
    "    btkIMUType1(std::string const &)\n"
    "    btkIMUType1()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkIMUType2__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< btkIMU > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkIMUType2",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMUType2" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkIMUType2" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkIMUType2" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkIMUType2" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkIMUType2" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      result = btkIMUType2((std::string const &)*arg1,(std::string const &)*arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkIMU(static_cast< const btkIMU& >(result))), SWIGTYPE_p_btkIMU, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMUType2__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< btkIMU > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkIMUType2",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMUType2" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkIMUType2" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkIMUType2" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkIMUType2" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = btkIMUType2((std::string const &)*arg1,(std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkIMU(static_cast< const btkIMU& >(result))), SWIGTYPE_p_btkIMU, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMUType2__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< btkIMU > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkIMUType2",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMUType2" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkIMUType2" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = btkIMUType2((std::string const &)*arg1);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkIMU(static_cast< const btkIMU& >(result))), SWIGTYPE_p_btkIMU, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMUType2__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< btkIMU > result;
  
  if (!PyArg_ParseTuple(args,(char *)":btkIMUType2")) SWIG_fail;
  {
    try {
      result = btkIMUType2();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkIMU(static_cast< const btkIMU& >(result))), SWIGTYPE_p_btkIMU, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMUType2(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_btkIMUType2__SWIG_3(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_btkIMUType2__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_btkIMUType2__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_btkIMUType2__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkIMUType2'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkIMUType2(std::string const &,std::string const &,bool)\n"
    "    btkIMUType2(std::string const &,std::string const &)\n"
    "    btkIMUType2(std::string const &)\n"
    "    btkIMUType2()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_btkEventCollectionIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEventCollectionIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_btkEventCollectionIterator")) SWIG_fail;
  {
    try {
      result = (btkEventCollectionIterator *)new btkEventCollectionIterator();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkEventCollectionIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEventCollectionIterator_incr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEventCollectionIterator *arg1 = (btkEventCollectionIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkEventCollectionIterator_incr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEventCollectionIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEventCollectionIterator_incr" "', argument " "1"" of type '" "btkEventCollectionIterator *""'"); 
  }
  arg1 = reinterpret_cast< btkEventCollectionIterator * >(argp1);
  {
    try {
      (arg1)->incr();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEventCollectionIterator_decr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEventCollectionIterator *arg1 = (btkEventCollectionIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkEventCollectionIterator_decr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEventCollectionIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEventCollectionIterator_decr" "', argument " "1"" of type '" "btkEventCollectionIterator *""'"); 
  }
  arg1 = reinterpret_cast< btkEventCollectionIterator * >(argp1);
  {
    try {
      (arg1)->decr();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEventCollectionIterator_value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEventCollectionIterator *arg1 = (btkEventCollectionIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkEvent result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkEventCollectionIterator_value",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEventCollectionIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEventCollectionIterator_value" "', argument " "1"" of type '" "btkEventCollectionIterator *""'"); 
  }
  arg1 = reinterpret_cast< btkEventCollectionIterator * >(argp1);
  {
    try {
      result = (arg1)->value();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkEvent(static_cast< const btkEvent& >(result))), SWIGTYPE_p_btkEvent, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEventCollectionIterator___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEventCollectionIterator *arg1 = (btkEventCollectionIterator *) 0 ;
  btkEventCollectionIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkEventCollectionIterator___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEventCollectionIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEventCollectionIterator___eq__" "', argument " "1"" of type '" "btkEventCollectionIterator *""'"); 
  }
  arg1 = reinterpret_cast< btkEventCollectionIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkEventCollectionIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkEventCollectionIterator___eq__" "', argument " "2"" of type '" "btkEventCollectionIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkEventCollectionIterator___eq__" "', argument " "2"" of type '" "btkEventCollectionIterator const &""'"); 
  }
  arg2 = reinterpret_cast< btkEventCollectionIterator * >(argp2);
  {
    try {
      result = (bool)(arg1)->operator ==((btkEventCollectionIterator const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEventCollectionIterator___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEventCollectionIterator *arg1 = (btkEventCollectionIterator *) 0 ;
  btkEventCollectionIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkEventCollectionIterator___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEventCollectionIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEventCollectionIterator___ne__" "', argument " "1"" of type '" "btkEventCollectionIterator *""'"); 
  }
  arg1 = reinterpret_cast< btkEventCollectionIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkEventCollectionIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkEventCollectionIterator___ne__" "', argument " "2"" of type '" "btkEventCollectionIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkEventCollectionIterator___ne__" "', argument " "2"" of type '" "btkEventCollectionIterator const &""'"); 
  }
  arg2 = reinterpret_cast< btkEventCollectionIterator * >(argp2);
  {
    try {
      result = (bool)(arg1)->operator !=((btkEventCollectionIterator const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_btkEventCollectionIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEventCollectionIterator *arg1 = (btkEventCollectionIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_btkEventCollectionIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEventCollectionIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_btkEventCollectionIterator" "', argument " "1"" of type '" "btkEventCollectionIterator *""'"); 
  }
  arg1 = reinterpret_cast< btkEventCollectionIterator * >(argp1);
  {
    try {
      delete arg1;
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *btkEventCollectionIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_btkEventCollectionIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_btkEventCollection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEventCollection *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_btkEventCollection")) SWIG_fail;
  {
    try {
      result = (btkEventCollection *)new btkEventCollection();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkEventCollection, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEventCollection_Clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEventCollection *arg1 = (btkEventCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkEventCollection result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkEventCollection_Clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEventCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEventCollection_Clone" "', argument " "1"" of type '" "btkEventCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkEventCollection * >(argp1);
  {
    try {
      result = (arg1)->Clone();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkEventCollection(static_cast< const btkEventCollection& >(result))), SWIGTYPE_p_btkEventCollection, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEventCollection___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEventCollection *arg1 = (btkEventCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkEventCollection_impl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkEventCollection___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEventCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEventCollection___deref__" "', argument " "1"" of type '" "btkEventCollection const *""'"); 
  }
  arg1 = reinterpret_cast< btkEventCollection * >(argp1);
  {
    try {
      result = (btkEventCollection_impl *)((btkEventCollection const *)arg1)->operator ->();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkEventCollection_impl, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_btkEventCollection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEventCollection *arg1 = (btkEventCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_btkEventCollection",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEventCollection, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_btkEventCollection" "', argument " "1"" of type '" "btkEventCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkEventCollection * >(argp1);
  {
    try {
      delete arg1;
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEventCollection_Begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEventCollection *arg1 = (btkEventCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkEventCollection_impl::Iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkEventCollection_Begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEventCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEventCollection_Begin" "', argument " "1"" of type '" "btkEventCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkEventCollection * >(argp1);
  {
    try {
      result = (*arg1)->Begin();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkEventCollection_impl::Iterator(static_cast< const btkEventCollection_impl::Iterator& >(result))), SWIGTYPE_p_btkEventCollectionIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEventCollection_End(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEventCollection *arg1 = (btkEventCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkEventCollection_impl::Iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkEventCollection_End",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEventCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEventCollection_End" "', argument " "1"" of type '" "btkEventCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkEventCollection * >(argp1);
  {
    try {
      result = (*arg1)->End();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkEventCollection_impl::Iterator(static_cast< const btkEventCollection_impl::Iterator& >(result))), SWIGTYPE_p_btkEventCollectionIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEventCollection_IsEmpty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEventCollection *arg1 = (btkEventCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkEventCollection_IsEmpty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEventCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEventCollection_IsEmpty" "', argument " "1"" of type '" "btkEventCollection const *""'"); 
  }
  arg1 = reinterpret_cast< btkEventCollection * >(argp1);
  {
    try {
      result = (bool)(*arg1)->IsEmpty();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEventCollection_GetItemNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEventCollection *arg1 = (btkEventCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkEventCollection_GetItemNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEventCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEventCollection_GetItemNumber" "', argument " "1"" of type '" "btkEventCollection const *""'"); 
  }
  arg1 = reinterpret_cast< btkEventCollection * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetItemNumber();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEventCollection_SetItemNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEventCollection *arg1 = (btkEventCollection *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkEventCollection_SetItemNumber",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEventCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEventCollection_SetItemNumber" "', argument " "1"" of type '" "btkEventCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkEventCollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkEventCollection_SetItemNumber" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->SetItemNumber(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEventCollection_GetIndexOf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEventCollection *arg1 = (btkEventCollection *) 0 ;
  btkEventCollection_impl::ItemPointer arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkEventCollection_GetIndexOf",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEventCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEventCollection_GetIndexOf" "', argument " "1"" of type '" "btkEventCollection const *""'"); 
  }
  arg1 = reinterpret_cast< btkEventCollection * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkEvent,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkEventCollection_GetIndexOf" "', argument " "2"" of type '" "btkEventCollection_impl::ItemPointer""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkEventCollection_GetIndexOf" "', argument " "2"" of type '" "btkEventCollection_impl::ItemPointer""'");
    } else {
      btkEventCollection_impl::ItemPointer * temp = reinterpret_cast< btkEventCollection_impl::ItemPointer * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (int)(*arg1)->GetIndexOf(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEventCollection_GetItem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEventCollection *arg1 = (btkEventCollection *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  btkEventCollection_impl::ItemPointer result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkEventCollection_GetItem",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEventCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEventCollection_GetItem" "', argument " "1"" of type '" "btkEventCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkEventCollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkEventCollection_GetItem" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (*arg1)->GetItem(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkEventCollection_impl::ItemPointer(static_cast< const btkEventCollection_impl::ItemPointer& >(result))), SWIGTYPE_p_btkEvent, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEventCollection_InsertItem__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEventCollection *arg1 = (btkEventCollection *) 0 ;
  btkEventCollection_impl::Iterator arg2 ;
  btkEventCollection_impl::ItemPointer arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkEventCollection_InsertItem",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEventCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEventCollection_InsertItem" "', argument " "1"" of type '" "btkEventCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkEventCollection * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkEventCollectionIterator,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkEventCollection_InsertItem" "', argument " "2"" of type '" "btkEventCollection_impl::Iterator""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkEventCollection_InsertItem" "', argument " "2"" of type '" "btkEventCollection_impl::Iterator""'");
    } else {
      btkEventCollection_impl::Iterator * temp = reinterpret_cast< btkEventCollection_impl::Iterator * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkEvent,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkEventCollection_InsertItem" "', argument " "3"" of type '" "btkEventCollection_impl::ItemPointer""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkEventCollection_InsertItem" "', argument " "3"" of type '" "btkEventCollection_impl::ItemPointer""'");
    } else {
      btkEventCollection_impl::ItemPointer * temp = reinterpret_cast< btkEventCollection_impl::ItemPointer * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      result = (bool)(*arg1)->InsertItem(arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEventCollection_InsertItem__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEventCollection *arg1 = (btkEventCollection *) 0 ;
  int arg2 ;
  btkEventCollection_impl::ItemPointer arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkEventCollection_InsertItem",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEventCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEventCollection_InsertItem" "', argument " "1"" of type '" "btkEventCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkEventCollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkEventCollection_InsertItem" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkEvent,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkEventCollection_InsertItem" "', argument " "3"" of type '" "btkEventCollection_impl::ItemPointer""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkEventCollection_InsertItem" "', argument " "3"" of type '" "btkEventCollection_impl::ItemPointer""'");
    } else {
      btkEventCollection_impl::ItemPointer * temp = reinterpret_cast< btkEventCollection_impl::ItemPointer * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      result = (bool)(*arg1)->InsertItem(arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEventCollection_InsertItem__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEventCollection *arg1 = (btkEventCollection *) 0 ;
  btkEventCollection_impl::ItemPointer arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkEventCollection_InsertItem",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEventCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEventCollection_InsertItem" "', argument " "1"" of type '" "btkEventCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkEventCollection * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkEvent,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkEventCollection_InsertItem" "', argument " "2"" of type '" "btkEventCollection_impl::ItemPointer""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkEventCollection_InsertItem" "', argument " "2"" of type '" "btkEventCollection_impl::ItemPointer""'");
    } else {
      btkEventCollection_impl::ItemPointer * temp = reinterpret_cast< btkEventCollection_impl::ItemPointer * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (bool)(*arg1)->InsertItem(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEventCollection_InsertItem(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkEventCollection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_btkEvent, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_btkEventCollection_InsertItem__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkEventCollection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_btkEventCollectionIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_btkEvent, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_btkEventCollection_InsertItem__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkEventCollection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_btkEvent, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_btkEventCollection_InsertItem__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkEventCollection_InsertItem'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkEventCollection_impl::InsertItem(btkEventCollection_impl::Iterator,btkEventCollection_impl::ItemPointer)\n"
    "    btkEventCollection_impl::InsertItem(int,btkEventCollection_impl::ItemPointer)\n"
    "    btkEventCollection_impl::InsertItem(btkEventCollection_impl::ItemPointer)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkEventCollection_SetItem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEventCollection *arg1 = (btkEventCollection *) 0 ;
  int arg2 ;
  btkEventCollection_impl::ItemPointer arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkEventCollection_SetItem",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEventCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEventCollection_SetItem" "', argument " "1"" of type '" "btkEventCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkEventCollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkEventCollection_SetItem" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkEvent,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkEventCollection_SetItem" "', argument " "3"" of type '" "btkEventCollection_impl::ItemPointer""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkEventCollection_SetItem" "', argument " "3"" of type '" "btkEventCollection_impl::ItemPointer""'");
    } else {
      btkEventCollection_impl::ItemPointer * temp = reinterpret_cast< btkEventCollection_impl::ItemPointer * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      result = (bool)(*arg1)->SetItem(arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEventCollection_RemoveItem__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEventCollection *arg1 = (btkEventCollection *) 0 ;
  btkEventCollection_impl::Iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  btkEventCollection_impl::Iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkEventCollection_RemoveItem",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEventCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEventCollection_RemoveItem" "', argument " "1"" of type '" "btkEventCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkEventCollection * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkEventCollectionIterator,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkEventCollection_RemoveItem" "', argument " "2"" of type '" "btkEventCollection_impl::Iterator""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkEventCollection_RemoveItem" "', argument " "2"" of type '" "btkEventCollection_impl::Iterator""'");
    } else {
      btkEventCollection_impl::Iterator * temp = reinterpret_cast< btkEventCollection_impl::Iterator * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (*arg1)->RemoveItem(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkEventCollection_impl::Iterator(static_cast< const btkEventCollection_impl::Iterator& >(result))), SWIGTYPE_p_btkEventCollectionIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEventCollection_RemoveItem__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEventCollection *arg1 = (btkEventCollection *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkEventCollection_RemoveItem",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEventCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEventCollection_RemoveItem" "', argument " "1"" of type '" "btkEventCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkEventCollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkEventCollection_RemoveItem" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->RemoveItem(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEventCollection_RemoveItem(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkEventCollection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_btkEventCollectionIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_btkEventCollection_RemoveItem__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkEventCollection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_btkEventCollection_RemoveItem__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkEventCollection_RemoveItem'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkEventCollection_impl::RemoveItem(btkEventCollection_impl::Iterator)\n"
    "    btkEventCollection_impl::RemoveItem(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkEventCollection_TakeItem__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEventCollection *arg1 = (btkEventCollection *) 0 ;
  btkEventCollection_impl::Iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  btkEventCollection_impl::ItemPointer result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkEventCollection_TakeItem",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEventCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEventCollection_TakeItem" "', argument " "1"" of type '" "btkEventCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkEventCollection * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkEventCollectionIterator,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkEventCollection_TakeItem" "', argument " "2"" of type '" "btkEventCollection_impl::Iterator""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkEventCollection_TakeItem" "', argument " "2"" of type '" "btkEventCollection_impl::Iterator""'");
    } else {
      btkEventCollection_impl::Iterator * temp = reinterpret_cast< btkEventCollection_impl::Iterator * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (*arg1)->TakeItem(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkEventCollection_impl::ItemPointer(static_cast< const btkEventCollection_impl::ItemPointer& >(result))), SWIGTYPE_p_btkEvent, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEventCollection_TakeItem__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEventCollection *arg1 = (btkEventCollection *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  btkEventCollection_impl::ItemPointer result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkEventCollection_TakeItem",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEventCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEventCollection_TakeItem" "', argument " "1"" of type '" "btkEventCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkEventCollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkEventCollection_TakeItem" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (*arg1)->TakeItem(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkEventCollection_impl::ItemPointer(static_cast< const btkEventCollection_impl::ItemPointer& >(result))), SWIGTYPE_p_btkEvent, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEventCollection_TakeItem(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkEventCollection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_btkEventCollectionIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_btkEventCollection_TakeItem__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkEventCollection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_btkEventCollection_TakeItem__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkEventCollection_TakeItem'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkEventCollection_impl::TakeItem(btkEventCollection_impl::Iterator)\n"
    "    btkEventCollection_impl::TakeItem(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkEventCollection_Clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEventCollection *arg1 = (btkEventCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkEventCollection_Clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEventCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEventCollection_Clear" "', argument " "1"" of type '" "btkEventCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkEventCollection * >(argp1);
  {
    try {
      (*arg1)->Clear();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEventCollection_Update(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEventCollection *arg1 = (btkEventCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkEventCollection_Update",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEventCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEventCollection_Update" "', argument " "1"" of type '" "btkEventCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkEventCollection * >(argp1);
  {
    try {
      (*arg1)->Update();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEventCollection_GetTimestamp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEventCollection *arg1 = (btkEventCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkEventCollection_GetTimestamp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEventCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEventCollection_GetTimestamp" "', argument " "1"" of type '" "btkEventCollection const *""'"); 
  }
  arg1 = reinterpret_cast< btkEventCollection * >(argp1);
  {
    try {
      result = (unsigned long)(*arg1)->GetTimestamp();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *btkEventCollection_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_btkEventCollection, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_btkAnalogCollectionIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalogCollectionIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_btkAnalogCollectionIterator")) SWIG_fail;
  {
    try {
      result = (btkAnalogCollectionIterator *)new btkAnalogCollectionIterator();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkAnalogCollectionIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalogCollectionIterator_incr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalogCollectionIterator *arg1 = (btkAnalogCollectionIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAnalogCollectionIterator_incr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalogCollectionIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalogCollectionIterator_incr" "', argument " "1"" of type '" "btkAnalogCollectionIterator *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalogCollectionIterator * >(argp1);
  {
    try {
      (arg1)->incr();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalogCollectionIterator_decr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalogCollectionIterator *arg1 = (btkAnalogCollectionIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAnalogCollectionIterator_decr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalogCollectionIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalogCollectionIterator_decr" "', argument " "1"" of type '" "btkAnalogCollectionIterator *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalogCollectionIterator * >(argp1);
  {
    try {
      (arg1)->decr();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalogCollectionIterator_value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalogCollectionIterator *arg1 = (btkAnalogCollectionIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAnalog result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAnalogCollectionIterator_value",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalogCollectionIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalogCollectionIterator_value" "', argument " "1"" of type '" "btkAnalogCollectionIterator *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalogCollectionIterator * >(argp1);
  {
    try {
      result = (arg1)->value();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkAnalog(static_cast< const btkAnalog& >(result))), SWIGTYPE_p_btkAnalog, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalogCollectionIterator___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalogCollectionIterator *arg1 = (btkAnalogCollectionIterator *) 0 ;
  btkAnalogCollectionIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAnalogCollectionIterator___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalogCollectionIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalogCollectionIterator___eq__" "', argument " "1"" of type '" "btkAnalogCollectionIterator *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalogCollectionIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkAnalogCollectionIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkAnalogCollectionIterator___eq__" "', argument " "2"" of type '" "btkAnalogCollectionIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkAnalogCollectionIterator___eq__" "', argument " "2"" of type '" "btkAnalogCollectionIterator const &""'"); 
  }
  arg2 = reinterpret_cast< btkAnalogCollectionIterator * >(argp2);
  {
    try {
      result = (bool)(arg1)->operator ==((btkAnalogCollectionIterator const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalogCollectionIterator___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalogCollectionIterator *arg1 = (btkAnalogCollectionIterator *) 0 ;
  btkAnalogCollectionIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAnalogCollectionIterator___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalogCollectionIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalogCollectionIterator___ne__" "', argument " "1"" of type '" "btkAnalogCollectionIterator *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalogCollectionIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkAnalogCollectionIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkAnalogCollectionIterator___ne__" "', argument " "2"" of type '" "btkAnalogCollectionIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkAnalogCollectionIterator___ne__" "', argument " "2"" of type '" "btkAnalogCollectionIterator const &""'"); 
  }
  arg2 = reinterpret_cast< btkAnalogCollectionIterator * >(argp2);
  {
    try {
      result = (bool)(arg1)->operator !=((btkAnalogCollectionIterator const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_btkAnalogCollectionIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalogCollectionIterator *arg1 = (btkAnalogCollectionIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_btkAnalogCollectionIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalogCollectionIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_btkAnalogCollectionIterator" "', argument " "1"" of type '" "btkAnalogCollectionIterator *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalogCollectionIterator * >(argp1);
  {
    try {
      delete arg1;
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *btkAnalogCollectionIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_btkAnalogCollectionIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_btkAnalogCollection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalogCollection *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_btkAnalogCollection")) SWIG_fail;
  {
    try {
      result = (btkAnalogCollection *)new btkAnalogCollection();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkAnalogCollection, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalogCollection_Clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalogCollection *arg1 = (btkAnalogCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAnalogCollection result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAnalogCollection_Clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalogCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalogCollection_Clone" "', argument " "1"" of type '" "btkAnalogCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalogCollection * >(argp1);
  {
    try {
      result = (arg1)->Clone();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkAnalogCollection(static_cast< const btkAnalogCollection& >(result))), SWIGTYPE_p_btkAnalogCollection, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalogCollection___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalogCollection *arg1 = (btkAnalogCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAnalogCollection_impl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAnalogCollection___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalogCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalogCollection___deref__" "', argument " "1"" of type '" "btkAnalogCollection const *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalogCollection * >(argp1);
  {
    try {
      result = (btkAnalogCollection_impl *)((btkAnalogCollection const *)arg1)->operator ->();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkAnalogCollection_impl, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_btkAnalogCollection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalogCollection *arg1 = (btkAnalogCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_btkAnalogCollection",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalogCollection, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_btkAnalogCollection" "', argument " "1"" of type '" "btkAnalogCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalogCollection * >(argp1);
  {
    try {
      delete arg1;
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalogCollection_Begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalogCollection *arg1 = (btkAnalogCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAnalogCollection_impl::Iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAnalogCollection_Begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalogCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalogCollection_Begin" "', argument " "1"" of type '" "btkAnalogCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalogCollection * >(argp1);
  {
    try {
      result = (*arg1)->Begin();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkAnalogCollection_impl::Iterator(static_cast< const btkAnalogCollection_impl::Iterator& >(result))), SWIGTYPE_p_btkAnalogCollectionIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalogCollection_End(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalogCollection *arg1 = (btkAnalogCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAnalogCollection_impl::Iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAnalogCollection_End",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalogCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalogCollection_End" "', argument " "1"" of type '" "btkAnalogCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalogCollection * >(argp1);
  {
    try {
      result = (*arg1)->End();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkAnalogCollection_impl::Iterator(static_cast< const btkAnalogCollection_impl::Iterator& >(result))), SWIGTYPE_p_btkAnalogCollectionIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalogCollection_IsEmpty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalogCollection *arg1 = (btkAnalogCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAnalogCollection_IsEmpty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalogCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalogCollection_IsEmpty" "', argument " "1"" of type '" "btkAnalogCollection const *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalogCollection * >(argp1);
  {
    try {
      result = (bool)(*arg1)->IsEmpty();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalogCollection_GetItemNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalogCollection *arg1 = (btkAnalogCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAnalogCollection_GetItemNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalogCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalogCollection_GetItemNumber" "', argument " "1"" of type '" "btkAnalogCollection const *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalogCollection * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetItemNumber();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalogCollection_SetItemNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalogCollection *arg1 = (btkAnalogCollection *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAnalogCollection_SetItemNumber",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalogCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalogCollection_SetItemNumber" "', argument " "1"" of type '" "btkAnalogCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalogCollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkAnalogCollection_SetItemNumber" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->SetItemNumber(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalogCollection_GetIndexOf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalogCollection *arg1 = (btkAnalogCollection *) 0 ;
  btkAnalogCollection_impl::ItemPointer arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAnalogCollection_GetIndexOf",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalogCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalogCollection_GetIndexOf" "', argument " "1"" of type '" "btkAnalogCollection const *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalogCollection * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkAnalog,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkAnalogCollection_GetIndexOf" "', argument " "2"" of type '" "btkAnalogCollection_impl::ItemPointer""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkAnalogCollection_GetIndexOf" "', argument " "2"" of type '" "btkAnalogCollection_impl::ItemPointer""'");
    } else {
      btkAnalogCollection_impl::ItemPointer * temp = reinterpret_cast< btkAnalogCollection_impl::ItemPointer * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (int)(*arg1)->GetIndexOf(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalogCollection_GetItem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalogCollection *arg1 = (btkAnalogCollection *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  btkAnalogCollection_impl::ItemPointer result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAnalogCollection_GetItem",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalogCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalogCollection_GetItem" "', argument " "1"" of type '" "btkAnalogCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalogCollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkAnalogCollection_GetItem" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (*arg1)->GetItem(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkAnalogCollection_impl::ItemPointer(static_cast< const btkAnalogCollection_impl::ItemPointer& >(result))), SWIGTYPE_p_btkAnalog, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalogCollection_InsertItem__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalogCollection *arg1 = (btkAnalogCollection *) 0 ;
  btkAnalogCollection_impl::Iterator arg2 ;
  btkAnalogCollection_impl::ItemPointer arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkAnalogCollection_InsertItem",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalogCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalogCollection_InsertItem" "', argument " "1"" of type '" "btkAnalogCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalogCollection * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkAnalogCollectionIterator,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkAnalogCollection_InsertItem" "', argument " "2"" of type '" "btkAnalogCollection_impl::Iterator""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkAnalogCollection_InsertItem" "', argument " "2"" of type '" "btkAnalogCollection_impl::Iterator""'");
    } else {
      btkAnalogCollection_impl::Iterator * temp = reinterpret_cast< btkAnalogCollection_impl::Iterator * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkAnalog,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkAnalogCollection_InsertItem" "', argument " "3"" of type '" "btkAnalogCollection_impl::ItemPointer""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkAnalogCollection_InsertItem" "', argument " "3"" of type '" "btkAnalogCollection_impl::ItemPointer""'");
    } else {
      btkAnalogCollection_impl::ItemPointer * temp = reinterpret_cast< btkAnalogCollection_impl::ItemPointer * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      result = (bool)(*arg1)->InsertItem(arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalogCollection_InsertItem__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalogCollection *arg1 = (btkAnalogCollection *) 0 ;
  int arg2 ;
  btkAnalogCollection_impl::ItemPointer arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkAnalogCollection_InsertItem",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalogCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalogCollection_InsertItem" "', argument " "1"" of type '" "btkAnalogCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalogCollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkAnalogCollection_InsertItem" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkAnalog,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkAnalogCollection_InsertItem" "', argument " "3"" of type '" "btkAnalogCollection_impl::ItemPointer""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkAnalogCollection_InsertItem" "', argument " "3"" of type '" "btkAnalogCollection_impl::ItemPointer""'");
    } else {
      btkAnalogCollection_impl::ItemPointer * temp = reinterpret_cast< btkAnalogCollection_impl::ItemPointer * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      result = (bool)(*arg1)->InsertItem(arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalogCollection_InsertItem__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalogCollection *arg1 = (btkAnalogCollection *) 0 ;
  btkAnalogCollection_impl::ItemPointer arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAnalogCollection_InsertItem",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalogCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalogCollection_InsertItem" "', argument " "1"" of type '" "btkAnalogCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalogCollection * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkAnalog,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkAnalogCollection_InsertItem" "', argument " "2"" of type '" "btkAnalogCollection_impl::ItemPointer""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkAnalogCollection_InsertItem" "', argument " "2"" of type '" "btkAnalogCollection_impl::ItemPointer""'");
    } else {
      btkAnalogCollection_impl::ItemPointer * temp = reinterpret_cast< btkAnalogCollection_impl::ItemPointer * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (bool)(*arg1)->InsertItem(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalogCollection_InsertItem(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkAnalogCollection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_btkAnalog, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_btkAnalogCollection_InsertItem__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkAnalogCollection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_btkAnalogCollectionIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_btkAnalog, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_btkAnalogCollection_InsertItem__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkAnalogCollection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_btkAnalog, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_btkAnalogCollection_InsertItem__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkAnalogCollection_InsertItem'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkAnalogCollection_impl::InsertItem(btkAnalogCollection_impl::Iterator,btkAnalogCollection_impl::ItemPointer)\n"
    "    btkAnalogCollection_impl::InsertItem(int,btkAnalogCollection_impl::ItemPointer)\n"
    "    btkAnalogCollection_impl::InsertItem(btkAnalogCollection_impl::ItemPointer)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkAnalogCollection_SetItem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalogCollection *arg1 = (btkAnalogCollection *) 0 ;
  int arg2 ;
  btkAnalogCollection_impl::ItemPointer arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkAnalogCollection_SetItem",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalogCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalogCollection_SetItem" "', argument " "1"" of type '" "btkAnalogCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalogCollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkAnalogCollection_SetItem" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkAnalog,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkAnalogCollection_SetItem" "', argument " "3"" of type '" "btkAnalogCollection_impl::ItemPointer""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkAnalogCollection_SetItem" "', argument " "3"" of type '" "btkAnalogCollection_impl::ItemPointer""'");
    } else {
      btkAnalogCollection_impl::ItemPointer * temp = reinterpret_cast< btkAnalogCollection_impl::ItemPointer * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      result = (bool)(*arg1)->SetItem(arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalogCollection_RemoveItem__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalogCollection *arg1 = (btkAnalogCollection *) 0 ;
  btkAnalogCollection_impl::Iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  btkAnalogCollection_impl::Iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAnalogCollection_RemoveItem",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalogCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalogCollection_RemoveItem" "', argument " "1"" of type '" "btkAnalogCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalogCollection * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkAnalogCollectionIterator,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkAnalogCollection_RemoveItem" "', argument " "2"" of type '" "btkAnalogCollection_impl::Iterator""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkAnalogCollection_RemoveItem" "', argument " "2"" of type '" "btkAnalogCollection_impl::Iterator""'");
    } else {
      btkAnalogCollection_impl::Iterator * temp = reinterpret_cast< btkAnalogCollection_impl::Iterator * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (*arg1)->RemoveItem(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkAnalogCollection_impl::Iterator(static_cast< const btkAnalogCollection_impl::Iterator& >(result))), SWIGTYPE_p_btkAnalogCollectionIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalogCollection_RemoveItem__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalogCollection *arg1 = (btkAnalogCollection *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAnalogCollection_RemoveItem",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalogCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalogCollection_RemoveItem" "', argument " "1"" of type '" "btkAnalogCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalogCollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkAnalogCollection_RemoveItem" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->RemoveItem(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalogCollection_RemoveItem(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkAnalogCollection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_btkAnalogCollectionIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_btkAnalogCollection_RemoveItem__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkAnalogCollection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_btkAnalogCollection_RemoveItem__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkAnalogCollection_RemoveItem'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkAnalogCollection_impl::RemoveItem(btkAnalogCollection_impl::Iterator)\n"
    "    btkAnalogCollection_impl::RemoveItem(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkAnalogCollection_TakeItem__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalogCollection *arg1 = (btkAnalogCollection *) 0 ;
  btkAnalogCollection_impl::Iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  btkAnalogCollection_impl::ItemPointer result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAnalogCollection_TakeItem",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalogCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalogCollection_TakeItem" "', argument " "1"" of type '" "btkAnalogCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalogCollection * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkAnalogCollectionIterator,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkAnalogCollection_TakeItem" "', argument " "2"" of type '" "btkAnalogCollection_impl::Iterator""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkAnalogCollection_TakeItem" "', argument " "2"" of type '" "btkAnalogCollection_impl::Iterator""'");
    } else {
      btkAnalogCollection_impl::Iterator * temp = reinterpret_cast< btkAnalogCollection_impl::Iterator * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (*arg1)->TakeItem(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkAnalogCollection_impl::ItemPointer(static_cast< const btkAnalogCollection_impl::ItemPointer& >(result))), SWIGTYPE_p_btkAnalog, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalogCollection_TakeItem__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalogCollection *arg1 = (btkAnalogCollection *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  btkAnalogCollection_impl::ItemPointer result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAnalogCollection_TakeItem",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalogCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalogCollection_TakeItem" "', argument " "1"" of type '" "btkAnalogCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalogCollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkAnalogCollection_TakeItem" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (*arg1)->TakeItem(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkAnalogCollection_impl::ItemPointer(static_cast< const btkAnalogCollection_impl::ItemPointer& >(result))), SWIGTYPE_p_btkAnalog, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalogCollection_TakeItem(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkAnalogCollection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_btkAnalogCollectionIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_btkAnalogCollection_TakeItem__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkAnalogCollection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_btkAnalogCollection_TakeItem__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkAnalogCollection_TakeItem'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkAnalogCollection_impl::TakeItem(btkAnalogCollection_impl::Iterator)\n"
    "    btkAnalogCollection_impl::TakeItem(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkAnalogCollection_Clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalogCollection *arg1 = (btkAnalogCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAnalogCollection_Clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalogCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalogCollection_Clear" "', argument " "1"" of type '" "btkAnalogCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalogCollection * >(argp1);
  {
    try {
      (*arg1)->Clear();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalogCollection_Update(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalogCollection *arg1 = (btkAnalogCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAnalogCollection_Update",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalogCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalogCollection_Update" "', argument " "1"" of type '" "btkAnalogCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalogCollection * >(argp1);
  {
    try {
      (*arg1)->Update();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalogCollection_GetTimestamp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalogCollection *arg1 = (btkAnalogCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAnalogCollection_GetTimestamp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalogCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalogCollection_GetTimestamp" "', argument " "1"" of type '" "btkAnalogCollection const *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalogCollection * >(argp1);
  {
    try {
      result = (unsigned long)(*arg1)->GetTimestamp();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *btkAnalogCollection_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_btkAnalogCollection, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_btkPointCollectionIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPointCollectionIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_btkPointCollectionIterator")) SWIG_fail;
  {
    try {
      result = (btkPointCollectionIterator *)new btkPointCollectionIterator();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkPointCollectionIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPointCollectionIterator_incr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPointCollectionIterator *arg1 = (btkPointCollectionIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkPointCollectionIterator_incr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPointCollectionIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPointCollectionIterator_incr" "', argument " "1"" of type '" "btkPointCollectionIterator *""'"); 
  }
  arg1 = reinterpret_cast< btkPointCollectionIterator * >(argp1);
  {
    try {
      (arg1)->incr();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPointCollectionIterator_decr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPointCollectionIterator *arg1 = (btkPointCollectionIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkPointCollectionIterator_decr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPointCollectionIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPointCollectionIterator_decr" "', argument " "1"" of type '" "btkPointCollectionIterator *""'"); 
  }
  arg1 = reinterpret_cast< btkPointCollectionIterator * >(argp1);
  {
    try {
      (arg1)->decr();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPointCollectionIterator_value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPointCollectionIterator *arg1 = (btkPointCollectionIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< btkPoint > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkPointCollectionIterator_value",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPointCollectionIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPointCollectionIterator_value" "', argument " "1"" of type '" "btkPointCollectionIterator *""'"); 
  }
  arg1 = reinterpret_cast< btkPointCollectionIterator * >(argp1);
  {
    try {
      result = (arg1)->value();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkPoint(static_cast< const btkPoint& >(result))), SWIGTYPE_p_btkPoint, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPointCollectionIterator___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPointCollectionIterator *arg1 = (btkPointCollectionIterator *) 0 ;
  btkPointCollectionIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkPointCollectionIterator___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPointCollectionIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPointCollectionIterator___eq__" "', argument " "1"" of type '" "btkPointCollectionIterator *""'"); 
  }
  arg1 = reinterpret_cast< btkPointCollectionIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkPointCollectionIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkPointCollectionIterator___eq__" "', argument " "2"" of type '" "btkPointCollectionIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkPointCollectionIterator___eq__" "', argument " "2"" of type '" "btkPointCollectionIterator const &""'"); 
  }
  arg2 = reinterpret_cast< btkPointCollectionIterator * >(argp2);
  {
    try {
      result = (bool)(arg1)->operator ==((btkPointCollectionIterator const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPointCollectionIterator___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPointCollectionIterator *arg1 = (btkPointCollectionIterator *) 0 ;
  btkPointCollectionIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkPointCollectionIterator___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPointCollectionIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPointCollectionIterator___ne__" "', argument " "1"" of type '" "btkPointCollectionIterator *""'"); 
  }
  arg1 = reinterpret_cast< btkPointCollectionIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkPointCollectionIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkPointCollectionIterator___ne__" "', argument " "2"" of type '" "btkPointCollectionIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkPointCollectionIterator___ne__" "', argument " "2"" of type '" "btkPointCollectionIterator const &""'"); 
  }
  arg2 = reinterpret_cast< btkPointCollectionIterator * >(argp2);
  {
    try {
      result = (bool)(arg1)->operator !=((btkPointCollectionIterator const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_btkPointCollectionIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPointCollectionIterator *arg1 = (btkPointCollectionIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_btkPointCollectionIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPointCollectionIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_btkPointCollectionIterator" "', argument " "1"" of type '" "btkPointCollectionIterator *""'"); 
  }
  arg1 = reinterpret_cast< btkPointCollectionIterator * >(argp1);
  {
    try {
      delete arg1;
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *btkPointCollectionIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_btkPointCollectionIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_btkPointCollection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPointCollection *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_btkPointCollection")) SWIG_fail;
  {
    try {
      result = (btkPointCollection *)new btkPointCollection();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkPointCollection, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPointCollection_Clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPointCollection *arg1 = (btkPointCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkPointCollection result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkPointCollection_Clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPointCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPointCollection_Clone" "', argument " "1"" of type '" "btkPointCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkPointCollection * >(argp1);
  {
    try {
      result = (arg1)->Clone();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkPointCollection(static_cast< const btkPointCollection& >(result))), SWIGTYPE_p_btkPointCollection, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPointCollection___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPointCollection *arg1 = (btkPointCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkPointCollection_impl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkPointCollection___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPointCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPointCollection___deref__" "', argument " "1"" of type '" "btkPointCollection const *""'"); 
  }
  arg1 = reinterpret_cast< btkPointCollection * >(argp1);
  {
    try {
      result = (btkPointCollection_impl *)((btkPointCollection const *)arg1)->operator ->();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkPointCollection_impl, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_btkPointCollection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPointCollection *arg1 = (btkPointCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_btkPointCollection",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPointCollection, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_btkPointCollection" "', argument " "1"" of type '" "btkPointCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkPointCollection * >(argp1);
  {
    try {
      delete arg1;
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPointCollection_Begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPointCollection *arg1 = (btkPointCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkPointCollection_impl::Iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkPointCollection_Begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPointCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPointCollection_Begin" "', argument " "1"" of type '" "btkPointCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkPointCollection * >(argp1);
  {
    try {
      result = (*arg1)->Begin();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkPointCollection_impl::Iterator(static_cast< const btkPointCollection_impl::Iterator& >(result))), SWIGTYPE_p_btkPointCollectionIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPointCollection_End(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPointCollection *arg1 = (btkPointCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkPointCollection_impl::Iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkPointCollection_End",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPointCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPointCollection_End" "', argument " "1"" of type '" "btkPointCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkPointCollection * >(argp1);
  {
    try {
      result = (*arg1)->End();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkPointCollection_impl::Iterator(static_cast< const btkPointCollection_impl::Iterator& >(result))), SWIGTYPE_p_btkPointCollectionIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPointCollection_IsEmpty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPointCollection *arg1 = (btkPointCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkPointCollection_IsEmpty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPointCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPointCollection_IsEmpty" "', argument " "1"" of type '" "btkPointCollection const *""'"); 
  }
  arg1 = reinterpret_cast< btkPointCollection * >(argp1);
  {
    try {
      result = (bool)(*arg1)->IsEmpty();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPointCollection_GetItemNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPointCollection *arg1 = (btkPointCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkPointCollection_GetItemNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPointCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPointCollection_GetItemNumber" "', argument " "1"" of type '" "btkPointCollection const *""'"); 
  }
  arg1 = reinterpret_cast< btkPointCollection * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetItemNumber();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPointCollection_SetItemNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPointCollection *arg1 = (btkPointCollection *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkPointCollection_SetItemNumber",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPointCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPointCollection_SetItemNumber" "', argument " "1"" of type '" "btkPointCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkPointCollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkPointCollection_SetItemNumber" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->SetItemNumber(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPointCollection_GetIndexOf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPointCollection *arg1 = (btkPointCollection *) 0 ;
  SwigValueWrapper< btkPoint > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkPointCollection_GetIndexOf",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPointCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPointCollection_GetIndexOf" "', argument " "1"" of type '" "btkPointCollection const *""'"); 
  }
  arg1 = reinterpret_cast< btkPointCollection * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkPoint,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkPointCollection_GetIndexOf" "', argument " "2"" of type '" "btkPointCollection_impl::ItemPointer""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkPointCollection_GetIndexOf" "', argument " "2"" of type '" "btkPointCollection_impl::ItemPointer""'");
    } else {
      btkPointCollection_impl::ItemPointer * temp = reinterpret_cast< btkPointCollection_impl::ItemPointer * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (int)(*arg1)->GetIndexOf(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPointCollection_GetItem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPointCollection *arg1 = (btkPointCollection *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< btkPoint > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkPointCollection_GetItem",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPointCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPointCollection_GetItem" "', argument " "1"" of type '" "btkPointCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkPointCollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkPointCollection_GetItem" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (*arg1)->GetItem(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkPointCollection_impl::ItemPointer(static_cast< const btkPointCollection_impl::ItemPointer& >(result))), SWIGTYPE_p_btkPoint, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPointCollection_InsertItem__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPointCollection *arg1 = (btkPointCollection *) 0 ;
  btkPointCollection_impl::Iterator arg2 ;
  SwigValueWrapper< btkPoint > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkPointCollection_InsertItem",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPointCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPointCollection_InsertItem" "', argument " "1"" of type '" "btkPointCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkPointCollection * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkPointCollectionIterator,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkPointCollection_InsertItem" "', argument " "2"" of type '" "btkPointCollection_impl::Iterator""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkPointCollection_InsertItem" "', argument " "2"" of type '" "btkPointCollection_impl::Iterator""'");
    } else {
      btkPointCollection_impl::Iterator * temp = reinterpret_cast< btkPointCollection_impl::Iterator * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkPoint,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkPointCollection_InsertItem" "', argument " "3"" of type '" "btkPointCollection_impl::ItemPointer""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkPointCollection_InsertItem" "', argument " "3"" of type '" "btkPointCollection_impl::ItemPointer""'");
    } else {
      btkPointCollection_impl::ItemPointer * temp = reinterpret_cast< btkPointCollection_impl::ItemPointer * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      result = (bool)(*arg1)->InsertItem(arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPointCollection_InsertItem__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPointCollection *arg1 = (btkPointCollection *) 0 ;
  int arg2 ;
  SwigValueWrapper< btkPoint > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkPointCollection_InsertItem",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPointCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPointCollection_InsertItem" "', argument " "1"" of type '" "btkPointCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkPointCollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkPointCollection_InsertItem" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkPoint,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkPointCollection_InsertItem" "', argument " "3"" of type '" "btkPointCollection_impl::ItemPointer""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkPointCollection_InsertItem" "', argument " "3"" of type '" "btkPointCollection_impl::ItemPointer""'");
    } else {
      btkPointCollection_impl::ItemPointer * temp = reinterpret_cast< btkPointCollection_impl::ItemPointer * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      result = (bool)(*arg1)->InsertItem(arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPointCollection_InsertItem__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPointCollection *arg1 = (btkPointCollection *) 0 ;
  SwigValueWrapper< btkPoint > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkPointCollection_InsertItem",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPointCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPointCollection_InsertItem" "', argument " "1"" of type '" "btkPointCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkPointCollection * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkPoint,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkPointCollection_InsertItem" "', argument " "2"" of type '" "btkPointCollection_impl::ItemPointer""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkPointCollection_InsertItem" "', argument " "2"" of type '" "btkPointCollection_impl::ItemPointer""'");
    } else {
      btkPointCollection_impl::ItemPointer * temp = reinterpret_cast< btkPointCollection_impl::ItemPointer * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (bool)(*arg1)->InsertItem(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPointCollection_InsertItem(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkPointCollection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_btkPoint, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_btkPointCollection_InsertItem__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkPointCollection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_btkPointCollectionIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_btkPoint, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_btkPointCollection_InsertItem__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkPointCollection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_btkPoint, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_btkPointCollection_InsertItem__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkPointCollection_InsertItem'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkPointCollection_impl::InsertItem(btkPointCollection_impl::Iterator,btkPointCollection_impl::ItemPointer)\n"
    "    btkPointCollection_impl::InsertItem(int,btkPointCollection_impl::ItemPointer)\n"
    "    btkPointCollection_impl::InsertItem(btkPointCollection_impl::ItemPointer)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkPointCollection_SetItem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPointCollection *arg1 = (btkPointCollection *) 0 ;
  int arg2 ;
  SwigValueWrapper< btkPoint > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkPointCollection_SetItem",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPointCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPointCollection_SetItem" "', argument " "1"" of type '" "btkPointCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkPointCollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkPointCollection_SetItem" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkPoint,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkPointCollection_SetItem" "', argument " "3"" of type '" "btkPointCollection_impl::ItemPointer""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkPointCollection_SetItem" "', argument " "3"" of type '" "btkPointCollection_impl::ItemPointer""'");
    } else {
      btkPointCollection_impl::ItemPointer * temp = reinterpret_cast< btkPointCollection_impl::ItemPointer * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      result = (bool)(*arg1)->SetItem(arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPointCollection_RemoveItem__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPointCollection *arg1 = (btkPointCollection *) 0 ;
  btkPointCollection_impl::Iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  btkPointCollection_impl::Iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkPointCollection_RemoveItem",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPointCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPointCollection_RemoveItem" "', argument " "1"" of type '" "btkPointCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkPointCollection * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkPointCollectionIterator,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkPointCollection_RemoveItem" "', argument " "2"" of type '" "btkPointCollection_impl::Iterator""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkPointCollection_RemoveItem" "', argument " "2"" of type '" "btkPointCollection_impl::Iterator""'");
    } else {
      btkPointCollection_impl::Iterator * temp = reinterpret_cast< btkPointCollection_impl::Iterator * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (*arg1)->RemoveItem(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkPointCollection_impl::Iterator(static_cast< const btkPointCollection_impl::Iterator& >(result))), SWIGTYPE_p_btkPointCollectionIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPointCollection_RemoveItem__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPointCollection *arg1 = (btkPointCollection *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkPointCollection_RemoveItem",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPointCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPointCollection_RemoveItem" "', argument " "1"" of type '" "btkPointCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkPointCollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkPointCollection_RemoveItem" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->RemoveItem(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPointCollection_RemoveItem(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkPointCollection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_btkPointCollectionIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_btkPointCollection_RemoveItem__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkPointCollection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_btkPointCollection_RemoveItem__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkPointCollection_RemoveItem'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkPointCollection_impl::RemoveItem(btkPointCollection_impl::Iterator)\n"
    "    btkPointCollection_impl::RemoveItem(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkPointCollection_TakeItem__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPointCollection *arg1 = (btkPointCollection *) 0 ;
  btkPointCollection_impl::Iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< btkPoint > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkPointCollection_TakeItem",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPointCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPointCollection_TakeItem" "', argument " "1"" of type '" "btkPointCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkPointCollection * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkPointCollectionIterator,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkPointCollection_TakeItem" "', argument " "2"" of type '" "btkPointCollection_impl::Iterator""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkPointCollection_TakeItem" "', argument " "2"" of type '" "btkPointCollection_impl::Iterator""'");
    } else {
      btkPointCollection_impl::Iterator * temp = reinterpret_cast< btkPointCollection_impl::Iterator * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (*arg1)->TakeItem(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkPointCollection_impl::ItemPointer(static_cast< const btkPointCollection_impl::ItemPointer& >(result))), SWIGTYPE_p_btkPoint, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPointCollection_TakeItem__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPointCollection *arg1 = (btkPointCollection *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< btkPoint > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkPointCollection_TakeItem",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPointCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPointCollection_TakeItem" "', argument " "1"" of type '" "btkPointCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkPointCollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkPointCollection_TakeItem" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (*arg1)->TakeItem(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkPointCollection_impl::ItemPointer(static_cast< const btkPointCollection_impl::ItemPointer& >(result))), SWIGTYPE_p_btkPoint, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPointCollection_TakeItem(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkPointCollection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_btkPointCollectionIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_btkPointCollection_TakeItem__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkPointCollection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_btkPointCollection_TakeItem__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkPointCollection_TakeItem'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkPointCollection_impl::TakeItem(btkPointCollection_impl::Iterator)\n"
    "    btkPointCollection_impl::TakeItem(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkPointCollection_Clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPointCollection *arg1 = (btkPointCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkPointCollection_Clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPointCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPointCollection_Clear" "', argument " "1"" of type '" "btkPointCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkPointCollection * >(argp1);
  {
    try {
      (*arg1)->Clear();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPointCollection_Update(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPointCollection *arg1 = (btkPointCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkPointCollection_Update",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPointCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPointCollection_Update" "', argument " "1"" of type '" "btkPointCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkPointCollection * >(argp1);
  {
    try {
      (*arg1)->Update();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPointCollection_GetTimestamp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPointCollection *arg1 = (btkPointCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkPointCollection_GetTimestamp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPointCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPointCollection_GetTimestamp" "', argument " "1"" of type '" "btkPointCollection const *""'"); 
  }
  arg1 = reinterpret_cast< btkPointCollection * >(argp1);
  {
    try {
      result = (unsigned long)(*arg1)->GetTimestamp();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *btkPointCollection_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_btkPointCollection, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_btkForcePlatformCollectionIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatformCollectionIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_btkForcePlatformCollectionIterator")) SWIG_fail;
  {
    try {
      result = (btkForcePlatformCollectionIterator *)new btkForcePlatformCollectionIterator();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkForcePlatformCollectionIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatformCollectionIterator_incr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatformCollectionIterator *arg1 = (btkForcePlatformCollectionIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkForcePlatformCollectionIterator_incr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatformCollectionIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatformCollectionIterator_incr" "', argument " "1"" of type '" "btkForcePlatformCollectionIterator *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatformCollectionIterator * >(argp1);
  {
    try {
      (arg1)->incr();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatformCollectionIterator_decr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatformCollectionIterator *arg1 = (btkForcePlatformCollectionIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkForcePlatformCollectionIterator_decr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatformCollectionIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatformCollectionIterator_decr" "', argument " "1"" of type '" "btkForcePlatformCollectionIterator *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatformCollectionIterator * >(argp1);
  {
    try {
      (arg1)->decr();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatformCollectionIterator_value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatformCollectionIterator *arg1 = (btkForcePlatformCollectionIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< btkForcePlatform > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkForcePlatformCollectionIterator_value",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatformCollectionIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatformCollectionIterator_value" "', argument " "1"" of type '" "btkForcePlatformCollectionIterator *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatformCollectionIterator * >(argp1);
  {
    try {
      result = (arg1)->value();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkForcePlatform(static_cast< const btkForcePlatform& >(result))), SWIGTYPE_p_btkForcePlatform, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatformCollectionIterator___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatformCollectionIterator *arg1 = (btkForcePlatformCollectionIterator *) 0 ;
  btkForcePlatformCollectionIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkForcePlatformCollectionIterator___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatformCollectionIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatformCollectionIterator___eq__" "', argument " "1"" of type '" "btkForcePlatformCollectionIterator *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatformCollectionIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkForcePlatformCollectionIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkForcePlatformCollectionIterator___eq__" "', argument " "2"" of type '" "btkForcePlatformCollectionIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkForcePlatformCollectionIterator___eq__" "', argument " "2"" of type '" "btkForcePlatformCollectionIterator const &""'"); 
  }
  arg2 = reinterpret_cast< btkForcePlatformCollectionIterator * >(argp2);
  {
    try {
      result = (bool)(arg1)->operator ==((btkForcePlatformCollectionIterator const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatformCollectionIterator___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatformCollectionIterator *arg1 = (btkForcePlatformCollectionIterator *) 0 ;
  btkForcePlatformCollectionIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkForcePlatformCollectionIterator___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatformCollectionIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatformCollectionIterator___ne__" "', argument " "1"" of type '" "btkForcePlatformCollectionIterator *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatformCollectionIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkForcePlatformCollectionIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkForcePlatformCollectionIterator___ne__" "', argument " "2"" of type '" "btkForcePlatformCollectionIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkForcePlatformCollectionIterator___ne__" "', argument " "2"" of type '" "btkForcePlatformCollectionIterator const &""'"); 
  }
  arg2 = reinterpret_cast< btkForcePlatformCollectionIterator * >(argp2);
  {
    try {
      result = (bool)(arg1)->operator !=((btkForcePlatformCollectionIterator const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_btkForcePlatformCollectionIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatformCollectionIterator *arg1 = (btkForcePlatformCollectionIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_btkForcePlatformCollectionIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatformCollectionIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_btkForcePlatformCollectionIterator" "', argument " "1"" of type '" "btkForcePlatformCollectionIterator *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatformCollectionIterator * >(argp1);
  {
    try {
      delete arg1;
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *btkForcePlatformCollectionIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_btkForcePlatformCollectionIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_btkForcePlatformCollection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatformCollection *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_btkForcePlatformCollection")) SWIG_fail;
  {
    try {
      result = (btkForcePlatformCollection *)new btkForcePlatformCollection();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkForcePlatformCollection, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatformCollection_Clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatformCollection *arg1 = (btkForcePlatformCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkForcePlatformCollection result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkForcePlatformCollection_Clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatformCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatformCollection_Clone" "', argument " "1"" of type '" "btkForcePlatformCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatformCollection * >(argp1);
  {
    try {
      result = (arg1)->Clone();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkForcePlatformCollection(static_cast< const btkForcePlatformCollection& >(result))), SWIGTYPE_p_btkForcePlatformCollection, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatformCollection___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatformCollection *arg1 = (btkForcePlatformCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkForcePlatformCollection_impl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkForcePlatformCollection___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatformCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatformCollection___deref__" "', argument " "1"" of type '" "btkForcePlatformCollection const *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatformCollection * >(argp1);
  {
    try {
      result = (btkForcePlatformCollection_impl *)((btkForcePlatformCollection const *)arg1)->operator ->();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkForcePlatformCollection_impl, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_btkForcePlatformCollection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatformCollection *arg1 = (btkForcePlatformCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_btkForcePlatformCollection",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatformCollection, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_btkForcePlatformCollection" "', argument " "1"" of type '" "btkForcePlatformCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatformCollection * >(argp1);
  {
    try {
      delete arg1;
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatformCollection_Begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatformCollection *arg1 = (btkForcePlatformCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkForcePlatformCollection_impl::Iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkForcePlatformCollection_Begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatformCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatformCollection_Begin" "', argument " "1"" of type '" "btkForcePlatformCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatformCollection * >(argp1);
  {
    try {
      result = (*arg1)->Begin();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkForcePlatformCollection_impl::Iterator(static_cast< const btkForcePlatformCollection_impl::Iterator& >(result))), SWIGTYPE_p_btkForcePlatformCollectionIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatformCollection_End(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatformCollection *arg1 = (btkForcePlatformCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkForcePlatformCollection_impl::Iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkForcePlatformCollection_End",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatformCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatformCollection_End" "', argument " "1"" of type '" "btkForcePlatformCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatformCollection * >(argp1);
  {
    try {
      result = (*arg1)->End();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkForcePlatformCollection_impl::Iterator(static_cast< const btkForcePlatformCollection_impl::Iterator& >(result))), SWIGTYPE_p_btkForcePlatformCollectionIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatformCollection_IsEmpty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatformCollection *arg1 = (btkForcePlatformCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkForcePlatformCollection_IsEmpty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatformCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatformCollection_IsEmpty" "', argument " "1"" of type '" "btkForcePlatformCollection const *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatformCollection * >(argp1);
  {
    try {
      result = (bool)(*arg1)->IsEmpty();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatformCollection_GetItemNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatformCollection *arg1 = (btkForcePlatformCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkForcePlatformCollection_GetItemNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatformCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatformCollection_GetItemNumber" "', argument " "1"" of type '" "btkForcePlatformCollection const *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatformCollection * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetItemNumber();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatformCollection_SetItemNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatformCollection *arg1 = (btkForcePlatformCollection *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkForcePlatformCollection_SetItemNumber",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatformCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatformCollection_SetItemNumber" "', argument " "1"" of type '" "btkForcePlatformCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatformCollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkForcePlatformCollection_SetItemNumber" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->SetItemNumber(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatformCollection_GetIndexOf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatformCollection *arg1 = (btkForcePlatformCollection *) 0 ;
  SwigValueWrapper< btkForcePlatform > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkForcePlatformCollection_GetIndexOf",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatformCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatformCollection_GetIndexOf" "', argument " "1"" of type '" "btkForcePlatformCollection const *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatformCollection * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkForcePlatform,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkForcePlatformCollection_GetIndexOf" "', argument " "2"" of type '" "btkForcePlatformCollection_impl::ItemPointer""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkForcePlatformCollection_GetIndexOf" "', argument " "2"" of type '" "btkForcePlatformCollection_impl::ItemPointer""'");
    } else {
      btkForcePlatformCollection_impl::ItemPointer * temp = reinterpret_cast< btkForcePlatformCollection_impl::ItemPointer * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (int)(*arg1)->GetIndexOf(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatformCollection_GetItem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatformCollection *arg1 = (btkForcePlatformCollection *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< btkForcePlatform > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkForcePlatformCollection_GetItem",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatformCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatformCollection_GetItem" "', argument " "1"" of type '" "btkForcePlatformCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatformCollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkForcePlatformCollection_GetItem" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (*arg1)->GetItem(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkForcePlatformCollection_impl::ItemPointer(static_cast< const btkForcePlatformCollection_impl::ItemPointer& >(result))), SWIGTYPE_p_btkForcePlatform, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatformCollection_InsertItem__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatformCollection *arg1 = (btkForcePlatformCollection *) 0 ;
  btkForcePlatformCollection_impl::Iterator arg2 ;
  SwigValueWrapper< btkForcePlatform > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkForcePlatformCollection_InsertItem",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatformCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatformCollection_InsertItem" "', argument " "1"" of type '" "btkForcePlatformCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatformCollection * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkForcePlatformCollectionIterator,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkForcePlatformCollection_InsertItem" "', argument " "2"" of type '" "btkForcePlatformCollection_impl::Iterator""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkForcePlatformCollection_InsertItem" "', argument " "2"" of type '" "btkForcePlatformCollection_impl::Iterator""'");
    } else {
      btkForcePlatformCollection_impl::Iterator * temp = reinterpret_cast< btkForcePlatformCollection_impl::Iterator * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkForcePlatform,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkForcePlatformCollection_InsertItem" "', argument " "3"" of type '" "btkForcePlatformCollection_impl::ItemPointer""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkForcePlatformCollection_InsertItem" "', argument " "3"" of type '" "btkForcePlatformCollection_impl::ItemPointer""'");
    } else {
      btkForcePlatformCollection_impl::ItemPointer * temp = reinterpret_cast< btkForcePlatformCollection_impl::ItemPointer * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      result = (bool)(*arg1)->InsertItem(arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatformCollection_InsertItem__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatformCollection *arg1 = (btkForcePlatformCollection *) 0 ;
  int arg2 ;
  SwigValueWrapper< btkForcePlatform > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkForcePlatformCollection_InsertItem",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatformCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatformCollection_InsertItem" "', argument " "1"" of type '" "btkForcePlatformCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatformCollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkForcePlatformCollection_InsertItem" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkForcePlatform,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkForcePlatformCollection_InsertItem" "', argument " "3"" of type '" "btkForcePlatformCollection_impl::ItemPointer""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkForcePlatformCollection_InsertItem" "', argument " "3"" of type '" "btkForcePlatformCollection_impl::ItemPointer""'");
    } else {
      btkForcePlatformCollection_impl::ItemPointer * temp = reinterpret_cast< btkForcePlatformCollection_impl::ItemPointer * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      result = (bool)(*arg1)->InsertItem(arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatformCollection_InsertItem__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatformCollection *arg1 = (btkForcePlatformCollection *) 0 ;
  SwigValueWrapper< btkForcePlatform > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkForcePlatformCollection_InsertItem",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatformCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatformCollection_InsertItem" "', argument " "1"" of type '" "btkForcePlatformCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatformCollection * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkForcePlatform,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkForcePlatformCollection_InsertItem" "', argument " "2"" of type '" "btkForcePlatformCollection_impl::ItemPointer""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkForcePlatformCollection_InsertItem" "', argument " "2"" of type '" "btkForcePlatformCollection_impl::ItemPointer""'");
    } else {
      btkForcePlatformCollection_impl::ItemPointer * temp = reinterpret_cast< btkForcePlatformCollection_impl::ItemPointer * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (bool)(*arg1)->InsertItem(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatformCollection_InsertItem(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkForcePlatformCollection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_btkForcePlatform, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_btkForcePlatformCollection_InsertItem__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkForcePlatformCollection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_btkForcePlatformCollectionIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_btkForcePlatform, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_btkForcePlatformCollection_InsertItem__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkForcePlatformCollection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_btkForcePlatform, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_btkForcePlatformCollection_InsertItem__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkForcePlatformCollection_InsertItem'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkForcePlatformCollection_impl::InsertItem(btkForcePlatformCollection_impl::Iterator,btkForcePlatformCollection_impl::ItemPointer)\n"
    "    btkForcePlatformCollection_impl::InsertItem(int,btkForcePlatformCollection_impl::ItemPointer)\n"
    "    btkForcePlatformCollection_impl::InsertItem(btkForcePlatformCollection_impl::ItemPointer)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkForcePlatformCollection_SetItem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatformCollection *arg1 = (btkForcePlatformCollection *) 0 ;
  int arg2 ;
  SwigValueWrapper< btkForcePlatform > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkForcePlatformCollection_SetItem",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatformCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatformCollection_SetItem" "', argument " "1"" of type '" "btkForcePlatformCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatformCollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkForcePlatformCollection_SetItem" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkForcePlatform,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkForcePlatformCollection_SetItem" "', argument " "3"" of type '" "btkForcePlatformCollection_impl::ItemPointer""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkForcePlatformCollection_SetItem" "', argument " "3"" of type '" "btkForcePlatformCollection_impl::ItemPointer""'");
    } else {
      btkForcePlatformCollection_impl::ItemPointer * temp = reinterpret_cast< btkForcePlatformCollection_impl::ItemPointer * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      result = (bool)(*arg1)->SetItem(arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatformCollection_RemoveItem__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatformCollection *arg1 = (btkForcePlatformCollection *) 0 ;
  btkForcePlatformCollection_impl::Iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  btkForcePlatformCollection_impl::Iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkForcePlatformCollection_RemoveItem",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatformCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatformCollection_RemoveItem" "', argument " "1"" of type '" "btkForcePlatformCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatformCollection * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkForcePlatformCollectionIterator,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkForcePlatformCollection_RemoveItem" "', argument " "2"" of type '" "btkForcePlatformCollection_impl::Iterator""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkForcePlatformCollection_RemoveItem" "', argument " "2"" of type '" "btkForcePlatformCollection_impl::Iterator""'");
    } else {
      btkForcePlatformCollection_impl::Iterator * temp = reinterpret_cast< btkForcePlatformCollection_impl::Iterator * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (*arg1)->RemoveItem(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkForcePlatformCollection_impl::Iterator(static_cast< const btkForcePlatformCollection_impl::Iterator& >(result))), SWIGTYPE_p_btkForcePlatformCollectionIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatformCollection_RemoveItem__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatformCollection *arg1 = (btkForcePlatformCollection *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkForcePlatformCollection_RemoveItem",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatformCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatformCollection_RemoveItem" "', argument " "1"" of type '" "btkForcePlatformCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatformCollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkForcePlatformCollection_RemoveItem" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->RemoveItem(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatformCollection_RemoveItem(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkForcePlatformCollection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_btkForcePlatformCollectionIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_btkForcePlatformCollection_RemoveItem__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkForcePlatformCollection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_btkForcePlatformCollection_RemoveItem__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkForcePlatformCollection_RemoveItem'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkForcePlatformCollection_impl::RemoveItem(btkForcePlatformCollection_impl::Iterator)\n"
    "    btkForcePlatformCollection_impl::RemoveItem(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkForcePlatformCollection_TakeItem__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatformCollection *arg1 = (btkForcePlatformCollection *) 0 ;
  btkForcePlatformCollection_impl::Iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< btkForcePlatform > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkForcePlatformCollection_TakeItem",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatformCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatformCollection_TakeItem" "', argument " "1"" of type '" "btkForcePlatformCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatformCollection * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkForcePlatformCollectionIterator,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkForcePlatformCollection_TakeItem" "', argument " "2"" of type '" "btkForcePlatformCollection_impl::Iterator""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkForcePlatformCollection_TakeItem" "', argument " "2"" of type '" "btkForcePlatformCollection_impl::Iterator""'");
    } else {
      btkForcePlatformCollection_impl::Iterator * temp = reinterpret_cast< btkForcePlatformCollection_impl::Iterator * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (*arg1)->TakeItem(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkForcePlatformCollection_impl::ItemPointer(static_cast< const btkForcePlatformCollection_impl::ItemPointer& >(result))), SWIGTYPE_p_btkForcePlatform, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatformCollection_TakeItem__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatformCollection *arg1 = (btkForcePlatformCollection *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< btkForcePlatform > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkForcePlatformCollection_TakeItem",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatformCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatformCollection_TakeItem" "', argument " "1"" of type '" "btkForcePlatformCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatformCollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkForcePlatformCollection_TakeItem" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (*arg1)->TakeItem(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkForcePlatformCollection_impl::ItemPointer(static_cast< const btkForcePlatformCollection_impl::ItemPointer& >(result))), SWIGTYPE_p_btkForcePlatform, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatformCollection_TakeItem(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkForcePlatformCollection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_btkForcePlatformCollectionIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_btkForcePlatformCollection_TakeItem__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkForcePlatformCollection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_btkForcePlatformCollection_TakeItem__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkForcePlatformCollection_TakeItem'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkForcePlatformCollection_impl::TakeItem(btkForcePlatformCollection_impl::Iterator)\n"
    "    btkForcePlatformCollection_impl::TakeItem(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkForcePlatformCollection_Clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatformCollection *arg1 = (btkForcePlatformCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkForcePlatformCollection_Clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatformCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatformCollection_Clear" "', argument " "1"" of type '" "btkForcePlatformCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatformCollection * >(argp1);
  {
    try {
      (*arg1)->Clear();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatformCollection_Update(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatformCollection *arg1 = (btkForcePlatformCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkForcePlatformCollection_Update",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatformCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatformCollection_Update" "', argument " "1"" of type '" "btkForcePlatformCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatformCollection * >(argp1);
  {
    try {
      (*arg1)->Update();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatformCollection_GetTimestamp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatformCollection *arg1 = (btkForcePlatformCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkForcePlatformCollection_GetTimestamp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatformCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatformCollection_GetTimestamp" "', argument " "1"" of type '" "btkForcePlatformCollection const *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatformCollection * >(argp1);
  {
    try {
      result = (unsigned long)(*arg1)->GetTimestamp();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *btkForcePlatformCollection_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_btkForcePlatformCollection, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_btkWrenchCollectionIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrenchCollectionIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_btkWrenchCollectionIterator")) SWIG_fail;
  {
    try {
      result = (btkWrenchCollectionIterator *)new btkWrenchCollectionIterator();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkWrenchCollectionIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkWrenchCollectionIterator_incr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrenchCollectionIterator *arg1 = (btkWrenchCollectionIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkWrenchCollectionIterator_incr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrenchCollectionIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrenchCollectionIterator_incr" "', argument " "1"" of type '" "btkWrenchCollectionIterator *""'"); 
  }
  arg1 = reinterpret_cast< btkWrenchCollectionIterator * >(argp1);
  {
    try {
      (arg1)->incr();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkWrenchCollectionIterator_decr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrenchCollectionIterator *arg1 = (btkWrenchCollectionIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkWrenchCollectionIterator_decr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrenchCollectionIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrenchCollectionIterator_decr" "', argument " "1"" of type '" "btkWrenchCollectionIterator *""'"); 
  }
  arg1 = reinterpret_cast< btkWrenchCollectionIterator * >(argp1);
  {
    try {
      (arg1)->decr();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkWrenchCollectionIterator_value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrenchCollectionIterator *arg1 = (btkWrenchCollectionIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkWrench result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkWrenchCollectionIterator_value",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrenchCollectionIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrenchCollectionIterator_value" "', argument " "1"" of type '" "btkWrenchCollectionIterator *""'"); 
  }
  arg1 = reinterpret_cast< btkWrenchCollectionIterator * >(argp1);
  {
    try {
      result = (arg1)->value();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkWrench(static_cast< const btkWrench& >(result))), SWIGTYPE_p_btkWrench, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkWrenchCollectionIterator___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrenchCollectionIterator *arg1 = (btkWrenchCollectionIterator *) 0 ;
  btkWrenchCollectionIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkWrenchCollectionIterator___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrenchCollectionIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrenchCollectionIterator___eq__" "', argument " "1"" of type '" "btkWrenchCollectionIterator *""'"); 
  }
  arg1 = reinterpret_cast< btkWrenchCollectionIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkWrenchCollectionIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkWrenchCollectionIterator___eq__" "', argument " "2"" of type '" "btkWrenchCollectionIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkWrenchCollectionIterator___eq__" "', argument " "2"" of type '" "btkWrenchCollectionIterator const &""'"); 
  }
  arg2 = reinterpret_cast< btkWrenchCollectionIterator * >(argp2);
  {
    try {
      result = (bool)(arg1)->operator ==((btkWrenchCollectionIterator const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkWrenchCollectionIterator___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrenchCollectionIterator *arg1 = (btkWrenchCollectionIterator *) 0 ;
  btkWrenchCollectionIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkWrenchCollectionIterator___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrenchCollectionIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrenchCollectionIterator___ne__" "', argument " "1"" of type '" "btkWrenchCollectionIterator *""'"); 
  }
  arg1 = reinterpret_cast< btkWrenchCollectionIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkWrenchCollectionIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkWrenchCollectionIterator___ne__" "', argument " "2"" of type '" "btkWrenchCollectionIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkWrenchCollectionIterator___ne__" "', argument " "2"" of type '" "btkWrenchCollectionIterator const &""'"); 
  }
  arg2 = reinterpret_cast< btkWrenchCollectionIterator * >(argp2);
  {
    try {
      result = (bool)(arg1)->operator !=((btkWrenchCollectionIterator const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_btkWrenchCollectionIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrenchCollectionIterator *arg1 = (btkWrenchCollectionIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_btkWrenchCollectionIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrenchCollectionIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_btkWrenchCollectionIterator" "', argument " "1"" of type '" "btkWrenchCollectionIterator *""'"); 
  }
  arg1 = reinterpret_cast< btkWrenchCollectionIterator * >(argp1);
  {
    try {
      delete arg1;
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *btkWrenchCollectionIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_btkWrenchCollectionIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_btkWrenchCollection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrenchCollection *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_btkWrenchCollection")) SWIG_fail;
  {
    try {
      result = (btkWrenchCollection *)new btkWrenchCollection();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkWrenchCollection, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkWrenchCollection_Clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrenchCollection *arg1 = (btkWrenchCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkWrenchCollection result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkWrenchCollection_Clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrenchCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrenchCollection_Clone" "', argument " "1"" of type '" "btkWrenchCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkWrenchCollection * >(argp1);
  {
    try {
      result = (arg1)->Clone();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkWrenchCollection(static_cast< const btkWrenchCollection& >(result))), SWIGTYPE_p_btkWrenchCollection, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkWrenchCollection___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrenchCollection *arg1 = (btkWrenchCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkWrenchCollection_impl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkWrenchCollection___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrenchCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrenchCollection___deref__" "', argument " "1"" of type '" "btkWrenchCollection const *""'"); 
  }
  arg1 = reinterpret_cast< btkWrenchCollection * >(argp1);
  {
    try {
      result = (btkWrenchCollection_impl *)((btkWrenchCollection const *)arg1)->operator ->();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkWrenchCollection_impl, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_btkWrenchCollection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrenchCollection *arg1 = (btkWrenchCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_btkWrenchCollection",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrenchCollection, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_btkWrenchCollection" "', argument " "1"" of type '" "btkWrenchCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkWrenchCollection * >(argp1);
  {
    try {
      delete arg1;
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkWrenchCollection_Begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrenchCollection *arg1 = (btkWrenchCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkWrenchCollection_impl::Iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkWrenchCollection_Begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrenchCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrenchCollection_Begin" "', argument " "1"" of type '" "btkWrenchCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkWrenchCollection * >(argp1);
  {
    try {
      result = (*arg1)->Begin();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkWrenchCollection_impl::Iterator(static_cast< const btkWrenchCollection_impl::Iterator& >(result))), SWIGTYPE_p_btkWrenchCollectionIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkWrenchCollection_End(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrenchCollection *arg1 = (btkWrenchCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkWrenchCollection_impl::Iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkWrenchCollection_End",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrenchCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrenchCollection_End" "', argument " "1"" of type '" "btkWrenchCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkWrenchCollection * >(argp1);
  {
    try {
      result = (*arg1)->End();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkWrenchCollection_impl::Iterator(static_cast< const btkWrenchCollection_impl::Iterator& >(result))), SWIGTYPE_p_btkWrenchCollectionIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkWrenchCollection_IsEmpty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrenchCollection *arg1 = (btkWrenchCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkWrenchCollection_IsEmpty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrenchCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrenchCollection_IsEmpty" "', argument " "1"" of type '" "btkWrenchCollection const *""'"); 
  }
  arg1 = reinterpret_cast< btkWrenchCollection * >(argp1);
  {
    try {
      result = (bool)(*arg1)->IsEmpty();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkWrenchCollection_GetItemNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrenchCollection *arg1 = (btkWrenchCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkWrenchCollection_GetItemNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrenchCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrenchCollection_GetItemNumber" "', argument " "1"" of type '" "btkWrenchCollection const *""'"); 
  }
  arg1 = reinterpret_cast< btkWrenchCollection * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetItemNumber();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkWrenchCollection_SetItemNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrenchCollection *arg1 = (btkWrenchCollection *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkWrenchCollection_SetItemNumber",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrenchCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrenchCollection_SetItemNumber" "', argument " "1"" of type '" "btkWrenchCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkWrenchCollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkWrenchCollection_SetItemNumber" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->SetItemNumber(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkWrenchCollection_GetIndexOf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrenchCollection *arg1 = (btkWrenchCollection *) 0 ;
  btkWrenchCollection_impl::ItemPointer arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkWrenchCollection_GetIndexOf",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrenchCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrenchCollection_GetIndexOf" "', argument " "1"" of type '" "btkWrenchCollection const *""'"); 
  }
  arg1 = reinterpret_cast< btkWrenchCollection * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkWrench,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkWrenchCollection_GetIndexOf" "', argument " "2"" of type '" "btkWrenchCollection_impl::ItemPointer""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkWrenchCollection_GetIndexOf" "', argument " "2"" of type '" "btkWrenchCollection_impl::ItemPointer""'");
    } else {
      btkWrenchCollection_impl::ItemPointer * temp = reinterpret_cast< btkWrenchCollection_impl::ItemPointer * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (int)(*arg1)->GetIndexOf(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkWrenchCollection_GetItem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrenchCollection *arg1 = (btkWrenchCollection *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  btkWrenchCollection_impl::ItemPointer result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkWrenchCollection_GetItem",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrenchCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrenchCollection_GetItem" "', argument " "1"" of type '" "btkWrenchCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkWrenchCollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkWrenchCollection_GetItem" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (*arg1)->GetItem(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkWrenchCollection_impl::ItemPointer(static_cast< const btkWrenchCollection_impl::ItemPointer& >(result))), SWIGTYPE_p_btkWrench, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkWrenchCollection_InsertItem__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrenchCollection *arg1 = (btkWrenchCollection *) 0 ;
  btkWrenchCollection_impl::Iterator arg2 ;
  btkWrenchCollection_impl::ItemPointer arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkWrenchCollection_InsertItem",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrenchCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrenchCollection_InsertItem" "', argument " "1"" of type '" "btkWrenchCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkWrenchCollection * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkWrenchCollectionIterator,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkWrenchCollection_InsertItem" "', argument " "2"" of type '" "btkWrenchCollection_impl::Iterator""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkWrenchCollection_InsertItem" "', argument " "2"" of type '" "btkWrenchCollection_impl::Iterator""'");
    } else {
      btkWrenchCollection_impl::Iterator * temp = reinterpret_cast< btkWrenchCollection_impl::Iterator * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkWrench,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkWrenchCollection_InsertItem" "', argument " "3"" of type '" "btkWrenchCollection_impl::ItemPointer""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkWrenchCollection_InsertItem" "', argument " "3"" of type '" "btkWrenchCollection_impl::ItemPointer""'");
    } else {
      btkWrenchCollection_impl::ItemPointer * temp = reinterpret_cast< btkWrenchCollection_impl::ItemPointer * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      result = (bool)(*arg1)->InsertItem(arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkWrenchCollection_InsertItem__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrenchCollection *arg1 = (btkWrenchCollection *) 0 ;
  int arg2 ;
  btkWrenchCollection_impl::ItemPointer arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkWrenchCollection_InsertItem",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrenchCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrenchCollection_InsertItem" "', argument " "1"" of type '" "btkWrenchCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkWrenchCollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkWrenchCollection_InsertItem" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkWrench,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkWrenchCollection_InsertItem" "', argument " "3"" of type '" "btkWrenchCollection_impl::ItemPointer""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkWrenchCollection_InsertItem" "', argument " "3"" of type '" "btkWrenchCollection_impl::ItemPointer""'");
    } else {
      btkWrenchCollection_impl::ItemPointer * temp = reinterpret_cast< btkWrenchCollection_impl::ItemPointer * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      result = (bool)(*arg1)->InsertItem(arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkWrenchCollection_InsertItem__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrenchCollection *arg1 = (btkWrenchCollection *) 0 ;
  btkWrenchCollection_impl::ItemPointer arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkWrenchCollection_InsertItem",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrenchCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrenchCollection_InsertItem" "', argument " "1"" of type '" "btkWrenchCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkWrenchCollection * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkWrench,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkWrenchCollection_InsertItem" "', argument " "2"" of type '" "btkWrenchCollection_impl::ItemPointer""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkWrenchCollection_InsertItem" "', argument " "2"" of type '" "btkWrenchCollection_impl::ItemPointer""'");
    } else {
      btkWrenchCollection_impl::ItemPointer * temp = reinterpret_cast< btkWrenchCollection_impl::ItemPointer * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (bool)(*arg1)->InsertItem(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkWrenchCollection_InsertItem(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkWrenchCollection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_btkWrench, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_btkWrenchCollection_InsertItem__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkWrenchCollection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_btkWrenchCollectionIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_btkWrench, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_btkWrenchCollection_InsertItem__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkWrenchCollection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_btkWrench, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_btkWrenchCollection_InsertItem__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkWrenchCollection_InsertItem'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkWrenchCollection_impl::InsertItem(btkWrenchCollection_impl::Iterator,btkWrenchCollection_impl::ItemPointer)\n"
    "    btkWrenchCollection_impl::InsertItem(int,btkWrenchCollection_impl::ItemPointer)\n"
    "    btkWrenchCollection_impl::InsertItem(btkWrenchCollection_impl::ItemPointer)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkWrenchCollection_SetItem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrenchCollection *arg1 = (btkWrenchCollection *) 0 ;
  int arg2 ;
  btkWrenchCollection_impl::ItemPointer arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkWrenchCollection_SetItem",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrenchCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrenchCollection_SetItem" "', argument " "1"" of type '" "btkWrenchCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkWrenchCollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkWrenchCollection_SetItem" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkWrench,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkWrenchCollection_SetItem" "', argument " "3"" of type '" "btkWrenchCollection_impl::ItemPointer""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkWrenchCollection_SetItem" "', argument " "3"" of type '" "btkWrenchCollection_impl::ItemPointer""'");
    } else {
      btkWrenchCollection_impl::ItemPointer * temp = reinterpret_cast< btkWrenchCollection_impl::ItemPointer * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      result = (bool)(*arg1)->SetItem(arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkWrenchCollection_RemoveItem__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrenchCollection *arg1 = (btkWrenchCollection *) 0 ;
  btkWrenchCollection_impl::Iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  btkWrenchCollection_impl::Iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkWrenchCollection_RemoveItem",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrenchCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrenchCollection_RemoveItem" "', argument " "1"" of type '" "btkWrenchCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkWrenchCollection * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkWrenchCollectionIterator,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkWrenchCollection_RemoveItem" "', argument " "2"" of type '" "btkWrenchCollection_impl::Iterator""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkWrenchCollection_RemoveItem" "', argument " "2"" of type '" "btkWrenchCollection_impl::Iterator""'");
    } else {
      btkWrenchCollection_impl::Iterator * temp = reinterpret_cast< btkWrenchCollection_impl::Iterator * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (*arg1)->RemoveItem(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkWrenchCollection_impl::Iterator(static_cast< const btkWrenchCollection_impl::Iterator& >(result))), SWIGTYPE_p_btkWrenchCollectionIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkWrenchCollection_RemoveItem__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrenchCollection *arg1 = (btkWrenchCollection *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkWrenchCollection_RemoveItem",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrenchCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrenchCollection_RemoveItem" "', argument " "1"" of type '" "btkWrenchCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkWrenchCollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkWrenchCollection_RemoveItem" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->RemoveItem(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkWrenchCollection_RemoveItem(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkWrenchCollection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_btkWrenchCollectionIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_btkWrenchCollection_RemoveItem__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkWrenchCollection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_btkWrenchCollection_RemoveItem__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkWrenchCollection_RemoveItem'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkWrenchCollection_impl::RemoveItem(btkWrenchCollection_impl::Iterator)\n"
    "    btkWrenchCollection_impl::RemoveItem(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkWrenchCollection_TakeItem__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrenchCollection *arg1 = (btkWrenchCollection *) 0 ;
  btkWrenchCollection_impl::Iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  btkWrenchCollection_impl::ItemPointer result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkWrenchCollection_TakeItem",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrenchCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrenchCollection_TakeItem" "', argument " "1"" of type '" "btkWrenchCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkWrenchCollection * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkWrenchCollectionIterator,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkWrenchCollection_TakeItem" "', argument " "2"" of type '" "btkWrenchCollection_impl::Iterator""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkWrenchCollection_TakeItem" "', argument " "2"" of type '" "btkWrenchCollection_impl::Iterator""'");
    } else {
      btkWrenchCollection_impl::Iterator * temp = reinterpret_cast< btkWrenchCollection_impl::Iterator * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (*arg1)->TakeItem(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkWrenchCollection_impl::ItemPointer(static_cast< const btkWrenchCollection_impl::ItemPointer& >(result))), SWIGTYPE_p_btkWrench, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkWrenchCollection_TakeItem__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrenchCollection *arg1 = (btkWrenchCollection *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  btkWrenchCollection_impl::ItemPointer result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkWrenchCollection_TakeItem",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrenchCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrenchCollection_TakeItem" "', argument " "1"" of type '" "btkWrenchCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkWrenchCollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkWrenchCollection_TakeItem" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (*arg1)->TakeItem(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkWrenchCollection_impl::ItemPointer(static_cast< const btkWrenchCollection_impl::ItemPointer& >(result))), SWIGTYPE_p_btkWrench, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkWrenchCollection_TakeItem(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkWrenchCollection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_btkWrenchCollectionIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_btkWrenchCollection_TakeItem__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkWrenchCollection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_btkWrenchCollection_TakeItem__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkWrenchCollection_TakeItem'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkWrenchCollection_impl::TakeItem(btkWrenchCollection_impl::Iterator)\n"
    "    btkWrenchCollection_impl::TakeItem(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkWrenchCollection_Clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrenchCollection *arg1 = (btkWrenchCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkWrenchCollection_Clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrenchCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrenchCollection_Clear" "', argument " "1"" of type '" "btkWrenchCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkWrenchCollection * >(argp1);
  {
    try {
      (*arg1)->Clear();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkWrenchCollection_Update(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrenchCollection *arg1 = (btkWrenchCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkWrenchCollection_Update",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrenchCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrenchCollection_Update" "', argument " "1"" of type '" "btkWrenchCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkWrenchCollection * >(argp1);
  {
    try {
      (*arg1)->Update();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkWrenchCollection_GetTimestamp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrenchCollection *arg1 = (btkWrenchCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkWrenchCollection_GetTimestamp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrenchCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrenchCollection_GetTimestamp" "', argument " "1"" of type '" "btkWrenchCollection const *""'"); 
  }
  arg1 = reinterpret_cast< btkWrenchCollection * >(argp1);
  {
    try {
      result = (unsigned long)(*arg1)->GetTimestamp();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *btkWrenchCollection_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_btkWrenchCollection, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_btkIMUCollectionIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMUCollectionIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_btkIMUCollectionIterator")) SWIG_fail;
  {
    try {
      result = (btkIMUCollectionIterator *)new btkIMUCollectionIterator();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkIMUCollectionIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMUCollectionIterator_incr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMUCollectionIterator *arg1 = (btkIMUCollectionIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkIMUCollectionIterator_incr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkIMUCollectionIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMUCollectionIterator_incr" "', argument " "1"" of type '" "btkIMUCollectionIterator *""'"); 
  }
  arg1 = reinterpret_cast< btkIMUCollectionIterator * >(argp1);
  {
    try {
      (arg1)->incr();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMUCollectionIterator_decr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMUCollectionIterator *arg1 = (btkIMUCollectionIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkIMUCollectionIterator_decr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkIMUCollectionIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMUCollectionIterator_decr" "', argument " "1"" of type '" "btkIMUCollectionIterator *""'"); 
  }
  arg1 = reinterpret_cast< btkIMUCollectionIterator * >(argp1);
  {
    try {
      (arg1)->decr();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMUCollectionIterator_value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMUCollectionIterator *arg1 = (btkIMUCollectionIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< btkIMU > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkIMUCollectionIterator_value",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkIMUCollectionIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMUCollectionIterator_value" "', argument " "1"" of type '" "btkIMUCollectionIterator *""'"); 
  }
  arg1 = reinterpret_cast< btkIMUCollectionIterator * >(argp1);
  {
    try {
      result = (arg1)->value();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkIMU(static_cast< const btkIMU& >(result))), SWIGTYPE_p_btkIMU, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMUCollectionIterator___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMUCollectionIterator *arg1 = (btkIMUCollectionIterator *) 0 ;
  btkIMUCollectionIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkIMUCollectionIterator___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkIMUCollectionIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMUCollectionIterator___eq__" "', argument " "1"" of type '" "btkIMUCollectionIterator *""'"); 
  }
  arg1 = reinterpret_cast< btkIMUCollectionIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkIMUCollectionIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkIMUCollectionIterator___eq__" "', argument " "2"" of type '" "btkIMUCollectionIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkIMUCollectionIterator___eq__" "', argument " "2"" of type '" "btkIMUCollectionIterator const &""'"); 
  }
  arg2 = reinterpret_cast< btkIMUCollectionIterator * >(argp2);
  {
    try {
      result = (bool)(arg1)->operator ==((btkIMUCollectionIterator const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMUCollectionIterator___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMUCollectionIterator *arg1 = (btkIMUCollectionIterator *) 0 ;
  btkIMUCollectionIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkIMUCollectionIterator___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkIMUCollectionIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMUCollectionIterator___ne__" "', argument " "1"" of type '" "btkIMUCollectionIterator *""'"); 
  }
  arg1 = reinterpret_cast< btkIMUCollectionIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkIMUCollectionIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkIMUCollectionIterator___ne__" "', argument " "2"" of type '" "btkIMUCollectionIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkIMUCollectionIterator___ne__" "', argument " "2"" of type '" "btkIMUCollectionIterator const &""'"); 
  }
  arg2 = reinterpret_cast< btkIMUCollectionIterator * >(argp2);
  {
    try {
      result = (bool)(arg1)->operator !=((btkIMUCollectionIterator const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_btkIMUCollectionIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMUCollectionIterator *arg1 = (btkIMUCollectionIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_btkIMUCollectionIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkIMUCollectionIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_btkIMUCollectionIterator" "', argument " "1"" of type '" "btkIMUCollectionIterator *""'"); 
  }
  arg1 = reinterpret_cast< btkIMUCollectionIterator * >(argp1);
  {
    try {
      delete arg1;
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *btkIMUCollectionIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_btkIMUCollectionIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_btkIMUCollection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMUCollection *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_btkIMUCollection")) SWIG_fail;
  {
    try {
      result = (btkIMUCollection *)new btkIMUCollection();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkIMUCollection, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMUCollection_Clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMUCollection *arg1 = (btkIMUCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkIMUCollection result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkIMUCollection_Clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkIMUCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMUCollection_Clone" "', argument " "1"" of type '" "btkIMUCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkIMUCollection * >(argp1);
  {
    try {
      result = (arg1)->Clone();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkIMUCollection(static_cast< const btkIMUCollection& >(result))), SWIGTYPE_p_btkIMUCollection, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMUCollection___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMUCollection *arg1 = (btkIMUCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkIMUCollection_impl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkIMUCollection___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkIMUCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMUCollection___deref__" "', argument " "1"" of type '" "btkIMUCollection const *""'"); 
  }
  arg1 = reinterpret_cast< btkIMUCollection * >(argp1);
  {
    try {
      result = (btkIMUCollection_impl *)((btkIMUCollection const *)arg1)->operator ->();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkIMUCollection_impl, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_btkIMUCollection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMUCollection *arg1 = (btkIMUCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_btkIMUCollection",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkIMUCollection, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_btkIMUCollection" "', argument " "1"" of type '" "btkIMUCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkIMUCollection * >(argp1);
  {
    try {
      delete arg1;
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMUCollection_Begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMUCollection *arg1 = (btkIMUCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkIMUCollection_impl::Iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkIMUCollection_Begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkIMUCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMUCollection_Begin" "', argument " "1"" of type '" "btkIMUCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkIMUCollection * >(argp1);
  {
    try {
      result = (*arg1)->Begin();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkIMUCollection_impl::Iterator(static_cast< const btkIMUCollection_impl::Iterator& >(result))), SWIGTYPE_p_btkIMUCollectionIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMUCollection_End(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMUCollection *arg1 = (btkIMUCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkIMUCollection_impl::Iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkIMUCollection_End",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkIMUCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMUCollection_End" "', argument " "1"" of type '" "btkIMUCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkIMUCollection * >(argp1);
  {
    try {
      result = (*arg1)->End();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkIMUCollection_impl::Iterator(static_cast< const btkIMUCollection_impl::Iterator& >(result))), SWIGTYPE_p_btkIMUCollectionIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMUCollection_IsEmpty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMUCollection *arg1 = (btkIMUCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkIMUCollection_IsEmpty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkIMUCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMUCollection_IsEmpty" "', argument " "1"" of type '" "btkIMUCollection const *""'"); 
  }
  arg1 = reinterpret_cast< btkIMUCollection * >(argp1);
  {
    try {
      result = (bool)(*arg1)->IsEmpty();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMUCollection_GetItemNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMUCollection *arg1 = (btkIMUCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkIMUCollection_GetItemNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkIMUCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMUCollection_GetItemNumber" "', argument " "1"" of type '" "btkIMUCollection const *""'"); 
  }
  arg1 = reinterpret_cast< btkIMUCollection * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetItemNumber();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMUCollection_SetItemNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMUCollection *arg1 = (btkIMUCollection *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkIMUCollection_SetItemNumber",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkIMUCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMUCollection_SetItemNumber" "', argument " "1"" of type '" "btkIMUCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkIMUCollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkIMUCollection_SetItemNumber" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->SetItemNumber(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMUCollection_GetIndexOf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMUCollection *arg1 = (btkIMUCollection *) 0 ;
  SwigValueWrapper< btkIMU > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkIMUCollection_GetIndexOf",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkIMUCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMUCollection_GetIndexOf" "', argument " "1"" of type '" "btkIMUCollection const *""'"); 
  }
  arg1 = reinterpret_cast< btkIMUCollection * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkIMU,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkIMUCollection_GetIndexOf" "', argument " "2"" of type '" "btkIMUCollection_impl::ItemPointer""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkIMUCollection_GetIndexOf" "', argument " "2"" of type '" "btkIMUCollection_impl::ItemPointer""'");
    } else {
      btkIMUCollection_impl::ItemPointer * temp = reinterpret_cast< btkIMUCollection_impl::ItemPointer * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (int)(*arg1)->GetIndexOf(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMUCollection_GetItem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMUCollection *arg1 = (btkIMUCollection *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< btkIMU > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkIMUCollection_GetItem",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkIMUCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMUCollection_GetItem" "', argument " "1"" of type '" "btkIMUCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkIMUCollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkIMUCollection_GetItem" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (*arg1)->GetItem(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkIMUCollection_impl::ItemPointer(static_cast< const btkIMUCollection_impl::ItemPointer& >(result))), SWIGTYPE_p_btkIMU, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMUCollection_InsertItem__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMUCollection *arg1 = (btkIMUCollection *) 0 ;
  btkIMUCollection_impl::Iterator arg2 ;
  SwigValueWrapper< btkIMU > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkIMUCollection_InsertItem",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkIMUCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMUCollection_InsertItem" "', argument " "1"" of type '" "btkIMUCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkIMUCollection * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkIMUCollectionIterator,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkIMUCollection_InsertItem" "', argument " "2"" of type '" "btkIMUCollection_impl::Iterator""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkIMUCollection_InsertItem" "', argument " "2"" of type '" "btkIMUCollection_impl::Iterator""'");
    } else {
      btkIMUCollection_impl::Iterator * temp = reinterpret_cast< btkIMUCollection_impl::Iterator * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkIMU,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkIMUCollection_InsertItem" "', argument " "3"" of type '" "btkIMUCollection_impl::ItemPointer""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkIMUCollection_InsertItem" "', argument " "3"" of type '" "btkIMUCollection_impl::ItemPointer""'");
    } else {
      btkIMUCollection_impl::ItemPointer * temp = reinterpret_cast< btkIMUCollection_impl::ItemPointer * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      result = (bool)(*arg1)->InsertItem(arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMUCollection_InsertItem__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMUCollection *arg1 = (btkIMUCollection *) 0 ;
  int arg2 ;
  SwigValueWrapper< btkIMU > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkIMUCollection_InsertItem",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkIMUCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMUCollection_InsertItem" "', argument " "1"" of type '" "btkIMUCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkIMUCollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkIMUCollection_InsertItem" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkIMU,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkIMUCollection_InsertItem" "', argument " "3"" of type '" "btkIMUCollection_impl::ItemPointer""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkIMUCollection_InsertItem" "', argument " "3"" of type '" "btkIMUCollection_impl::ItemPointer""'");
    } else {
      btkIMUCollection_impl::ItemPointer * temp = reinterpret_cast< btkIMUCollection_impl::ItemPointer * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      result = (bool)(*arg1)->InsertItem(arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMUCollection_InsertItem__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMUCollection *arg1 = (btkIMUCollection *) 0 ;
  SwigValueWrapper< btkIMU > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkIMUCollection_InsertItem",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkIMUCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMUCollection_InsertItem" "', argument " "1"" of type '" "btkIMUCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkIMUCollection * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkIMU,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkIMUCollection_InsertItem" "', argument " "2"" of type '" "btkIMUCollection_impl::ItemPointer""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkIMUCollection_InsertItem" "', argument " "2"" of type '" "btkIMUCollection_impl::ItemPointer""'");
    } else {
      btkIMUCollection_impl::ItemPointer * temp = reinterpret_cast< btkIMUCollection_impl::ItemPointer * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (bool)(*arg1)->InsertItem(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMUCollection_InsertItem(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkIMUCollection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_btkIMU, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_btkIMUCollection_InsertItem__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkIMUCollection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_btkIMUCollectionIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_btkIMU, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_btkIMUCollection_InsertItem__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkIMUCollection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_btkIMU, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_btkIMUCollection_InsertItem__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkIMUCollection_InsertItem'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkIMUCollection_impl::InsertItem(btkIMUCollection_impl::Iterator,btkIMUCollection_impl::ItemPointer)\n"
    "    btkIMUCollection_impl::InsertItem(int,btkIMUCollection_impl::ItemPointer)\n"
    "    btkIMUCollection_impl::InsertItem(btkIMUCollection_impl::ItemPointer)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkIMUCollection_SetItem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMUCollection *arg1 = (btkIMUCollection *) 0 ;
  int arg2 ;
  SwigValueWrapper< btkIMU > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkIMUCollection_SetItem",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkIMUCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMUCollection_SetItem" "', argument " "1"" of type '" "btkIMUCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkIMUCollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkIMUCollection_SetItem" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkIMU,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkIMUCollection_SetItem" "', argument " "3"" of type '" "btkIMUCollection_impl::ItemPointer""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkIMUCollection_SetItem" "', argument " "3"" of type '" "btkIMUCollection_impl::ItemPointer""'");
    } else {
      btkIMUCollection_impl::ItemPointer * temp = reinterpret_cast< btkIMUCollection_impl::ItemPointer * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      result = (bool)(*arg1)->SetItem(arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMUCollection_RemoveItem__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMUCollection *arg1 = (btkIMUCollection *) 0 ;
  btkIMUCollection_impl::Iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  btkIMUCollection_impl::Iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkIMUCollection_RemoveItem",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkIMUCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMUCollection_RemoveItem" "', argument " "1"" of type '" "btkIMUCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkIMUCollection * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkIMUCollectionIterator,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkIMUCollection_RemoveItem" "', argument " "2"" of type '" "btkIMUCollection_impl::Iterator""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkIMUCollection_RemoveItem" "', argument " "2"" of type '" "btkIMUCollection_impl::Iterator""'");
    } else {
      btkIMUCollection_impl::Iterator * temp = reinterpret_cast< btkIMUCollection_impl::Iterator * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (*arg1)->RemoveItem(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkIMUCollection_impl::Iterator(static_cast< const btkIMUCollection_impl::Iterator& >(result))), SWIGTYPE_p_btkIMUCollectionIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMUCollection_RemoveItem__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMUCollection *arg1 = (btkIMUCollection *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkIMUCollection_RemoveItem",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkIMUCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMUCollection_RemoveItem" "', argument " "1"" of type '" "btkIMUCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkIMUCollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkIMUCollection_RemoveItem" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->RemoveItem(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMUCollection_RemoveItem(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkIMUCollection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_btkIMUCollectionIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_btkIMUCollection_RemoveItem__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkIMUCollection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_btkIMUCollection_RemoveItem__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkIMUCollection_RemoveItem'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkIMUCollection_impl::RemoveItem(btkIMUCollection_impl::Iterator)\n"
    "    btkIMUCollection_impl::RemoveItem(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkIMUCollection_TakeItem__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMUCollection *arg1 = (btkIMUCollection *) 0 ;
  btkIMUCollection_impl::Iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< btkIMU > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkIMUCollection_TakeItem",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkIMUCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMUCollection_TakeItem" "', argument " "1"" of type '" "btkIMUCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkIMUCollection * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkIMUCollectionIterator,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkIMUCollection_TakeItem" "', argument " "2"" of type '" "btkIMUCollection_impl::Iterator""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkIMUCollection_TakeItem" "', argument " "2"" of type '" "btkIMUCollection_impl::Iterator""'");
    } else {
      btkIMUCollection_impl::Iterator * temp = reinterpret_cast< btkIMUCollection_impl::Iterator * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (*arg1)->TakeItem(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkIMUCollection_impl::ItemPointer(static_cast< const btkIMUCollection_impl::ItemPointer& >(result))), SWIGTYPE_p_btkIMU, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMUCollection_TakeItem__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMUCollection *arg1 = (btkIMUCollection *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< btkIMU > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkIMUCollection_TakeItem",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkIMUCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMUCollection_TakeItem" "', argument " "1"" of type '" "btkIMUCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkIMUCollection * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkIMUCollection_TakeItem" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (*arg1)->TakeItem(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkIMUCollection_impl::ItemPointer(static_cast< const btkIMUCollection_impl::ItemPointer& >(result))), SWIGTYPE_p_btkIMU, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMUCollection_TakeItem(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkIMUCollection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_btkIMUCollectionIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_btkIMUCollection_TakeItem__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkIMUCollection, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_btkIMUCollection_TakeItem__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkIMUCollection_TakeItem'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkIMUCollection_impl::TakeItem(btkIMUCollection_impl::Iterator)\n"
    "    btkIMUCollection_impl::TakeItem(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkIMUCollection_Clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMUCollection *arg1 = (btkIMUCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkIMUCollection_Clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkIMUCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMUCollection_Clear" "', argument " "1"" of type '" "btkIMUCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkIMUCollection * >(argp1);
  {
    try {
      (*arg1)->Clear();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMUCollection_Update(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMUCollection *arg1 = (btkIMUCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkIMUCollection_Update",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkIMUCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMUCollection_Update" "', argument " "1"" of type '" "btkIMUCollection *""'"); 
  }
  arg1 = reinterpret_cast< btkIMUCollection * >(argp1);
  {
    try {
      (*arg1)->Update();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMUCollection_GetTimestamp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMUCollection *arg1 = (btkIMUCollection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkIMUCollection_GetTimestamp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkIMUCollection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMUCollection_GetTimestamp" "', argument " "1"" of type '" "btkIMUCollection const *""'"); 
  }
  arg1 = reinterpret_cast< btkIMUCollection * >(argp1);
  {
    try {
      result = (unsigned long)(*arg1)->GetTimestamp();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *btkIMUCollection_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_btkIMUCollection, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_btkStringArray_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:btkStringArray_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringArray_iterator" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_vector_Sl_std_string_Sg__iterator(arg1,arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringArray___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkStringArray___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringArray___nonzero__" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_std_string_Sg____nonzero__((std::vector< std::string > const *)arg1);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringArray___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkStringArray___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringArray___bool__" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_std_string_Sg____bool__((std::vector< std::string > const *)arg1);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringArray___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkStringArray___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringArray___len__" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = std_vector_Sl_std_string_Sg____len__((std::vector< std::string > const *)arg1);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringArray___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkStringArray___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringArray___getslice__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkStringArray___getslice__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkStringArray___getslice__" "', argument " "3"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::difference_type >(val3);
  {
    try {
      try {
        result = (std::vector< std::string,std::allocator< std::string > > *)std_vector_Sl_std_string_Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringArray___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkStringArray___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringArray___setslice__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkStringArray___setslice__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkStringArray___setslice__" "', argument " "3"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_std_string_Sg____setslice____SWIG_0(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringArray___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::difference_type arg3 ;
  std::vector< std::string,std::allocator< std::string > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:btkStringArray___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringArray___setslice__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkStringArray___setslice__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkStringArray___setslice__" "', argument " "3"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::difference_type >(val3);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "btkStringArray___setslice__" "', argument " "4"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkStringArray___setslice__" "', argument " "4"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_std_string_Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::vector< std::string,std::allocator< std::string > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringArray___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_btkStringArray___setslice____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< std::string,std::allocator< std::string > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_btkStringArray___setslice____SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkStringArray___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::__setslice__(std::vector< std::string >::difference_type,std::vector< std::string >::difference_type)\n"
    "    std::vector< std::string >::__setslice__(std::vector< std::string >::difference_type,std::vector< std::string >::difference_type,std::vector< std::string,std::allocator< std::string > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkStringArray___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkStringArray___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringArray___delslice__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkStringArray___delslice__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkStringArray___delslice__" "', argument " "3"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_std_string_Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringArray___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkStringArray___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringArray___delitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkStringArray___delitem__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  {
    try {
      try {
        std_vector_Sl_std_string_Sg____delitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringArray___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkStringArray___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringArray___getitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "btkStringArray___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        result = (std::vector< std::string,std::allocator< std::string > > *)std_vector_Sl_std_string_Sg____getitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringArray___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkStringArray___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringArray___setitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "btkStringArray___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkStringArray___setitem__" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkStringArray___setitem__" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_std_string_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< std::string,std::allocator< std::string > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringArray___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkStringArray___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringArray___setitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "btkStringArray___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        std_vector_Sl_std_string_Sg____setitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringArray___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkStringArray___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringArray___delitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "btkStringArray___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        std_vector_Sl_std_string_Sg____delitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringArray___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_btkStringArray___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_btkStringArray___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkStringArray___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::__delitem__(std::vector< std::string >::difference_type)\n"
    "    std::vector< std::string >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkStringArray___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkStringArray___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringArray___getitem__" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkStringArray___getitem__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  {
    try {
      try {
        result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg____getitem____SWIG_1((std::vector< std::string > const *)arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringArray___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_btkStringArray___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_btkStringArray___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkStringArray___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::__getitem__(PySliceObject *)\n"
    "    std::vector< std::string >::__getitem__(std::vector< std::string >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkStringArray___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkStringArray___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringArray___setitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkStringArray___setitem__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkStringArray___setitem__" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkStringArray___setitem__" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_std_string_Sg____setitem____SWIG_2(arg1,arg2,(std::string const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringArray___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_btkStringArray___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< std::string,std::allocator< std::string > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_btkStringArray___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_btkStringArray___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkStringArray___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::__setitem__(PySliceObject *,std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    std::vector< std::string >::__setitem__(PySliceObject *)\n"
    "    std::vector< std::string >::__setitem__(std::vector< std::string >::difference_type,std::vector< std::string >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkStringArray_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkStringArray_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringArray_pop" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      try {
        result = std_vector_Sl_std_string_Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringArray_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkStringArray_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringArray_append" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkStringArray_append" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkStringArray_append" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      std_vector_Sl_std_string_Sg__append(arg1,(std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkStringArray__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_btkStringArray")) SWIG_fail;
  {
    try {
      result = (std::vector< std::string > *)new std::vector< std::string >();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkStringArray__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_btkStringArray",&obj0)) SWIG_fail;
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkStringArray" "', argument " "1"" of type '" "std::vector< std::string > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkStringArray" "', argument " "1"" of type '" "std::vector< std::string > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringArray_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkStringArray_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringArray_empty" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = (bool)((std::vector< std::string > const *)arg1)->empty();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringArray_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkStringArray_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringArray_size" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = ((std::vector< std::string > const *)arg1)->size();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringArray_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkStringArray_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringArray_swap" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkStringArray_swap" "', argument " "2"" of type '" "std::vector< std::string > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkStringArray_swap" "', argument " "2"" of type '" "std::vector< std::string > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::string > * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringArray_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkStringArray_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringArray_begin" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = (arg1)->begin();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringArray_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkStringArray_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringArray_end" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = (arg1)->end();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringArray_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkStringArray_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringArray_rbegin" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = (arg1)->rbegin();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringArray_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkStringArray_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringArray_rend" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = (arg1)->rend();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringArray_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkStringArray_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringArray_clear" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      (arg1)->clear();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringArray_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkStringArray_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringArray_get_allocator" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = ((std::vector< std::string > const *)arg1)->get_allocator();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< std::string >::allocator_type(static_cast< const std::vector< std::string >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_std__string_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkStringArray__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_btkStringArray",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_btkStringArray" "', argument " "1"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::string >::size_type >(val1);
  {
    try {
      result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringArray_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkStringArray_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringArray_pop_back" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      (arg1)->pop_back();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringArray_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkStringArray_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringArray_resize" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkStringArray_resize" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  {
    try {
      (arg1)->resize(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringArray_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::string >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkStringArray_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringArray_erase" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "btkStringArray_erase" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "btkStringArray_erase" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  {
    try {
      result = std_vector_Sl_std_string_Sg__erase__SWIG_0(arg1,arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringArray_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::iterator arg2 ;
  std::vector< std::string >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::string >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkStringArray_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringArray_erase" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "btkStringArray_erase" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "btkStringArray_erase" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "btkStringArray_erase" "', argument " "3"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "btkStringArray_erase" "', argument " "3"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  {
    try {
      result = std_vector_Sl_std_string_Sg__erase__SWIG_1(arg1,arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringArray_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_btkStringArray_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_btkStringArray_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkStringArray_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::erase(std::vector< std::string >::iterator)\n"
    "    std::vector< std::string >::erase(std::vector< std::string >::iterator,std::vector< std::string >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_btkStringArray__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string >::size_type arg1 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_btkStringArray",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_btkStringArray" "', argument " "1"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::string >::size_type >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_btkStringArray" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkStringArray" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (std::vector< std::string > *)new std::vector< std::string >(arg1,(std::vector< std::string >::value_type const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkStringArray(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_btkStringArray__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_btkStringArray__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_btkStringArray__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_btkStringArray__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_btkStringArray'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::vector()\n"
    "    std::vector< std::string >::vector(std::vector< std::string > const &)\n"
    "    std::vector< std::string >::vector(std::vector< std::string >::size_type)\n"
    "    std::vector< std::string >::vector(std::vector< std::string >::size_type,std::vector< std::string >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkStringArray_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkStringArray_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringArray_push_back" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkStringArray_push_back" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkStringArray_push_back" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringArray_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkStringArray_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringArray_front" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = (std::vector< std::string >::value_type *) &((std::vector< std::string > const *)arg1)->front();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringArray_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkStringArray_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringArray_back" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = (std::vector< std::string >::value_type *) &((std::vector< std::string > const *)arg1)->back();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringArray_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkStringArray_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringArray_assign" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkStringArray_assign" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkStringArray_assign" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkStringArray_assign" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->assign(arg2,(std::vector< std::string >::value_type const &)*arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringArray_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkStringArray_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringArray_resize" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkStringArray_resize" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkStringArray_resize" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkStringArray_resize" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->resize(arg2,(std::vector< std::string >::value_type const &)*arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringArray_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_btkStringArray_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_btkStringArray_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkStringArray_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::resize(std::vector< std::string >::size_type)\n"
    "    std::vector< std::string >::resize(std::vector< std::string >::size_type,std::vector< std::string >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkStringArray_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::iterator arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::string >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkStringArray_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringArray_insert" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "btkStringArray_insert" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "btkStringArray_insert" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkStringArray_insert" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkStringArray_insert" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = std_vector_Sl_std_string_Sg__insert__SWIG_0(arg1,arg2,(std::string const &)*arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringArray_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::iterator arg2 ;
  std::vector< std::string >::size_type arg3 ;
  std::vector< std::string >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:btkStringArray_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringArray_insert" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "btkStringArray_insert" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "btkStringArray_insert" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkStringArray_insert" "', argument " "3"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::size_type >(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "btkStringArray_insert" "', argument " "4"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkStringArray_insert" "', argument " "4"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      std_vector_Sl_std_string_Sg__insert__SWIG_1(arg1,arg2,arg3,(std::string const &)*arg4);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringArray_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_btkStringArray_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_btkStringArray_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkStringArray_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::insert(std::vector< std::string >::iterator,std::vector< std::string >::value_type const &)\n"
    "    std::vector< std::string >::insert(std::vector< std::string >::iterator,std::vector< std::string >::size_type,std::vector< std::string >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkStringArray_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkStringArray_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringArray_reserve" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkStringArray_reserve" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  {
    try {
      (arg1)->reserve(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringArray_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkStringArray_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringArray_capacity" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = ((std::vector< std::string > const *)arg1)->capacity();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_btkStringArray(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_btkStringArray",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_btkStringArray" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      delete arg1;
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *btkStringArray_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_btkIntArray_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:btkIntArray_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIntArray_iterator" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_vector_Sl_int_Sg__iterator(arg1,arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIntArray___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkIntArray___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIntArray___nonzero__" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_int_Sg____nonzero__((std::vector< int > const *)arg1);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIntArray___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkIntArray___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIntArray___bool__" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_int_Sg____bool__((std::vector< int > const *)arg1);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIntArray___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkIntArray___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIntArray___len__" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      result = std_vector_Sl_int_Sg____len__((std::vector< int > const *)arg1);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIntArray___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkIntArray___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIntArray___getslice__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkIntArray___getslice__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkIntArray___getslice__" "', argument " "3"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< int >::difference_type >(val3);
  {
    try {
      try {
        result = (std::vector< int,std::allocator< int > > *)std_vector_Sl_int_Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIntArray___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkIntArray___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIntArray___setslice__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkIntArray___setslice__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkIntArray___setslice__" "', argument " "3"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< int >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_int_Sg____setslice____SWIG_0(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIntArray___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::difference_type arg3 ;
  std::vector< int,std::allocator< int > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:btkIntArray___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIntArray___setslice__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkIntArray___setslice__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkIntArray___setslice__" "', argument " "3"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< int >::difference_type >(val3);
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "btkIntArray___setslice__" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkIntArray___setslice__" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_int_Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::vector< int,std::allocator< int > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIntArray___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_btkIntArray___setslice____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< int,std::allocator< int > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_btkIntArray___setslice____SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkIntArray___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::__setslice__(std::vector< int >::difference_type,std::vector< int >::difference_type)\n"
    "    std::vector< int >::__setslice__(std::vector< int >::difference_type,std::vector< int >::difference_type,std::vector< int,std::allocator< int > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkIntArray___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkIntArray___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIntArray___delslice__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkIntArray___delslice__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkIntArray___delslice__" "', argument " "3"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< int >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_int_Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIntArray___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkIntArray___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIntArray___delitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkIntArray___delitem__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  {
    try {
      try {
        std_vector_Sl_int_Sg____delitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIntArray___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkIntArray___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIntArray___getitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "btkIntArray___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        result = (std::vector< int,std::allocator< int > > *)std_vector_Sl_int_Sg____getitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIntArray___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkIntArray___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIntArray___setitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "btkIntArray___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkIntArray___setitem__" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkIntArray___setitem__" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_int_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIntArray___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkIntArray___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIntArray___setitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "btkIntArray___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        std_vector_Sl_int_Sg____setitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIntArray___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkIntArray___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIntArray___delitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "btkIntArray___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        std_vector_Sl_int_Sg____delitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIntArray___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_btkIntArray___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_btkIntArray___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkIntArray___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::__delitem__(std::vector< int >::difference_type)\n"
    "    std::vector< int >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkIntArray___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< int >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkIntArray___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIntArray___getitem__" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkIntArray___getitem__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  {
    try {
      try {
        result = (std::vector< int >::value_type *) &std_vector_Sl_int_Sg____getitem____SWIG_1((std::vector< int > const *)arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIntArray___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_btkIntArray___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_btkIntArray___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkIntArray___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::__getitem__(PySliceObject *)\n"
    "    std::vector< int >::__getitem__(std::vector< int >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkIntArray___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkIntArray___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIntArray___setitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkIntArray___setitem__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkIntArray___setitem__" "', argument " "3"" of type '" "std::vector< int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< int >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      try {
        std_vector_Sl_int_Sg____setitem____SWIG_2(arg1,arg2,(int const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIntArray___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_btkIntArray___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_btkIntArray___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_btkIntArray___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkIntArray___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::__setitem__(PySliceObject *,std::vector< int,std::allocator< int > > const &)\n"
    "    std::vector< int >::__setitem__(PySliceObject *)\n"
    "    std::vector< int >::__setitem__(std::vector< int >::difference_type,std::vector< int >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkIntArray_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkIntArray_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIntArray_pop" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      try {
        result = (std::vector< int >::value_type)std_vector_Sl_int_Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIntArray_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int >::value_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkIntArray_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIntArray_append" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkIntArray_append" "', argument " "2"" of type '" "std::vector< int >::value_type""'");
  } 
  temp2 = static_cast< std::vector< int >::value_type >(val2);
  arg2 = &temp2;
  {
    try {
      std_vector_Sl_int_Sg__append(arg1,(int const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkIntArray__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_btkIntArray")) SWIG_fail;
  {
    try {
      result = (std::vector< int > *)new std::vector< int >();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkIntArray__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_btkIntArray",&obj0)) SWIG_fail;
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkIntArray" "', argument " "1"" of type '" "std::vector< int > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkIntArray" "', argument " "1"" of type '" "std::vector< int > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::vector< int > *)new std::vector< int >((std::vector< int > const &)*arg1);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIntArray_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkIntArray_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIntArray_empty" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      result = (bool)((std::vector< int > const *)arg1)->empty();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIntArray_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkIntArray_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIntArray_size" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      result = ((std::vector< int > const *)arg1)->size();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIntArray_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkIntArray_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIntArray_swap" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkIntArray_swap" "', argument " "2"" of type '" "std::vector< int > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkIntArray_swap" "', argument " "2"" of type '" "std::vector< int > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< int > * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIntArray_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkIntArray_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIntArray_begin" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      result = (arg1)->begin();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIntArray_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkIntArray_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIntArray_end" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      result = (arg1)->end();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIntArray_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkIntArray_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIntArray_rbegin" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      result = (arg1)->rbegin();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIntArray_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkIntArray_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIntArray_rend" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      result = (arg1)->rend();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIntArray_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkIntArray_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIntArray_clear" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      (arg1)->clear();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIntArray_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< int > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkIntArray_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIntArray_get_allocator" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      result = ((std::vector< int > const *)arg1)->get_allocator();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< int >::allocator_type(static_cast< const std::vector< int >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_int_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkIntArray__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_btkIntArray",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_btkIntArray" "', argument " "1"" of type '" "std::vector< int >::size_type""'");
  } 
  arg1 = static_cast< std::vector< int >::size_type >(val1);
  {
    try {
      result = (std::vector< int > *)new std::vector< int >(arg1);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIntArray_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkIntArray_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIntArray_pop_back" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      (arg1)->pop_back();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIntArray_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkIntArray_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIntArray_resize" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkIntArray_resize" "', argument " "2"" of type '" "std::vector< int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< int >::size_type >(val2);
  {
    try {
      (arg1)->resize(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIntArray_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< int >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkIntArray_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIntArray_erase" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "btkIntArray_erase" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "btkIntArray_erase" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
    }
  }
  {
    try {
      result = std_vector_Sl_int_Sg__erase__SWIG_0(arg1,arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIntArray_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::iterator arg2 ;
  std::vector< int >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< int >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkIntArray_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIntArray_erase" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "btkIntArray_erase" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "btkIntArray_erase" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "btkIntArray_erase" "', argument " "3"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "btkIntArray_erase" "', argument " "3"" of type '" "std::vector< int >::iterator""'");
    }
  }
  {
    try {
      result = std_vector_Sl_int_Sg__erase__SWIG_1(arg1,arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIntArray_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_btkIntArray_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_btkIntArray_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkIntArray_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::erase(std::vector< int >::iterator)\n"
    "    std::vector< int >::erase(std::vector< int >::iterator,std::vector< int >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_btkIntArray__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int >::size_type arg1 ;
  std::vector< int >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< int >::value_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_btkIntArray",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_btkIntArray" "', argument " "1"" of type '" "std::vector< int >::size_type""'");
  } 
  arg1 = static_cast< std::vector< int >::size_type >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_btkIntArray" "', argument " "2"" of type '" "std::vector< int >::value_type""'");
  } 
  temp2 = static_cast< std::vector< int >::value_type >(val2);
  arg2 = &temp2;
  {
    try {
      result = (std::vector< int > *)new std::vector< int >(arg1,(std::vector< int >::value_type const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkIntArray(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_btkIntArray__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_btkIntArray__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_btkIntArray__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_btkIntArray__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_btkIntArray'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::vector()\n"
    "    std::vector< int >::vector(std::vector< int > const &)\n"
    "    std::vector< int >::vector(std::vector< int >::size_type)\n"
    "    std::vector< int >::vector(std::vector< int >::size_type,std::vector< int >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkIntArray_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int >::value_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkIntArray_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIntArray_push_back" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkIntArray_push_back" "', argument " "2"" of type '" "std::vector< int >::value_type""'");
  } 
  temp2 = static_cast< std::vector< int >::value_type >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->push_back((std::vector< int >::value_type const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIntArray_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkIntArray_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIntArray_front" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      result = (std::vector< int >::value_type *) &((std::vector< int > const *)arg1)->front();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIntArray_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkIntArray_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIntArray_back" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      result = (std::vector< int >::value_type *) &((std::vector< int > const *)arg1)->back();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIntArray_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkIntArray_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIntArray_assign" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkIntArray_assign" "', argument " "2"" of type '" "std::vector< int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< int >::size_type >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkIntArray_assign" "', argument " "3"" of type '" "std::vector< int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< int >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      (arg1)->assign(arg2,(std::vector< int >::value_type const &)*arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIntArray_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkIntArray_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIntArray_resize" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkIntArray_resize" "', argument " "2"" of type '" "std::vector< int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< int >::size_type >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkIntArray_resize" "', argument " "3"" of type '" "std::vector< int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< int >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      (arg1)->resize(arg2,(std::vector< int >::value_type const &)*arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIntArray_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_btkIntArray_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_btkIntArray_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkIntArray_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::resize(std::vector< int >::size_type)\n"
    "    std::vector< int >::resize(std::vector< int >::size_type,std::vector< int >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkIntArray_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::iterator arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< int >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkIntArray_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIntArray_insert" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "btkIntArray_insert" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "btkIntArray_insert" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkIntArray_insert" "', argument " "3"" of type '" "std::vector< int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< int >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      result = std_vector_Sl_int_Sg__insert__SWIG_0(arg1,arg2,(int const &)*arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIntArray_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::iterator arg2 ;
  std::vector< int >::size_type arg3 ;
  std::vector< int >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::vector< int >::value_type temp4 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:btkIntArray_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIntArray_insert" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "btkIntArray_insert" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "btkIntArray_insert" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkIntArray_insert" "', argument " "3"" of type '" "std::vector< int >::size_type""'");
  } 
  arg3 = static_cast< std::vector< int >::size_type >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "btkIntArray_insert" "', argument " "4"" of type '" "std::vector< int >::value_type""'");
  } 
  temp4 = static_cast< std::vector< int >::value_type >(val4);
  arg4 = &temp4;
  {
    try {
      std_vector_Sl_int_Sg__insert__SWIG_1(arg1,arg2,arg3,(int const &)*arg4);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIntArray_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_btkIntArray_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_btkIntArray_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkIntArray_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::insert(std::vector< int >::iterator,std::vector< int >::value_type const &)\n"
    "    std::vector< int >::insert(std::vector< int >::iterator,std::vector< int >::size_type,std::vector< int >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkIntArray_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkIntArray_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIntArray_reserve" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkIntArray_reserve" "', argument " "2"" of type '" "std::vector< int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< int >::size_type >(val2);
  {
    try {
      (arg1)->reserve(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIntArray_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkIntArray_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIntArray_capacity" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      result = ((std::vector< int > const *)arg1)->capacity();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_btkIntArray(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_btkIntArray",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_btkIntArray" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      delete arg1;
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *btkIntArray_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_btkDoubleArray_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:btkDoubleArray_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkDoubleArray_iterator" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_vector_Sl_double_Sg__iterator(arg1,arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkDoubleArray___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkDoubleArray___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkDoubleArray___nonzero__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_double_Sg____nonzero__((std::vector< double > const *)arg1);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkDoubleArray___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkDoubleArray___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkDoubleArray___bool__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_double_Sg____bool__((std::vector< double > const *)arg1);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkDoubleArray___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkDoubleArray___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkDoubleArray___len__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = std_vector_Sl_double_Sg____len__((std::vector< double > const *)arg1);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkDoubleArray___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkDoubleArray___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkDoubleArray___getslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkDoubleArray___getslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkDoubleArray___getslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  {
    try {
      try {
        result = (std::vector< double,std::allocator< double > > *)std_vector_Sl_double_Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkDoubleArray___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkDoubleArray___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkDoubleArray___setslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkDoubleArray___setslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkDoubleArray___setslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_double_Sg____setslice____SWIG_0(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkDoubleArray___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  std::vector< double,std::allocator< double > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:btkDoubleArray___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkDoubleArray___setslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkDoubleArray___setslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkDoubleArray___setslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "btkDoubleArray___setslice__" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkDoubleArray___setslice__" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_double_Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::vector< double,std::allocator< double > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkDoubleArray___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_btkDoubleArray___setslice____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< double,std::allocator< double > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_btkDoubleArray___setslice____SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkDoubleArray___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::__setslice__(std::vector< double >::difference_type,std::vector< double >::difference_type)\n"
    "    std::vector< double >::__setslice__(std::vector< double >::difference_type,std::vector< double >::difference_type,std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkDoubleArray___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkDoubleArray___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkDoubleArray___delslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkDoubleArray___delslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkDoubleArray___delslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_double_Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkDoubleArray___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkDoubleArray___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkDoubleArray___delitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkDoubleArray___delitem__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  {
    try {
      try {
        std_vector_Sl_double_Sg____delitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkDoubleArray___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkDoubleArray___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkDoubleArray___getitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "btkDoubleArray___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        result = (std::vector< double,std::allocator< double > > *)std_vector_Sl_double_Sg____getitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkDoubleArray___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkDoubleArray___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkDoubleArray___setitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "btkDoubleArray___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkDoubleArray___setitem__" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkDoubleArray___setitem__" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_double_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkDoubleArray___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkDoubleArray___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkDoubleArray___setitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "btkDoubleArray___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        std_vector_Sl_double_Sg____setitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkDoubleArray___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkDoubleArray___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkDoubleArray___delitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "btkDoubleArray___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        std_vector_Sl_double_Sg____delitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkDoubleArray___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_btkDoubleArray___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_btkDoubleArray___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkDoubleArray___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::__delitem__(std::vector< double >::difference_type)\n"
    "    std::vector< double >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkDoubleArray___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< double >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkDoubleArray___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkDoubleArray___getitem__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkDoubleArray___getitem__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  {
    try {
      try {
        result = (std::vector< double >::value_type *) &std_vector_Sl_double_Sg____getitem____SWIG_1((std::vector< double > const *)arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkDoubleArray___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_btkDoubleArray___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_btkDoubleArray___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkDoubleArray___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::__getitem__(PySliceObject *)\n"
    "    std::vector< double >::__getitem__(std::vector< double >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkDoubleArray___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkDoubleArray___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkDoubleArray___setitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkDoubleArray___setitem__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkDoubleArray___setitem__" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      try {
        std_vector_Sl_double_Sg____setitem____SWIG_2(arg1,arg2,(double const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkDoubleArray___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_btkDoubleArray___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_btkDoubleArray___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_btkDoubleArray___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkDoubleArray___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::__setitem__(PySliceObject *,std::vector< double,std::allocator< double > > const &)\n"
    "    std::vector< double >::__setitem__(PySliceObject *)\n"
    "    std::vector< double >::__setitem__(std::vector< double >::difference_type,std::vector< double >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkDoubleArray_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkDoubleArray_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkDoubleArray_pop" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      try {
        result = (std::vector< double >::value_type)std_vector_Sl_double_Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkDoubleArray_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkDoubleArray_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkDoubleArray_append" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkDoubleArray_append" "', argument " "2"" of type '" "std::vector< double >::value_type""'");
  } 
  temp2 = static_cast< std::vector< double >::value_type >(val2);
  arg2 = &temp2;
  {
    try {
      std_vector_Sl_double_Sg__append(arg1,(double const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkDoubleArray__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_btkDoubleArray")) SWIG_fail;
  {
    try {
      result = (std::vector< double > *)new std::vector< double >();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkDoubleArray__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_btkDoubleArray",&obj0)) SWIG_fail;
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkDoubleArray" "', argument " "1"" of type '" "std::vector< double > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkDoubleArray" "', argument " "1"" of type '" "std::vector< double > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::vector< double > *)new std::vector< double >((std::vector< double > const &)*arg1);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkDoubleArray_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkDoubleArray_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkDoubleArray_empty" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (bool)((std::vector< double > const *)arg1)->empty();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkDoubleArray_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkDoubleArray_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkDoubleArray_size" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = ((std::vector< double > const *)arg1)->size();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkDoubleArray_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkDoubleArray_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkDoubleArray_swap" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkDoubleArray_swap" "', argument " "2"" of type '" "std::vector< double > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkDoubleArray_swap" "', argument " "2"" of type '" "std::vector< double > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double > * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkDoubleArray_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkDoubleArray_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkDoubleArray_begin" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (arg1)->begin();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkDoubleArray_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkDoubleArray_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkDoubleArray_end" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (arg1)->end();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkDoubleArray_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkDoubleArray_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkDoubleArray_rbegin" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (arg1)->rbegin();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkDoubleArray_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkDoubleArray_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkDoubleArray_rend" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (arg1)->rend();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkDoubleArray_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkDoubleArray_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkDoubleArray_clear" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      (arg1)->clear();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkDoubleArray_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< double > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkDoubleArray_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkDoubleArray_get_allocator" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = ((std::vector< double > const *)arg1)->get_allocator();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< double >::allocator_type(static_cast< const std::vector< double >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkDoubleArray__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_btkDoubleArray",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_btkDoubleArray" "', argument " "1"" of type '" "std::vector< double >::size_type""'");
  } 
  arg1 = static_cast< std::vector< double >::size_type >(val1);
  {
    try {
      result = (std::vector< double > *)new std::vector< double >(arg1);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkDoubleArray_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkDoubleArray_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkDoubleArray_pop_back" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      (arg1)->pop_back();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkDoubleArray_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkDoubleArray_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkDoubleArray_resize" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkDoubleArray_resize" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  {
    try {
      (arg1)->resize(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkDoubleArray_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< double >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkDoubleArray_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkDoubleArray_erase" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "btkDoubleArray_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "btkDoubleArray_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  {
    try {
      result = std_vector_Sl_double_Sg__erase__SWIG_0(arg1,arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkDoubleArray_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  std::vector< double >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< double >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkDoubleArray_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkDoubleArray_erase" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "btkDoubleArray_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "btkDoubleArray_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "btkDoubleArray_erase" "', argument " "3"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "btkDoubleArray_erase" "', argument " "3"" of type '" "std::vector< double >::iterator""'");
    }
  }
  {
    try {
      result = std_vector_Sl_double_Sg__erase__SWIG_1(arg1,arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkDoubleArray_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_btkDoubleArray_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_btkDoubleArray_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkDoubleArray_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::erase(std::vector< double >::iterator)\n"
    "    std::vector< double >::erase(std::vector< double >::iterator,std::vector< double >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_btkDoubleArray__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double >::size_type arg1 ;
  std::vector< double >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_btkDoubleArray",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_btkDoubleArray" "', argument " "1"" of type '" "std::vector< double >::size_type""'");
  } 
  arg1 = static_cast< std::vector< double >::size_type >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_btkDoubleArray" "', argument " "2"" of type '" "std::vector< double >::value_type""'");
  } 
  temp2 = static_cast< std::vector< double >::value_type >(val2);
  arg2 = &temp2;
  {
    try {
      result = (std::vector< double > *)new std::vector< double >(arg1,(std::vector< double >::value_type const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkDoubleArray(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_btkDoubleArray__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_btkDoubleArray__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_btkDoubleArray__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_btkDoubleArray__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_btkDoubleArray'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::vector()\n"
    "    std::vector< double >::vector(std::vector< double > const &)\n"
    "    std::vector< double >::vector(std::vector< double >::size_type)\n"
    "    std::vector< double >::vector(std::vector< double >::size_type,std::vector< double >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkDoubleArray_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkDoubleArray_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkDoubleArray_push_back" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkDoubleArray_push_back" "', argument " "2"" of type '" "std::vector< double >::value_type""'");
  } 
  temp2 = static_cast< std::vector< double >::value_type >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->push_back((std::vector< double >::value_type const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkDoubleArray_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkDoubleArray_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkDoubleArray_front" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (std::vector< double >::value_type *) &((std::vector< double > const *)arg1)->front();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkDoubleArray_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkDoubleArray_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkDoubleArray_back" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = (std::vector< double >::value_type *) &((std::vector< double > const *)arg1)->back();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkDoubleArray_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkDoubleArray_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkDoubleArray_assign" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkDoubleArray_assign" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkDoubleArray_assign" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      (arg1)->assign(arg2,(std::vector< double >::value_type const &)*arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkDoubleArray_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkDoubleArray_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkDoubleArray_resize" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkDoubleArray_resize" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkDoubleArray_resize" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      (arg1)->resize(arg2,(std::vector< double >::value_type const &)*arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkDoubleArray_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_btkDoubleArray_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_btkDoubleArray_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkDoubleArray_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::resize(std::vector< double >::size_type)\n"
    "    std::vector< double >::resize(std::vector< double >::size_type,std::vector< double >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkDoubleArray_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< double >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkDoubleArray_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkDoubleArray_insert" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "btkDoubleArray_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "btkDoubleArray_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkDoubleArray_insert" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      result = std_vector_Sl_double_Sg__insert__SWIG_0(arg1,arg2,(double const &)*arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkDoubleArray_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  std::vector< double >::size_type arg3 ;
  std::vector< double >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::vector< double >::value_type temp4 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:btkDoubleArray_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkDoubleArray_insert" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "btkDoubleArray_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "btkDoubleArray_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkDoubleArray_insert" "', argument " "3"" of type '" "std::vector< double >::size_type""'");
  } 
  arg3 = static_cast< std::vector< double >::size_type >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "btkDoubleArray_insert" "', argument " "4"" of type '" "std::vector< double >::value_type""'");
  } 
  temp4 = static_cast< std::vector< double >::value_type >(val4);
  arg4 = &temp4;
  {
    try {
      std_vector_Sl_double_Sg__insert__SWIG_1(arg1,arg2,arg3,(double const &)*arg4);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkDoubleArray_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_btkDoubleArray_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_btkDoubleArray_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkDoubleArray_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::insert(std::vector< double >::iterator,std::vector< double >::value_type const &)\n"
    "    std::vector< double >::insert(std::vector< double >::iterator,std::vector< double >::size_type,std::vector< double >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkDoubleArray_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkDoubleArray_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkDoubleArray_reserve" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkDoubleArray_reserve" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  {
    try {
      (arg1)->reserve(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkDoubleArray_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkDoubleArray_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkDoubleArray_capacity" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      result = ((std::vector< double > const *)arg1)->capacity();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_btkDoubleArray(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_btkDoubleArray",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_btkDoubleArray" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      delete arg1;
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *btkDoubleArray_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_btkMetaDataInfo__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  btkMetaDataInfo *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_btkMetaDataInfo",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_btkMetaDataInfo" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (btkMetaDataInfo *)new btkMetaDataInfo(arg1);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkMetaDataInfo, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkMetaDataInfo__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  btkMetaDataInfo *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_btkMetaDataInfo",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_btkMetaDataInfo" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = (btkMetaDataInfo *)new btkMetaDataInfo(arg1);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkMetaDataInfo, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkMetaDataInfo__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  btkMetaDataInfo *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_btkMetaDataInfo",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkMetaDataInfo" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaDataInfo" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (btkMetaDataInfo *)new btkMetaDataInfo((std::string const &)*arg1);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkMetaDataInfo, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkMetaDataInfo__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int,std::allocator< int > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  btkMetaDataInfo *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_btkMetaDataInfo",&obj0)) SWIG_fail;
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkMetaDataInfo" "', argument " "1"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaDataInfo" "', argument " "1"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (btkMetaDataInfo *)new btkMetaDataInfo((std::vector< int,std::allocator< int > > const &)*arg1);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkMetaDataInfo, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkMetaDataInfo__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  btkMetaDataInfo *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_btkMetaDataInfo",&obj0)) SWIG_fail;
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkMetaDataInfo" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaDataInfo" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (btkMetaDataInfo *)new btkMetaDataInfo((std::vector< double,std::allocator< double > > const &)*arg1);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkMetaDataInfo, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkMetaDataInfo__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string,std::allocator< std::string > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  btkMetaDataInfo *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_btkMetaDataInfo",&obj0)) SWIG_fail;
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkMetaDataInfo" "', argument " "1"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaDataInfo" "', argument " "1"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (btkMetaDataInfo *)new btkMetaDataInfo((std::vector< std::string,std::allocator< std::string > > const &)*arg1);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkMetaDataInfo, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkMetaDataInfo__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int,std::allocator< int > > *arg1 = 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  btkMetaDataInfo *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_btkMetaDataInfo",&obj0,&obj1)) SWIG_fail;
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkMetaDataInfo" "', argument " "1"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaDataInfo" "', argument " "1"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_btkMetaDataInfo" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaDataInfo" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (btkMetaDataInfo *)new btkMetaDataInfo((std::vector< int,std::allocator< int > > const &)*arg1,(std::vector< int,std::allocator< int > > const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkMetaDataInfo, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkMetaDataInfo__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int,std::allocator< int > > *arg1 = 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  btkMetaDataInfo *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_btkMetaDataInfo",&obj0,&obj1)) SWIG_fail;
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkMetaDataInfo" "', argument " "1"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaDataInfo" "', argument " "1"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_btkMetaDataInfo" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaDataInfo" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (btkMetaDataInfo *)new btkMetaDataInfo((std::vector< int,std::allocator< int > > const &)*arg1,(std::vector< double,std::allocator< double > > const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkMetaDataInfo, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkMetaDataInfo__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int,std::allocator< int > > *arg1 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  btkMetaDataInfo *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_btkMetaDataInfo",&obj0,&obj1)) SWIG_fail;
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkMetaDataInfo" "', argument " "1"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaDataInfo" "', argument " "1"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_btkMetaDataInfo" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaDataInfo" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (btkMetaDataInfo *)new btkMetaDataInfo((std::vector< int,std::allocator< int > > const &)*arg1,(std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkMetaDataInfo, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkMetaDataInfo(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_btkMetaDataInfo__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_btkMetaDataInfo__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_btkMetaDataInfo__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_btkMetaDataInfo__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_btkMetaDataInfo__SWIG_4(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_btkMetaDataInfo__SWIG_5(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< int,std::allocator< int > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_btkMetaDataInfo__SWIG_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_btkMetaDataInfo__SWIG_7(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_btkMetaDataInfo__SWIG_8(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_btkMetaDataInfo'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkMetaDataInfo::btkMetaDataInfo(int)\n"
    "    btkMetaDataInfo::btkMetaDataInfo(double)\n"
    "    btkMetaDataInfo::btkMetaDataInfo(std::string const &)\n"
    "    btkMetaDataInfo::btkMetaDataInfo(std::vector< int,std::allocator< int > > const &)\n"
    "    btkMetaDataInfo::btkMetaDataInfo(std::vector< double,std::allocator< double > > const &)\n"
    "    btkMetaDataInfo::btkMetaDataInfo(std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    btkMetaDataInfo::btkMetaDataInfo(std::vector< int,std::allocator< int > > const &,std::vector< int,std::allocator< int > > const &)\n"
    "    btkMetaDataInfo::btkMetaDataInfo(std::vector< int,std::allocator< int > > const &,std::vector< double,std::allocator< double > > const &)\n"
    "    btkMetaDataInfo::btkMetaDataInfo(std::vector< int,std::allocator< int > > const &,std::vector< std::string,std::allocator< std::string > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkMetaDataInfo_Clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaDataInfo *arg1 = (btkMetaDataInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< btkMetaDataInfo > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkMetaDataInfo_Clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaDataInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaDataInfo_Clone" "', argument " "1"" of type '" "btkMetaDataInfo *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaDataInfo * >(argp1);
  {
    try {
      result = (arg1)->Clone();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkMetaDataInfo(static_cast< const btkMetaDataInfo& >(result))), SWIGTYPE_p_btkMetaDataInfo, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaDataInfo___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaDataInfo *arg1 = (btkMetaDataInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkMetaDataInfo_impl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkMetaDataInfo___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaDataInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaDataInfo___deref__" "', argument " "1"" of type '" "btkMetaDataInfo const *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaDataInfo * >(argp1);
  {
    try {
      result = (btkMetaDataInfo_impl *)((btkMetaDataInfo const *)arg1)->operator ->();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkMetaDataInfo_impl, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaDataInfo_GetDimension(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaDataInfo *arg1 = (btkMetaDataInfo *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkMetaDataInfo_GetDimension",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaDataInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaDataInfo_GetDimension" "', argument " "1"" of type '" "btkMetaDataInfo const *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaDataInfo * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkMetaDataInfo_GetDimension" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)btkMetaDataInfo_GetDimension((btkMetaDataInfo const *)arg1,arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaDataInfo_SetDimension(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaDataInfo *arg1 = (btkMetaDataInfo *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkMetaDataInfo_SetDimension",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaDataInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaDataInfo_SetDimension" "', argument " "1"" of type '" "btkMetaDataInfo *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaDataInfo * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkMetaDataInfo_SetDimension" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkMetaDataInfo_SetDimension" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      btkMetaDataInfo_SetDimension(arg1,arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaDataInfo_GetDimensions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaDataInfo *arg1 = (btkMetaDataInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int,std::allocator< int > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkMetaDataInfo_GetDimensions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaDataInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaDataInfo_GetDimensions" "', argument " "1"" of type '" "btkMetaDataInfo const *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaDataInfo * >(argp1);
  {
    try {
      result = btkMetaDataInfo_GetDimensions((btkMetaDataInfo const *)arg1);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = swig::from(static_cast< std::vector< int,std::allocator< int > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaDataInfo_SetDimensions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaDataInfo *arg1 = (btkMetaDataInfo *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkMetaDataInfo_SetDimensions",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaDataInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaDataInfo_SetDimensions" "', argument " "1"" of type '" "btkMetaDataInfo *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaDataInfo * >(argp1);
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkMetaDataInfo_SetDimensions" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaDataInfo_SetDimensions" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      btkMetaDataInfo_SetDimensions(arg1,(std::vector< int,std::allocator< int > > const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaDataInfo_GetValueNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaDataInfo *arg1 = (btkMetaDataInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkMetaDataInfo_GetValueNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaDataInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaDataInfo_GetValueNumber" "', argument " "1"" of type '" "btkMetaDataInfo const *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaDataInfo * >(argp1);
  {
    try {
      result = (int)btkMetaDataInfo_GetValueNumber((btkMetaDataInfo const *)arg1);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaDataInfo_SetValue__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaDataInfo *arg1 = (btkMetaDataInfo *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkMetaDataInfo_SetValue",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaDataInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaDataInfo_SetValue" "', argument " "1"" of type '" "btkMetaDataInfo *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaDataInfo * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkMetaDataInfo_SetValue" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkMetaDataInfo_SetValue" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaDataInfo_SetValue" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      btkMetaDataInfo_SetValue__SWIG_0(arg1,arg2,(std::string const &)*arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaDataInfo_SetValue__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaDataInfo *arg1 = (btkMetaDataInfo *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkMetaDataInfo_SetValue",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaDataInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaDataInfo_SetValue" "', argument " "1"" of type '" "btkMetaDataInfo *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaDataInfo * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkMetaDataInfo_SetValue" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkMetaDataInfo_SetValue" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      btkMetaDataInfo_SetValue__SWIG_1(arg1,arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaDataInfo_SetValue__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaDataInfo *arg1 = (btkMetaDataInfo *) 0 ;
  int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkMetaDataInfo_SetValue",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaDataInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaDataInfo_SetValue" "', argument " "1"" of type '" "btkMetaDataInfo *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaDataInfo * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkMetaDataInfo_SetValue" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkMetaDataInfo_SetValue" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      btkMetaDataInfo_SetValue__SWIG_2(arg1,arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaDataInfo_SetValue(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkMetaDataInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_btkMetaDataInfo_SetValue__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkMetaDataInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_btkMetaDataInfo_SetValue__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkMetaDataInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_btkMetaDataInfo_SetValue__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkMetaDataInfo_SetValue'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkMetaDataInfo::SetValue(int,std::string const &)\n"
    "    btkMetaDataInfo::SetValue(int,int)\n"
    "    btkMetaDataInfo::SetValue(int,double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkMetaDataInfo_SetValues__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaDataInfo *arg1 = (btkMetaDataInfo *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkMetaDataInfo_SetValues",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaDataInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaDataInfo_SetValues" "', argument " "1"" of type '" "btkMetaDataInfo *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaDataInfo * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkMetaDataInfo_SetValues" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      btkMetaDataInfo_SetValues__SWIG_0(arg1,arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaDataInfo_SetValues__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaDataInfo *arg1 = (btkMetaDataInfo *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkMetaDataInfo_SetValues",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaDataInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaDataInfo_SetValues" "', argument " "1"" of type '" "btkMetaDataInfo *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaDataInfo * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkMetaDataInfo_SetValues" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      btkMetaDataInfo_SetValues__SWIG_1(arg1,arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaDataInfo_SetValues__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaDataInfo *arg1 = (btkMetaDataInfo *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkMetaDataInfo_SetValues",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaDataInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaDataInfo_SetValues" "', argument " "1"" of type '" "btkMetaDataInfo *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaDataInfo * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkMetaDataInfo_SetValues" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaDataInfo_SetValues" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      btkMetaDataInfo_SetValues__SWIG_2(arg1,(std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaDataInfo_SetValues__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaDataInfo *arg1 = (btkMetaDataInfo *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkMetaDataInfo_SetValues",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaDataInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaDataInfo_SetValues" "', argument " "1"" of type '" "btkMetaDataInfo *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaDataInfo * >(argp1);
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkMetaDataInfo_SetValues" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaDataInfo_SetValues" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      btkMetaDataInfo_SetValues__SWIG_3(arg1,(std::vector< int,std::allocator< int > > const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaDataInfo_SetValues__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaDataInfo *arg1 = (btkMetaDataInfo *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkMetaDataInfo_SetValues",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaDataInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaDataInfo_SetValues" "', argument " "1"" of type '" "btkMetaDataInfo *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaDataInfo * >(argp1);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkMetaDataInfo_SetValues" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaDataInfo_SetValues" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      btkMetaDataInfo_SetValues__SWIG_4(arg1,(std::vector< double,std::allocator< double > > const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaDataInfo_SetValues__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaDataInfo *arg1 = (btkMetaDataInfo *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkMetaDataInfo_SetValues",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaDataInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaDataInfo_SetValues" "', argument " "1"" of type '" "btkMetaDataInfo *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaDataInfo * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkMetaDataInfo_SetValues" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaDataInfo_SetValues" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      btkMetaDataInfo_SetValues__SWIG_5(arg1,(std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaDataInfo_SetValues__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaDataInfo *arg1 = (btkMetaDataInfo *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkMetaDataInfo_SetValues",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaDataInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaDataInfo_SetValues" "', argument " "1"" of type '" "btkMetaDataInfo *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaDataInfo * >(argp1);
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkMetaDataInfo_SetValues" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaDataInfo_SetValues" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkMetaDataInfo_SetValues" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaDataInfo_SetValues" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      btkMetaDataInfo_SetValues__SWIG_6(arg1,(std::vector< int,std::allocator< int > > const &)*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaDataInfo_SetValues__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaDataInfo *arg1 = (btkMetaDataInfo *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkMetaDataInfo_SetValues",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaDataInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaDataInfo_SetValues" "', argument " "1"" of type '" "btkMetaDataInfo *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaDataInfo * >(argp1);
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkMetaDataInfo_SetValues" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaDataInfo_SetValues" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkMetaDataInfo_SetValues" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaDataInfo_SetValues" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      btkMetaDataInfo_SetValues__SWIG_7(arg1,(std::vector< int,std::allocator< int > > const &)*arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaDataInfo_SetValues__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaDataInfo *arg1 = (btkMetaDataInfo *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkMetaDataInfo_SetValues",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaDataInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaDataInfo_SetValues" "', argument " "1"" of type '" "btkMetaDataInfo *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaDataInfo * >(argp1);
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkMetaDataInfo_SetValues" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaDataInfo_SetValues" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkMetaDataInfo_SetValues" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaDataInfo_SetValues" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      btkMetaDataInfo_SetValues__SWIG_8(arg1,(std::vector< int,std::allocator< int > > const &)*arg2,(std::vector< std::string,std::allocator< std::string > > const &)*arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaDataInfo_SetValues(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkMetaDataInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_btkMetaDataInfo_SetValues__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkMetaDataInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_btkMetaDataInfo_SetValues__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkMetaDataInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_btkMetaDataInfo_SetValues__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkMetaDataInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< int,std::allocator< int > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_btkMetaDataInfo_SetValues__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkMetaDataInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_btkMetaDataInfo_SetValues__SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkMetaDataInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_btkMetaDataInfo_SetValues__SWIG_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkMetaDataInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< int,std::allocator< int > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_btkMetaDataInfo_SetValues__SWIG_6(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkMetaDataInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< int,std::allocator< int > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_btkMetaDataInfo_SetValues__SWIG_7(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkMetaDataInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< int,std::allocator< int > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< std::string,std::allocator< std::string > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_btkMetaDataInfo_SetValues__SWIG_8(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkMetaDataInfo_SetValues'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkMetaDataInfo::SetValues(int)\n"
    "    btkMetaDataInfo::SetValues(double)\n"
    "    btkMetaDataInfo::SetValues(std::string const &)\n"
    "    btkMetaDataInfo::SetValues(std::vector< int,std::allocator< int > > const &)\n"
    "    btkMetaDataInfo::SetValues(std::vector< double,std::allocator< double > > const &)\n"
    "    btkMetaDataInfo::SetValues(std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    btkMetaDataInfo::SetValues(std::vector< int,std::allocator< int > > const &,std::vector< int,std::allocator< int > > const &)\n"
    "    btkMetaDataInfo::SetValues(std::vector< int,std::allocator< int > > const &,std::vector< double,std::allocator< double > > const &)\n"
    "    btkMetaDataInfo::SetValues(std::vector< int,std::allocator< int > > const &,std::vector< std::string,std::allocator< std::string > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkMetaDataInfo___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaDataInfo *arg1 = (btkMetaDataInfo *) 0 ;
  btkMetaDataInfo *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkMetaDataInfo___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaDataInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaDataInfo___eq__" "', argument " "1"" of type '" "btkMetaDataInfo *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaDataInfo * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkMetaDataInfo,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkMetaDataInfo___eq__" "', argument " "2"" of type '" "btkMetaDataInfo const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaDataInfo___eq__" "', argument " "2"" of type '" "btkMetaDataInfo const &""'"); 
  }
  arg2 = reinterpret_cast< btkMetaDataInfo * >(argp2);
  {
    try {
      result = (bool)btkMetaDataInfo_operator_Se__Se_(arg1,(btkMetaDataInfo const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaDataInfo___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaDataInfo *arg1 = (btkMetaDataInfo *) 0 ;
  btkMetaDataInfo *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkMetaDataInfo___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaDataInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaDataInfo___ne__" "', argument " "1"" of type '" "btkMetaDataInfo *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaDataInfo * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkMetaDataInfo,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkMetaDataInfo___ne__" "', argument " "2"" of type '" "btkMetaDataInfo const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaDataInfo___ne__" "', argument " "2"" of type '" "btkMetaDataInfo const &""'"); 
  }
  arg2 = reinterpret_cast< btkMetaDataInfo * >(argp2);
  {
    try {
      result = (bool)btkMetaDataInfo_operator_SN__Se_(arg1,(btkMetaDataInfo const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_btkMetaDataInfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaDataInfo *arg1 = (btkMetaDataInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_btkMetaDataInfo",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaDataInfo, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_btkMetaDataInfo" "', argument " "1"" of type '" "btkMetaDataInfo *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaDataInfo * >(argp1);
  {
    try {
      delete arg1;
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaDataInfo_GetFormat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaDataInfo *arg1 = (btkMetaDataInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkMetaDataInfo_impl::Format result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkMetaDataInfo_GetFormat",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaDataInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaDataInfo_GetFormat" "', argument " "1"" of type '" "btkMetaDataInfo const *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaDataInfo * >(argp1);
  {
    try {
      result = (btkMetaDataInfo_impl::Format)(*arg1)->GetFormat();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaDataInfo_GetFormatAsString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaDataInfo *arg1 = (btkMetaDataInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkMetaDataInfo_GetFormatAsString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaDataInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaDataInfo_GetFormatAsString" "', argument " "1"" of type '" "btkMetaDataInfo const *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaDataInfo * >(argp1);
  {
    try {
      result = (*arg1)->GetFormatAsString();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaDataInfo_SetFormat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaDataInfo *arg1 = (btkMetaDataInfo *) 0 ;
  btkMetaDataInfo_impl::Format arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkMetaDataInfo_SetFormat",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaDataInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaDataInfo_SetFormat" "', argument " "1"" of type '" "btkMetaDataInfo *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaDataInfo * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkMetaDataInfo_SetFormat" "', argument " "2"" of type '" "btkMetaDataInfo_impl::Format""'");
  } 
  arg2 = static_cast< btkMetaDataInfo_impl::Format >(val2);
  {
    try {
      (*arg1)->SetFormat(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaDataInfo_GetDimensionsProduct__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaDataInfo *arg1 = (btkMetaDataInfo *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkMetaDataInfo_GetDimensionsProduct",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaDataInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaDataInfo_GetDimensionsProduct" "', argument " "1"" of type '" "btkMetaDataInfo const *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaDataInfo * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkMetaDataInfo_GetDimensionsProduct" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)(*arg1)->GetDimensionsProduct(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaDataInfo_GetDimensionsProduct__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaDataInfo *arg1 = (btkMetaDataInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkMetaDataInfo_GetDimensionsProduct",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaDataInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaDataInfo_GetDimensionsProduct" "', argument " "1"" of type '" "btkMetaDataInfo const *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaDataInfo * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetDimensionsProduct();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaDataInfo_GetDimensionsProduct(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkMetaDataInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_btkMetaDataInfo_GetDimensionsProduct__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkMetaDataInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_btkMetaDataInfo_GetDimensionsProduct__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkMetaDataInfo_GetDimensionsProduct'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkMetaDataInfo_impl::GetDimensionsProduct(int) const\n"
    "    btkMetaDataInfo_impl::GetDimensionsProduct() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkMetaDataInfo_ResizeDimensions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaDataInfo *arg1 = (btkMetaDataInfo *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkMetaDataInfo_ResizeDimensions",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaDataInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaDataInfo_ResizeDimensions" "', argument " "1"" of type '" "btkMetaDataInfo *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaDataInfo * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkMetaDataInfo_ResizeDimensions" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->ResizeDimensions(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaDataInfo_ToString__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaDataInfo *arg1 = (btkMetaDataInfo *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkMetaDataInfo_ToString",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaDataInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaDataInfo_ToString" "', argument " "1"" of type '" "btkMetaDataInfo const *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaDataInfo * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkMetaDataInfo_ToString" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (*arg1)->ToString(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaDataInfo_ToString__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaDataInfo *arg1 = (btkMetaDataInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkMetaDataInfo_ToString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaDataInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaDataInfo_ToString" "', argument " "1"" of type '" "btkMetaDataInfo const *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaDataInfo * >(argp1);
  {
    try {
      result = (*arg1)->ToString();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaDataInfo_ToString(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkMetaDataInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_btkMetaDataInfo_ToString__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkMetaDataInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_btkMetaDataInfo_ToString__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkMetaDataInfo_ToString'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkMetaDataInfo_impl::ToString(int) const\n"
    "    btkMetaDataInfo_impl::ToString() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkMetaDataInfo_ToInt__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaDataInfo *arg1 = (btkMetaDataInfo *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkMetaDataInfo_ToInt",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaDataInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaDataInfo_ToInt" "', argument " "1"" of type '" "btkMetaDataInfo const *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaDataInfo * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkMetaDataInfo_ToInt" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)(*arg1)->ToInt(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaDataInfo_ToInt__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaDataInfo *arg1 = (btkMetaDataInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int,std::allocator< int > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkMetaDataInfo_ToInt",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaDataInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaDataInfo_ToInt" "', argument " "1"" of type '" "btkMetaDataInfo const *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaDataInfo * >(argp1);
  {
    try {
      result = (*arg1)->ToInt();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = swig::from(static_cast< std::vector< int,std::allocator< int > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaDataInfo_ToInt(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkMetaDataInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_btkMetaDataInfo_ToInt__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkMetaDataInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_btkMetaDataInfo_ToInt__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkMetaDataInfo_ToInt'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkMetaDataInfo_impl::ToInt(int) const\n"
    "    btkMetaDataInfo_impl::ToInt() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkMetaDataInfo_ToDouble__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaDataInfo *arg1 = (btkMetaDataInfo *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkMetaDataInfo_ToDouble",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaDataInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaDataInfo_ToDouble" "', argument " "1"" of type '" "btkMetaDataInfo const *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaDataInfo * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkMetaDataInfo_ToDouble" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)(*arg1)->ToDouble(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaDataInfo_ToDouble__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaDataInfo *arg1 = (btkMetaDataInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double,std::allocator< double > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkMetaDataInfo_ToDouble",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaDataInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaDataInfo_ToDouble" "', argument " "1"" of type '" "btkMetaDataInfo const *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaDataInfo * >(argp1);
  {
    try {
      result = (*arg1)->ToDouble();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaDataInfo_ToDouble(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkMetaDataInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_btkMetaDataInfo_ToDouble__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkMetaDataInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_btkMetaDataInfo_ToDouble__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkMetaDataInfo_ToDouble'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkMetaDataInfo_impl::ToDouble(int) const\n"
    "    btkMetaDataInfo_impl::ToDouble() const\n");
  return 0;
}


SWIGINTERN PyObject *btkMetaDataInfo_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_btkMetaDataInfo, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_btkMetaData__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  btkMetaData *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_btkMetaData",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkMetaData" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (btkMetaData *)new btkMetaData((std::string const &)*arg1);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkMetaData, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkMetaData__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  bool arg4 ;
  int res1 = SWIG_OLDOBJ ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  btkMetaData *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_btkMetaData",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkMetaData" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_btkMetaData" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_btkMetaData" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_btkMetaData" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try {
      result = (btkMetaData *)new btkMetaData((std::string const &)*arg1,arg2,(std::string const &)*arg3,arg4);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkMetaData, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkMetaData__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  btkMetaData *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_btkMetaData",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkMetaData" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_btkMetaData" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_btkMetaData" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = (btkMetaData *)new btkMetaData((std::string const &)*arg1,arg2,(std::string const &)*arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkMetaData, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkMetaData__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int arg2 ;
  int res1 = SWIG_OLDOBJ ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  btkMetaData *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_btkMetaData",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkMetaData" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_btkMetaData" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (btkMetaData *)new btkMetaData((std::string const &)*arg1,arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkMetaData, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkMetaData__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  double arg2 ;
  std::string *arg3 = 0 ;
  bool arg4 ;
  int res1 = SWIG_OLDOBJ ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  btkMetaData *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_btkMetaData",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkMetaData" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_btkMetaData" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_btkMetaData" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_btkMetaData" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try {
      result = (btkMetaData *)new btkMetaData((std::string const &)*arg1,arg2,(std::string const &)*arg3,arg4);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkMetaData, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkMetaData__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  double arg2 ;
  std::string *arg3 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  btkMetaData *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_btkMetaData",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkMetaData" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_btkMetaData" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_btkMetaData" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = (btkMetaData *)new btkMetaData((std::string const &)*arg1,arg2,(std::string const &)*arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkMetaData, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkMetaData__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  double arg2 ;
  int res1 = SWIG_OLDOBJ ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  btkMetaData *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_btkMetaData",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkMetaData" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_btkMetaData" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (btkMetaData *)new btkMetaData((std::string const &)*arg1,arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkMetaData, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkMetaData__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool arg4 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  btkMetaData *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_btkMetaData",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkMetaData" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_btkMetaData" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_btkMetaData" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_btkMetaData" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try {
      result = (btkMetaData *)new btkMetaData((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,arg4);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkMetaData, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkMetaData__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  btkMetaData *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_btkMetaData",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkMetaData" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_btkMetaData" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_btkMetaData" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = (btkMetaData *)new btkMetaData((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkMetaData, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkMetaData__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  btkMetaData *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_btkMetaData",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkMetaData" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_btkMetaData" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (btkMetaData *)new btkMetaData((std::string const &)*arg1,(std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkMetaData, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkMetaData__SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool arg4 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  btkMetaData *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_btkMetaData",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkMetaData" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_btkMetaData" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_btkMetaData" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_btkMetaData" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try {
      result = (btkMetaData *)new btkMetaData((std::string const &)*arg1,(std::vector< int,std::allocator< int > > const &)*arg2,(std::string const &)*arg3,arg4);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkMetaData, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkMetaData__SWIG_11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  btkMetaData *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_btkMetaData",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkMetaData" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_btkMetaData" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_btkMetaData" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = (btkMetaData *)new btkMetaData((std::string const &)*arg1,(std::vector< int,std::allocator< int > > const &)*arg2,(std::string const &)*arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkMetaData, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkMetaData__SWIG_12(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  btkMetaData *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_btkMetaData",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkMetaData" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_btkMetaData" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (btkMetaData *)new btkMetaData((std::string const &)*arg1,(std::vector< int,std::allocator< int > > const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkMetaData, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkMetaData__SWIG_13(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool arg4 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  btkMetaData *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_btkMetaData",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkMetaData" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_btkMetaData" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_btkMetaData" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_btkMetaData" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try {
      result = (btkMetaData *)new btkMetaData((std::string const &)*arg1,(std::vector< double,std::allocator< double > > const &)*arg2,(std::string const &)*arg3,arg4);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkMetaData, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkMetaData__SWIG_14(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  btkMetaData *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_btkMetaData",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkMetaData" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_btkMetaData" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_btkMetaData" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = (btkMetaData *)new btkMetaData((std::string const &)*arg1,(std::vector< double,std::allocator< double > > const &)*arg2,(std::string const &)*arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkMetaData, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkMetaData__SWIG_15(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  btkMetaData *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_btkMetaData",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkMetaData" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_btkMetaData" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (btkMetaData *)new btkMetaData((std::string const &)*arg1,(std::vector< double,std::allocator< double > > const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkMetaData, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkMetaData__SWIG_16(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool arg4 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  btkMetaData *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_btkMetaData",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkMetaData" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_btkMetaData" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_btkMetaData" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_btkMetaData" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try {
      result = (btkMetaData *)new btkMetaData((std::string const &)*arg1,(std::vector< std::string,std::allocator< std::string > > const &)*arg2,(std::string const &)*arg3,arg4);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkMetaData, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkMetaData__SWIG_17(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  btkMetaData *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_btkMetaData",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkMetaData" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_btkMetaData" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_btkMetaData" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = (btkMetaData *)new btkMetaData((std::string const &)*arg1,(std::vector< std::string,std::allocator< std::string > > const &)*arg2,(std::string const &)*arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkMetaData, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkMetaData__SWIG_18(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  btkMetaData *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_btkMetaData",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkMetaData" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_btkMetaData" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (btkMetaData *)new btkMetaData((std::string const &)*arg1,(std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkMetaData, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkMetaData__SWIG_19(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  std::string *arg4 = 0 ;
  bool arg5 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  btkMetaData *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_btkMetaData",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkMetaData" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_btkMetaData" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_btkMetaData" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_btkMetaData" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_btkMetaData" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  {
    try {
      result = (btkMetaData *)new btkMetaData((std::string const &)*arg1,(std::vector< int,std::allocator< int > > const &)*arg2,(std::vector< int,std::allocator< int > > const &)*arg3,(std::string const &)*arg4,arg5);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkMetaData, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkMetaData__SWIG_20(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  btkMetaData *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_btkMetaData",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkMetaData" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_btkMetaData" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_btkMetaData" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_btkMetaData" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      result = (btkMetaData *)new btkMetaData((std::string const &)*arg1,(std::vector< int,std::allocator< int > > const &)*arg2,(std::vector< int,std::allocator< int > > const &)*arg3,(std::string const &)*arg4);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkMetaData, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkMetaData__SWIG_21(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  btkMetaData *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_btkMetaData",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkMetaData" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_btkMetaData" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_btkMetaData" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = (btkMetaData *)new btkMetaData((std::string const &)*arg1,(std::vector< int,std::allocator< int > > const &)*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkMetaData, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkMetaData__SWIG_22(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  std::string *arg4 = 0 ;
  bool arg5 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  btkMetaData *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_btkMetaData",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkMetaData" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_btkMetaData" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_btkMetaData" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_btkMetaData" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_btkMetaData" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  {
    try {
      result = (btkMetaData *)new btkMetaData((std::string const &)*arg1,(std::vector< int,std::allocator< int > > const &)*arg2,(std::vector< double,std::allocator< double > > const &)*arg3,(std::string const &)*arg4,arg5);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkMetaData, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkMetaData__SWIG_23(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  btkMetaData *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_btkMetaData",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkMetaData" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_btkMetaData" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_btkMetaData" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_btkMetaData" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      result = (btkMetaData *)new btkMetaData((std::string const &)*arg1,(std::vector< int,std::allocator< int > > const &)*arg2,(std::vector< double,std::allocator< double > > const &)*arg3,(std::string const &)*arg4);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkMetaData, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkMetaData__SWIG_24(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  btkMetaData *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_btkMetaData",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkMetaData" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_btkMetaData" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_btkMetaData" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = (btkMetaData *)new btkMetaData((std::string const &)*arg1,(std::vector< int,std::allocator< int > > const &)*arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkMetaData, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkMetaData__SWIG_25(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg3 = 0 ;
  std::string *arg4 = 0 ;
  bool arg5 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  btkMetaData *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_btkMetaData",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkMetaData" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_btkMetaData" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_btkMetaData" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_btkMetaData" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_btkMetaData" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  {
    try {
      result = (btkMetaData *)new btkMetaData((std::string const &)*arg1,(std::vector< int,std::allocator< int > > const &)*arg2,(std::vector< std::string,std::allocator< std::string > > const &)*arg3,(std::string const &)*arg4,arg5);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkMetaData, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkMetaData__SWIG_26(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  btkMetaData *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_btkMetaData",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkMetaData" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_btkMetaData" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_btkMetaData" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_btkMetaData" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      result = (btkMetaData *)new btkMetaData((std::string const &)*arg1,(std::vector< int,std::allocator< int > > const &)*arg2,(std::vector< std::string,std::allocator< std::string > > const &)*arg3,(std::string const &)*arg4);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkMetaData, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkMetaData__SWIG_27(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg3 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  btkMetaData *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_btkMetaData",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkMetaData" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_btkMetaData" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_btkMetaData" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMetaData" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = (btkMetaData *)new btkMetaData((std::string const &)*arg1,(std::vector< int,std::allocator< int > > const &)*arg2,(std::vector< std::string,std::allocator< std::string > > const &)*arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkMetaData, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkMetaData(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_btkMetaData__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_btkMetaData__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_btkMetaData__SWIG_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_btkMetaData__SWIG_9(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< int,std::allocator< int > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_btkMetaData__SWIG_12(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_btkMetaData__SWIG_15(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_btkMetaData__SWIG_18(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_btkMetaData__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_btkMetaData__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_btkMetaData__SWIG_8(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< int,std::allocator< int > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_btkMetaData__SWIG_11(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_btkMetaData__SWIG_17(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_btkMetaData__SWIG_14(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< int,std::allocator< int > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_btkMetaData__SWIG_21(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< int,std::allocator< int > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_btkMetaData__SWIG_24(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< int,std::allocator< int > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< std::string,std::allocator< std::string > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_btkMetaData__SWIG_27(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_btkMetaData__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_btkMetaData__SWIG_4(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_btkMetaData__SWIG_7(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_btkMetaData__SWIG_13(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_btkMetaData__SWIG_16(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< int,std::allocator< int > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_btkMetaData__SWIG_10(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< int,std::allocator< int > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_btkMetaData__SWIG_20(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< int,std::allocator< int > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< std::string,std::allocator< std::string > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_btkMetaData__SWIG_26(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< int,std::allocator< int > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_btkMetaData__SWIG_23(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< int,std::allocator< int > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< std::string,std::allocator< std::string > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_btkMetaData__SWIG_25(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< int,std::allocator< int > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_btkMetaData__SWIG_19(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< int,std::allocator< int > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_btkMetaData__SWIG_22(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_btkMetaData'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkMetaData::btkMetaData(std::string const &)\n"
    "    btkMetaData::btkMetaData(std::string const &,int,std::string const &,bool)\n"
    "    btkMetaData::btkMetaData(std::string const &,int,std::string const &)\n"
    "    btkMetaData::btkMetaData(std::string const &,int)\n"
    "    btkMetaData::btkMetaData(std::string const &,double,std::string const &,bool)\n"
    "    btkMetaData::btkMetaData(std::string const &,double,std::string const &)\n"
    "    btkMetaData::btkMetaData(std::string const &,double)\n"
    "    btkMetaData::btkMetaData(std::string const &,std::string const &,std::string const &,bool)\n"
    "    btkMetaData::btkMetaData(std::string const &,std::string const &,std::string const &)\n"
    "    btkMetaData::btkMetaData(std::string const &,std::string const &)\n"
    "    btkMetaData::btkMetaData(std::string const &,std::vector< int,std::allocator< int > > const &,std::string const &,bool)\n"
    "    btkMetaData::btkMetaData(std::string const &,std::vector< int,std::allocator< int > > const &,std::string const &)\n"
    "    btkMetaData::btkMetaData(std::string const &,std::vector< int,std::allocator< int > > const &)\n"
    "    btkMetaData::btkMetaData(std::string const &,std::vector< double,std::allocator< double > > const &,std::string const &,bool)\n"
    "    btkMetaData::btkMetaData(std::string const &,std::vector< double,std::allocator< double > > const &,std::string const &)\n"
    "    btkMetaData::btkMetaData(std::string const &,std::vector< double,std::allocator< double > > const &)\n"
    "    btkMetaData::btkMetaData(std::string const &,std::vector< std::string,std::allocator< std::string > > const &,std::string const &,bool)\n"
    "    btkMetaData::btkMetaData(std::string const &,std::vector< std::string,std::allocator< std::string > > const &,std::string const &)\n"
    "    btkMetaData::btkMetaData(std::string const &,std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    btkMetaData::btkMetaData(std::string const &,std::vector< int,std::allocator< int > > const &,std::vector< int,std::allocator< int > > const &,std::string const &,bool)\n"
    "    btkMetaData::btkMetaData(std::string const &,std::vector< int,std::allocator< int > > const &,std::vector< int,std::allocator< int > > const &,std::string const &)\n"
    "    btkMetaData::btkMetaData(std::string const &,std::vector< int,std::allocator< int > > const &,std::vector< int,std::allocator< int > > const &)\n"
    "    btkMetaData::btkMetaData(std::string const &,std::vector< int,std::allocator< int > > const &,std::vector< double,std::allocator< double > > const &,std::string const &,bool)\n"
    "    btkMetaData::btkMetaData(std::string const &,std::vector< int,std::allocator< int > > const &,std::vector< double,std::allocator< double > > const &,std::string const &)\n"
    "    btkMetaData::btkMetaData(std::string const &,std::vector< int,std::allocator< int > > const &,std::vector< double,std::allocator< double > > const &)\n"
    "    btkMetaData::btkMetaData(std::string const &,std::vector< int,std::allocator< int > > const &,std::vector< std::string,std::allocator< std::string > > const &,std::string const &,bool)\n"
    "    btkMetaData::btkMetaData(std::string const &,std::vector< int,std::allocator< int > > const &,std::vector< std::string,std::allocator< std::string > > const &,std::string const &)\n"
    "    btkMetaData::btkMetaData(std::string const &,std::vector< int,std::allocator< int > > const &,std::vector< std::string,std::allocator< std::string > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkMetaData_Clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaData *arg1 = (btkMetaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< btkMetaData > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkMetaData_Clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaData_Clone" "', argument " "1"" of type '" "btkMetaData *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaData * >(argp1);
  {
    try {
      result = (arg1)->Clone();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkMetaData(static_cast< const btkMetaData& >(result))), SWIGTYPE_p_btkMetaData, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaData___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaData *arg1 = (btkMetaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkMetaData_impl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkMetaData___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaData___deref__" "', argument " "1"" of type '" "btkMetaData const *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaData * >(argp1);
  {
    try {
      result = (btkMetaData_impl *)((btkMetaData const *)arg1)->operator ->();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkMetaData_impl, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaData___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaData *arg1 = (btkMetaData *) 0 ;
  btkMetaData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkMetaData___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaData___eq__" "', argument " "1"" of type '" "btkMetaData *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkMetaData,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkMetaData___eq__" "', argument " "2"" of type '" "btkMetaData const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaData___eq__" "', argument " "2"" of type '" "btkMetaData const &""'"); 
  }
  arg2 = reinterpret_cast< btkMetaData * >(argp2);
  {
    try {
      result = (bool)btkMetaData_operator_Se__Se_(arg1,(btkMetaData const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaData___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaData *arg1 = (btkMetaData *) 0 ;
  btkMetaData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkMetaData___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaData___ne__" "', argument " "1"" of type '" "btkMetaData *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkMetaData,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkMetaData___ne__" "', argument " "2"" of type '" "btkMetaData const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaData___ne__" "', argument " "2"" of type '" "btkMetaData const &""'"); 
  }
  arg2 = reinterpret_cast< btkMetaData * >(argp2);
  {
    try {
      result = (bool)btkMetaData_operator_SN__Se_(arg1,(btkMetaData const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_btkMetaData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaData *arg1 = (btkMetaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_btkMetaData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaData, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_btkMetaData" "', argument " "1"" of type '" "btkMetaData *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaData * >(argp1);
  {
    try {
      delete arg1;
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaData_GetLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaData *arg1 = (btkMetaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkMetaData_GetLabel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaData_GetLabel" "', argument " "1"" of type '" "btkMetaData const *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaData * >(argp1);
  {
    try {
      result = (std::string *) &(*arg1)->GetLabel();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaData_SetLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaData *arg1 = (btkMetaData *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkMetaData_SetLabel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaData_SetLabel" "', argument " "1"" of type '" "btkMetaData *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaData * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkMetaData_SetLabel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaData_SetLabel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->SetLabel((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaData_GetDescription(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaData *arg1 = (btkMetaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkMetaData_GetDescription",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaData_GetDescription" "', argument " "1"" of type '" "btkMetaData const *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaData * >(argp1);
  {
    try {
      result = (std::string *) &(*arg1)->GetDescription();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaData_SetDescription(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaData *arg1 = (btkMetaData *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkMetaData_SetDescription",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaData_SetDescription" "', argument " "1"" of type '" "btkMetaData *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaData * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkMetaData_SetDescription" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaData_SetDescription" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->SetDescription((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaData_GetUnlockState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaData *arg1 = (btkMetaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkMetaData_GetUnlockState",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaData_GetUnlockState" "', argument " "1"" of type '" "btkMetaData const *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaData * >(argp1);
  {
    try {
      result = (bool)(*arg1)->GetUnlockState();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaData_SetUnlockState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaData *arg1 = (btkMetaData *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkMetaData_SetUnlockState",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaData_SetUnlockState" "', argument " "1"" of type '" "btkMetaData *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaData * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkMetaData_SetUnlockState" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (*arg1)->SetUnlockState(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaData_GetInfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaData *arg1 = (btkMetaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< btkMetaDataInfo > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkMetaData_GetInfo",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaData_GetInfo" "', argument " "1"" of type '" "btkMetaData const *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaData * >(argp1);
  {
    try {
      result = (*arg1)->GetInfo();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkMetaDataInfo(static_cast< const btkMetaDataInfo& >(result))), SWIGTYPE_p_btkMetaDataInfo, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaData_SetInfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaData *arg1 = (btkMetaData *) 0 ;
  SwigValueWrapper< btkMetaDataInfo > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkMetaData_SetInfo",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaData_SetInfo" "', argument " "1"" of type '" "btkMetaData *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaData * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkMetaDataInfo,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkMetaData_SetInfo" "', argument " "2"" of type '" "btkMetaDataInfo const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaData_SetInfo" "', argument " "2"" of type '" "btkMetaDataInfo const""'");
    } else {
      btkMetaDataInfo * temp = reinterpret_cast< btkMetaDataInfo * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->SetInfo(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaData_HasInfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaData *arg1 = (btkMetaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkMetaData_HasInfo",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaData_HasInfo" "', argument " "1"" of type '" "btkMetaData const *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaData * >(argp1);
  {
    try {
      result = (bool)(*arg1)->HasInfo();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaData_ExtractChildInfo__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaData *arg1 = (btkMetaData *) 0 ;
  std::string *arg2 = 0 ;
  btk::MetaDataInfo::Format arg3 ;
  int arg4 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  SwigValueWrapper< btkMetaDataInfo > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:btkMetaData_ExtractChildInfo",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaData_ExtractChildInfo" "', argument " "1"" of type '" "btkMetaData *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaData * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkMetaData_ExtractChildInfo" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaData_ExtractChildInfo" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btk__MetaDataInfo__Format,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkMetaData_ExtractChildInfo" "', argument " "3"" of type '" "btk::MetaDataInfo::Format""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaData_ExtractChildInfo" "', argument " "3"" of type '" "btk::MetaDataInfo::Format""'");
    } else {
      btk::MetaDataInfo::Format * temp = reinterpret_cast< btk::MetaDataInfo::Format * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "btkMetaData_ExtractChildInfo" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "btkMetaData_ExtractChildInfo" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  {
    try {
      result = (*arg1)->ExtractChildInfo((std::string const &)*arg2,arg3,arg4,arg5);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkMetaDataInfo(static_cast< const btkMetaDataInfo& >(result))), SWIGTYPE_p_btkMetaDataInfo, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaData_ExtractChildInfo__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaData *arg1 = (btkMetaData *) 0 ;
  std::string *arg2 = 0 ;
  btk::MetaDataInfo::Format arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  SwigValueWrapper< btkMetaDataInfo > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:btkMetaData_ExtractChildInfo",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaData_ExtractChildInfo" "', argument " "1"" of type '" "btkMetaData *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaData * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkMetaData_ExtractChildInfo" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaData_ExtractChildInfo" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btk__MetaDataInfo__Format,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkMetaData_ExtractChildInfo" "', argument " "3"" of type '" "btk::MetaDataInfo::Format""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaData_ExtractChildInfo" "', argument " "3"" of type '" "btk::MetaDataInfo::Format""'");
    } else {
      btk::MetaDataInfo::Format * temp = reinterpret_cast< btk::MetaDataInfo::Format * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "btkMetaData_ExtractChildInfo" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (*arg1)->ExtractChildInfo((std::string const &)*arg2,arg3,arg4);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkMetaDataInfo(static_cast< const btkMetaDataInfo& >(result))), SWIGTYPE_p_btkMetaDataInfo, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaData_ExtractChildInfo(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkMetaData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_btk__MetaDataInfo__Format, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_btkMetaData_ExtractChildInfo__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkMetaData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_btk__MetaDataInfo__Format, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_btkMetaData_ExtractChildInfo__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkMetaData_ExtractChildInfo'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkMetaData_impl::ExtractChildInfo(std::string const &,btk::MetaDataInfo::Format,int,bool)\n"
    "    btkMetaData_impl::ExtractChildInfo(std::string const &,btk::MetaDataInfo::Format,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkMetaData_HasMetaDataAsParent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaData *arg1 = (btkMetaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkMetaData_HasMetaDataAsParent",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaData_HasMetaDataAsParent" "', argument " "1"" of type '" "btkMetaData const *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaData * >(argp1);
  {
    try {
      result = (bool)(*arg1)->HasMetaDataAsParent();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaData_Begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaData *arg1 = (btkMetaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkMetaData_impl::Iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkMetaData_Begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaData_Begin" "', argument " "1"" of type '" "btkMetaData *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaData * >(argp1);
  {
    try {
      result = (*arg1)->Begin();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkMetaData_impl::Iterator(static_cast< const btkMetaData_impl::Iterator& >(result))), SWIGTYPE_p_btkMetaDataIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaData_End(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaData *arg1 = (btkMetaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkMetaData_impl::Iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkMetaData_End",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaData_End" "', argument " "1"" of type '" "btkMetaData *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaData * >(argp1);
  {
    try {
      result = (*arg1)->End();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkMetaData_impl::Iterator(static_cast< const btkMetaData_impl::Iterator& >(result))), SWIGTYPE_p_btkMetaDataIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaData_GetChild__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaData *arg1 = (btkMetaData *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< btkMetaData > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkMetaData_GetChild",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaData_GetChild" "', argument " "1"" of type '" "btkMetaData *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaData * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkMetaData_GetChild" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (*arg1)->GetChild(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkMetaData(static_cast< const btkMetaData& >(result))), SWIGTYPE_p_btkMetaData, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaData_GetChild__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaData *arg1 = (btkMetaData *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< btkMetaData > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkMetaData_GetChild",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaData_GetChild" "', argument " "1"" of type '" "btkMetaData *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaData * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkMetaData_GetChild" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaData_GetChild" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (*arg1)->GetChild((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkMetaData(static_cast< const btkMetaData& >(result))), SWIGTYPE_p_btkMetaData, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaData_GetChild(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkMetaData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_btkMetaData_GetChild__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkMetaData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_btkMetaData_GetChild__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkMetaData_GetChild'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkMetaData_impl::GetChild(int)\n"
    "    btkMetaData_impl::GetChild(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkMetaData_AppendChild(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaData *arg1 = (btkMetaData *) 0 ;
  SwigValueWrapper< btkMetaData > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkMetaData_AppendChild",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaData_AppendChild" "', argument " "1"" of type '" "btkMetaData *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaData * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkMetaData,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkMetaData_AppendChild" "', argument " "2"" of type '" "btkMetaData""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaData_AppendChild" "', argument " "2"" of type '" "btkMetaData""'");
    } else {
      btkMetaData * temp = reinterpret_cast< btkMetaData * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (bool)(*arg1)->AppendChild(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaData_InsertChild__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaData *arg1 = (btkMetaData *) 0 ;
  btkMetaData_impl::Iterator arg2 ;
  SwigValueWrapper< btkMetaData > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkMetaData_InsertChild",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaData_InsertChild" "', argument " "1"" of type '" "btkMetaData *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaData * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkMetaDataIterator,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkMetaData_InsertChild" "', argument " "2"" of type '" "btkMetaData_impl::Iterator""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaData_InsertChild" "', argument " "2"" of type '" "btkMetaData_impl::Iterator""'");
    } else {
      btkMetaData_impl::Iterator * temp = reinterpret_cast< btkMetaData_impl::Iterator * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkMetaData,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkMetaData_InsertChild" "', argument " "3"" of type '" "btkMetaData""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaData_InsertChild" "', argument " "3"" of type '" "btkMetaData""'");
    } else {
      btkMetaData * temp = reinterpret_cast< btkMetaData * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      result = (bool)(*arg1)->InsertChild(arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaData_InsertChild__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaData *arg1 = (btkMetaData *) 0 ;
  int arg2 ;
  SwigValueWrapper< btkMetaData > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkMetaData_InsertChild",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaData_InsertChild" "', argument " "1"" of type '" "btkMetaData *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaData * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkMetaData_InsertChild" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkMetaData,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkMetaData_InsertChild" "', argument " "3"" of type '" "btkMetaData""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaData_InsertChild" "', argument " "3"" of type '" "btkMetaData""'");
    } else {
      btkMetaData * temp = reinterpret_cast< btkMetaData * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      result = (bool)(*arg1)->InsertChild(arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaData_InsertChild(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkMetaData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_btkMetaDataIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_btkMetaData, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_btkMetaData_InsertChild__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkMetaData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_btkMetaData, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_btkMetaData_InsertChild__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkMetaData_InsertChild'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkMetaData_impl::InsertChild(btkMetaData_impl::Iterator,btkMetaData)\n"
    "    btkMetaData_impl::InsertChild(int,btkMetaData)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkMetaData_SetChild(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaData *arg1 = (btkMetaData *) 0 ;
  int arg2 ;
  SwigValueWrapper< btkMetaData > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkMetaData_SetChild",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaData_SetChild" "', argument " "1"" of type '" "btkMetaData *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaData * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkMetaData_SetChild" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkMetaData,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkMetaData_SetChild" "', argument " "3"" of type '" "btkMetaData""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaData_SetChild" "', argument " "3"" of type '" "btkMetaData""'");
    } else {
      btkMetaData * temp = reinterpret_cast< btkMetaData * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->SetChild(arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaData_TakeChild__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaData *arg1 = (btkMetaData *) 0 ;
  btkMetaData_impl::Iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< btkMetaData > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkMetaData_TakeChild",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaData_TakeChild" "', argument " "1"" of type '" "btkMetaData *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaData * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkMetaDataIterator,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkMetaData_TakeChild" "', argument " "2"" of type '" "btkMetaData_impl::Iterator""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaData_TakeChild" "', argument " "2"" of type '" "btkMetaData_impl::Iterator""'");
    } else {
      btkMetaData_impl::Iterator * temp = reinterpret_cast< btkMetaData_impl::Iterator * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (*arg1)->TakeChild(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkMetaData(static_cast< const btkMetaData& >(result))), SWIGTYPE_p_btkMetaData, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaData_TakeChild__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaData *arg1 = (btkMetaData *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< btkMetaData > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkMetaData_TakeChild",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaData_TakeChild" "', argument " "1"" of type '" "btkMetaData *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaData * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkMetaData_TakeChild" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (*arg1)->TakeChild(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkMetaData(static_cast< const btkMetaData& >(result))), SWIGTYPE_p_btkMetaData, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaData_TakeChild__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaData *arg1 = (btkMetaData *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< btkMetaData > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkMetaData_TakeChild",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaData_TakeChild" "', argument " "1"" of type '" "btkMetaData *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaData * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkMetaData_TakeChild" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaData_TakeChild" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (*arg1)->TakeChild((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkMetaData(static_cast< const btkMetaData& >(result))), SWIGTYPE_p_btkMetaData, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaData_TakeChild(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkMetaData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_btkMetaDataIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_btkMetaData_TakeChild__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkMetaData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_btkMetaData_TakeChild__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkMetaData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_btkMetaData_TakeChild__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkMetaData_TakeChild'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkMetaData_impl::TakeChild(btkMetaData_impl::Iterator)\n"
    "    btkMetaData_impl::TakeChild(int)\n"
    "    btkMetaData_impl::TakeChild(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkMetaData_RemoveChild__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaData *arg1 = (btkMetaData *) 0 ;
  btkMetaData_impl::Iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  btkMetaData_impl::Iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkMetaData_RemoveChild",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaData_RemoveChild" "', argument " "1"" of type '" "btkMetaData *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaData * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkMetaDataIterator,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkMetaData_RemoveChild" "', argument " "2"" of type '" "btkMetaData_impl::Iterator""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaData_RemoveChild" "', argument " "2"" of type '" "btkMetaData_impl::Iterator""'");
    } else {
      btkMetaData_impl::Iterator * temp = reinterpret_cast< btkMetaData_impl::Iterator * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (*arg1)->RemoveChild(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkMetaData_impl::Iterator(static_cast< const btkMetaData_impl::Iterator& >(result))), SWIGTYPE_p_btkMetaDataIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaData_RemoveChild__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaData *arg1 = (btkMetaData *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkMetaData_RemoveChild",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaData_RemoveChild" "', argument " "1"" of type '" "btkMetaData *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaData * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkMetaData_RemoveChild" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->RemoveChild(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaData_RemoveChild__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaData *arg1 = (btkMetaData *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkMetaData_RemoveChild",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaData_RemoveChild" "', argument " "1"" of type '" "btkMetaData *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaData * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkMetaData_RemoveChild" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaData_RemoveChild" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->RemoveChild((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaData_RemoveChild(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkMetaData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_btkMetaDataIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_btkMetaData_RemoveChild__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkMetaData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_btkMetaData_RemoveChild__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkMetaData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_btkMetaData_RemoveChild__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkMetaData_RemoveChild'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkMetaData_impl::RemoveChild(btkMetaData_impl::Iterator)\n"
    "    btkMetaData_impl::RemoveChild(int)\n"
    "    btkMetaData_impl::RemoveChild(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkMetaData_ClearChildren(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaData *arg1 = (btkMetaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkMetaData_ClearChildren",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaData_ClearChildren" "', argument " "1"" of type '" "btkMetaData *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaData * >(argp1);
  {
    try {
      (*arg1)->ClearChildren();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaData_HasChildren(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaData *arg1 = (btkMetaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkMetaData_HasChildren",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaData_HasChildren" "', argument " "1"" of type '" "btkMetaData const *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaData * >(argp1);
  {
    try {
      result = (bool)(*arg1)->HasChildren();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaData_GetChildNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaData *arg1 = (btkMetaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkMetaData_GetChildNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaData_GetChildNumber" "', argument " "1"" of type '" "btkMetaData const *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaData * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetChildNumber();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaData_FindChild(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaData *arg1 = (btkMetaData *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  btkMetaData_impl::Iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkMetaData_FindChild",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaData_FindChild" "', argument " "1"" of type '" "btkMetaData *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaData * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkMetaData_FindChild" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaData_FindChild" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (*arg1)->FindChild((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkMetaData_impl::Iterator(static_cast< const btkMetaData_impl::Iterator& >(result))), SWIGTYPE_p_btkMetaDataIterator, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaData_Update(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaData *arg1 = (btkMetaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkMetaData_Update",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaData_Update" "', argument " "1"" of type '" "btkMetaData *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaData * >(argp1);
  {
    try {
      (*arg1)->Update();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaData_GetTimestamp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaData *arg1 = (btkMetaData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkMetaData_GetTimestamp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaData_GetTimestamp" "', argument " "1"" of type '" "btkMetaData const *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaData * >(argp1);
  {
    try {
      result = (unsigned long)(*arg1)->GetTimestamp();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *btkMetaData_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_btkMetaData, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_btkMetaDataIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaDataIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_btkMetaDataIterator")) SWIG_fail;
  {
    try {
      result = (btkMetaDataIterator *)new btkMetaDataIterator();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkMetaDataIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaDataIterator_incr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaDataIterator *arg1 = (btkMetaDataIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkMetaDataIterator_incr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaDataIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaDataIterator_incr" "', argument " "1"" of type '" "btkMetaDataIterator *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaDataIterator * >(argp1);
  {
    try {
      (arg1)->incr();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaDataIterator_decr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaDataIterator *arg1 = (btkMetaDataIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkMetaDataIterator_decr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaDataIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaDataIterator_decr" "', argument " "1"" of type '" "btkMetaDataIterator *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaDataIterator * >(argp1);
  {
    try {
      (arg1)->decr();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaDataIterator_value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaDataIterator *arg1 = (btkMetaDataIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< btkMetaData > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkMetaDataIterator_value",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaDataIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaDataIterator_value" "', argument " "1"" of type '" "btkMetaDataIterator *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaDataIterator * >(argp1);
  {
    try {
      result = (arg1)->value();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkMetaData(static_cast< const btkMetaData& >(result))), SWIGTYPE_p_btkMetaData, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaDataIterator___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaDataIterator *arg1 = (btkMetaDataIterator *) 0 ;
  btkMetaDataIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkMetaDataIterator___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaDataIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaDataIterator___eq__" "', argument " "1"" of type '" "btkMetaDataIterator *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaDataIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkMetaDataIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkMetaDataIterator___eq__" "', argument " "2"" of type '" "btkMetaDataIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaDataIterator___eq__" "', argument " "2"" of type '" "btkMetaDataIterator const &""'"); 
  }
  arg2 = reinterpret_cast< btkMetaDataIterator * >(argp2);
  {
    try {
      result = (bool)(arg1)->operator ==((btkMetaDataIterator const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaDataIterator___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaDataIterator *arg1 = (btkMetaDataIterator *) 0 ;
  btkMetaDataIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkMetaDataIterator___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaDataIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaDataIterator___ne__" "', argument " "1"" of type '" "btkMetaDataIterator *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaDataIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkMetaDataIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkMetaDataIterator___ne__" "', argument " "2"" of type '" "btkMetaDataIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaDataIterator___ne__" "', argument " "2"" of type '" "btkMetaDataIterator const &""'"); 
  }
  arg2 = reinterpret_cast< btkMetaDataIterator * >(argp2);
  {
    try {
      result = (bool)(arg1)->operator !=((btkMetaDataIterator const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_btkMetaDataIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMetaDataIterator *arg1 = (btkMetaDataIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_btkMetaDataIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMetaDataIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_btkMetaDataIterator" "', argument " "1"" of type '" "btkMetaDataIterator *""'"); 
  }
  arg1 = reinterpret_cast< btkMetaDataIterator * >(argp1);
  {
    try {
      delete arg1;
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *btkMetaDataIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_btkMetaDataIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_btkMetaDataCreateChild__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< btkMetaData > arg1 ;
  std::string *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< btkMetaData > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkMetaDataCreateChild",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_btkMetaData,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaDataCreateChild" "', argument " "1"" of type '" "btkMetaData""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaDataCreateChild" "', argument " "1"" of type '" "btkMetaData""'");
    } else {
      btkMetaData * temp = reinterpret_cast< btkMetaData * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkMetaDataCreateChild" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaDataCreateChild" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = btkMetaDataCreateChild(arg1,(std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkMetaData(static_cast< const btkMetaData& >(result))), SWIGTYPE_p_btkMetaData, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaDataCreateChild__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< btkMetaData > arg1 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkMetaDataCreateChild",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_btkMetaData,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaDataCreateChild" "', argument " "1"" of type '" "btkMetaData""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaDataCreateChild" "', argument " "1"" of type '" "btkMetaData""'");
    } else {
      btkMetaData * temp = reinterpret_cast< btkMetaData * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkMetaDataCreateChild" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaDataCreateChild" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkMetaDataCreateChild" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      btkMetaDataCreateChild(arg1,(std::string const &)*arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaDataCreateChild__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< btkMetaData > arg1 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkMetaDataCreateChild",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_btkMetaData,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaDataCreateChild" "', argument " "1"" of type '" "btkMetaData""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaDataCreateChild" "', argument " "1"" of type '" "btkMetaData""'");
    } else {
      btkMetaData * temp = reinterpret_cast< btkMetaData * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkMetaDataCreateChild" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaDataCreateChild" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkMetaDataCreateChild" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      btkMetaDataCreateChild(arg1,(std::string const &)*arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaDataCreateChild__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< btkMetaData > arg1 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkMetaDataCreateChild",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_btkMetaData,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaDataCreateChild" "', argument " "1"" of type '" "btkMetaData""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaDataCreateChild" "', argument " "1"" of type '" "btkMetaData""'");
    } else {
      btkMetaData * temp = reinterpret_cast< btkMetaData * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkMetaDataCreateChild" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaDataCreateChild" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkMetaDataCreateChild" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaDataCreateChild" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      btkMetaDataCreateChild(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaDataCreateChild__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< btkMetaData > arg1 ;
  std::string *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkMetaDataCreateChild",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_btkMetaData,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaDataCreateChild" "', argument " "1"" of type '" "btkMetaData""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaDataCreateChild" "', argument " "1"" of type '" "btkMetaData""'");
    } else {
      btkMetaData * temp = reinterpret_cast< btkMetaData * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkMetaDataCreateChild" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaDataCreateChild" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkMetaDataCreateChild" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaDataCreateChild" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      btkMetaDataCreateChild(arg1,(std::string const &)*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaDataCreateChild__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< btkMetaData > arg1 ;
  std::string *arg2 = 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkMetaDataCreateChild",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_btkMetaData,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaDataCreateChild" "', argument " "1"" of type '" "btkMetaData""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaDataCreateChild" "', argument " "1"" of type '" "btkMetaData""'");
    } else {
      btkMetaData * temp = reinterpret_cast< btkMetaData * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkMetaDataCreateChild" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaDataCreateChild" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkMetaDataCreateChild" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaDataCreateChild" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      btkMetaDataCreateChild(arg1,(std::string const &)*arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaDataCreateChild__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< btkMetaData > arg1 ;
  std::string *arg2 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkMetaDataCreateChild",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_btkMetaData,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaDataCreateChild" "', argument " "1"" of type '" "btkMetaData""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaDataCreateChild" "', argument " "1"" of type '" "btkMetaData""'");
    } else {
      btkMetaData * temp = reinterpret_cast< btkMetaData * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkMetaDataCreateChild" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaDataCreateChild" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkMetaDataCreateChild" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaDataCreateChild" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      btkMetaDataCreateChild(arg1,(std::string const &)*arg2,(std::vector< std::string,std::allocator< std::string > > const &)*arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaDataCreateChild__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< btkMetaData > arg1 ;
  std::string *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  int arg4 ;
  void *argp1 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:btkMetaDataCreateChild",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_btkMetaData,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaDataCreateChild" "', argument " "1"" of type '" "btkMetaData""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaDataCreateChild" "', argument " "1"" of type '" "btkMetaData""'");
    } else {
      btkMetaData * temp = reinterpret_cast< btkMetaData * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkMetaDataCreateChild" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaDataCreateChild" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkMetaDataCreateChild" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaDataCreateChild" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "btkMetaDataCreateChild" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      btkMetaDataCreateChild(arg1,(std::string const &)*arg2,(std::vector< int,std::allocator< int > > const &)*arg3,arg4);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaDataCreateChild__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< btkMetaData > arg1 ;
  std::string *arg2 = 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  int arg4 ;
  void *argp1 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:btkMetaDataCreateChild",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_btkMetaData,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaDataCreateChild" "', argument " "1"" of type '" "btkMetaData""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaDataCreateChild" "', argument " "1"" of type '" "btkMetaData""'");
    } else {
      btkMetaData * temp = reinterpret_cast< btkMetaData * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkMetaDataCreateChild" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaDataCreateChild" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkMetaDataCreateChild" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaDataCreateChild" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "btkMetaDataCreateChild" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      btkMetaDataCreateChild(arg1,(std::string const &)*arg2,(std::vector< double,std::allocator< double > > const &)*arg3,arg4);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaDataCreateChild__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< btkMetaData > arg1 ;
  std::string *arg2 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg3 = 0 ;
  int arg4 ;
  void *argp1 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:btkMetaDataCreateChild",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_btkMetaData,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaDataCreateChild" "', argument " "1"" of type '" "btkMetaData""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaDataCreateChild" "', argument " "1"" of type '" "btkMetaData""'");
    } else {
      btkMetaData * temp = reinterpret_cast< btkMetaData * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkMetaDataCreateChild" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaDataCreateChild" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkMetaDataCreateChild" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaDataCreateChild" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "btkMetaDataCreateChild" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      btkMetaDataCreateChild(arg1,(std::string const &)*arg2,(std::vector< std::string,std::allocator< std::string > > const &)*arg3,arg4);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaDataCreateChild(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_btkMetaData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_btkMetaDataCreateChild__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_btkMetaData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_btkMetaDataCreateChild__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_btkMetaData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_btkMetaDataCreateChild__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_btkMetaData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_btkMetaDataCreateChild__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_btkMetaData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_btkMetaDataCreateChild__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_btkMetaData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_btkMetaDataCreateChild__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_btkMetaData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< std::string,std::allocator< std::string > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_btkMetaDataCreateChild__SWIG_6(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_btkMetaData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_btkMetaDataCreateChild__SWIG_7(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_btkMetaData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_btkMetaDataCreateChild__SWIG_8(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_btkMetaData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< std::string,std::allocator< std::string > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_btkMetaDataCreateChild__SWIG_9(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkMetaDataCreateChild'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkMetaDataCreateChild(btkMetaData,std::string const &)\n"
    "    btkMetaDataCreateChild(btkMetaData,std::string const &,int)\n"
    "    btkMetaDataCreateChild(btkMetaData,std::string const &,double)\n"
    "    btkMetaDataCreateChild(btkMetaData,std::string const &,std::string const &)\n"
    "    btkMetaDataCreateChild(btkMetaData,std::string const &,std::vector< int,std::allocator< int > > const &)\n"
    "    btkMetaDataCreateChild(btkMetaData,std::string const &,std::vector< double,std::allocator< double > > const &)\n"
    "    btkMetaDataCreateChild(btkMetaData,std::string const &,std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    btkMetaDataCreateChild(btkMetaData,std::string const &,std::vector< int,std::allocator< int > > const &,int)\n"
    "    btkMetaDataCreateChild(btkMetaData,std::string const &,std::vector< double,std::allocator< double > > const &,int)\n"
    "    btkMetaDataCreateChild(btkMetaData,std::string const &,std::vector< std::string,std::allocator< std::string > > const &,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkMetaDataCollapseChildrenValuesInt__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< btkMetaData > arg1 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::vector< int,std::allocator< int > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:btkMetaDataCollapseChildrenValuesInt",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_btkMetaData,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaDataCollapseChildrenValuesInt" "', argument " "1"" of type '" "btkMetaData""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaDataCollapseChildrenValuesInt" "', argument " "1"" of type '" "btkMetaData""'");
    } else {
      btkMetaData * temp = reinterpret_cast< btkMetaData * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkMetaDataCollapseChildrenValuesInt" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaDataCollapseChildrenValuesInt" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkMetaDataCollapseChildrenValuesInt" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "btkMetaDataCollapseChildrenValuesInt" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = btkMetaDataCollapseChildrenValuesInt(arg1,(std::string const &)*arg2,arg3,arg4);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = swig::from(static_cast< std::vector< int,std::allocator< int > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaDataCollapseChildrenValuesInt__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< btkMetaData > arg1 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< int,std::allocator< int > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkMetaDataCollapseChildrenValuesInt",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_btkMetaData,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaDataCollapseChildrenValuesInt" "', argument " "1"" of type '" "btkMetaData""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaDataCollapseChildrenValuesInt" "', argument " "1"" of type '" "btkMetaData""'");
    } else {
      btkMetaData * temp = reinterpret_cast< btkMetaData * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkMetaDataCollapseChildrenValuesInt" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaDataCollapseChildrenValuesInt" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkMetaDataCollapseChildrenValuesInt" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = btkMetaDataCollapseChildrenValuesInt(arg1,(std::string const &)*arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = swig::from(static_cast< std::vector< int,std::allocator< int > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaDataCollapseChildrenValuesInt__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< btkMetaData > arg1 ;
  std::string *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< int,std::allocator< int > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkMetaDataCollapseChildrenValuesInt",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_btkMetaData,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaDataCollapseChildrenValuesInt" "', argument " "1"" of type '" "btkMetaData""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaDataCollapseChildrenValuesInt" "', argument " "1"" of type '" "btkMetaData""'");
    } else {
      btkMetaData * temp = reinterpret_cast< btkMetaData * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkMetaDataCollapseChildrenValuesInt" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaDataCollapseChildrenValuesInt" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = btkMetaDataCollapseChildrenValuesInt(arg1,(std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = swig::from(static_cast< std::vector< int,std::allocator< int > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaDataCollapseChildrenValuesInt(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_btkMetaData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_btkMetaDataCollapseChildrenValuesInt__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_btkMetaData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_btkMetaDataCollapseChildrenValuesInt__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_btkMetaData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_btkMetaDataCollapseChildrenValuesInt__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkMetaDataCollapseChildrenValuesInt'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkMetaDataCollapseChildrenValuesInt(btkMetaData,std::string const &,int,int)\n"
    "    btkMetaDataCollapseChildrenValuesInt(btkMetaData,std::string const &,int)\n"
    "    btkMetaDataCollapseChildrenValuesInt(btkMetaData,std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkMetaDataCollapseChildrenValuesDouble__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< btkMetaData > arg1 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  double arg4 ;
  void *argp1 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::vector< double,std::allocator< double > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:btkMetaDataCollapseChildrenValuesDouble",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_btkMetaData,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaDataCollapseChildrenValuesDouble" "', argument " "1"" of type '" "btkMetaData""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaDataCollapseChildrenValuesDouble" "', argument " "1"" of type '" "btkMetaData""'");
    } else {
      btkMetaData * temp = reinterpret_cast< btkMetaData * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkMetaDataCollapseChildrenValuesDouble" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaDataCollapseChildrenValuesDouble" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkMetaDataCollapseChildrenValuesDouble" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "btkMetaDataCollapseChildrenValuesDouble" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = btkMetaDataCollapseChildrenValuesDouble(arg1,(std::string const &)*arg2,arg3,arg4);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaDataCollapseChildrenValuesDouble__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< btkMetaData > arg1 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< double,std::allocator< double > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkMetaDataCollapseChildrenValuesDouble",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_btkMetaData,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaDataCollapseChildrenValuesDouble" "', argument " "1"" of type '" "btkMetaData""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaDataCollapseChildrenValuesDouble" "', argument " "1"" of type '" "btkMetaData""'");
    } else {
      btkMetaData * temp = reinterpret_cast< btkMetaData * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkMetaDataCollapseChildrenValuesDouble" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaDataCollapseChildrenValuesDouble" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkMetaDataCollapseChildrenValuesDouble" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = btkMetaDataCollapseChildrenValuesDouble(arg1,(std::string const &)*arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaDataCollapseChildrenValuesDouble__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< btkMetaData > arg1 ;
  std::string *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< double,std::allocator< double > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkMetaDataCollapseChildrenValuesDouble",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_btkMetaData,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaDataCollapseChildrenValuesDouble" "', argument " "1"" of type '" "btkMetaData""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaDataCollapseChildrenValuesDouble" "', argument " "1"" of type '" "btkMetaData""'");
    } else {
      btkMetaData * temp = reinterpret_cast< btkMetaData * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkMetaDataCollapseChildrenValuesDouble" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaDataCollapseChildrenValuesDouble" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = btkMetaDataCollapseChildrenValuesDouble(arg1,(std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaDataCollapseChildrenValuesDouble(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_btkMetaData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_btkMetaDataCollapseChildrenValuesDouble__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_btkMetaData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_btkMetaDataCollapseChildrenValuesDouble__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_btkMetaData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_btkMetaDataCollapseChildrenValuesDouble__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkMetaDataCollapseChildrenValuesDouble'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkMetaDataCollapseChildrenValuesDouble(btkMetaData,std::string const &,int,double)\n"
    "    btkMetaDataCollapseChildrenValuesDouble(btkMetaData,std::string const &,int)\n"
    "    btkMetaDataCollapseChildrenValuesDouble(btkMetaData,std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkMetaDataCollapseChildrenValuesString__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< btkMetaData > arg1 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  std::string *arg4 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:btkMetaDataCollapseChildrenValuesString",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_btkMetaData,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaDataCollapseChildrenValuesString" "', argument " "1"" of type '" "btkMetaData""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaDataCollapseChildrenValuesString" "', argument " "1"" of type '" "btkMetaData""'");
    } else {
      btkMetaData * temp = reinterpret_cast< btkMetaData * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkMetaDataCollapseChildrenValuesString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaDataCollapseChildrenValuesString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkMetaDataCollapseChildrenValuesString" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "btkMetaDataCollapseChildrenValuesString" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaDataCollapseChildrenValuesString" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      result = btkMetaDataCollapseChildrenValuesString(arg1,(std::string const &)*arg2,arg3,(std::string const &)*arg4);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaDataCollapseChildrenValuesString__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< btkMetaData > arg1 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkMetaDataCollapseChildrenValuesString",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_btkMetaData,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaDataCollapseChildrenValuesString" "', argument " "1"" of type '" "btkMetaData""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaDataCollapseChildrenValuesString" "', argument " "1"" of type '" "btkMetaData""'");
    } else {
      btkMetaData * temp = reinterpret_cast< btkMetaData * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkMetaDataCollapseChildrenValuesString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaDataCollapseChildrenValuesString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkMetaDataCollapseChildrenValuesString" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = btkMetaDataCollapseChildrenValuesString(arg1,(std::string const &)*arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaDataCollapseChildrenValuesString__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< btkMetaData > arg1 ;
  std::string *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkMetaDataCollapseChildrenValuesString",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_btkMetaData,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMetaDataCollapseChildrenValuesString" "', argument " "1"" of type '" "btkMetaData""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaDataCollapseChildrenValuesString" "', argument " "1"" of type '" "btkMetaData""'");
    } else {
      btkMetaData * temp = reinterpret_cast< btkMetaData * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkMetaDataCollapseChildrenValuesString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMetaDataCollapseChildrenValuesString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = btkMetaDataCollapseChildrenValuesString(arg1,(std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMetaDataCollapseChildrenValuesString(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_btkMetaData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_btkMetaDataCollapseChildrenValuesString__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_btkMetaData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_btkMetaDataCollapseChildrenValuesString__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_btkMetaData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_btkMetaDataCollapseChildrenValuesString__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkMetaDataCollapseChildrenValuesString'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkMetaDataCollapseChildrenValuesString(btkMetaData,std::string const &,int,std::string const &)\n"
    "    btkMetaDataCollapseChildrenValuesString(btkMetaData,std::string const &,int)\n"
    "    btkMetaDataCollapseChildrenValuesString(btkMetaData,std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_btkAcquisition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_btkAcquisition")) SWIG_fail;
  {
    try {
      result = (btkAcquisition *)new btkAcquisition();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkAcquisition, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_Clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisition result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisition_Clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_Clone" "', argument " "1"" of type '" "btkAcquisition *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  {
    try {
      result = (arg1)->Clone();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkAcquisition(static_cast< const btkAcquisition& >(result))), SWIGTYPE_p_btkAcquisition, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisition_impl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisition___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition___deref__" "', argument " "1"" of type '" "btkAcquisition const *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  {
    try {
      result = (btkAcquisition_impl *)((btkAcquisition const *)arg1)->operator ->();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkAcquisition_impl, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_btkAcquisition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_btkAcquisition",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_btkAcquisition" "', argument " "1"" of type '" "btkAcquisition *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  {
    try {
      delete arg1;
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_BeginMetaData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisition_impl::MetaDataIterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisition_BeginMetaData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_BeginMetaData" "', argument " "1"" of type '" "btkAcquisition *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  {
    try {
      result = (*arg1)->BeginMetaData();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkAcquisition_impl::MetaDataIterator(static_cast< const btkAcquisition_impl::MetaDataIterator& >(result))), SWIGTYPE_p_btkMetaDataIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_EndMetaData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisition_impl::MetaDataIterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisition_EndMetaData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_EndMetaData" "', argument " "1"" of type '" "btkAcquisition *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  {
    try {
      result = (*arg1)->EndMetaData();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkAcquisition_impl::MetaDataIterator(static_cast< const btkAcquisition_impl::MetaDataIterator& >(result))), SWIGTYPE_p_btkMetaDataIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_GetMetaData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< btkMetaData > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisition_GetMetaData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_GetMetaData" "', argument " "1"" of type '" "btkAcquisition *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  {
    try {
      result = (*arg1)->GetMetaData();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkMetaData(static_cast< const btkMetaData& >(result))), SWIGTYPE_p_btkMetaData, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_SetMetaData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  SwigValueWrapper< btkMetaData > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAcquisition_SetMetaData",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_SetMetaData" "', argument " "1"" of type '" "btkAcquisition *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkMetaData,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkAcquisition_SetMetaData" "', argument " "2"" of type '" "btkMetaData""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkAcquisition_SetMetaData" "', argument " "2"" of type '" "btkMetaData""'");
    } else {
      btkMetaData * temp = reinterpret_cast< btkMetaData * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->SetMetaData(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_BeginEvent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisition_impl::EventIterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisition_BeginEvent",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_BeginEvent" "', argument " "1"" of type '" "btkAcquisition *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  {
    try {
      result = (*arg1)->BeginEvent();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkAcquisition_impl::EventIterator(static_cast< const btkAcquisition_impl::EventIterator& >(result))), SWIGTYPE_p_btkEventCollectionIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_EndEvent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisition_impl::EventIterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisition_EndEvent",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_EndEvent" "', argument " "1"" of type '" "btkAcquisition *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  {
    try {
      result = (*arg1)->EndEvent();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkAcquisition_impl::EventIterator(static_cast< const btkAcquisition_impl::EventIterator& >(result))), SWIGTYPE_p_btkEventCollectionIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_GetEvent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  btkEvent result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAcquisition_GetEvent",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_GetEvent" "', argument " "1"" of type '" "btkAcquisition *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkAcquisition_GetEvent" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (*arg1)->GetEvent(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkEvent(static_cast< const btkEvent& >(result))), SWIGTYPE_p_btkEvent, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_SetEvent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  int arg2 ;
  btkEvent arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkAcquisition_SetEvent",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_SetEvent" "', argument " "1"" of type '" "btkAcquisition *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkAcquisition_SetEvent" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkEvent,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkAcquisition_SetEvent" "', argument " "3"" of type '" "btkEvent""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkAcquisition_SetEvent" "', argument " "3"" of type '" "btkEvent""'");
    } else {
      btkEvent * temp = reinterpret_cast< btkEvent * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->SetEvent(arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_GetEvents(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkEventCollection result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisition_GetEvents",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_GetEvents" "', argument " "1"" of type '" "btkAcquisition *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  {
    try {
      result = (*arg1)->GetEvents();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkEventCollection(static_cast< const btkEventCollection& >(result))), SWIGTYPE_p_btkEventCollection, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_SetEvents(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  btkEventCollection arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAcquisition_SetEvents",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_SetEvents" "', argument " "1"" of type '" "btkAcquisition *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkEventCollection,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkAcquisition_SetEvents" "', argument " "2"" of type '" "btkEventCollection""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkAcquisition_SetEvents" "', argument " "2"" of type '" "btkEventCollection""'");
    } else {
      btkEventCollection * temp = reinterpret_cast< btkEventCollection * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->SetEvents(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_IsEmptyEvent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisition_IsEmptyEvent",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_IsEmptyEvent" "', argument " "1"" of type '" "btkAcquisition const *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  {
    try {
      result = (bool)(*arg1)->IsEmptyEvent();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_GetEventNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisition_GetEventNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_GetEventNumber" "', argument " "1"" of type '" "btkAcquisition const *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetEventNumber();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_SetEventNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAcquisition_SetEventNumber",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_SetEventNumber" "', argument " "1"" of type '" "btkAcquisition *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkAcquisition_SetEventNumber" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->SetEventNumber(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_ClearEvents(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisition_ClearEvents",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_ClearEvents" "', argument " "1"" of type '" "btkAcquisition *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  {
    try {
      (*arg1)->ClearEvents();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_FindEvent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  btkAcquisition_impl::EventIterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAcquisition_FindEvent",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_FindEvent" "', argument " "1"" of type '" "btkAcquisition *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkAcquisition_FindEvent" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkAcquisition_FindEvent" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (*arg1)->FindEvent((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkAcquisition_impl::EventIterator(static_cast< const btkAcquisition_impl::EventIterator& >(result))), SWIGTYPE_p_btkEventCollectionIterator, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_AppendEvent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  btkEvent arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAcquisition_AppendEvent",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_AppendEvent" "', argument " "1"" of type '" "btkAcquisition *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkEvent,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkAcquisition_AppendEvent" "', argument " "2"" of type '" "btkEvent""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkAcquisition_AppendEvent" "', argument " "2"" of type '" "btkEvent""'");
    } else {
      btkEvent * temp = reinterpret_cast< btkEvent * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->AppendEvent(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_RemoveEvent__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAcquisition_RemoveEvent",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_RemoveEvent" "', argument " "1"" of type '" "btkAcquisition *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkAcquisition_RemoveEvent" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->RemoveEvent(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_RemoveEvent__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  btkAcquisition_impl::EventIterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  btkAcquisition_impl::EventIterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAcquisition_RemoveEvent",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_RemoveEvent" "', argument " "1"" of type '" "btkAcquisition *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkEventCollectionIterator,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkAcquisition_RemoveEvent" "', argument " "2"" of type '" "btkAcquisition_impl::EventIterator""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkAcquisition_RemoveEvent" "', argument " "2"" of type '" "btkAcquisition_impl::EventIterator""'");
    } else {
      btkAcquisition_impl::EventIterator * temp = reinterpret_cast< btkAcquisition_impl::EventIterator * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (*arg1)->RemoveEvent(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkAcquisition_impl::EventIterator(static_cast< const btkAcquisition_impl::EventIterator& >(result))), SWIGTYPE_p_btkEventCollectionIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_RemoveEvent(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkAcquisition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_btkEventCollectionIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_btkAcquisition_RemoveEvent__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkAcquisition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_btkAcquisition_RemoveEvent__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkAcquisition_RemoveEvent'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkAcquisition_impl::RemoveEvent(int)\n"
    "    btkAcquisition_impl::RemoveEvent(btkAcquisition_impl::EventIterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_BeginPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisition_impl::PointIterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisition_BeginPoint",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_BeginPoint" "', argument " "1"" of type '" "btkAcquisition *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  {
    try {
      result = (*arg1)->BeginPoint();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkAcquisition_impl::PointIterator(static_cast< const btkAcquisition_impl::PointIterator& >(result))), SWIGTYPE_p_btkPointCollectionIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_EndPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisition_impl::PointIterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisition_EndPoint",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_EndPoint" "', argument " "1"" of type '" "btkAcquisition *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  {
    try {
      result = (*arg1)->EndPoint();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkAcquisition_impl::PointIterator(static_cast< const btkAcquisition_impl::PointIterator& >(result))), SWIGTYPE_p_btkPointCollectionIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_GetPoint__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< btkPoint > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAcquisition_GetPoint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_GetPoint" "', argument " "1"" of type '" "btkAcquisition *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkAcquisition_GetPoint" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (*arg1)->GetPoint(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkPoint(static_cast< const btkPoint& >(result))), SWIGTYPE_p_btkPoint, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_GetPoint__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< btkPoint > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAcquisition_GetPoint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_GetPoint" "', argument " "1"" of type '" "btkAcquisition *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkAcquisition_GetPoint" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkAcquisition_GetPoint" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (*arg1)->GetPoint((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkPoint(static_cast< const btkPoint& >(result))), SWIGTYPE_p_btkPoint, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_GetPoint(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkAcquisition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_btkAcquisition_GetPoint__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkAcquisition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_btkAcquisition_GetPoint__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkAcquisition_GetPoint'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkAcquisition_impl::GetPoint(int)\n"
    "    btkAcquisition_impl::GetPoint(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_SetPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  int arg2 ;
  SwigValueWrapper< btkPoint > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkAcquisition_SetPoint",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_SetPoint" "', argument " "1"" of type '" "btkAcquisition *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkAcquisition_SetPoint" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkPoint,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkAcquisition_SetPoint" "', argument " "3"" of type '" "btkPoint""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkAcquisition_SetPoint" "', argument " "3"" of type '" "btkPoint""'");
    } else {
      btkPoint * temp = reinterpret_cast< btkPoint * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->SetPoint(arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_GetPoints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkPointCollection result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisition_GetPoints",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_GetPoints" "', argument " "1"" of type '" "btkAcquisition *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  {
    try {
      result = (*arg1)->GetPoints();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkPointCollection(static_cast< const btkPointCollection& >(result))), SWIGTYPE_p_btkPointCollection, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_SetPoints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  btkPointCollection arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAcquisition_SetPoints",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_SetPoints" "', argument " "1"" of type '" "btkAcquisition *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkPointCollection,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkAcquisition_SetPoints" "', argument " "2"" of type '" "btkPointCollection""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkAcquisition_SetPoints" "', argument " "2"" of type '" "btkPointCollection""'");
    } else {
      btkPointCollection * temp = reinterpret_cast< btkPointCollection * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->SetPoints(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_IsEmptyPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisition_IsEmptyPoint",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_IsEmptyPoint" "', argument " "1"" of type '" "btkAcquisition const *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  {
    try {
      result = (bool)(*arg1)->IsEmptyPoint();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_GetPointNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisition_GetPointNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_GetPointNumber" "', argument " "1"" of type '" "btkAcquisition const *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetPointNumber();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_SetPointNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAcquisition_SetPointNumber",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_SetPointNumber" "', argument " "1"" of type '" "btkAcquisition *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkAcquisition_SetPointNumber" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->SetPointNumber(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_ClearPoints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisition_ClearPoints",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_ClearPoints" "', argument " "1"" of type '" "btkAcquisition *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  {
    try {
      (*arg1)->ClearPoints();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_FindPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  btkAcquisition_impl::PointIterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAcquisition_FindPoint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_FindPoint" "', argument " "1"" of type '" "btkAcquisition *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkAcquisition_FindPoint" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkAcquisition_FindPoint" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (*arg1)->FindPoint((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkAcquisition_impl::PointIterator(static_cast< const btkAcquisition_impl::PointIterator& >(result))), SWIGTYPE_p_btkPointCollectionIterator, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_AppendPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  SwigValueWrapper< btkPoint > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAcquisition_AppendPoint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_AppendPoint" "', argument " "1"" of type '" "btkAcquisition *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkPoint,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkAcquisition_AppendPoint" "', argument " "2"" of type '" "btkPoint""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkAcquisition_AppendPoint" "', argument " "2"" of type '" "btkPoint""'");
    } else {
      btkPoint * temp = reinterpret_cast< btkPoint * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->AppendPoint(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_RemovePoint__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAcquisition_RemovePoint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_RemovePoint" "', argument " "1"" of type '" "btkAcquisition *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkAcquisition_RemovePoint" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkAcquisition_RemovePoint" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->RemovePoint((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_RemovePoint__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAcquisition_RemovePoint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_RemovePoint" "', argument " "1"" of type '" "btkAcquisition *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkAcquisition_RemovePoint" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->RemovePoint(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_RemovePoint__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  btkAcquisition_impl::PointIterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  btkAcquisition_impl::PointIterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAcquisition_RemovePoint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_RemovePoint" "', argument " "1"" of type '" "btkAcquisition *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkPointCollectionIterator,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkAcquisition_RemovePoint" "', argument " "2"" of type '" "btkAcquisition_impl::PointIterator""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkAcquisition_RemovePoint" "', argument " "2"" of type '" "btkAcquisition_impl::PointIterator""'");
    } else {
      btkAcquisition_impl::PointIterator * temp = reinterpret_cast< btkAcquisition_impl::PointIterator * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (*arg1)->RemovePoint(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkAcquisition_impl::PointIterator(static_cast< const btkAcquisition_impl::PointIterator& >(result))), SWIGTYPE_p_btkPointCollectionIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_RemovePoint(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkAcquisition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_btkPointCollectionIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_btkAcquisition_RemovePoint__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkAcquisition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_btkAcquisition_RemovePoint__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkAcquisition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_btkAcquisition_RemovePoint__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkAcquisition_RemovePoint'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkAcquisition_impl::RemovePoint(std::string const &)\n"
    "    btkAcquisition_impl::RemovePoint(int)\n"
    "    btkAcquisition_impl::RemovePoint(btkAcquisition_impl::PointIterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_BeginAnalog(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisition_impl::AnalogIterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisition_BeginAnalog",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_BeginAnalog" "', argument " "1"" of type '" "btkAcquisition *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  {
    try {
      result = (*arg1)->BeginAnalog();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkAcquisition_impl::AnalogIterator(static_cast< const btkAcquisition_impl::AnalogIterator& >(result))), SWIGTYPE_p_btkAnalogCollectionIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_EndAnalog(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisition_impl::AnalogIterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisition_EndAnalog",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_EndAnalog" "', argument " "1"" of type '" "btkAcquisition *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  {
    try {
      result = (*arg1)->EndAnalog();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkAcquisition_impl::AnalogIterator(static_cast< const btkAcquisition_impl::AnalogIterator& >(result))), SWIGTYPE_p_btkAnalogCollectionIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_IsEmptyAnalog(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisition_IsEmptyAnalog",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_IsEmptyAnalog" "', argument " "1"" of type '" "btkAcquisition const *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  {
    try {
      result = (bool)(*arg1)->IsEmptyAnalog();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_GetAnalogNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisition_GetAnalogNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_GetAnalogNumber" "', argument " "1"" of type '" "btkAcquisition const *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetAnalogNumber();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_SetAnalogNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAcquisition_SetAnalogNumber",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_SetAnalogNumber" "', argument " "1"" of type '" "btkAcquisition *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkAcquisition_SetAnalogNumber" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->SetAnalogNumber(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_GetAnalog__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  btkAnalog result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAcquisition_GetAnalog",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_GetAnalog" "', argument " "1"" of type '" "btkAcquisition *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkAcquisition_GetAnalog" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (*arg1)->GetAnalog(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkAnalog(static_cast< const btkAnalog& >(result))), SWIGTYPE_p_btkAnalog, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_GetAnalog__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  btkAnalog result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAcquisition_GetAnalog",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_GetAnalog" "', argument " "1"" of type '" "btkAcquisition *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkAcquisition_GetAnalog" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkAcquisition_GetAnalog" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (*arg1)->GetAnalog((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkAnalog(static_cast< const btkAnalog& >(result))), SWIGTYPE_p_btkAnalog, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_GetAnalog(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkAcquisition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_btkAcquisition_GetAnalog__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkAcquisition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_btkAcquisition_GetAnalog__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkAcquisition_GetAnalog'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkAcquisition_impl::GetAnalog(int)\n"
    "    btkAcquisition_impl::GetAnalog(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_SetAnalog(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  int arg2 ;
  btkAnalog arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkAcquisition_SetAnalog",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_SetAnalog" "', argument " "1"" of type '" "btkAcquisition *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkAcquisition_SetAnalog" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkAnalog,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkAcquisition_SetAnalog" "', argument " "3"" of type '" "btkAnalog""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkAcquisition_SetAnalog" "', argument " "3"" of type '" "btkAnalog""'");
    } else {
      btkAnalog * temp = reinterpret_cast< btkAnalog * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->SetAnalog(arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_GetAnalogs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAnalogCollection result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisition_GetAnalogs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_GetAnalogs" "', argument " "1"" of type '" "btkAcquisition *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  {
    try {
      result = (*arg1)->GetAnalogs();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkAnalogCollection(static_cast< const btkAnalogCollection& >(result))), SWIGTYPE_p_btkAnalogCollection, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_SetAnalogs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  btkAnalogCollection arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAcquisition_SetAnalogs",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_SetAnalogs" "', argument " "1"" of type '" "btkAcquisition *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkAnalogCollection,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkAcquisition_SetAnalogs" "', argument " "2"" of type '" "btkAnalogCollection""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkAcquisition_SetAnalogs" "', argument " "2"" of type '" "btkAnalogCollection""'");
    } else {
      btkAnalogCollection * temp = reinterpret_cast< btkAnalogCollection * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->SetAnalogs(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_ClearAnalogs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisition_ClearAnalogs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_ClearAnalogs" "', argument " "1"" of type '" "btkAcquisition *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  {
    try {
      (*arg1)->ClearAnalogs();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_FindAnalog(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  btkAcquisition_impl::AnalogIterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAcquisition_FindAnalog",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_FindAnalog" "', argument " "1"" of type '" "btkAcquisition *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkAcquisition_FindAnalog" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkAcquisition_FindAnalog" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (*arg1)->FindAnalog((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkAcquisition_impl::AnalogIterator(static_cast< const btkAcquisition_impl::AnalogIterator& >(result))), SWIGTYPE_p_btkAnalogCollectionIterator, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_AppendAnalog(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  btkAnalog arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAcquisition_AppendAnalog",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_AppendAnalog" "', argument " "1"" of type '" "btkAcquisition *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkAnalog,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkAcquisition_AppendAnalog" "', argument " "2"" of type '" "btkAnalog""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkAcquisition_AppendAnalog" "', argument " "2"" of type '" "btkAnalog""'");
    } else {
      btkAnalog * temp = reinterpret_cast< btkAnalog * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->AppendAnalog(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_RemoveAnalog__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAcquisition_RemoveAnalog",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_RemoveAnalog" "', argument " "1"" of type '" "btkAcquisition *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkAcquisition_RemoveAnalog" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkAcquisition_RemoveAnalog" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->RemoveAnalog((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_RemoveAnalog__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAcquisition_RemoveAnalog",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_RemoveAnalog" "', argument " "1"" of type '" "btkAcquisition *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkAcquisition_RemoveAnalog" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->RemoveAnalog(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_RemoveAnalog__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  btkAcquisition_impl::AnalogIterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  btkAcquisition_impl::AnalogIterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAcquisition_RemoveAnalog",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_RemoveAnalog" "', argument " "1"" of type '" "btkAcquisition *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkAnalogCollectionIterator,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkAcquisition_RemoveAnalog" "', argument " "2"" of type '" "btkAcquisition_impl::AnalogIterator""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkAcquisition_RemoveAnalog" "', argument " "2"" of type '" "btkAcquisition_impl::AnalogIterator""'");
    } else {
      btkAcquisition_impl::AnalogIterator * temp = reinterpret_cast< btkAcquisition_impl::AnalogIterator * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (*arg1)->RemoveAnalog(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkAcquisition_impl::AnalogIterator(static_cast< const btkAcquisition_impl::AnalogIterator& >(result))), SWIGTYPE_p_btkAnalogCollectionIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_RemoveAnalog(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkAcquisition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_btkAnalogCollectionIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_btkAcquisition_RemoveAnalog__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkAcquisition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_btkAcquisition_RemoveAnalog__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkAcquisition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_btkAcquisition_RemoveAnalog__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkAcquisition_RemoveAnalog'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkAcquisition_impl::RemoveAnalog(std::string const &)\n"
    "    btkAcquisition_impl::RemoveAnalog(int)\n"
    "    btkAcquisition_impl::RemoveAnalog(btkAcquisition_impl::AnalogIterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_Init__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:btkAcquisition_Init",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_Init" "', argument " "1"" of type '" "btkAcquisition *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkAcquisition_Init" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkAcquisition_Init" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "btkAcquisition_Init" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "btkAcquisition_Init" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      (*arg1)->Init(arg2,arg3,arg4,arg5);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_Init__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:btkAcquisition_Init",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_Init" "', argument " "1"" of type '" "btkAcquisition *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkAcquisition_Init" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkAcquisition_Init" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "btkAcquisition_Init" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      (*arg1)->Init(arg2,arg3,arg4);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_Init__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkAcquisition_Init",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_Init" "', argument " "1"" of type '" "btkAcquisition *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkAcquisition_Init" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkAcquisition_Init" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (*arg1)->Init(arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_Init(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkAcquisition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_btkAcquisition_Init__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkAcquisition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_btkAcquisition_Init__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkAcquisition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_btkAcquisition_Init__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkAcquisition_Init'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkAcquisition_impl::Init(int,int,int,int)\n"
    "    btkAcquisition_impl::Init(int,int,int)\n"
    "    btkAcquisition_impl::Init(int,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_Resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:btkAcquisition_Resize",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_Resize" "', argument " "1"" of type '" "btkAcquisition *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkAcquisition_Resize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkAcquisition_Resize" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "btkAcquisition_Resize" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "btkAcquisition_Resize" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      (*arg1)->Resize(arg2,arg3,arg4,arg5);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_Resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:btkAcquisition_Resize",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_Resize" "', argument " "1"" of type '" "btkAcquisition *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkAcquisition_Resize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkAcquisition_Resize" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "btkAcquisition_Resize" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      (*arg1)->Resize(arg2,arg3,arg4);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_Resize__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkAcquisition_Resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_Resize" "', argument " "1"" of type '" "btkAcquisition *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkAcquisition_Resize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkAcquisition_Resize" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (*arg1)->Resize(arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_Resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkAcquisition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_btkAcquisition_Resize__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkAcquisition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_btkAcquisition_Resize__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkAcquisition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_btkAcquisition_Resize__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkAcquisition_Resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkAcquisition_impl::Resize(int,int,int,int)\n"
    "    btkAcquisition_impl::Resize(int,int,int)\n"
    "    btkAcquisition_impl::Resize(int,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_ResizePointNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAcquisition_ResizePointNumber",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_ResizePointNumber" "', argument " "1"" of type '" "btkAcquisition *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkAcquisition_ResizePointNumber" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->ResizePointNumber(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_ResizeAnalogNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAcquisition_ResizeAnalogNumber",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_ResizeAnalogNumber" "', argument " "1"" of type '" "btkAcquisition *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkAcquisition_ResizeAnalogNumber" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->ResizeAnalogNumber(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_ResizeFrameNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAcquisition_ResizeFrameNumber",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_ResizeFrameNumber" "', argument " "1"" of type '" "btkAcquisition *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkAcquisition_ResizeFrameNumber" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->ResizeFrameNumber(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_ResizeFrameNumberFromEnd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAcquisition_ResizeFrameNumberFromEnd",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_ResizeFrameNumberFromEnd" "', argument " "1"" of type '" "btkAcquisition *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkAcquisition_ResizeFrameNumberFromEnd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->ResizeFrameNumberFromEnd(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_Reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisition_Reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_Reset" "', argument " "1"" of type '" "btkAcquisition *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  {
    try {
      (*arg1)->Reset();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_GetDuration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisition_GetDuration",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_GetDuration" "', argument " "1"" of type '" "btkAcquisition const *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  {
    try {
      result = (double)(*arg1)->GetDuration();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_GetFirstFrame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisition_GetFirstFrame",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_GetFirstFrame" "', argument " "1"" of type '" "btkAcquisition const *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetFirstFrame();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_SetFirstFrame__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkAcquisition_SetFirstFrame",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_SetFirstFrame" "', argument " "1"" of type '" "btkAcquisition *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkAcquisition_SetFirstFrame" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkAcquisition_SetFirstFrame" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (*arg1)->SetFirstFrame(arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_SetFirstFrame__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAcquisition_SetFirstFrame",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_SetFirstFrame" "', argument " "1"" of type '" "btkAcquisition *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkAcquisition_SetFirstFrame" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->SetFirstFrame(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_SetFirstFrame(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkAcquisition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_btkAcquisition_SetFirstFrame__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkAcquisition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_btkAcquisition_SetFirstFrame__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkAcquisition_SetFirstFrame'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkAcquisition_impl::SetFirstFrame(int,bool)\n"
    "    btkAcquisition_impl::SetFirstFrame(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_GetLastFrame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisition_GetLastFrame",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_GetLastFrame" "', argument " "1"" of type '" "btkAcquisition const *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetLastFrame();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_GetPointUnit__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisition_GetPointUnit",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_GetPointUnit" "', argument " "1"" of type '" "btkAcquisition const *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  {
    try {
      result = (*arg1)->GetPointUnit();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_GetPointUnit__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  btkPoint_impl::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAcquisition_GetPointUnit",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_GetPointUnit" "', argument " "1"" of type '" "btkAcquisition const *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkAcquisition_GetPointUnit" "', argument " "2"" of type '" "btkPoint_impl::Type""'");
  } 
  arg2 = static_cast< btkPoint_impl::Type >(val2);
  {
    try {
      result = (*arg1)->GetPointUnit(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_GetPointUnit(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkAcquisition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_btkAcquisition_GetPointUnit__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkAcquisition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_btkAcquisition_GetPointUnit__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkAcquisition_GetPointUnit'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkAcquisition_impl::GetPointUnit() const\n"
    "    btkAcquisition_impl::GetPointUnit(btkPoint_impl::Type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_SetPointUnit__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAcquisition_SetPointUnit",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_SetPointUnit" "', argument " "1"" of type '" "btkAcquisition *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkAcquisition_SetPointUnit" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkAcquisition_SetPointUnit" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->SetPointUnit((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_SetPointUnit__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisition_SetPointUnit",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_SetPointUnit" "', argument " "1"" of type '" "btkAcquisition *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  {
    try {
      (*arg1)->SetPointUnit();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_SetPointUnit__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  btkPoint_impl::Type arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkAcquisition_SetPointUnit",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_SetPointUnit" "', argument " "1"" of type '" "btkAcquisition *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkAcquisition_SetPointUnit" "', argument " "2"" of type '" "btkPoint_impl::Type""'");
  } 
  arg2 = static_cast< btkPoint_impl::Type >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkAcquisition_SetPointUnit" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkAcquisition_SetPointUnit" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (*arg1)->SetPointUnit(arg2,(std::string const &)*arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_SetPointUnit(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkAcquisition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_btkAcquisition_SetPointUnit__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkAcquisition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_btkAcquisition_SetPointUnit__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkAcquisition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_btkAcquisition_SetPointUnit__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkAcquisition_SetPointUnit'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkAcquisition_impl::SetPointUnit(std::string const &)\n"
    "    btkAcquisition_impl::SetPointUnit()\n"
    "    btkAcquisition_impl::SetPointUnit(btkPoint_impl::Type,std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_GetPointFrameNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisition_GetPointFrameNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_GetPointFrameNumber" "', argument " "1"" of type '" "btkAcquisition const *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetPointFrameNumber();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_GetPointFrequency(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisition_GetPointFrequency",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_GetPointFrequency" "', argument " "1"" of type '" "btkAcquisition const *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  {
    try {
      result = (double)(*arg1)->GetPointFrequency();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_SetPointFrequency(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAcquisition_SetPointFrequency",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_SetPointFrequency" "', argument " "1"" of type '" "btkAcquisition *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkAcquisition_SetPointFrequency" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (*arg1)->SetPointFrequency(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_GetAnalogFrameNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisition_GetAnalogFrameNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_GetAnalogFrameNumber" "', argument " "1"" of type '" "btkAcquisition const *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetAnalogFrameNumber();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_GetNumberAnalogSamplePerFrame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisition_GetNumberAnalogSamplePerFrame",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_GetNumberAnalogSamplePerFrame" "', argument " "1"" of type '" "btkAcquisition const *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetNumberAnalogSamplePerFrame();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_GetAnalogFrequency(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisition_GetAnalogFrequency",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_GetAnalogFrequency" "', argument " "1"" of type '" "btkAcquisition const *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  {
    try {
      result = (double)(*arg1)->GetAnalogFrequency();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_GetAnalogResolution(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisition_impl::AnalogResolution result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisition_GetAnalogResolution",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_GetAnalogResolution" "', argument " "1"" of type '" "btkAcquisition const *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  {
    try {
      result = (btkAcquisition_impl::AnalogResolution)(*arg1)->GetAnalogResolution();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_SetAnalogResolution(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  btkAcquisition_impl::AnalogResolution arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAcquisition_SetAnalogResolution",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_SetAnalogResolution" "', argument " "1"" of type '" "btkAcquisition *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkAcquisition_SetAnalogResolution" "', argument " "2"" of type '" "btkAcquisition_impl::AnalogResolution""'");
  } 
  arg2 = static_cast< btkAcquisition_impl::AnalogResolution >(val2);
  {
    try {
      (*arg1)->SetAnalogResolution(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_GetMaxInterpolationGap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisition_GetMaxInterpolationGap",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_GetMaxInterpolationGap" "', argument " "1"" of type '" "btkAcquisition const *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetMaxInterpolationGap();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_SetMaxInterpolationGap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAcquisition_SetMaxInterpolationGap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_SetMaxInterpolationGap" "', argument " "1"" of type '" "btkAcquisition *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkAcquisition_SetMaxInterpolationGap" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->SetMaxInterpolationGap(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_Update(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisition_Update",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_Update" "', argument " "1"" of type '" "btkAcquisition *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  {
    try {
      (*arg1)->Update();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisition_GetTimestamp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisition *arg1 = (btkAcquisition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisition_GetTimestamp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisition_GetTimestamp" "', argument " "1"" of type '" "btkAcquisition const *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisition * >(argp1);
  {
    try {
      result = (unsigned long)(*arg1)->GetTimestamp();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *btkAcquisition_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_btkAcquisition, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_btkAcquisitionFileIO(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisitionFileIO_shared *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisitionFileIO *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_btkAcquisitionFileIO",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_btkAcquisitionFileIO_shared,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkAcquisitionFileIO" "', argument " "1"" of type '" "btkAcquisitionFileIO_shared const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkAcquisitionFileIO" "', argument " "1"" of type '" "btkAcquisitionFileIO_shared const &""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisitionFileIO_shared * >(argp1);
  {
    try {
      result = (btkAcquisitionFileIO *)new btkAcquisitionFileIO((btkAcquisitionFileIO_shared const &)*arg1);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkAcquisitionFileIO, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisitionFileIO___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisitionFileIO *arg1 = (btkAcquisitionFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisitionFileIO_impl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisitionFileIO___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisitionFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisitionFileIO___deref__" "', argument " "1"" of type '" "btkAcquisitionFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisitionFileIO * >(argp1);
  {
    try {
      result = (btkAcquisitionFileIO_impl *)((btkAcquisitionFileIO const *)arg1)->operator ->();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkAcquisitionFileIO_impl, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_btkAcquisitionFileIO(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisitionFileIO *arg1 = (btkAcquisitionFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_btkAcquisitionFileIO",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisitionFileIO, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_btkAcquisitionFileIO" "', argument " "1"" of type '" "btkAcquisitionFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisitionFileIO * >(argp1);
  {
    try {
      delete arg1;
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisitionFileIO_GetFileType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisitionFileIO *arg1 = (btkAcquisitionFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisitionFileIO_impl::FileType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisitionFileIO_GetFileType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisitionFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisitionFileIO_GetFileType" "', argument " "1"" of type '" "btkAcquisitionFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisitionFileIO * >(argp1);
  {
    try {
      result = (btkAcquisitionFileIO_impl::FileType)(*arg1)->GetFileType();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisitionFileIO_GetByteOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisitionFileIO *arg1 = (btkAcquisitionFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisitionFileIO_impl::ByteOrder result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisitionFileIO_GetByteOrder",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisitionFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisitionFileIO_GetByteOrder" "', argument " "1"" of type '" "btkAcquisitionFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisitionFileIO * >(argp1);
  {
    try {
      result = (btkAcquisitionFileIO_impl::ByteOrder)(*arg1)->GetByteOrder();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisitionFileIO_GetByteOrderAsString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisitionFileIO *arg1 = (btkAcquisitionFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisitionFileIO_GetByteOrderAsString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisitionFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisitionFileIO_GetByteOrderAsString" "', argument " "1"" of type '" "btkAcquisitionFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisitionFileIO * >(argp1);
  {
    try {
      result = (*arg1)->GetByteOrderAsString();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisitionFileIO_SetByteOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisitionFileIO *arg1 = (btkAcquisitionFileIO *) 0 ;
  btkAcquisitionFileIO_impl::ByteOrder arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAcquisitionFileIO_SetByteOrder",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisitionFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisitionFileIO_SetByteOrder" "', argument " "1"" of type '" "btkAcquisitionFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisitionFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkAcquisitionFileIO_SetByteOrder" "', argument " "2"" of type '" "btkAcquisitionFileIO_impl::ByteOrder""'");
  } 
  arg2 = static_cast< btkAcquisitionFileIO_impl::ByteOrder >(val2);
  {
    try {
      (*arg1)->SetByteOrder(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisitionFileIO_GetStorageFormat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisitionFileIO *arg1 = (btkAcquisitionFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisitionFileIO_impl::StorageFormat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisitionFileIO_GetStorageFormat",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisitionFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisitionFileIO_GetStorageFormat" "', argument " "1"" of type '" "btkAcquisitionFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisitionFileIO * >(argp1);
  {
    try {
      result = (btkAcquisitionFileIO_impl::StorageFormat)(*arg1)->GetStorageFormat();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisitionFileIO_GetStorageFormatAsString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisitionFileIO *arg1 = (btkAcquisitionFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisitionFileIO_GetStorageFormatAsString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisitionFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisitionFileIO_GetStorageFormatAsString" "', argument " "1"" of type '" "btkAcquisitionFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisitionFileIO * >(argp1);
  {
    try {
      result = (*arg1)->GetStorageFormatAsString();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisitionFileIO_SetStorageFormat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisitionFileIO *arg1 = (btkAcquisitionFileIO *) 0 ;
  btkAcquisitionFileIO_impl::StorageFormat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAcquisitionFileIO_SetStorageFormat",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisitionFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisitionFileIO_SetStorageFormat" "', argument " "1"" of type '" "btkAcquisitionFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisitionFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkAcquisitionFileIO_SetStorageFormat" "', argument " "2"" of type '" "btkAcquisitionFileIO_impl::StorageFormat""'");
  } 
  arg2 = static_cast< btkAcquisitionFileIO_impl::StorageFormat >(val2);
  {
    try {
      (*arg1)->SetStorageFormat(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisitionFileIO_GetInternalsUpdateOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisitionFileIO *arg1 = (btkAcquisitionFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisitionFileIO_GetInternalsUpdateOptions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisitionFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisitionFileIO_GetInternalsUpdateOptions" "', argument " "1"" of type '" "btkAcquisitionFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisitionFileIO * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetInternalsUpdateOptions();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisitionFileIO_SetInternalsUpdateOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisitionFileIO *arg1 = (btkAcquisitionFileIO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAcquisitionFileIO_SetInternalsUpdateOptions",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisitionFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisitionFileIO_SetInternalsUpdateOptions" "', argument " "1"" of type '" "btkAcquisitionFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisitionFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkAcquisitionFileIO_SetInternalsUpdateOptions" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->SetInternalsUpdateOptions(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisitionFileIO_HasInternalsUpdateOption(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisitionFileIO *arg1 = (btkAcquisitionFileIO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAcquisitionFileIO_HasInternalsUpdateOption",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisitionFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisitionFileIO_HasInternalsUpdateOption" "', argument " "1"" of type '" "btkAcquisitionFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisitionFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkAcquisitionFileIO_HasInternalsUpdateOption" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (bool)(*arg1)->HasInternalsUpdateOption(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisitionFileIO_CanReadFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisitionFileIO *arg1 = (btkAcquisitionFileIO *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAcquisitionFileIO_CanReadFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisitionFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisitionFileIO_CanReadFile" "', argument " "1"" of type '" "btkAcquisitionFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisitionFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkAcquisitionFileIO_CanReadFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkAcquisitionFileIO_CanReadFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)(*arg1)->CanReadFile((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisitionFileIO_CanWriteFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisitionFileIO *arg1 = (btkAcquisitionFileIO *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAcquisitionFileIO_CanWriteFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisitionFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisitionFileIO_CanWriteFile" "', argument " "1"" of type '" "btkAcquisitionFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisitionFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkAcquisitionFileIO_CanWriteFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkAcquisitionFileIO_CanWriteFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)(*arg1)->CanWriteFile((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisitionFileIO_Read(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisitionFileIO *arg1 = (btkAcquisitionFileIO *) 0 ;
  std::string *arg2 = 0 ;
  btkAcquisition arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkAcquisitionFileIO_Read",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisitionFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisitionFileIO_Read" "', argument " "1"" of type '" "btkAcquisitionFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisitionFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkAcquisitionFileIO_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkAcquisitionFileIO_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkAcquisition,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkAcquisitionFileIO_Read" "', argument " "3"" of type '" "btkAcquisition""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkAcquisitionFileIO_Read" "', argument " "3"" of type '" "btkAcquisition""'");
    } else {
      btkAcquisition * temp = reinterpret_cast< btkAcquisition * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->Read((std::string const &)*arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisitionFileIO_Write(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisitionFileIO *arg1 = (btkAcquisitionFileIO *) 0 ;
  std::string *arg2 = 0 ;
  btkAcquisition arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkAcquisitionFileIO_Write",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisitionFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisitionFileIO_Write" "', argument " "1"" of type '" "btkAcquisitionFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisitionFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkAcquisitionFileIO_Write" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkAcquisitionFileIO_Write" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkAcquisition,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkAcquisitionFileIO_Write" "', argument " "3"" of type '" "btkAcquisition""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkAcquisitionFileIO_Write" "', argument " "3"" of type '" "btkAcquisition""'");
    } else {
      btkAcquisition * temp = reinterpret_cast< btkAcquisition * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->Write((std::string const &)*arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *btkAcquisitionFileIO_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_btkAcquisitionFileIO, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_btkAcquisitionFileReader(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisitionFileReader *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_btkAcquisitionFileReader")) SWIG_fail;
  {
    try {
      result = (btkAcquisitionFileReader *)new btkAcquisitionFileReader();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkAcquisitionFileReader, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisitionFileReader___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisitionFileReader *arg1 = (btkAcquisitionFileReader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisitionFileReader_impl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisitionFileReader___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisitionFileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisitionFileReader___deref__" "', argument " "1"" of type '" "btkAcquisitionFileReader const *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisitionFileReader * >(argp1);
  {
    try {
      result = (btkAcquisitionFileReader_impl *)((btkAcquisitionFileReader const *)arg1)->operator ->();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkAcquisitionFileReader_impl, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisitionFileReader_GetAcquisitionIO(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisitionFileReader *arg1 = (btkAcquisitionFileReader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< btkAcquisitionFileIO > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisitionFileReader_GetAcquisitionIO",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisitionFileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisitionFileReader_GetAcquisitionIO" "', argument " "1"" of type '" "btkAcquisitionFileReader *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisitionFileReader * >(argp1);
  {
    try {
      result = btkAcquisitionFileReader_GetAcquisitionIO(arg1);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkAcquisitionFileIO(static_cast< const btkAcquisitionFileIO& >(result))), SWIGTYPE_p_btkAcquisitionFileIO, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisitionFileReader__reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisitionFileReader *arg1 = (btkAcquisitionFileReader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisitionFileReader__reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisitionFileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisitionFileReader__reset" "', argument " "1"" of type '" "btkAcquisitionFileReader *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisitionFileReader * >(argp1);
  {
    try {
      btkAcquisitionFileReader__reset(arg1);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_btkAcquisitionFileReader(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisitionFileReader *arg1 = (btkAcquisitionFileReader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_btkAcquisitionFileReader",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisitionFileReader, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_btkAcquisitionFileReader" "', argument " "1"" of type '" "btkAcquisitionFileReader *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisitionFileReader * >(argp1);
  {
    try {
      delete arg1;
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisitionFileReader_GetOutput(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisitionFileReader *arg1 = (btkAcquisitionFileReader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisition result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisitionFileReader_GetOutput",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisitionFileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisitionFileReader_GetOutput" "', argument " "1"" of type '" "btkAcquisitionFileReader *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisitionFileReader * >(argp1);
  {
    try {
      result = (*arg1)->GetOutput();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkAcquisition(static_cast< const btkAcquisition& >(result))), SWIGTYPE_p_btkAcquisition, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisitionFileReader_GetDisableFilenameExceptionState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisitionFileReader *arg1 = (btkAcquisitionFileReader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisitionFileReader_GetDisableFilenameExceptionState",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisitionFileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisitionFileReader_GetDisableFilenameExceptionState" "', argument " "1"" of type '" "btkAcquisitionFileReader const *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisitionFileReader * >(argp1);
  {
    try {
      result = (bool)(*arg1)->GetDisableFilenameExceptionState();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisitionFileReader_SetDisableFilenameExceptionState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisitionFileReader *arg1 = (btkAcquisitionFileReader *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAcquisitionFileReader_SetDisableFilenameExceptionState",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisitionFileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisitionFileReader_SetDisableFilenameExceptionState" "', argument " "1"" of type '" "btkAcquisitionFileReader *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisitionFileReader * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkAcquisitionFileReader_SetDisableFilenameExceptionState" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (*arg1)->SetDisableFilenameExceptionState(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisitionFileReader_GetFilename(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisitionFileReader *arg1 = (btkAcquisitionFileReader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisitionFileReader_GetFilename",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisitionFileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisitionFileReader_GetFilename" "', argument " "1"" of type '" "btkAcquisitionFileReader const *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisitionFileReader * >(argp1);
  {
    try {
      result = (std::string *) &(*arg1)->GetFilename();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisitionFileReader_SetFilename(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisitionFileReader *arg1 = (btkAcquisitionFileReader *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAcquisitionFileReader_SetFilename",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisitionFileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisitionFileReader_SetFilename" "', argument " "1"" of type '" "btkAcquisitionFileReader *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisitionFileReader * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkAcquisitionFileReader_SetFilename" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkAcquisitionFileReader_SetFilename" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->SetFilename((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisitionFileReader_SetAcquisitionIO__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisitionFileReader *arg1 = (btkAcquisitionFileReader *) 0 ;
  SwigValueWrapper< btkAcquisitionFileIO > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAcquisitionFileReader_SetAcquisitionIO",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisitionFileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisitionFileReader_SetAcquisitionIO" "', argument " "1"" of type '" "btkAcquisitionFileReader *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisitionFileReader * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkAcquisitionFileIO,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkAcquisitionFileReader_SetAcquisitionIO" "', argument " "2"" of type '" "btkAcquisitionFileIO""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkAcquisitionFileReader_SetAcquisitionIO" "', argument " "2"" of type '" "btkAcquisitionFileIO""'");
    } else {
      btkAcquisitionFileIO * temp = reinterpret_cast< btkAcquisitionFileIO * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->SetAcquisitionIO(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisitionFileReader_SetAcquisitionIO__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisitionFileReader *arg1 = (btkAcquisitionFileReader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisitionFileReader_SetAcquisitionIO",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisitionFileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisitionFileReader_SetAcquisitionIO" "', argument " "1"" of type '" "btkAcquisitionFileReader *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisitionFileReader * >(argp1);
  {
    try {
      (*arg1)->SetAcquisitionIO();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisitionFileReader_SetAcquisitionIO(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkAcquisitionFileReader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_btkAcquisitionFileReader_SetAcquisitionIO__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkAcquisitionFileReader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_btkAcquisitionFileIO, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_btkAcquisitionFileReader_SetAcquisitionIO__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkAcquisitionFileReader_SetAcquisitionIO'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkAcquisitionFileReader_impl::SetAcquisitionIO(btkAcquisitionFileIO)\n"
    "    btkAcquisitionFileReader_impl::SetAcquisitionIO()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkAcquisitionFileReader_GetInputNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisitionFileReader *arg1 = (btkAcquisitionFileReader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisitionFileReader_GetInputNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisitionFileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisitionFileReader_GetInputNumber" "', argument " "1"" of type '" "btkAcquisitionFileReader const *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisitionFileReader * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetInputNumber();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisitionFileReader_GetValidInputNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisitionFileReader *arg1 = (btkAcquisitionFileReader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisitionFileReader_GetValidInputNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisitionFileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisitionFileReader_GetValidInputNumber" "', argument " "1"" of type '" "btkAcquisitionFileReader const *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisitionFileReader * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetValidInputNumber();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisitionFileReader_GetOutputNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisitionFileReader *arg1 = (btkAcquisitionFileReader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisitionFileReader_GetOutputNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisitionFileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisitionFileReader_GetOutputNumber" "', argument " "1"" of type '" "btkAcquisitionFileReader const *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisitionFileReader * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetOutputNumber();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisitionFileReader_ResetState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisitionFileReader *arg1 = (btkAcquisitionFileReader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisitionFileReader_ResetState",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisitionFileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisitionFileReader_ResetState" "', argument " "1"" of type '" "btkAcquisitionFileReader *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisitionFileReader * >(argp1);
  {
    try {
      (*arg1)->ResetState();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisitionFileReader_Update(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisitionFileReader *arg1 = (btkAcquisitionFileReader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisitionFileReader_Update",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisitionFileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisitionFileReader_Update" "', argument " "1"" of type '" "btkAcquisitionFileReader *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisitionFileReader * >(argp1);
  {
    try {
      (*arg1)->Update();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisitionFileReader_GetTimestamp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisitionFileReader *arg1 = (btkAcquisitionFileReader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisitionFileReader_GetTimestamp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisitionFileReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisitionFileReader_GetTimestamp" "', argument " "1"" of type '" "btkAcquisitionFileReader const *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisitionFileReader * >(argp1);
  {
    try {
      result = (unsigned long)(*arg1)->GetTimestamp();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *btkAcquisitionFileReader_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_btkAcquisitionFileReader, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_btkAcquisitionFileWriter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisitionFileWriter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_btkAcquisitionFileWriter")) SWIG_fail;
  {
    try {
      result = (btkAcquisitionFileWriter *)new btkAcquisitionFileWriter();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkAcquisitionFileWriter, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisitionFileWriter___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisitionFileWriter *arg1 = (btkAcquisitionFileWriter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisitionFileWriter_impl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisitionFileWriter___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisitionFileWriter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisitionFileWriter___deref__" "', argument " "1"" of type '" "btkAcquisitionFileWriter const *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisitionFileWriter * >(argp1);
  {
    try {
      result = (btkAcquisitionFileWriter_impl *)((btkAcquisitionFileWriter const *)arg1)->operator ->();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkAcquisitionFileWriter_impl, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisitionFileWriter_GetAcquisitionIO(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisitionFileWriter *arg1 = (btkAcquisitionFileWriter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< btkAcquisitionFileIO > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisitionFileWriter_GetAcquisitionIO",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisitionFileWriter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisitionFileWriter_GetAcquisitionIO" "', argument " "1"" of type '" "btkAcquisitionFileWriter *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisitionFileWriter * >(argp1);
  {
    try {
      result = btkAcquisitionFileWriter_GetAcquisitionIO(arg1);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkAcquisitionFileIO(static_cast< const btkAcquisitionFileIO& >(result))), SWIGTYPE_p_btkAcquisitionFileIO, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_btkAcquisitionFileWriter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisitionFileWriter *arg1 = (btkAcquisitionFileWriter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_btkAcquisitionFileWriter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisitionFileWriter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_btkAcquisitionFileWriter" "', argument " "1"" of type '" "btkAcquisitionFileWriter *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisitionFileWriter * >(argp1);
  {
    try {
      delete arg1;
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisitionFileWriter_GetInput(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisitionFileWriter *arg1 = (btkAcquisitionFileWriter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisition result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisitionFileWriter_GetInput",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisitionFileWriter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisitionFileWriter_GetInput" "', argument " "1"" of type '" "btkAcquisitionFileWriter *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisitionFileWriter * >(argp1);
  {
    try {
      result = (*arg1)->GetInput();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkAcquisition(static_cast< const btkAcquisition& >(result))), SWIGTYPE_p_btkAcquisition, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisitionFileWriter_SetInput(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisitionFileWriter *arg1 = (btkAcquisitionFileWriter *) 0 ;
  btkAcquisition arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAcquisitionFileWriter_SetInput",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisitionFileWriter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisitionFileWriter_SetInput" "', argument " "1"" of type '" "btkAcquisitionFileWriter *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisitionFileWriter * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkAcquisition,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkAcquisitionFileWriter_SetInput" "', argument " "2"" of type '" "btkAcquisition""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkAcquisitionFileWriter_SetInput" "', argument " "2"" of type '" "btkAcquisition""'");
    } else {
      btkAcquisition * temp = reinterpret_cast< btkAcquisition * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->SetInput(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisitionFileWriter_GetFilename(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisitionFileWriter *arg1 = (btkAcquisitionFileWriter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisitionFileWriter_GetFilename",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisitionFileWriter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisitionFileWriter_GetFilename" "', argument " "1"" of type '" "btkAcquisitionFileWriter const *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisitionFileWriter * >(argp1);
  {
    try {
      result = (std::string *) &(*arg1)->GetFilename();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisitionFileWriter_SetFilename(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisitionFileWriter *arg1 = (btkAcquisitionFileWriter *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAcquisitionFileWriter_SetFilename",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisitionFileWriter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisitionFileWriter_SetFilename" "', argument " "1"" of type '" "btkAcquisitionFileWriter *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisitionFileWriter * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkAcquisitionFileWriter_SetFilename" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkAcquisitionFileWriter_SetFilename" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->SetFilename((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisitionFileWriter_SetAcquisitionIO__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisitionFileWriter *arg1 = (btkAcquisitionFileWriter *) 0 ;
  SwigValueWrapper< btkAcquisitionFileIO > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAcquisitionFileWriter_SetAcquisitionIO",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisitionFileWriter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisitionFileWriter_SetAcquisitionIO" "', argument " "1"" of type '" "btkAcquisitionFileWriter *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisitionFileWriter * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkAcquisitionFileIO,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkAcquisitionFileWriter_SetAcquisitionIO" "', argument " "2"" of type '" "btkAcquisitionFileIO""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkAcquisitionFileWriter_SetAcquisitionIO" "', argument " "2"" of type '" "btkAcquisitionFileIO""'");
    } else {
      btkAcquisitionFileIO * temp = reinterpret_cast< btkAcquisitionFileIO * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->SetAcquisitionIO(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisitionFileWriter_SetAcquisitionIO__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisitionFileWriter *arg1 = (btkAcquisitionFileWriter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisitionFileWriter_SetAcquisitionIO",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisitionFileWriter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisitionFileWriter_SetAcquisitionIO" "', argument " "1"" of type '" "btkAcquisitionFileWriter *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisitionFileWriter * >(argp1);
  {
    try {
      (*arg1)->SetAcquisitionIO();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisitionFileWriter_SetAcquisitionIO(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkAcquisitionFileWriter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_btkAcquisitionFileWriter_SetAcquisitionIO__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkAcquisitionFileWriter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_btkAcquisitionFileIO, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_btkAcquisitionFileWriter_SetAcquisitionIO__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkAcquisitionFileWriter_SetAcquisitionIO'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkAcquisitionFileWriter_impl::SetAcquisitionIO(btkAcquisitionFileIO)\n"
    "    btkAcquisitionFileWriter_impl::SetAcquisitionIO()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkAcquisitionFileWriter_GetInputNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisitionFileWriter *arg1 = (btkAcquisitionFileWriter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisitionFileWriter_GetInputNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisitionFileWriter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisitionFileWriter_GetInputNumber" "', argument " "1"" of type '" "btkAcquisitionFileWriter const *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisitionFileWriter * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetInputNumber();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisitionFileWriter_GetValidInputNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisitionFileWriter *arg1 = (btkAcquisitionFileWriter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisitionFileWriter_GetValidInputNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisitionFileWriter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisitionFileWriter_GetValidInputNumber" "', argument " "1"" of type '" "btkAcquisitionFileWriter const *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisitionFileWriter * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetValidInputNumber();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisitionFileWriter_GetOutputNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisitionFileWriter *arg1 = (btkAcquisitionFileWriter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisitionFileWriter_GetOutputNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisitionFileWriter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisitionFileWriter_GetOutputNumber" "', argument " "1"" of type '" "btkAcquisitionFileWriter const *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisitionFileWriter * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetOutputNumber();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisitionFileWriter_ResetState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisitionFileWriter *arg1 = (btkAcquisitionFileWriter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisitionFileWriter_ResetState",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisitionFileWriter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisitionFileWriter_ResetState" "', argument " "1"" of type '" "btkAcquisitionFileWriter *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisitionFileWriter * >(argp1);
  {
    try {
      (*arg1)->ResetState();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisitionFileWriter_Update(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisitionFileWriter *arg1 = (btkAcquisitionFileWriter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisitionFileWriter_Update",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisitionFileWriter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisitionFileWriter_Update" "', argument " "1"" of type '" "btkAcquisitionFileWriter *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisitionFileWriter * >(argp1);
  {
    try {
      (*arg1)->Update();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisitionFileWriter_GetTimestamp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisitionFileWriter *arg1 = (btkAcquisitionFileWriter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisitionFileWriter_GetTimestamp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisitionFileWriter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisitionFileWriter_GetTimestamp" "', argument " "1"" of type '" "btkAcquisitionFileWriter const *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisitionFileWriter * >(argp1);
  {
    try {
      result = (unsigned long)(*arg1)->GetTimestamp();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *btkAcquisitionFileWriter_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_btkAcquisitionFileWriter, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_btkC3DFileIO__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkC3DFileIO *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_btkC3DFileIO")) SWIG_fail;
  {
    try {
      result = (btkC3DFileIO *)new btkC3DFileIO();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkC3DFileIO, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkC3DFileIO__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< btkAcquisitionFileIO > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkC3DFileIO *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_btkC3DFileIO",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_btkAcquisitionFileIO,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkC3DFileIO" "', argument " "1"" of type '" "btkAcquisitionFileIO const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkC3DFileIO" "', argument " "1"" of type '" "btkAcquisitionFileIO const""'");
    } else {
      btkAcquisitionFileIO * temp = reinterpret_cast< btkAcquisitionFileIO * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try {
      result = (btkC3DFileIO *)new btkC3DFileIO(arg1);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkC3DFileIO, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkC3DFileIO(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_btkC3DFileIO__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_btkAcquisitionFileIO, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_btkC3DFileIO__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_btkC3DFileIO'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkC3DFileIO::btkC3DFileIO()\n"
    "    btkC3DFileIO::btkC3DFileIO(btkAcquisitionFileIO const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkC3DFileIO___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkC3DFileIO *arg1 = (btkC3DFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkC3DFileIO_impl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkC3DFileIO___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkC3DFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkC3DFileIO___deref__" "', argument " "1"" of type '" "btkC3DFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkC3DFileIO * >(argp1);
  {
    try {
      result = (btkC3DFileIO_impl *)((btkC3DFileIO const *)arg1)->operator ->();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkC3DFileIO_impl, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_btkC3DFileIO(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkC3DFileIO *arg1 = (btkC3DFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_btkC3DFileIO",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkC3DFileIO, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_btkC3DFileIO" "', argument " "1"" of type '" "btkC3DFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkC3DFileIO * >(argp1);
  {
    try {
      delete arg1;
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkC3DFileIO_GetPointScale(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkC3DFileIO *arg1 = (btkC3DFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkC3DFileIO_GetPointScale",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkC3DFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkC3DFileIO_GetPointScale" "', argument " "1"" of type '" "btkC3DFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkC3DFileIO * >(argp1);
  {
    try {
      result = (double)(*arg1)->GetPointScale();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkC3DFileIO_SetPointScale(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkC3DFileIO *arg1 = (btkC3DFileIO *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkC3DFileIO_SetPointScale",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkC3DFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkC3DFileIO_SetPointScale" "', argument " "1"" of type '" "btkC3DFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkC3DFileIO * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkC3DFileIO_SetPointScale" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (*arg1)->SetPointScale(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkC3DFileIO_GetAnalogIntegerFormat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkC3DFileIO *arg1 = (btkC3DFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkC3DFileIO_impl::AnalogIntegerFormat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkC3DFileIO_GetAnalogIntegerFormat",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkC3DFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkC3DFileIO_GetAnalogIntegerFormat" "', argument " "1"" of type '" "btkC3DFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkC3DFileIO * >(argp1);
  {
    try {
      result = (btkC3DFileIO_impl::AnalogIntegerFormat)(*arg1)->GetAnalogIntegerFormat();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkC3DFileIO_SetAnalogIntegerFormat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkC3DFileIO *arg1 = (btkC3DFileIO *) 0 ;
  btkC3DFileIO_impl::AnalogIntegerFormat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkC3DFileIO_SetAnalogIntegerFormat",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkC3DFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkC3DFileIO_SetAnalogIntegerFormat" "', argument " "1"" of type '" "btkC3DFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkC3DFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkC3DFileIO_SetAnalogIntegerFormat" "', argument " "2"" of type '" "btkC3DFileIO_impl::AnalogIntegerFormat""'");
  } 
  arg2 = static_cast< btkC3DFileIO_impl::AnalogIntegerFormat >(val2);
  {
    try {
      (*arg1)->SetAnalogIntegerFormat(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkC3DFileIO_GetAnalogChannelScale(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkC3DFileIO *arg1 = (btkC3DFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkC3DFileIO_GetAnalogChannelScale",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkC3DFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkC3DFileIO_GetAnalogChannelScale" "', argument " "1"" of type '" "btkC3DFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkC3DFileIO * >(argp1);
  {
    try {
      result = (std::vector< double,std::allocator< double > > *) &(*arg1)->GetAnalogChannelScale();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkC3DFileIO_SetAnalogChannelScale(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkC3DFileIO *arg1 = (btkC3DFileIO *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkC3DFileIO_SetAnalogChannelScale",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkC3DFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkC3DFileIO_SetAnalogChannelScale" "', argument " "1"" of type '" "btkC3DFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkC3DFileIO * >(argp1);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkC3DFileIO_SetAnalogChannelScale" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkC3DFileIO_SetAnalogChannelScale" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->SetAnalogChannelScale((std::vector< double,std::allocator< double > > const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkC3DFileIO_GetAnalogZeroOffset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkC3DFileIO *arg1 = (btkC3DFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkC3DFileIO_GetAnalogZeroOffset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkC3DFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkC3DFileIO_GetAnalogZeroOffset" "', argument " "1"" of type '" "btkC3DFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkC3DFileIO * >(argp1);
  {
    try {
      result = (std::vector< double,std::allocator< double > > *) &(*arg1)->GetAnalogZeroOffset();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkC3DFileIO_SetAnalogZeroOffset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkC3DFileIO *arg1 = (btkC3DFileIO *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkC3DFileIO_SetAnalogZeroOffset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkC3DFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkC3DFileIO_SetAnalogZeroOffset" "', argument " "1"" of type '" "btkC3DFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkC3DFileIO * >(argp1);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkC3DFileIO_SetAnalogZeroOffset" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkC3DFileIO_SetAnalogZeroOffset" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->SetAnalogZeroOffset((std::vector< double,std::allocator< double > > const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkC3DFileIO_GetAnalogUniversalScale(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkC3DFileIO *arg1 = (btkC3DFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkC3DFileIO_GetAnalogUniversalScale",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkC3DFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkC3DFileIO_GetAnalogUniversalScale" "', argument " "1"" of type '" "btkC3DFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkC3DFileIO * >(argp1);
  {
    try {
      result = (double)(*arg1)->GetAnalogUniversalScale();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkC3DFileIO_SetAnalogUniversalScale(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkC3DFileIO *arg1 = (btkC3DFileIO *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkC3DFileIO_SetAnalogUniversalScale",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkC3DFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkC3DFileIO_SetAnalogUniversalScale" "', argument " "1"" of type '" "btkC3DFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkC3DFileIO * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkC3DFileIO_SetAnalogUniversalScale" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (*arg1)->SetAnalogUniversalScale(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkC3DFileIO_GetFileType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkC3DFileIO *arg1 = (btkC3DFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisitionFileIO_impl::FileType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkC3DFileIO_GetFileType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkC3DFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkC3DFileIO_GetFileType" "', argument " "1"" of type '" "btkC3DFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkC3DFileIO * >(argp1);
  {
    try {
      result = (btkAcquisitionFileIO_impl::FileType)(*arg1)->GetFileType();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkC3DFileIO_GetByteOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkC3DFileIO *arg1 = (btkC3DFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisitionFileIO_impl::ByteOrder result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkC3DFileIO_GetByteOrder",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkC3DFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkC3DFileIO_GetByteOrder" "', argument " "1"" of type '" "btkC3DFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkC3DFileIO * >(argp1);
  {
    try {
      result = (btkAcquisitionFileIO_impl::ByteOrder)(*arg1)->GetByteOrder();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkC3DFileIO_GetByteOrderAsString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkC3DFileIO *arg1 = (btkC3DFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkC3DFileIO_GetByteOrderAsString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkC3DFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkC3DFileIO_GetByteOrderAsString" "', argument " "1"" of type '" "btkC3DFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkC3DFileIO * >(argp1);
  {
    try {
      result = (*arg1)->GetByteOrderAsString();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkC3DFileIO_SetByteOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkC3DFileIO *arg1 = (btkC3DFileIO *) 0 ;
  btkAcquisitionFileIO_impl::ByteOrder arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkC3DFileIO_SetByteOrder",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkC3DFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkC3DFileIO_SetByteOrder" "', argument " "1"" of type '" "btkC3DFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkC3DFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkC3DFileIO_SetByteOrder" "', argument " "2"" of type '" "btkAcquisitionFileIO_impl::ByteOrder""'");
  } 
  arg2 = static_cast< btkAcquisitionFileIO_impl::ByteOrder >(val2);
  {
    try {
      (*arg1)->SetByteOrder(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkC3DFileIO_GetStorageFormat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkC3DFileIO *arg1 = (btkC3DFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisitionFileIO_impl::StorageFormat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkC3DFileIO_GetStorageFormat",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkC3DFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkC3DFileIO_GetStorageFormat" "', argument " "1"" of type '" "btkC3DFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkC3DFileIO * >(argp1);
  {
    try {
      result = (btkAcquisitionFileIO_impl::StorageFormat)(*arg1)->GetStorageFormat();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkC3DFileIO_GetStorageFormatAsString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkC3DFileIO *arg1 = (btkC3DFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkC3DFileIO_GetStorageFormatAsString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkC3DFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkC3DFileIO_GetStorageFormatAsString" "', argument " "1"" of type '" "btkC3DFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkC3DFileIO * >(argp1);
  {
    try {
      result = (*arg1)->GetStorageFormatAsString();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkC3DFileIO_SetStorageFormat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkC3DFileIO *arg1 = (btkC3DFileIO *) 0 ;
  btkAcquisitionFileIO_impl::StorageFormat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkC3DFileIO_SetStorageFormat",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkC3DFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkC3DFileIO_SetStorageFormat" "', argument " "1"" of type '" "btkC3DFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkC3DFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkC3DFileIO_SetStorageFormat" "', argument " "2"" of type '" "btkAcquisitionFileIO_impl::StorageFormat""'");
  } 
  arg2 = static_cast< btkAcquisitionFileIO_impl::StorageFormat >(val2);
  {
    try {
      (*arg1)->SetStorageFormat(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkC3DFileIO_GetInternalsUpdateOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkC3DFileIO *arg1 = (btkC3DFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkC3DFileIO_GetInternalsUpdateOptions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkC3DFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkC3DFileIO_GetInternalsUpdateOptions" "', argument " "1"" of type '" "btkC3DFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkC3DFileIO * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetInternalsUpdateOptions();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkC3DFileIO_SetInternalsUpdateOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkC3DFileIO *arg1 = (btkC3DFileIO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkC3DFileIO_SetInternalsUpdateOptions",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkC3DFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkC3DFileIO_SetInternalsUpdateOptions" "', argument " "1"" of type '" "btkC3DFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkC3DFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkC3DFileIO_SetInternalsUpdateOptions" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->SetInternalsUpdateOptions(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkC3DFileIO_HasInternalsUpdateOption(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkC3DFileIO *arg1 = (btkC3DFileIO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkC3DFileIO_HasInternalsUpdateOption",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkC3DFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkC3DFileIO_HasInternalsUpdateOption" "', argument " "1"" of type '" "btkC3DFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkC3DFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkC3DFileIO_HasInternalsUpdateOption" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (bool)(*arg1)->HasInternalsUpdateOption(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkC3DFileIO_CanReadFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkC3DFileIO *arg1 = (btkC3DFileIO *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkC3DFileIO_CanReadFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkC3DFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkC3DFileIO_CanReadFile" "', argument " "1"" of type '" "btkC3DFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkC3DFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkC3DFileIO_CanReadFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkC3DFileIO_CanReadFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)(*arg1)->CanReadFile((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkC3DFileIO_CanWriteFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkC3DFileIO *arg1 = (btkC3DFileIO *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkC3DFileIO_CanWriteFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkC3DFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkC3DFileIO_CanWriteFile" "', argument " "1"" of type '" "btkC3DFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkC3DFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkC3DFileIO_CanWriteFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkC3DFileIO_CanWriteFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)(*arg1)->CanWriteFile((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkC3DFileIO_Read(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkC3DFileIO *arg1 = (btkC3DFileIO *) 0 ;
  std::string *arg2 = 0 ;
  btkAcquisition arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkC3DFileIO_Read",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkC3DFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkC3DFileIO_Read" "', argument " "1"" of type '" "btkC3DFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkC3DFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkC3DFileIO_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkC3DFileIO_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkAcquisition,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkC3DFileIO_Read" "', argument " "3"" of type '" "btkAcquisition""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkC3DFileIO_Read" "', argument " "3"" of type '" "btkAcquisition""'");
    } else {
      btkAcquisition * temp = reinterpret_cast< btkAcquisition * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->Read((std::string const &)*arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkC3DFileIO_Write(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkC3DFileIO *arg1 = (btkC3DFileIO *) 0 ;
  std::string *arg2 = 0 ;
  btkAcquisition arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkC3DFileIO_Write",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkC3DFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkC3DFileIO_Write" "', argument " "1"" of type '" "btkC3DFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkC3DFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkC3DFileIO_Write" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkC3DFileIO_Write" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkAcquisition,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkC3DFileIO_Write" "', argument " "3"" of type '" "btkAcquisition""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkC3DFileIO_Write" "', argument " "3"" of type '" "btkAcquisition""'");
    } else {
      btkAcquisition * temp = reinterpret_cast< btkAcquisition * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->Write((std::string const &)*arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *btkC3DFileIO_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_btkC3DFileIO, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_btkANBFileIO__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkANBFileIO *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_btkANBFileIO")) SWIG_fail;
  {
    try {
      result = (btkANBFileIO *)new btkANBFileIO();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkANBFileIO, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkANBFileIO__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< btkAcquisitionFileIO > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkANBFileIO *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_btkANBFileIO",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_btkAcquisitionFileIO,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkANBFileIO" "', argument " "1"" of type '" "btkAcquisitionFileIO const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkANBFileIO" "', argument " "1"" of type '" "btkAcquisitionFileIO const""'");
    } else {
      btkAcquisitionFileIO * temp = reinterpret_cast< btkAcquisitionFileIO * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try {
      result = (btkANBFileIO *)new btkANBFileIO(arg1);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkANBFileIO, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkANBFileIO(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_btkANBFileIO__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_btkAcquisitionFileIO, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_btkANBFileIO__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_btkANBFileIO'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkANBFileIO::btkANBFileIO()\n"
    "    btkANBFileIO::btkANBFileIO(btkAcquisitionFileIO const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkANBFileIO___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkANBFileIO *arg1 = (btkANBFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkANBFileIO_impl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkANBFileIO___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkANBFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkANBFileIO___deref__" "', argument " "1"" of type '" "btkANBFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkANBFileIO * >(argp1);
  {
    try {
      result = (btkANBFileIO_impl *)((btkANBFileIO const *)arg1)->operator ->();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkANBFileIO_impl, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_btkANBFileIO(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkANBFileIO *arg1 = (btkANBFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_btkANBFileIO",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkANBFileIO, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_btkANBFileIO" "', argument " "1"" of type '" "btkANBFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkANBFileIO * >(argp1);
  {
    try {
      delete arg1;
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkANBFileIO_GetFileType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkANBFileIO *arg1 = (btkANBFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisitionFileIO_impl::FileType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkANBFileIO_GetFileType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkANBFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkANBFileIO_GetFileType" "', argument " "1"" of type '" "btkANBFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkANBFileIO * >(argp1);
  {
    try {
      result = (btkAcquisitionFileIO_impl::FileType)(*arg1)->GetFileType();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkANBFileIO_GetByteOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkANBFileIO *arg1 = (btkANBFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisitionFileIO_impl::ByteOrder result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkANBFileIO_GetByteOrder",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkANBFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkANBFileIO_GetByteOrder" "', argument " "1"" of type '" "btkANBFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkANBFileIO * >(argp1);
  {
    try {
      result = (btkAcquisitionFileIO_impl::ByteOrder)(*arg1)->GetByteOrder();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkANBFileIO_GetByteOrderAsString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkANBFileIO *arg1 = (btkANBFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkANBFileIO_GetByteOrderAsString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkANBFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkANBFileIO_GetByteOrderAsString" "', argument " "1"" of type '" "btkANBFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkANBFileIO * >(argp1);
  {
    try {
      result = (*arg1)->GetByteOrderAsString();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkANBFileIO_SetByteOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkANBFileIO *arg1 = (btkANBFileIO *) 0 ;
  btkAcquisitionFileIO_impl::ByteOrder arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkANBFileIO_SetByteOrder",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkANBFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkANBFileIO_SetByteOrder" "', argument " "1"" of type '" "btkANBFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkANBFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkANBFileIO_SetByteOrder" "', argument " "2"" of type '" "btkAcquisitionFileIO_impl::ByteOrder""'");
  } 
  arg2 = static_cast< btkAcquisitionFileIO_impl::ByteOrder >(val2);
  {
    try {
      (*arg1)->SetByteOrder(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkANBFileIO_GetStorageFormat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkANBFileIO *arg1 = (btkANBFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisitionFileIO_impl::StorageFormat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkANBFileIO_GetStorageFormat",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkANBFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkANBFileIO_GetStorageFormat" "', argument " "1"" of type '" "btkANBFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkANBFileIO * >(argp1);
  {
    try {
      result = (btkAcquisitionFileIO_impl::StorageFormat)(*arg1)->GetStorageFormat();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkANBFileIO_GetStorageFormatAsString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkANBFileIO *arg1 = (btkANBFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkANBFileIO_GetStorageFormatAsString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkANBFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkANBFileIO_GetStorageFormatAsString" "', argument " "1"" of type '" "btkANBFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkANBFileIO * >(argp1);
  {
    try {
      result = (*arg1)->GetStorageFormatAsString();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkANBFileIO_SetStorageFormat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkANBFileIO *arg1 = (btkANBFileIO *) 0 ;
  btkAcquisitionFileIO_impl::StorageFormat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkANBFileIO_SetStorageFormat",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkANBFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkANBFileIO_SetStorageFormat" "', argument " "1"" of type '" "btkANBFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkANBFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkANBFileIO_SetStorageFormat" "', argument " "2"" of type '" "btkAcquisitionFileIO_impl::StorageFormat""'");
  } 
  arg2 = static_cast< btkAcquisitionFileIO_impl::StorageFormat >(val2);
  {
    try {
      (*arg1)->SetStorageFormat(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkANBFileIO_GetInternalsUpdateOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkANBFileIO *arg1 = (btkANBFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkANBFileIO_GetInternalsUpdateOptions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkANBFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkANBFileIO_GetInternalsUpdateOptions" "', argument " "1"" of type '" "btkANBFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkANBFileIO * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetInternalsUpdateOptions();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkANBFileIO_SetInternalsUpdateOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkANBFileIO *arg1 = (btkANBFileIO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkANBFileIO_SetInternalsUpdateOptions",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkANBFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkANBFileIO_SetInternalsUpdateOptions" "', argument " "1"" of type '" "btkANBFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkANBFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkANBFileIO_SetInternalsUpdateOptions" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->SetInternalsUpdateOptions(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkANBFileIO_HasInternalsUpdateOption(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkANBFileIO *arg1 = (btkANBFileIO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkANBFileIO_HasInternalsUpdateOption",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkANBFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkANBFileIO_HasInternalsUpdateOption" "', argument " "1"" of type '" "btkANBFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkANBFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkANBFileIO_HasInternalsUpdateOption" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (bool)(*arg1)->HasInternalsUpdateOption(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkANBFileIO_CanReadFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkANBFileIO *arg1 = (btkANBFileIO *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkANBFileIO_CanReadFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkANBFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkANBFileIO_CanReadFile" "', argument " "1"" of type '" "btkANBFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkANBFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkANBFileIO_CanReadFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkANBFileIO_CanReadFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)(*arg1)->CanReadFile((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkANBFileIO_CanWriteFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkANBFileIO *arg1 = (btkANBFileIO *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkANBFileIO_CanWriteFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkANBFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkANBFileIO_CanWriteFile" "', argument " "1"" of type '" "btkANBFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkANBFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkANBFileIO_CanWriteFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkANBFileIO_CanWriteFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)(*arg1)->CanWriteFile((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkANBFileIO_Read(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkANBFileIO *arg1 = (btkANBFileIO *) 0 ;
  std::string *arg2 = 0 ;
  btkAcquisition arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkANBFileIO_Read",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkANBFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkANBFileIO_Read" "', argument " "1"" of type '" "btkANBFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkANBFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkANBFileIO_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkANBFileIO_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkAcquisition,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkANBFileIO_Read" "', argument " "3"" of type '" "btkAcquisition""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkANBFileIO_Read" "', argument " "3"" of type '" "btkAcquisition""'");
    } else {
      btkAcquisition * temp = reinterpret_cast< btkAcquisition * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->Read((std::string const &)*arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkANBFileIO_Write(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkANBFileIO *arg1 = (btkANBFileIO *) 0 ;
  std::string *arg2 = 0 ;
  btkAcquisition arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkANBFileIO_Write",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkANBFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkANBFileIO_Write" "', argument " "1"" of type '" "btkANBFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkANBFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkANBFileIO_Write" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkANBFileIO_Write" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkAcquisition,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkANBFileIO_Write" "', argument " "3"" of type '" "btkAcquisition""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkANBFileIO_Write" "', argument " "3"" of type '" "btkAcquisition""'");
    } else {
      btkAcquisition * temp = reinterpret_cast< btkAcquisition * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->Write((std::string const &)*arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *btkANBFileIO_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_btkANBFileIO, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_btkANCFileIO__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkANCFileIO *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_btkANCFileIO")) SWIG_fail;
  {
    try {
      result = (btkANCFileIO *)new btkANCFileIO();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkANCFileIO, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkANCFileIO__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< btkAcquisitionFileIO > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkANCFileIO *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_btkANCFileIO",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_btkAcquisitionFileIO,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkANCFileIO" "', argument " "1"" of type '" "btkAcquisitionFileIO const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkANCFileIO" "', argument " "1"" of type '" "btkAcquisitionFileIO const""'");
    } else {
      btkAcquisitionFileIO * temp = reinterpret_cast< btkAcquisitionFileIO * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try {
      result = (btkANCFileIO *)new btkANCFileIO(arg1);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkANCFileIO, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkANCFileIO(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_btkANCFileIO__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_btkAcquisitionFileIO, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_btkANCFileIO__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_btkANCFileIO'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkANCFileIO::btkANCFileIO()\n"
    "    btkANCFileIO::btkANCFileIO(btkAcquisitionFileIO const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkANCFileIO___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkANCFileIO *arg1 = (btkANCFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkANCFileIO_impl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkANCFileIO___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkANCFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkANCFileIO___deref__" "', argument " "1"" of type '" "btkANCFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkANCFileIO * >(argp1);
  {
    try {
      result = (btkANCFileIO_impl *)((btkANCFileIO const *)arg1)->operator ->();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkANCFileIO_impl, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_btkANCFileIO(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkANCFileIO *arg1 = (btkANCFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_btkANCFileIO",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkANCFileIO, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_btkANCFileIO" "', argument " "1"" of type '" "btkANCFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkANCFileIO * >(argp1);
  {
    try {
      delete arg1;
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkANCFileIO_GetFileGeneration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkANCFileIO *arg1 = (btkANCFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkANCFileIO_GetFileGeneration",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkANCFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkANCFileIO_GetFileGeneration" "', argument " "1"" of type '" "btkANCFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkANCFileIO * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetFileGeneration();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkANCFileIO_SetFileGeneration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkANCFileIO *arg1 = (btkANCFileIO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkANCFileIO_SetFileGeneration",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkANCFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkANCFileIO_SetFileGeneration" "', argument " "1"" of type '" "btkANCFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkANCFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkANCFileIO_SetFileGeneration" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->SetFileGeneration(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkANCFileIO_GetFileType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkANCFileIO *arg1 = (btkANCFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisitionFileIO_impl::FileType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkANCFileIO_GetFileType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkANCFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkANCFileIO_GetFileType" "', argument " "1"" of type '" "btkANCFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkANCFileIO * >(argp1);
  {
    try {
      result = (btkAcquisitionFileIO_impl::FileType)(*arg1)->GetFileType();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkANCFileIO_GetByteOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkANCFileIO *arg1 = (btkANCFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisitionFileIO_impl::ByteOrder result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkANCFileIO_GetByteOrder",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkANCFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkANCFileIO_GetByteOrder" "', argument " "1"" of type '" "btkANCFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkANCFileIO * >(argp1);
  {
    try {
      result = (btkAcquisitionFileIO_impl::ByteOrder)(*arg1)->GetByteOrder();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkANCFileIO_GetByteOrderAsString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkANCFileIO *arg1 = (btkANCFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkANCFileIO_GetByteOrderAsString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkANCFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkANCFileIO_GetByteOrderAsString" "', argument " "1"" of type '" "btkANCFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkANCFileIO * >(argp1);
  {
    try {
      result = (*arg1)->GetByteOrderAsString();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkANCFileIO_SetByteOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkANCFileIO *arg1 = (btkANCFileIO *) 0 ;
  btkAcquisitionFileIO_impl::ByteOrder arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkANCFileIO_SetByteOrder",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkANCFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkANCFileIO_SetByteOrder" "', argument " "1"" of type '" "btkANCFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkANCFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkANCFileIO_SetByteOrder" "', argument " "2"" of type '" "btkAcquisitionFileIO_impl::ByteOrder""'");
  } 
  arg2 = static_cast< btkAcquisitionFileIO_impl::ByteOrder >(val2);
  {
    try {
      (*arg1)->SetByteOrder(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkANCFileIO_GetStorageFormat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkANCFileIO *arg1 = (btkANCFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisitionFileIO_impl::StorageFormat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkANCFileIO_GetStorageFormat",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkANCFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkANCFileIO_GetStorageFormat" "', argument " "1"" of type '" "btkANCFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkANCFileIO * >(argp1);
  {
    try {
      result = (btkAcquisitionFileIO_impl::StorageFormat)(*arg1)->GetStorageFormat();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkANCFileIO_GetStorageFormatAsString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkANCFileIO *arg1 = (btkANCFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkANCFileIO_GetStorageFormatAsString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkANCFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkANCFileIO_GetStorageFormatAsString" "', argument " "1"" of type '" "btkANCFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkANCFileIO * >(argp1);
  {
    try {
      result = (*arg1)->GetStorageFormatAsString();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkANCFileIO_SetStorageFormat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkANCFileIO *arg1 = (btkANCFileIO *) 0 ;
  btkAcquisitionFileIO_impl::StorageFormat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkANCFileIO_SetStorageFormat",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkANCFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkANCFileIO_SetStorageFormat" "', argument " "1"" of type '" "btkANCFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkANCFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkANCFileIO_SetStorageFormat" "', argument " "2"" of type '" "btkAcquisitionFileIO_impl::StorageFormat""'");
  } 
  arg2 = static_cast< btkAcquisitionFileIO_impl::StorageFormat >(val2);
  {
    try {
      (*arg1)->SetStorageFormat(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkANCFileIO_GetInternalsUpdateOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkANCFileIO *arg1 = (btkANCFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkANCFileIO_GetInternalsUpdateOptions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkANCFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkANCFileIO_GetInternalsUpdateOptions" "', argument " "1"" of type '" "btkANCFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkANCFileIO * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetInternalsUpdateOptions();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkANCFileIO_SetInternalsUpdateOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkANCFileIO *arg1 = (btkANCFileIO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkANCFileIO_SetInternalsUpdateOptions",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkANCFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkANCFileIO_SetInternalsUpdateOptions" "', argument " "1"" of type '" "btkANCFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkANCFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkANCFileIO_SetInternalsUpdateOptions" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->SetInternalsUpdateOptions(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkANCFileIO_HasInternalsUpdateOption(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkANCFileIO *arg1 = (btkANCFileIO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkANCFileIO_HasInternalsUpdateOption",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkANCFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkANCFileIO_HasInternalsUpdateOption" "', argument " "1"" of type '" "btkANCFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkANCFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkANCFileIO_HasInternalsUpdateOption" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (bool)(*arg1)->HasInternalsUpdateOption(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkANCFileIO_CanReadFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkANCFileIO *arg1 = (btkANCFileIO *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkANCFileIO_CanReadFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkANCFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkANCFileIO_CanReadFile" "', argument " "1"" of type '" "btkANCFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkANCFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkANCFileIO_CanReadFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkANCFileIO_CanReadFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)(*arg1)->CanReadFile((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkANCFileIO_CanWriteFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkANCFileIO *arg1 = (btkANCFileIO *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkANCFileIO_CanWriteFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkANCFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkANCFileIO_CanWriteFile" "', argument " "1"" of type '" "btkANCFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkANCFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkANCFileIO_CanWriteFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkANCFileIO_CanWriteFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)(*arg1)->CanWriteFile((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkANCFileIO_Read(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkANCFileIO *arg1 = (btkANCFileIO *) 0 ;
  std::string *arg2 = 0 ;
  btkAcquisition arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkANCFileIO_Read",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkANCFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkANCFileIO_Read" "', argument " "1"" of type '" "btkANCFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkANCFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkANCFileIO_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkANCFileIO_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkAcquisition,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkANCFileIO_Read" "', argument " "3"" of type '" "btkAcquisition""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkANCFileIO_Read" "', argument " "3"" of type '" "btkAcquisition""'");
    } else {
      btkAcquisition * temp = reinterpret_cast< btkAcquisition * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->Read((std::string const &)*arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkANCFileIO_Write(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkANCFileIO *arg1 = (btkANCFileIO *) 0 ;
  std::string *arg2 = 0 ;
  btkAcquisition arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkANCFileIO_Write",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkANCFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkANCFileIO_Write" "', argument " "1"" of type '" "btkANCFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkANCFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkANCFileIO_Write" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkANCFileIO_Write" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkAcquisition,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkANCFileIO_Write" "', argument " "3"" of type '" "btkAcquisition""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkANCFileIO_Write" "', argument " "3"" of type '" "btkAcquisition""'");
    } else {
      btkAcquisition * temp = reinterpret_cast< btkAcquisition * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->Write((std::string const &)*arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *btkANCFileIO_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_btkANCFileIO, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_btkANGFileIO__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkANGFileIO *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_btkANGFileIO")) SWIG_fail;
  {
    try {
      result = (btkANGFileIO *)new btkANGFileIO();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkANGFileIO, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkANGFileIO__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< btkAcquisitionFileIO > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkANGFileIO *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_btkANGFileIO",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_btkAcquisitionFileIO,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkANGFileIO" "', argument " "1"" of type '" "btkAcquisitionFileIO const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkANGFileIO" "', argument " "1"" of type '" "btkAcquisitionFileIO const""'");
    } else {
      btkAcquisitionFileIO * temp = reinterpret_cast< btkAcquisitionFileIO * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try {
      result = (btkANGFileIO *)new btkANGFileIO(arg1);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkANGFileIO, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkANGFileIO(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_btkANGFileIO__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_btkAcquisitionFileIO, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_btkANGFileIO__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_btkANGFileIO'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkANGFileIO::btkANGFileIO()\n"
    "    btkANGFileIO::btkANGFileIO(btkAcquisitionFileIO const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkANGFileIO___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkANGFileIO *arg1 = (btkANGFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkANGFileIO_impl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkANGFileIO___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkANGFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkANGFileIO___deref__" "', argument " "1"" of type '" "btkANGFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkANGFileIO * >(argp1);
  {
    try {
      result = (btkANGFileIO_impl *)((btkANGFileIO const *)arg1)->operator ->();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkANGFileIO_impl, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_btkANGFileIO(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkANGFileIO *arg1 = (btkANGFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_btkANGFileIO",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkANGFileIO, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_btkANGFileIO" "', argument " "1"" of type '" "btkANGFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkANGFileIO * >(argp1);
  {
    try {
      delete arg1;
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkANGFileIO_GetFileType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkANGFileIO *arg1 = (btkANGFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisitionFileIO_impl::FileType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkANGFileIO_GetFileType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkANGFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkANGFileIO_GetFileType" "', argument " "1"" of type '" "btkANGFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkANGFileIO * >(argp1);
  {
    try {
      result = (btkAcquisitionFileIO_impl::FileType)(*arg1)->GetFileType();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkANGFileIO_GetByteOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkANGFileIO *arg1 = (btkANGFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisitionFileIO_impl::ByteOrder result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkANGFileIO_GetByteOrder",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkANGFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkANGFileIO_GetByteOrder" "', argument " "1"" of type '" "btkANGFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkANGFileIO * >(argp1);
  {
    try {
      result = (btkAcquisitionFileIO_impl::ByteOrder)(*arg1)->GetByteOrder();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkANGFileIO_GetByteOrderAsString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkANGFileIO *arg1 = (btkANGFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkANGFileIO_GetByteOrderAsString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkANGFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkANGFileIO_GetByteOrderAsString" "', argument " "1"" of type '" "btkANGFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkANGFileIO * >(argp1);
  {
    try {
      result = (*arg1)->GetByteOrderAsString();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkANGFileIO_SetByteOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkANGFileIO *arg1 = (btkANGFileIO *) 0 ;
  btkAcquisitionFileIO_impl::ByteOrder arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkANGFileIO_SetByteOrder",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkANGFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkANGFileIO_SetByteOrder" "', argument " "1"" of type '" "btkANGFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkANGFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkANGFileIO_SetByteOrder" "', argument " "2"" of type '" "btkAcquisitionFileIO_impl::ByteOrder""'");
  } 
  arg2 = static_cast< btkAcquisitionFileIO_impl::ByteOrder >(val2);
  {
    try {
      (*arg1)->SetByteOrder(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkANGFileIO_GetStorageFormat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkANGFileIO *arg1 = (btkANGFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisitionFileIO_impl::StorageFormat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkANGFileIO_GetStorageFormat",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkANGFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkANGFileIO_GetStorageFormat" "', argument " "1"" of type '" "btkANGFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkANGFileIO * >(argp1);
  {
    try {
      result = (btkAcquisitionFileIO_impl::StorageFormat)(*arg1)->GetStorageFormat();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkANGFileIO_GetStorageFormatAsString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkANGFileIO *arg1 = (btkANGFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkANGFileIO_GetStorageFormatAsString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkANGFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkANGFileIO_GetStorageFormatAsString" "', argument " "1"" of type '" "btkANGFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkANGFileIO * >(argp1);
  {
    try {
      result = (*arg1)->GetStorageFormatAsString();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkANGFileIO_SetStorageFormat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkANGFileIO *arg1 = (btkANGFileIO *) 0 ;
  btkAcquisitionFileIO_impl::StorageFormat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkANGFileIO_SetStorageFormat",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkANGFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkANGFileIO_SetStorageFormat" "', argument " "1"" of type '" "btkANGFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkANGFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkANGFileIO_SetStorageFormat" "', argument " "2"" of type '" "btkAcquisitionFileIO_impl::StorageFormat""'");
  } 
  arg2 = static_cast< btkAcquisitionFileIO_impl::StorageFormat >(val2);
  {
    try {
      (*arg1)->SetStorageFormat(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkANGFileIO_GetInternalsUpdateOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkANGFileIO *arg1 = (btkANGFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkANGFileIO_GetInternalsUpdateOptions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkANGFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkANGFileIO_GetInternalsUpdateOptions" "', argument " "1"" of type '" "btkANGFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkANGFileIO * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetInternalsUpdateOptions();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkANGFileIO_SetInternalsUpdateOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkANGFileIO *arg1 = (btkANGFileIO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkANGFileIO_SetInternalsUpdateOptions",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkANGFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkANGFileIO_SetInternalsUpdateOptions" "', argument " "1"" of type '" "btkANGFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkANGFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkANGFileIO_SetInternalsUpdateOptions" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->SetInternalsUpdateOptions(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkANGFileIO_HasInternalsUpdateOption(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkANGFileIO *arg1 = (btkANGFileIO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkANGFileIO_HasInternalsUpdateOption",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkANGFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkANGFileIO_HasInternalsUpdateOption" "', argument " "1"" of type '" "btkANGFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkANGFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkANGFileIO_HasInternalsUpdateOption" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (bool)(*arg1)->HasInternalsUpdateOption(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkANGFileIO_CanReadFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkANGFileIO *arg1 = (btkANGFileIO *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkANGFileIO_CanReadFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkANGFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkANGFileIO_CanReadFile" "', argument " "1"" of type '" "btkANGFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkANGFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkANGFileIO_CanReadFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkANGFileIO_CanReadFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)(*arg1)->CanReadFile((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkANGFileIO_CanWriteFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkANGFileIO *arg1 = (btkANGFileIO *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkANGFileIO_CanWriteFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkANGFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkANGFileIO_CanWriteFile" "', argument " "1"" of type '" "btkANGFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkANGFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkANGFileIO_CanWriteFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkANGFileIO_CanWriteFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)(*arg1)->CanWriteFile((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkANGFileIO_Read(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkANGFileIO *arg1 = (btkANGFileIO *) 0 ;
  std::string *arg2 = 0 ;
  btkAcquisition arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkANGFileIO_Read",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkANGFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkANGFileIO_Read" "', argument " "1"" of type '" "btkANGFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkANGFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkANGFileIO_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkANGFileIO_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkAcquisition,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkANGFileIO_Read" "', argument " "3"" of type '" "btkAcquisition""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkANGFileIO_Read" "', argument " "3"" of type '" "btkAcquisition""'");
    } else {
      btkAcquisition * temp = reinterpret_cast< btkAcquisition * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->Read((std::string const &)*arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkANGFileIO_Write(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkANGFileIO *arg1 = (btkANGFileIO *) 0 ;
  std::string *arg2 = 0 ;
  btkAcquisition arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkANGFileIO_Write",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkANGFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkANGFileIO_Write" "', argument " "1"" of type '" "btkANGFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkANGFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkANGFileIO_Write" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkANGFileIO_Write" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkAcquisition,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkANGFileIO_Write" "', argument " "3"" of type '" "btkAcquisition""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkANGFileIO_Write" "', argument " "3"" of type '" "btkAcquisition""'");
    } else {
      btkAcquisition * temp = reinterpret_cast< btkAcquisition * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->Write((std::string const &)*arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *btkANGFileIO_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_btkANGFileIO, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_btkCALForcePlateFileIO__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkCALForcePlateFileIO *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_btkCALForcePlateFileIO")) SWIG_fail;
  {
    try {
      result = (btkCALForcePlateFileIO *)new btkCALForcePlateFileIO();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkCALForcePlateFileIO, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkCALForcePlateFileIO__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< btkAcquisitionFileIO > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkCALForcePlateFileIO *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_btkCALForcePlateFileIO",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_btkAcquisitionFileIO,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkCALForcePlateFileIO" "', argument " "1"" of type '" "btkAcquisitionFileIO const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkCALForcePlateFileIO" "', argument " "1"" of type '" "btkAcquisitionFileIO const""'");
    } else {
      btkAcquisitionFileIO * temp = reinterpret_cast< btkAcquisitionFileIO * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try {
      result = (btkCALForcePlateFileIO *)new btkCALForcePlateFileIO(arg1);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkCALForcePlateFileIO, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkCALForcePlateFileIO(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_btkCALForcePlateFileIO__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_btkAcquisitionFileIO, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_btkCALForcePlateFileIO__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_btkCALForcePlateFileIO'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkCALForcePlateFileIO::btkCALForcePlateFileIO()\n"
    "    btkCALForcePlateFileIO::btkCALForcePlateFileIO(btkAcquisitionFileIO const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkCALForcePlateFileIO___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkCALForcePlateFileIO *arg1 = (btkCALForcePlateFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkCALForcePlateFileIO_impl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkCALForcePlateFileIO___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkCALForcePlateFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkCALForcePlateFileIO___deref__" "', argument " "1"" of type '" "btkCALForcePlateFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkCALForcePlateFileIO * >(argp1);
  {
    try {
      result = (btkCALForcePlateFileIO_impl *)((btkCALForcePlateFileIO const *)arg1)->operator ->();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkCALForcePlateFileIO_impl, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_btkCALForcePlateFileIO(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkCALForcePlateFileIO *arg1 = (btkCALForcePlateFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_btkCALForcePlateFileIO",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkCALForcePlateFileIO, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_btkCALForcePlateFileIO" "', argument " "1"" of type '" "btkCALForcePlateFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkCALForcePlateFileIO * >(argp1);
  {
    try {
      delete arg1;
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkCALForcePlateFileIO_GetFileType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkCALForcePlateFileIO *arg1 = (btkCALForcePlateFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisitionFileIO_impl::FileType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkCALForcePlateFileIO_GetFileType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkCALForcePlateFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkCALForcePlateFileIO_GetFileType" "', argument " "1"" of type '" "btkCALForcePlateFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkCALForcePlateFileIO * >(argp1);
  {
    try {
      result = (btkAcquisitionFileIO_impl::FileType)(*arg1)->GetFileType();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkCALForcePlateFileIO_GetByteOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkCALForcePlateFileIO *arg1 = (btkCALForcePlateFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisitionFileIO_impl::ByteOrder result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkCALForcePlateFileIO_GetByteOrder",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkCALForcePlateFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkCALForcePlateFileIO_GetByteOrder" "', argument " "1"" of type '" "btkCALForcePlateFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkCALForcePlateFileIO * >(argp1);
  {
    try {
      result = (btkAcquisitionFileIO_impl::ByteOrder)(*arg1)->GetByteOrder();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkCALForcePlateFileIO_GetByteOrderAsString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkCALForcePlateFileIO *arg1 = (btkCALForcePlateFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkCALForcePlateFileIO_GetByteOrderAsString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkCALForcePlateFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkCALForcePlateFileIO_GetByteOrderAsString" "', argument " "1"" of type '" "btkCALForcePlateFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkCALForcePlateFileIO * >(argp1);
  {
    try {
      result = (*arg1)->GetByteOrderAsString();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkCALForcePlateFileIO_SetByteOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkCALForcePlateFileIO *arg1 = (btkCALForcePlateFileIO *) 0 ;
  btkAcquisitionFileIO_impl::ByteOrder arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkCALForcePlateFileIO_SetByteOrder",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkCALForcePlateFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkCALForcePlateFileIO_SetByteOrder" "', argument " "1"" of type '" "btkCALForcePlateFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkCALForcePlateFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkCALForcePlateFileIO_SetByteOrder" "', argument " "2"" of type '" "btkAcquisitionFileIO_impl::ByteOrder""'");
  } 
  arg2 = static_cast< btkAcquisitionFileIO_impl::ByteOrder >(val2);
  {
    try {
      (*arg1)->SetByteOrder(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkCALForcePlateFileIO_GetStorageFormat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkCALForcePlateFileIO *arg1 = (btkCALForcePlateFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisitionFileIO_impl::StorageFormat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkCALForcePlateFileIO_GetStorageFormat",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkCALForcePlateFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkCALForcePlateFileIO_GetStorageFormat" "', argument " "1"" of type '" "btkCALForcePlateFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkCALForcePlateFileIO * >(argp1);
  {
    try {
      result = (btkAcquisitionFileIO_impl::StorageFormat)(*arg1)->GetStorageFormat();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkCALForcePlateFileIO_GetStorageFormatAsString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkCALForcePlateFileIO *arg1 = (btkCALForcePlateFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkCALForcePlateFileIO_GetStorageFormatAsString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkCALForcePlateFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkCALForcePlateFileIO_GetStorageFormatAsString" "', argument " "1"" of type '" "btkCALForcePlateFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkCALForcePlateFileIO * >(argp1);
  {
    try {
      result = (*arg1)->GetStorageFormatAsString();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkCALForcePlateFileIO_SetStorageFormat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkCALForcePlateFileIO *arg1 = (btkCALForcePlateFileIO *) 0 ;
  btkAcquisitionFileIO_impl::StorageFormat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkCALForcePlateFileIO_SetStorageFormat",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkCALForcePlateFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkCALForcePlateFileIO_SetStorageFormat" "', argument " "1"" of type '" "btkCALForcePlateFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkCALForcePlateFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkCALForcePlateFileIO_SetStorageFormat" "', argument " "2"" of type '" "btkAcquisitionFileIO_impl::StorageFormat""'");
  } 
  arg2 = static_cast< btkAcquisitionFileIO_impl::StorageFormat >(val2);
  {
    try {
      (*arg1)->SetStorageFormat(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkCALForcePlateFileIO_GetInternalsUpdateOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkCALForcePlateFileIO *arg1 = (btkCALForcePlateFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkCALForcePlateFileIO_GetInternalsUpdateOptions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkCALForcePlateFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkCALForcePlateFileIO_GetInternalsUpdateOptions" "', argument " "1"" of type '" "btkCALForcePlateFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkCALForcePlateFileIO * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetInternalsUpdateOptions();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkCALForcePlateFileIO_SetInternalsUpdateOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkCALForcePlateFileIO *arg1 = (btkCALForcePlateFileIO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkCALForcePlateFileIO_SetInternalsUpdateOptions",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkCALForcePlateFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkCALForcePlateFileIO_SetInternalsUpdateOptions" "', argument " "1"" of type '" "btkCALForcePlateFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkCALForcePlateFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkCALForcePlateFileIO_SetInternalsUpdateOptions" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->SetInternalsUpdateOptions(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkCALForcePlateFileIO_HasInternalsUpdateOption(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkCALForcePlateFileIO *arg1 = (btkCALForcePlateFileIO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkCALForcePlateFileIO_HasInternalsUpdateOption",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkCALForcePlateFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkCALForcePlateFileIO_HasInternalsUpdateOption" "', argument " "1"" of type '" "btkCALForcePlateFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkCALForcePlateFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkCALForcePlateFileIO_HasInternalsUpdateOption" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (bool)(*arg1)->HasInternalsUpdateOption(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkCALForcePlateFileIO_CanReadFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkCALForcePlateFileIO *arg1 = (btkCALForcePlateFileIO *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkCALForcePlateFileIO_CanReadFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkCALForcePlateFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkCALForcePlateFileIO_CanReadFile" "', argument " "1"" of type '" "btkCALForcePlateFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkCALForcePlateFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkCALForcePlateFileIO_CanReadFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkCALForcePlateFileIO_CanReadFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)(*arg1)->CanReadFile((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkCALForcePlateFileIO_CanWriteFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkCALForcePlateFileIO *arg1 = (btkCALForcePlateFileIO *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkCALForcePlateFileIO_CanWriteFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkCALForcePlateFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkCALForcePlateFileIO_CanWriteFile" "', argument " "1"" of type '" "btkCALForcePlateFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkCALForcePlateFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkCALForcePlateFileIO_CanWriteFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkCALForcePlateFileIO_CanWriteFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)(*arg1)->CanWriteFile((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkCALForcePlateFileIO_Read(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkCALForcePlateFileIO *arg1 = (btkCALForcePlateFileIO *) 0 ;
  std::string *arg2 = 0 ;
  btkAcquisition arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkCALForcePlateFileIO_Read",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkCALForcePlateFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkCALForcePlateFileIO_Read" "', argument " "1"" of type '" "btkCALForcePlateFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkCALForcePlateFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkCALForcePlateFileIO_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkCALForcePlateFileIO_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkAcquisition,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkCALForcePlateFileIO_Read" "', argument " "3"" of type '" "btkAcquisition""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkCALForcePlateFileIO_Read" "', argument " "3"" of type '" "btkAcquisition""'");
    } else {
      btkAcquisition * temp = reinterpret_cast< btkAcquisition * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->Read((std::string const &)*arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkCALForcePlateFileIO_Write(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkCALForcePlateFileIO *arg1 = (btkCALForcePlateFileIO *) 0 ;
  std::string *arg2 = 0 ;
  btkAcquisition arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkCALForcePlateFileIO_Write",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkCALForcePlateFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkCALForcePlateFileIO_Write" "', argument " "1"" of type '" "btkCALForcePlateFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkCALForcePlateFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkCALForcePlateFileIO_Write" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkCALForcePlateFileIO_Write" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkAcquisition,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkCALForcePlateFileIO_Write" "', argument " "3"" of type '" "btkAcquisition""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkCALForcePlateFileIO_Write" "', argument " "3"" of type '" "btkAcquisition""'");
    } else {
      btkAcquisition * temp = reinterpret_cast< btkAcquisition * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->Write((std::string const &)*arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *btkCALForcePlateFileIO_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_btkCALForcePlateFileIO, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_btkCLBFileIO__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkCLBFileIO *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_btkCLBFileIO")) SWIG_fail;
  {
    try {
      result = (btkCLBFileIO *)new btkCLBFileIO();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkCLBFileIO, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkCLBFileIO__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< btkAcquisitionFileIO > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkCLBFileIO *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_btkCLBFileIO",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_btkAcquisitionFileIO,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkCLBFileIO" "', argument " "1"" of type '" "btkAcquisitionFileIO const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkCLBFileIO" "', argument " "1"" of type '" "btkAcquisitionFileIO const""'");
    } else {
      btkAcquisitionFileIO * temp = reinterpret_cast< btkAcquisitionFileIO * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try {
      result = (btkCLBFileIO *)new btkCLBFileIO(arg1);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkCLBFileIO, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkCLBFileIO(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_btkCLBFileIO__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_btkAcquisitionFileIO, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_btkCLBFileIO__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_btkCLBFileIO'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkCLBFileIO::btkCLBFileIO()\n"
    "    btkCLBFileIO::btkCLBFileIO(btkAcquisitionFileIO const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkCLBFileIO___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkCLBFileIO *arg1 = (btkCLBFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkCLBFileIO_impl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkCLBFileIO___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkCLBFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkCLBFileIO___deref__" "', argument " "1"" of type '" "btkCLBFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkCLBFileIO * >(argp1);
  {
    try {
      result = (btkCLBFileIO_impl *)((btkCLBFileIO const *)arg1)->operator ->();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkCLBFileIO_impl, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_btkCLBFileIO(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkCLBFileIO *arg1 = (btkCLBFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_btkCLBFileIO",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkCLBFileIO, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_btkCLBFileIO" "', argument " "1"" of type '" "btkCLBFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkCLBFileIO * >(argp1);
  {
    try {
      delete arg1;
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkCLBFileIO_GetFileType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkCLBFileIO *arg1 = (btkCLBFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisitionFileIO_impl::FileType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkCLBFileIO_GetFileType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkCLBFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkCLBFileIO_GetFileType" "', argument " "1"" of type '" "btkCLBFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkCLBFileIO * >(argp1);
  {
    try {
      result = (btkAcquisitionFileIO_impl::FileType)(*arg1)->GetFileType();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkCLBFileIO_GetByteOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkCLBFileIO *arg1 = (btkCLBFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisitionFileIO_impl::ByteOrder result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkCLBFileIO_GetByteOrder",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkCLBFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkCLBFileIO_GetByteOrder" "', argument " "1"" of type '" "btkCLBFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkCLBFileIO * >(argp1);
  {
    try {
      result = (btkAcquisitionFileIO_impl::ByteOrder)(*arg1)->GetByteOrder();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkCLBFileIO_GetByteOrderAsString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkCLBFileIO *arg1 = (btkCLBFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkCLBFileIO_GetByteOrderAsString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkCLBFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkCLBFileIO_GetByteOrderAsString" "', argument " "1"" of type '" "btkCLBFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkCLBFileIO * >(argp1);
  {
    try {
      result = (*arg1)->GetByteOrderAsString();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkCLBFileIO_SetByteOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkCLBFileIO *arg1 = (btkCLBFileIO *) 0 ;
  btkAcquisitionFileIO_impl::ByteOrder arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkCLBFileIO_SetByteOrder",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkCLBFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkCLBFileIO_SetByteOrder" "', argument " "1"" of type '" "btkCLBFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkCLBFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkCLBFileIO_SetByteOrder" "', argument " "2"" of type '" "btkAcquisitionFileIO_impl::ByteOrder""'");
  } 
  arg2 = static_cast< btkAcquisitionFileIO_impl::ByteOrder >(val2);
  {
    try {
      (*arg1)->SetByteOrder(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkCLBFileIO_GetStorageFormat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkCLBFileIO *arg1 = (btkCLBFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisitionFileIO_impl::StorageFormat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkCLBFileIO_GetStorageFormat",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkCLBFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkCLBFileIO_GetStorageFormat" "', argument " "1"" of type '" "btkCLBFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkCLBFileIO * >(argp1);
  {
    try {
      result = (btkAcquisitionFileIO_impl::StorageFormat)(*arg1)->GetStorageFormat();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkCLBFileIO_GetStorageFormatAsString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkCLBFileIO *arg1 = (btkCLBFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkCLBFileIO_GetStorageFormatAsString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkCLBFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkCLBFileIO_GetStorageFormatAsString" "', argument " "1"" of type '" "btkCLBFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkCLBFileIO * >(argp1);
  {
    try {
      result = (*arg1)->GetStorageFormatAsString();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkCLBFileIO_SetStorageFormat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkCLBFileIO *arg1 = (btkCLBFileIO *) 0 ;
  btkAcquisitionFileIO_impl::StorageFormat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkCLBFileIO_SetStorageFormat",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkCLBFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkCLBFileIO_SetStorageFormat" "', argument " "1"" of type '" "btkCLBFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkCLBFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkCLBFileIO_SetStorageFormat" "', argument " "2"" of type '" "btkAcquisitionFileIO_impl::StorageFormat""'");
  } 
  arg2 = static_cast< btkAcquisitionFileIO_impl::StorageFormat >(val2);
  {
    try {
      (*arg1)->SetStorageFormat(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkCLBFileIO_GetInternalsUpdateOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkCLBFileIO *arg1 = (btkCLBFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkCLBFileIO_GetInternalsUpdateOptions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkCLBFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkCLBFileIO_GetInternalsUpdateOptions" "', argument " "1"" of type '" "btkCLBFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkCLBFileIO * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetInternalsUpdateOptions();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkCLBFileIO_SetInternalsUpdateOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkCLBFileIO *arg1 = (btkCLBFileIO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkCLBFileIO_SetInternalsUpdateOptions",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkCLBFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkCLBFileIO_SetInternalsUpdateOptions" "', argument " "1"" of type '" "btkCLBFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkCLBFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkCLBFileIO_SetInternalsUpdateOptions" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->SetInternalsUpdateOptions(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkCLBFileIO_HasInternalsUpdateOption(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkCLBFileIO *arg1 = (btkCLBFileIO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkCLBFileIO_HasInternalsUpdateOption",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkCLBFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkCLBFileIO_HasInternalsUpdateOption" "', argument " "1"" of type '" "btkCLBFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkCLBFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkCLBFileIO_HasInternalsUpdateOption" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (bool)(*arg1)->HasInternalsUpdateOption(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkCLBFileIO_CanReadFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkCLBFileIO *arg1 = (btkCLBFileIO *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkCLBFileIO_CanReadFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkCLBFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkCLBFileIO_CanReadFile" "', argument " "1"" of type '" "btkCLBFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkCLBFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkCLBFileIO_CanReadFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkCLBFileIO_CanReadFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)(*arg1)->CanReadFile((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkCLBFileIO_CanWriteFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkCLBFileIO *arg1 = (btkCLBFileIO *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkCLBFileIO_CanWriteFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkCLBFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkCLBFileIO_CanWriteFile" "', argument " "1"" of type '" "btkCLBFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkCLBFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkCLBFileIO_CanWriteFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkCLBFileIO_CanWriteFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)(*arg1)->CanWriteFile((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkCLBFileIO_Read(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkCLBFileIO *arg1 = (btkCLBFileIO *) 0 ;
  std::string *arg2 = 0 ;
  btkAcquisition arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkCLBFileIO_Read",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkCLBFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkCLBFileIO_Read" "', argument " "1"" of type '" "btkCLBFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkCLBFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkCLBFileIO_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkCLBFileIO_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkAcquisition,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkCLBFileIO_Read" "', argument " "3"" of type '" "btkAcquisition""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkCLBFileIO_Read" "', argument " "3"" of type '" "btkAcquisition""'");
    } else {
      btkAcquisition * temp = reinterpret_cast< btkAcquisition * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->Read((std::string const &)*arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkCLBFileIO_Write(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkCLBFileIO *arg1 = (btkCLBFileIO *) 0 ;
  std::string *arg2 = 0 ;
  btkAcquisition arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkCLBFileIO_Write",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkCLBFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkCLBFileIO_Write" "', argument " "1"" of type '" "btkCLBFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkCLBFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkCLBFileIO_Write" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkCLBFileIO_Write" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkAcquisition,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkCLBFileIO_Write" "', argument " "3"" of type '" "btkAcquisition""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkCLBFileIO_Write" "', argument " "3"" of type '" "btkAcquisition""'");
    } else {
      btkAcquisition * temp = reinterpret_cast< btkAcquisition * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->Write((std::string const &)*arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *btkCLBFileIO_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_btkCLBFileIO, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_btkDelsysEMGFileIO__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkDelsysEMGFileIO *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_btkDelsysEMGFileIO")) SWIG_fail;
  {
    try {
      result = (btkDelsysEMGFileIO *)new btkDelsysEMGFileIO();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkDelsysEMGFileIO, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkDelsysEMGFileIO__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< btkAcquisitionFileIO > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkDelsysEMGFileIO *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_btkDelsysEMGFileIO",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_btkAcquisitionFileIO,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkDelsysEMGFileIO" "', argument " "1"" of type '" "btkAcquisitionFileIO const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkDelsysEMGFileIO" "', argument " "1"" of type '" "btkAcquisitionFileIO const""'");
    } else {
      btkAcquisitionFileIO * temp = reinterpret_cast< btkAcquisitionFileIO * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try {
      result = (btkDelsysEMGFileIO *)new btkDelsysEMGFileIO(arg1);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkDelsysEMGFileIO, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkDelsysEMGFileIO(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_btkDelsysEMGFileIO__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_btkAcquisitionFileIO, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_btkDelsysEMGFileIO__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_btkDelsysEMGFileIO'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkDelsysEMGFileIO::btkDelsysEMGFileIO()\n"
    "    btkDelsysEMGFileIO::btkDelsysEMGFileIO(btkAcquisitionFileIO const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkDelsysEMGFileIO___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkDelsysEMGFileIO *arg1 = (btkDelsysEMGFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkDelsysEMGFileIO_impl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkDelsysEMGFileIO___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkDelsysEMGFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkDelsysEMGFileIO___deref__" "', argument " "1"" of type '" "btkDelsysEMGFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkDelsysEMGFileIO * >(argp1);
  {
    try {
      result = (btkDelsysEMGFileIO_impl *)((btkDelsysEMGFileIO const *)arg1)->operator ->();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkDelsysEMGFileIO_impl, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_btkDelsysEMGFileIO(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkDelsysEMGFileIO *arg1 = (btkDelsysEMGFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_btkDelsysEMGFileIO",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkDelsysEMGFileIO, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_btkDelsysEMGFileIO" "', argument " "1"" of type '" "btkDelsysEMGFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkDelsysEMGFileIO * >(argp1);
  {
    try {
      delete arg1;
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkDelsysEMGFileIO_GetFileType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkDelsysEMGFileIO *arg1 = (btkDelsysEMGFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisitionFileIO_impl::FileType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkDelsysEMGFileIO_GetFileType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkDelsysEMGFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkDelsysEMGFileIO_GetFileType" "', argument " "1"" of type '" "btkDelsysEMGFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkDelsysEMGFileIO * >(argp1);
  {
    try {
      result = (btkAcquisitionFileIO_impl::FileType)(*arg1)->GetFileType();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkDelsysEMGFileIO_GetByteOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkDelsysEMGFileIO *arg1 = (btkDelsysEMGFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisitionFileIO_impl::ByteOrder result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkDelsysEMGFileIO_GetByteOrder",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkDelsysEMGFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkDelsysEMGFileIO_GetByteOrder" "', argument " "1"" of type '" "btkDelsysEMGFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkDelsysEMGFileIO * >(argp1);
  {
    try {
      result = (btkAcquisitionFileIO_impl::ByteOrder)(*arg1)->GetByteOrder();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkDelsysEMGFileIO_GetByteOrderAsString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkDelsysEMGFileIO *arg1 = (btkDelsysEMGFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkDelsysEMGFileIO_GetByteOrderAsString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkDelsysEMGFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkDelsysEMGFileIO_GetByteOrderAsString" "', argument " "1"" of type '" "btkDelsysEMGFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkDelsysEMGFileIO * >(argp1);
  {
    try {
      result = (*arg1)->GetByteOrderAsString();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkDelsysEMGFileIO_SetByteOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkDelsysEMGFileIO *arg1 = (btkDelsysEMGFileIO *) 0 ;
  btkAcquisitionFileIO_impl::ByteOrder arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkDelsysEMGFileIO_SetByteOrder",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkDelsysEMGFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkDelsysEMGFileIO_SetByteOrder" "', argument " "1"" of type '" "btkDelsysEMGFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkDelsysEMGFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkDelsysEMGFileIO_SetByteOrder" "', argument " "2"" of type '" "btkAcquisitionFileIO_impl::ByteOrder""'");
  } 
  arg2 = static_cast< btkAcquisitionFileIO_impl::ByteOrder >(val2);
  {
    try {
      (*arg1)->SetByteOrder(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkDelsysEMGFileIO_GetStorageFormat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkDelsysEMGFileIO *arg1 = (btkDelsysEMGFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisitionFileIO_impl::StorageFormat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkDelsysEMGFileIO_GetStorageFormat",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkDelsysEMGFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkDelsysEMGFileIO_GetStorageFormat" "', argument " "1"" of type '" "btkDelsysEMGFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkDelsysEMGFileIO * >(argp1);
  {
    try {
      result = (btkAcquisitionFileIO_impl::StorageFormat)(*arg1)->GetStorageFormat();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkDelsysEMGFileIO_GetStorageFormatAsString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkDelsysEMGFileIO *arg1 = (btkDelsysEMGFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkDelsysEMGFileIO_GetStorageFormatAsString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkDelsysEMGFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkDelsysEMGFileIO_GetStorageFormatAsString" "', argument " "1"" of type '" "btkDelsysEMGFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkDelsysEMGFileIO * >(argp1);
  {
    try {
      result = (*arg1)->GetStorageFormatAsString();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkDelsysEMGFileIO_SetStorageFormat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkDelsysEMGFileIO *arg1 = (btkDelsysEMGFileIO *) 0 ;
  btkAcquisitionFileIO_impl::StorageFormat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkDelsysEMGFileIO_SetStorageFormat",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkDelsysEMGFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkDelsysEMGFileIO_SetStorageFormat" "', argument " "1"" of type '" "btkDelsysEMGFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkDelsysEMGFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkDelsysEMGFileIO_SetStorageFormat" "', argument " "2"" of type '" "btkAcquisitionFileIO_impl::StorageFormat""'");
  } 
  arg2 = static_cast< btkAcquisitionFileIO_impl::StorageFormat >(val2);
  {
    try {
      (*arg1)->SetStorageFormat(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkDelsysEMGFileIO_GetInternalsUpdateOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkDelsysEMGFileIO *arg1 = (btkDelsysEMGFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkDelsysEMGFileIO_GetInternalsUpdateOptions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkDelsysEMGFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkDelsysEMGFileIO_GetInternalsUpdateOptions" "', argument " "1"" of type '" "btkDelsysEMGFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkDelsysEMGFileIO * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetInternalsUpdateOptions();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkDelsysEMGFileIO_SetInternalsUpdateOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkDelsysEMGFileIO *arg1 = (btkDelsysEMGFileIO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkDelsysEMGFileIO_SetInternalsUpdateOptions",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkDelsysEMGFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkDelsysEMGFileIO_SetInternalsUpdateOptions" "', argument " "1"" of type '" "btkDelsysEMGFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkDelsysEMGFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkDelsysEMGFileIO_SetInternalsUpdateOptions" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->SetInternalsUpdateOptions(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkDelsysEMGFileIO_HasInternalsUpdateOption(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkDelsysEMGFileIO *arg1 = (btkDelsysEMGFileIO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkDelsysEMGFileIO_HasInternalsUpdateOption",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkDelsysEMGFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkDelsysEMGFileIO_HasInternalsUpdateOption" "', argument " "1"" of type '" "btkDelsysEMGFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkDelsysEMGFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkDelsysEMGFileIO_HasInternalsUpdateOption" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (bool)(*arg1)->HasInternalsUpdateOption(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkDelsysEMGFileIO_CanReadFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkDelsysEMGFileIO *arg1 = (btkDelsysEMGFileIO *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkDelsysEMGFileIO_CanReadFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkDelsysEMGFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkDelsysEMGFileIO_CanReadFile" "', argument " "1"" of type '" "btkDelsysEMGFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkDelsysEMGFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkDelsysEMGFileIO_CanReadFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkDelsysEMGFileIO_CanReadFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)(*arg1)->CanReadFile((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkDelsysEMGFileIO_CanWriteFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkDelsysEMGFileIO *arg1 = (btkDelsysEMGFileIO *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkDelsysEMGFileIO_CanWriteFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkDelsysEMGFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkDelsysEMGFileIO_CanWriteFile" "', argument " "1"" of type '" "btkDelsysEMGFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkDelsysEMGFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkDelsysEMGFileIO_CanWriteFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkDelsysEMGFileIO_CanWriteFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)(*arg1)->CanWriteFile((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkDelsysEMGFileIO_Read(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkDelsysEMGFileIO *arg1 = (btkDelsysEMGFileIO *) 0 ;
  std::string *arg2 = 0 ;
  btkAcquisition arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkDelsysEMGFileIO_Read",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkDelsysEMGFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkDelsysEMGFileIO_Read" "', argument " "1"" of type '" "btkDelsysEMGFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkDelsysEMGFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkDelsysEMGFileIO_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkDelsysEMGFileIO_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkAcquisition,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkDelsysEMGFileIO_Read" "', argument " "3"" of type '" "btkAcquisition""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkDelsysEMGFileIO_Read" "', argument " "3"" of type '" "btkAcquisition""'");
    } else {
      btkAcquisition * temp = reinterpret_cast< btkAcquisition * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->Read((std::string const &)*arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkDelsysEMGFileIO_Write(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkDelsysEMGFileIO *arg1 = (btkDelsysEMGFileIO *) 0 ;
  std::string *arg2 = 0 ;
  btkAcquisition arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkDelsysEMGFileIO_Write",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkDelsysEMGFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkDelsysEMGFileIO_Write" "', argument " "1"" of type '" "btkDelsysEMGFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkDelsysEMGFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkDelsysEMGFileIO_Write" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkDelsysEMGFileIO_Write" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkAcquisition,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkDelsysEMGFileIO_Write" "', argument " "3"" of type '" "btkAcquisition""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkDelsysEMGFileIO_Write" "', argument " "3"" of type '" "btkAcquisition""'");
    } else {
      btkAcquisition * temp = reinterpret_cast< btkAcquisition * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->Write((std::string const &)*arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *btkDelsysEMGFileIO_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_btkDelsysEMGFileIO, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_btkMDFFileIO__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMDFFileIO *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_btkMDFFileIO")) SWIG_fail;
  {
    try {
      result = (btkMDFFileIO *)new btkMDFFileIO();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkMDFFileIO, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkMDFFileIO__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< btkAcquisitionFileIO > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkMDFFileIO *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_btkMDFFileIO",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_btkAcquisitionFileIO,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkMDFFileIO" "', argument " "1"" of type '" "btkAcquisitionFileIO const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMDFFileIO" "', argument " "1"" of type '" "btkAcquisitionFileIO const""'");
    } else {
      btkAcquisitionFileIO * temp = reinterpret_cast< btkAcquisitionFileIO * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try {
      result = (btkMDFFileIO *)new btkMDFFileIO(arg1);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkMDFFileIO, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkMDFFileIO(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_btkMDFFileIO__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_btkAcquisitionFileIO, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_btkMDFFileIO__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_btkMDFFileIO'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkMDFFileIO::btkMDFFileIO()\n"
    "    btkMDFFileIO::btkMDFFileIO(btkAcquisitionFileIO const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkMDFFileIO___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMDFFileIO *arg1 = (btkMDFFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkMDFFileIO_impl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkMDFFileIO___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMDFFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMDFFileIO___deref__" "', argument " "1"" of type '" "btkMDFFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkMDFFileIO * >(argp1);
  {
    try {
      result = (btkMDFFileIO_impl *)((btkMDFFileIO const *)arg1)->operator ->();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkMDFFileIO_impl, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_btkMDFFileIO(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMDFFileIO *arg1 = (btkMDFFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_btkMDFFileIO",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMDFFileIO, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_btkMDFFileIO" "', argument " "1"" of type '" "btkMDFFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkMDFFileIO * >(argp1);
  {
    try {
      delete arg1;
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMDFFileIO_GetFileType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMDFFileIO *arg1 = (btkMDFFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisitionFileIO_impl::FileType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkMDFFileIO_GetFileType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMDFFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMDFFileIO_GetFileType" "', argument " "1"" of type '" "btkMDFFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkMDFFileIO * >(argp1);
  {
    try {
      result = (btkAcquisitionFileIO_impl::FileType)(*arg1)->GetFileType();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMDFFileIO_GetByteOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMDFFileIO *arg1 = (btkMDFFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisitionFileIO_impl::ByteOrder result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkMDFFileIO_GetByteOrder",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMDFFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMDFFileIO_GetByteOrder" "', argument " "1"" of type '" "btkMDFFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkMDFFileIO * >(argp1);
  {
    try {
      result = (btkAcquisitionFileIO_impl::ByteOrder)(*arg1)->GetByteOrder();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMDFFileIO_GetByteOrderAsString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMDFFileIO *arg1 = (btkMDFFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkMDFFileIO_GetByteOrderAsString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMDFFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMDFFileIO_GetByteOrderAsString" "', argument " "1"" of type '" "btkMDFFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkMDFFileIO * >(argp1);
  {
    try {
      result = (*arg1)->GetByteOrderAsString();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMDFFileIO_SetByteOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMDFFileIO *arg1 = (btkMDFFileIO *) 0 ;
  btkAcquisitionFileIO_impl::ByteOrder arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkMDFFileIO_SetByteOrder",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMDFFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMDFFileIO_SetByteOrder" "', argument " "1"" of type '" "btkMDFFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkMDFFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkMDFFileIO_SetByteOrder" "', argument " "2"" of type '" "btkAcquisitionFileIO_impl::ByteOrder""'");
  } 
  arg2 = static_cast< btkAcquisitionFileIO_impl::ByteOrder >(val2);
  {
    try {
      (*arg1)->SetByteOrder(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMDFFileIO_GetStorageFormat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMDFFileIO *arg1 = (btkMDFFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisitionFileIO_impl::StorageFormat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkMDFFileIO_GetStorageFormat",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMDFFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMDFFileIO_GetStorageFormat" "', argument " "1"" of type '" "btkMDFFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkMDFFileIO * >(argp1);
  {
    try {
      result = (btkAcquisitionFileIO_impl::StorageFormat)(*arg1)->GetStorageFormat();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMDFFileIO_GetStorageFormatAsString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMDFFileIO *arg1 = (btkMDFFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkMDFFileIO_GetStorageFormatAsString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMDFFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMDFFileIO_GetStorageFormatAsString" "', argument " "1"" of type '" "btkMDFFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkMDFFileIO * >(argp1);
  {
    try {
      result = (*arg1)->GetStorageFormatAsString();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMDFFileIO_SetStorageFormat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMDFFileIO *arg1 = (btkMDFFileIO *) 0 ;
  btkAcquisitionFileIO_impl::StorageFormat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkMDFFileIO_SetStorageFormat",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMDFFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMDFFileIO_SetStorageFormat" "', argument " "1"" of type '" "btkMDFFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkMDFFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkMDFFileIO_SetStorageFormat" "', argument " "2"" of type '" "btkAcquisitionFileIO_impl::StorageFormat""'");
  } 
  arg2 = static_cast< btkAcquisitionFileIO_impl::StorageFormat >(val2);
  {
    try {
      (*arg1)->SetStorageFormat(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMDFFileIO_GetInternalsUpdateOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMDFFileIO *arg1 = (btkMDFFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkMDFFileIO_GetInternalsUpdateOptions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMDFFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMDFFileIO_GetInternalsUpdateOptions" "', argument " "1"" of type '" "btkMDFFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkMDFFileIO * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetInternalsUpdateOptions();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMDFFileIO_SetInternalsUpdateOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMDFFileIO *arg1 = (btkMDFFileIO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkMDFFileIO_SetInternalsUpdateOptions",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMDFFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMDFFileIO_SetInternalsUpdateOptions" "', argument " "1"" of type '" "btkMDFFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkMDFFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkMDFFileIO_SetInternalsUpdateOptions" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->SetInternalsUpdateOptions(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMDFFileIO_HasInternalsUpdateOption(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMDFFileIO *arg1 = (btkMDFFileIO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkMDFFileIO_HasInternalsUpdateOption",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMDFFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMDFFileIO_HasInternalsUpdateOption" "', argument " "1"" of type '" "btkMDFFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkMDFFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkMDFFileIO_HasInternalsUpdateOption" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (bool)(*arg1)->HasInternalsUpdateOption(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMDFFileIO_CanReadFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMDFFileIO *arg1 = (btkMDFFileIO *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkMDFFileIO_CanReadFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMDFFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMDFFileIO_CanReadFile" "', argument " "1"" of type '" "btkMDFFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkMDFFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkMDFFileIO_CanReadFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMDFFileIO_CanReadFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)(*arg1)->CanReadFile((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMDFFileIO_CanWriteFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMDFFileIO *arg1 = (btkMDFFileIO *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkMDFFileIO_CanWriteFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMDFFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMDFFileIO_CanWriteFile" "', argument " "1"" of type '" "btkMDFFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkMDFFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkMDFFileIO_CanWriteFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMDFFileIO_CanWriteFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)(*arg1)->CanWriteFile((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMDFFileIO_Read(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMDFFileIO *arg1 = (btkMDFFileIO *) 0 ;
  std::string *arg2 = 0 ;
  btkAcquisition arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkMDFFileIO_Read",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMDFFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMDFFileIO_Read" "', argument " "1"" of type '" "btkMDFFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkMDFFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkMDFFileIO_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMDFFileIO_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkAcquisition,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkMDFFileIO_Read" "', argument " "3"" of type '" "btkAcquisition""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMDFFileIO_Read" "', argument " "3"" of type '" "btkAcquisition""'");
    } else {
      btkAcquisition * temp = reinterpret_cast< btkAcquisition * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->Read((std::string const &)*arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMDFFileIO_Write(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMDFFileIO *arg1 = (btkMDFFileIO *) 0 ;
  std::string *arg2 = 0 ;
  btkAcquisition arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkMDFFileIO_Write",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMDFFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMDFFileIO_Write" "', argument " "1"" of type '" "btkMDFFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkMDFFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkMDFFileIO_Write" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMDFFileIO_Write" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkAcquisition,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkMDFFileIO_Write" "', argument " "3"" of type '" "btkAcquisition""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMDFFileIO_Write" "', argument " "3"" of type '" "btkAcquisition""'");
    } else {
      btkAcquisition * temp = reinterpret_cast< btkAcquisition * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->Write((std::string const &)*arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *btkMDFFileIO_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_btkMDFFileIO, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_btkEMFFileIO__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEMFFileIO *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_btkEMFFileIO")) SWIG_fail;
  {
    try {
      result = (btkEMFFileIO *)new btkEMFFileIO();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkEMFFileIO, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkEMFFileIO__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< btkAcquisitionFileIO > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkEMFFileIO *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_btkEMFFileIO",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_btkAcquisitionFileIO,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkEMFFileIO" "', argument " "1"" of type '" "btkAcquisitionFileIO const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkEMFFileIO" "', argument " "1"" of type '" "btkAcquisitionFileIO const""'");
    } else {
      btkAcquisitionFileIO * temp = reinterpret_cast< btkAcquisitionFileIO * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try {
      result = (btkEMFFileIO *)new btkEMFFileIO(arg1);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkEMFFileIO, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkEMFFileIO(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_btkEMFFileIO__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_btkAcquisitionFileIO, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_btkEMFFileIO__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_btkEMFFileIO'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkEMFFileIO::btkEMFFileIO()\n"
    "    btkEMFFileIO::btkEMFFileIO(btkAcquisitionFileIO const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkEMFFileIO___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEMFFileIO *arg1 = (btkEMFFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkEMFFileIO_impl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkEMFFileIO___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEMFFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEMFFileIO___deref__" "', argument " "1"" of type '" "btkEMFFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkEMFFileIO * >(argp1);
  {
    try {
      result = (btkEMFFileIO_impl *)((btkEMFFileIO const *)arg1)->operator ->();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkEMFFileIO_impl, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_btkEMFFileIO(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEMFFileIO *arg1 = (btkEMFFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_btkEMFFileIO",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEMFFileIO, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_btkEMFFileIO" "', argument " "1"" of type '" "btkEMFFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkEMFFileIO * >(argp1);
  {
    try {
      delete arg1;
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEMFFileIO_GetFileType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEMFFileIO *arg1 = (btkEMFFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisitionFileIO_impl::FileType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkEMFFileIO_GetFileType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEMFFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEMFFileIO_GetFileType" "', argument " "1"" of type '" "btkEMFFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkEMFFileIO * >(argp1);
  {
    try {
      result = (btkAcquisitionFileIO_impl::FileType)(*arg1)->GetFileType();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEMFFileIO_GetByteOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEMFFileIO *arg1 = (btkEMFFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisitionFileIO_impl::ByteOrder result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkEMFFileIO_GetByteOrder",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEMFFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEMFFileIO_GetByteOrder" "', argument " "1"" of type '" "btkEMFFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkEMFFileIO * >(argp1);
  {
    try {
      result = (btkAcquisitionFileIO_impl::ByteOrder)(*arg1)->GetByteOrder();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEMFFileIO_GetByteOrderAsString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEMFFileIO *arg1 = (btkEMFFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkEMFFileIO_GetByteOrderAsString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEMFFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEMFFileIO_GetByteOrderAsString" "', argument " "1"" of type '" "btkEMFFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkEMFFileIO * >(argp1);
  {
    try {
      result = (*arg1)->GetByteOrderAsString();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEMFFileIO_SetByteOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEMFFileIO *arg1 = (btkEMFFileIO *) 0 ;
  btkAcquisitionFileIO_impl::ByteOrder arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkEMFFileIO_SetByteOrder",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEMFFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEMFFileIO_SetByteOrder" "', argument " "1"" of type '" "btkEMFFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkEMFFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkEMFFileIO_SetByteOrder" "', argument " "2"" of type '" "btkAcquisitionFileIO_impl::ByteOrder""'");
  } 
  arg2 = static_cast< btkAcquisitionFileIO_impl::ByteOrder >(val2);
  {
    try {
      (*arg1)->SetByteOrder(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEMFFileIO_GetStorageFormat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEMFFileIO *arg1 = (btkEMFFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisitionFileIO_impl::StorageFormat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkEMFFileIO_GetStorageFormat",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEMFFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEMFFileIO_GetStorageFormat" "', argument " "1"" of type '" "btkEMFFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkEMFFileIO * >(argp1);
  {
    try {
      result = (btkAcquisitionFileIO_impl::StorageFormat)(*arg1)->GetStorageFormat();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEMFFileIO_GetStorageFormatAsString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEMFFileIO *arg1 = (btkEMFFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkEMFFileIO_GetStorageFormatAsString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEMFFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEMFFileIO_GetStorageFormatAsString" "', argument " "1"" of type '" "btkEMFFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkEMFFileIO * >(argp1);
  {
    try {
      result = (*arg1)->GetStorageFormatAsString();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEMFFileIO_SetStorageFormat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEMFFileIO *arg1 = (btkEMFFileIO *) 0 ;
  btkAcquisitionFileIO_impl::StorageFormat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkEMFFileIO_SetStorageFormat",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEMFFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEMFFileIO_SetStorageFormat" "', argument " "1"" of type '" "btkEMFFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkEMFFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkEMFFileIO_SetStorageFormat" "', argument " "2"" of type '" "btkAcquisitionFileIO_impl::StorageFormat""'");
  } 
  arg2 = static_cast< btkAcquisitionFileIO_impl::StorageFormat >(val2);
  {
    try {
      (*arg1)->SetStorageFormat(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEMFFileIO_GetInternalsUpdateOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEMFFileIO *arg1 = (btkEMFFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkEMFFileIO_GetInternalsUpdateOptions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEMFFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEMFFileIO_GetInternalsUpdateOptions" "', argument " "1"" of type '" "btkEMFFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkEMFFileIO * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetInternalsUpdateOptions();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEMFFileIO_SetInternalsUpdateOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEMFFileIO *arg1 = (btkEMFFileIO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkEMFFileIO_SetInternalsUpdateOptions",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEMFFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEMFFileIO_SetInternalsUpdateOptions" "', argument " "1"" of type '" "btkEMFFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkEMFFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkEMFFileIO_SetInternalsUpdateOptions" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->SetInternalsUpdateOptions(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEMFFileIO_HasInternalsUpdateOption(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEMFFileIO *arg1 = (btkEMFFileIO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkEMFFileIO_HasInternalsUpdateOption",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEMFFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEMFFileIO_HasInternalsUpdateOption" "', argument " "1"" of type '" "btkEMFFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkEMFFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkEMFFileIO_HasInternalsUpdateOption" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (bool)(*arg1)->HasInternalsUpdateOption(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEMFFileIO_CanReadFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEMFFileIO *arg1 = (btkEMFFileIO *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkEMFFileIO_CanReadFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEMFFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEMFFileIO_CanReadFile" "', argument " "1"" of type '" "btkEMFFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkEMFFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkEMFFileIO_CanReadFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkEMFFileIO_CanReadFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)(*arg1)->CanReadFile((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEMFFileIO_CanWriteFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEMFFileIO *arg1 = (btkEMFFileIO *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkEMFFileIO_CanWriteFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEMFFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEMFFileIO_CanWriteFile" "', argument " "1"" of type '" "btkEMFFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkEMFFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkEMFFileIO_CanWriteFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkEMFFileIO_CanWriteFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)(*arg1)->CanWriteFile((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEMFFileIO_Read(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEMFFileIO *arg1 = (btkEMFFileIO *) 0 ;
  std::string *arg2 = 0 ;
  btkAcquisition arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkEMFFileIO_Read",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEMFFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEMFFileIO_Read" "', argument " "1"" of type '" "btkEMFFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkEMFFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkEMFFileIO_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkEMFFileIO_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkAcquisition,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkEMFFileIO_Read" "', argument " "3"" of type '" "btkAcquisition""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkEMFFileIO_Read" "', argument " "3"" of type '" "btkAcquisition""'");
    } else {
      btkAcquisition * temp = reinterpret_cast< btkAcquisition * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->Read((std::string const &)*arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEMFFileIO_Write(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEMFFileIO *arg1 = (btkEMFFileIO *) 0 ;
  std::string *arg2 = 0 ;
  btkAcquisition arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkEMFFileIO_Write",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEMFFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEMFFileIO_Write" "', argument " "1"" of type '" "btkEMFFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkEMFFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkEMFFileIO_Write" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkEMFFileIO_Write" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkAcquisition,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkEMFFileIO_Write" "', argument " "3"" of type '" "btkAcquisition""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkEMFFileIO_Write" "', argument " "3"" of type '" "btkAcquisition""'");
    } else {
      btkAcquisition * temp = reinterpret_cast< btkAcquisition * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->Write((std::string const &)*arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *btkEMFFileIO_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_btkEMFFileIO, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_btkEMxFileIO__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEMxFileIO *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_btkEMxFileIO")) SWIG_fail;
  {
    try {
      result = (btkEMxFileIO *)new btkEMxFileIO();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkEMxFileIO, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkEMxFileIO__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< btkAcquisitionFileIO > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkEMxFileIO *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_btkEMxFileIO",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_btkAcquisitionFileIO,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkEMxFileIO" "', argument " "1"" of type '" "btkAcquisitionFileIO const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkEMxFileIO" "', argument " "1"" of type '" "btkAcquisitionFileIO const""'");
    } else {
      btkAcquisitionFileIO * temp = reinterpret_cast< btkAcquisitionFileIO * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try {
      result = (btkEMxFileIO *)new btkEMxFileIO(arg1);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkEMxFileIO, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkEMxFileIO(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_btkEMxFileIO__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_btkAcquisitionFileIO, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_btkEMxFileIO__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_btkEMxFileIO'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkEMxFileIO::btkEMxFileIO()\n"
    "    btkEMxFileIO::btkEMxFileIO(btkAcquisitionFileIO const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkEMxFileIO___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEMxFileIO *arg1 = (btkEMxFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkEMxFileIO_impl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkEMxFileIO___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEMxFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEMxFileIO___deref__" "', argument " "1"" of type '" "btkEMxFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkEMxFileIO * >(argp1);
  {
    try {
      result = (btkEMxFileIO_impl *)((btkEMxFileIO const *)arg1)->operator ->();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkEMxFileIO_impl, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_btkEMxFileIO(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEMxFileIO *arg1 = (btkEMxFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_btkEMxFileIO",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEMxFileIO, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_btkEMxFileIO" "', argument " "1"" of type '" "btkEMxFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkEMxFileIO * >(argp1);
  {
    try {
      delete arg1;
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEMxFileIO_GetFileType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEMxFileIO *arg1 = (btkEMxFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisitionFileIO_impl::FileType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkEMxFileIO_GetFileType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEMxFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEMxFileIO_GetFileType" "', argument " "1"" of type '" "btkEMxFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkEMxFileIO * >(argp1);
  {
    try {
      result = (btkAcquisitionFileIO_impl::FileType)(*arg1)->GetFileType();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEMxFileIO_GetByteOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEMxFileIO *arg1 = (btkEMxFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisitionFileIO_impl::ByteOrder result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkEMxFileIO_GetByteOrder",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEMxFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEMxFileIO_GetByteOrder" "', argument " "1"" of type '" "btkEMxFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkEMxFileIO * >(argp1);
  {
    try {
      result = (btkAcquisitionFileIO_impl::ByteOrder)(*arg1)->GetByteOrder();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEMxFileIO_GetByteOrderAsString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEMxFileIO *arg1 = (btkEMxFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkEMxFileIO_GetByteOrderAsString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEMxFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEMxFileIO_GetByteOrderAsString" "', argument " "1"" of type '" "btkEMxFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkEMxFileIO * >(argp1);
  {
    try {
      result = (*arg1)->GetByteOrderAsString();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEMxFileIO_SetByteOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEMxFileIO *arg1 = (btkEMxFileIO *) 0 ;
  btkAcquisitionFileIO_impl::ByteOrder arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkEMxFileIO_SetByteOrder",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEMxFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEMxFileIO_SetByteOrder" "', argument " "1"" of type '" "btkEMxFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkEMxFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkEMxFileIO_SetByteOrder" "', argument " "2"" of type '" "btkAcquisitionFileIO_impl::ByteOrder""'");
  } 
  arg2 = static_cast< btkAcquisitionFileIO_impl::ByteOrder >(val2);
  {
    try {
      (*arg1)->SetByteOrder(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEMxFileIO_GetStorageFormat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEMxFileIO *arg1 = (btkEMxFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisitionFileIO_impl::StorageFormat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkEMxFileIO_GetStorageFormat",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEMxFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEMxFileIO_GetStorageFormat" "', argument " "1"" of type '" "btkEMxFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkEMxFileIO * >(argp1);
  {
    try {
      result = (btkAcquisitionFileIO_impl::StorageFormat)(*arg1)->GetStorageFormat();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEMxFileIO_GetStorageFormatAsString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEMxFileIO *arg1 = (btkEMxFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkEMxFileIO_GetStorageFormatAsString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEMxFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEMxFileIO_GetStorageFormatAsString" "', argument " "1"" of type '" "btkEMxFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkEMxFileIO * >(argp1);
  {
    try {
      result = (*arg1)->GetStorageFormatAsString();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEMxFileIO_SetStorageFormat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEMxFileIO *arg1 = (btkEMxFileIO *) 0 ;
  btkAcquisitionFileIO_impl::StorageFormat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkEMxFileIO_SetStorageFormat",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEMxFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEMxFileIO_SetStorageFormat" "', argument " "1"" of type '" "btkEMxFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkEMxFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkEMxFileIO_SetStorageFormat" "', argument " "2"" of type '" "btkAcquisitionFileIO_impl::StorageFormat""'");
  } 
  arg2 = static_cast< btkAcquisitionFileIO_impl::StorageFormat >(val2);
  {
    try {
      (*arg1)->SetStorageFormat(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEMxFileIO_GetInternalsUpdateOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEMxFileIO *arg1 = (btkEMxFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkEMxFileIO_GetInternalsUpdateOptions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEMxFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEMxFileIO_GetInternalsUpdateOptions" "', argument " "1"" of type '" "btkEMxFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkEMxFileIO * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetInternalsUpdateOptions();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEMxFileIO_SetInternalsUpdateOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEMxFileIO *arg1 = (btkEMxFileIO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkEMxFileIO_SetInternalsUpdateOptions",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEMxFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEMxFileIO_SetInternalsUpdateOptions" "', argument " "1"" of type '" "btkEMxFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkEMxFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkEMxFileIO_SetInternalsUpdateOptions" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->SetInternalsUpdateOptions(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEMxFileIO_HasInternalsUpdateOption(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEMxFileIO *arg1 = (btkEMxFileIO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkEMxFileIO_HasInternalsUpdateOption",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEMxFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEMxFileIO_HasInternalsUpdateOption" "', argument " "1"" of type '" "btkEMxFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkEMxFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkEMxFileIO_HasInternalsUpdateOption" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (bool)(*arg1)->HasInternalsUpdateOption(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEMxFileIO_CanReadFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEMxFileIO *arg1 = (btkEMxFileIO *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkEMxFileIO_CanReadFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEMxFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEMxFileIO_CanReadFile" "', argument " "1"" of type '" "btkEMxFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkEMxFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkEMxFileIO_CanReadFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkEMxFileIO_CanReadFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)(*arg1)->CanReadFile((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEMxFileIO_CanWriteFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEMxFileIO *arg1 = (btkEMxFileIO *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkEMxFileIO_CanWriteFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEMxFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEMxFileIO_CanWriteFile" "', argument " "1"" of type '" "btkEMxFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkEMxFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkEMxFileIO_CanWriteFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkEMxFileIO_CanWriteFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)(*arg1)->CanWriteFile((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEMxFileIO_Read(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEMxFileIO *arg1 = (btkEMxFileIO *) 0 ;
  std::string *arg2 = 0 ;
  btkAcquisition arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkEMxFileIO_Read",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEMxFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEMxFileIO_Read" "', argument " "1"" of type '" "btkEMxFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkEMxFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkEMxFileIO_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkEMxFileIO_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkAcquisition,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkEMxFileIO_Read" "', argument " "3"" of type '" "btkAcquisition""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkEMxFileIO_Read" "', argument " "3"" of type '" "btkAcquisition""'");
    } else {
      btkAcquisition * temp = reinterpret_cast< btkAcquisition * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->Read((std::string const &)*arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkEMxFileIO_Write(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkEMxFileIO *arg1 = (btkEMxFileIO *) 0 ;
  std::string *arg2 = 0 ;
  btkAcquisition arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkEMxFileIO_Write",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkEMxFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkEMxFileIO_Write" "', argument " "1"" of type '" "btkEMxFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkEMxFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkEMxFileIO_Write" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkEMxFileIO_Write" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkAcquisition,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkEMxFileIO_Write" "', argument " "3"" of type '" "btkAcquisition""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkEMxFileIO_Write" "', argument " "3"" of type '" "btkAcquisition""'");
    } else {
      btkAcquisition * temp = reinterpret_cast< btkAcquisition * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->Write((std::string const &)*arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *btkEMxFileIO_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_btkEMxFileIO, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_btkGRxFileIO__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkGRxFileIO *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_btkGRxFileIO")) SWIG_fail;
  {
    try {
      result = (btkGRxFileIO *)new btkGRxFileIO();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkGRxFileIO, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkGRxFileIO__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< btkAcquisitionFileIO > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkGRxFileIO *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_btkGRxFileIO",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_btkAcquisitionFileIO,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkGRxFileIO" "', argument " "1"" of type '" "btkAcquisitionFileIO const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkGRxFileIO" "', argument " "1"" of type '" "btkAcquisitionFileIO const""'");
    } else {
      btkAcquisitionFileIO * temp = reinterpret_cast< btkAcquisitionFileIO * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try {
      result = (btkGRxFileIO *)new btkGRxFileIO(arg1);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkGRxFileIO, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkGRxFileIO(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_btkGRxFileIO__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_btkAcquisitionFileIO, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_btkGRxFileIO__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_btkGRxFileIO'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkGRxFileIO::btkGRxFileIO()\n"
    "    btkGRxFileIO::btkGRxFileIO(btkAcquisitionFileIO const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkGRxFileIO___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkGRxFileIO *arg1 = (btkGRxFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkGRxFileIO_impl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkGRxFileIO___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkGRxFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkGRxFileIO___deref__" "', argument " "1"" of type '" "btkGRxFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkGRxFileIO * >(argp1);
  {
    try {
      result = (btkGRxFileIO_impl *)((btkGRxFileIO const *)arg1)->operator ->();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkGRxFileIO_impl, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_btkGRxFileIO(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkGRxFileIO *arg1 = (btkGRxFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_btkGRxFileIO",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkGRxFileIO, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_btkGRxFileIO" "', argument " "1"" of type '" "btkGRxFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkGRxFileIO * >(argp1);
  {
    try {
      delete arg1;
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkGRxFileIO_GetFileType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkGRxFileIO *arg1 = (btkGRxFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisitionFileIO_impl::FileType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkGRxFileIO_GetFileType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkGRxFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkGRxFileIO_GetFileType" "', argument " "1"" of type '" "btkGRxFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkGRxFileIO * >(argp1);
  {
    try {
      result = (btkAcquisitionFileIO_impl::FileType)(*arg1)->GetFileType();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkGRxFileIO_GetByteOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkGRxFileIO *arg1 = (btkGRxFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisitionFileIO_impl::ByteOrder result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkGRxFileIO_GetByteOrder",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkGRxFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkGRxFileIO_GetByteOrder" "', argument " "1"" of type '" "btkGRxFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkGRxFileIO * >(argp1);
  {
    try {
      result = (btkAcquisitionFileIO_impl::ByteOrder)(*arg1)->GetByteOrder();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkGRxFileIO_GetByteOrderAsString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkGRxFileIO *arg1 = (btkGRxFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkGRxFileIO_GetByteOrderAsString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkGRxFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkGRxFileIO_GetByteOrderAsString" "', argument " "1"" of type '" "btkGRxFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkGRxFileIO * >(argp1);
  {
    try {
      result = (*arg1)->GetByteOrderAsString();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkGRxFileIO_SetByteOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkGRxFileIO *arg1 = (btkGRxFileIO *) 0 ;
  btkAcquisitionFileIO_impl::ByteOrder arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkGRxFileIO_SetByteOrder",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkGRxFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkGRxFileIO_SetByteOrder" "', argument " "1"" of type '" "btkGRxFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkGRxFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkGRxFileIO_SetByteOrder" "', argument " "2"" of type '" "btkAcquisitionFileIO_impl::ByteOrder""'");
  } 
  arg2 = static_cast< btkAcquisitionFileIO_impl::ByteOrder >(val2);
  {
    try {
      (*arg1)->SetByteOrder(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkGRxFileIO_GetStorageFormat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkGRxFileIO *arg1 = (btkGRxFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisitionFileIO_impl::StorageFormat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkGRxFileIO_GetStorageFormat",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkGRxFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkGRxFileIO_GetStorageFormat" "', argument " "1"" of type '" "btkGRxFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkGRxFileIO * >(argp1);
  {
    try {
      result = (btkAcquisitionFileIO_impl::StorageFormat)(*arg1)->GetStorageFormat();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkGRxFileIO_GetStorageFormatAsString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkGRxFileIO *arg1 = (btkGRxFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkGRxFileIO_GetStorageFormatAsString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkGRxFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkGRxFileIO_GetStorageFormatAsString" "', argument " "1"" of type '" "btkGRxFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkGRxFileIO * >(argp1);
  {
    try {
      result = (*arg1)->GetStorageFormatAsString();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkGRxFileIO_SetStorageFormat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkGRxFileIO *arg1 = (btkGRxFileIO *) 0 ;
  btkAcquisitionFileIO_impl::StorageFormat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkGRxFileIO_SetStorageFormat",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkGRxFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkGRxFileIO_SetStorageFormat" "', argument " "1"" of type '" "btkGRxFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkGRxFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkGRxFileIO_SetStorageFormat" "', argument " "2"" of type '" "btkAcquisitionFileIO_impl::StorageFormat""'");
  } 
  arg2 = static_cast< btkAcquisitionFileIO_impl::StorageFormat >(val2);
  {
    try {
      (*arg1)->SetStorageFormat(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkGRxFileIO_GetInternalsUpdateOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkGRxFileIO *arg1 = (btkGRxFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkGRxFileIO_GetInternalsUpdateOptions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkGRxFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkGRxFileIO_GetInternalsUpdateOptions" "', argument " "1"" of type '" "btkGRxFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkGRxFileIO * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetInternalsUpdateOptions();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkGRxFileIO_SetInternalsUpdateOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkGRxFileIO *arg1 = (btkGRxFileIO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkGRxFileIO_SetInternalsUpdateOptions",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkGRxFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkGRxFileIO_SetInternalsUpdateOptions" "', argument " "1"" of type '" "btkGRxFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkGRxFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkGRxFileIO_SetInternalsUpdateOptions" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->SetInternalsUpdateOptions(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkGRxFileIO_HasInternalsUpdateOption(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkGRxFileIO *arg1 = (btkGRxFileIO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkGRxFileIO_HasInternalsUpdateOption",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkGRxFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkGRxFileIO_HasInternalsUpdateOption" "', argument " "1"" of type '" "btkGRxFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkGRxFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkGRxFileIO_HasInternalsUpdateOption" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (bool)(*arg1)->HasInternalsUpdateOption(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkGRxFileIO_CanReadFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkGRxFileIO *arg1 = (btkGRxFileIO *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkGRxFileIO_CanReadFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkGRxFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkGRxFileIO_CanReadFile" "', argument " "1"" of type '" "btkGRxFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkGRxFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkGRxFileIO_CanReadFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkGRxFileIO_CanReadFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)(*arg1)->CanReadFile((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkGRxFileIO_CanWriteFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkGRxFileIO *arg1 = (btkGRxFileIO *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkGRxFileIO_CanWriteFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkGRxFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkGRxFileIO_CanWriteFile" "', argument " "1"" of type '" "btkGRxFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkGRxFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkGRxFileIO_CanWriteFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkGRxFileIO_CanWriteFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)(*arg1)->CanWriteFile((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkGRxFileIO_Read(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkGRxFileIO *arg1 = (btkGRxFileIO *) 0 ;
  std::string *arg2 = 0 ;
  btkAcquisition arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkGRxFileIO_Read",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkGRxFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkGRxFileIO_Read" "', argument " "1"" of type '" "btkGRxFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkGRxFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkGRxFileIO_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkGRxFileIO_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkAcquisition,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkGRxFileIO_Read" "', argument " "3"" of type '" "btkAcquisition""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkGRxFileIO_Read" "', argument " "3"" of type '" "btkAcquisition""'");
    } else {
      btkAcquisition * temp = reinterpret_cast< btkAcquisition * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->Read((std::string const &)*arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkGRxFileIO_Write(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkGRxFileIO *arg1 = (btkGRxFileIO *) 0 ;
  std::string *arg2 = 0 ;
  btkAcquisition arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkGRxFileIO_Write",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkGRxFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkGRxFileIO_Write" "', argument " "1"" of type '" "btkGRxFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkGRxFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkGRxFileIO_Write" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkGRxFileIO_Write" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkAcquisition,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkGRxFileIO_Write" "', argument " "3"" of type '" "btkAcquisition""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkGRxFileIO_Write" "', argument " "3"" of type '" "btkAcquisition""'");
    } else {
      btkAcquisition * temp = reinterpret_cast< btkAcquisition * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->Write((std::string const &)*arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *btkGRxFileIO_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_btkGRxFileIO, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_btkMOMFileIO__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMOMFileIO *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_btkMOMFileIO")) SWIG_fail;
  {
    try {
      result = (btkMOMFileIO *)new btkMOMFileIO();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkMOMFileIO, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkMOMFileIO__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< btkAcquisitionFileIO > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkMOMFileIO *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_btkMOMFileIO",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_btkAcquisitionFileIO,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkMOMFileIO" "', argument " "1"" of type '" "btkAcquisitionFileIO const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkMOMFileIO" "', argument " "1"" of type '" "btkAcquisitionFileIO const""'");
    } else {
      btkAcquisitionFileIO * temp = reinterpret_cast< btkAcquisitionFileIO * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try {
      result = (btkMOMFileIO *)new btkMOMFileIO(arg1);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkMOMFileIO, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkMOMFileIO(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_btkMOMFileIO__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_btkAcquisitionFileIO, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_btkMOMFileIO__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_btkMOMFileIO'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkMOMFileIO::btkMOMFileIO()\n"
    "    btkMOMFileIO::btkMOMFileIO(btkAcquisitionFileIO const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkMOMFileIO___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMOMFileIO *arg1 = (btkMOMFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkMOMFileIO_impl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkMOMFileIO___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMOMFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMOMFileIO___deref__" "', argument " "1"" of type '" "btkMOMFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkMOMFileIO * >(argp1);
  {
    try {
      result = (btkMOMFileIO_impl *)((btkMOMFileIO const *)arg1)->operator ->();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkMOMFileIO_impl, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_btkMOMFileIO(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMOMFileIO *arg1 = (btkMOMFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_btkMOMFileIO",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMOMFileIO, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_btkMOMFileIO" "', argument " "1"" of type '" "btkMOMFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkMOMFileIO * >(argp1);
  {
    try {
      delete arg1;
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMOMFileIO_GetFileType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMOMFileIO *arg1 = (btkMOMFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisitionFileIO_impl::FileType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkMOMFileIO_GetFileType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMOMFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMOMFileIO_GetFileType" "', argument " "1"" of type '" "btkMOMFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkMOMFileIO * >(argp1);
  {
    try {
      result = (btkAcquisitionFileIO_impl::FileType)(*arg1)->GetFileType();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMOMFileIO_GetByteOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMOMFileIO *arg1 = (btkMOMFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisitionFileIO_impl::ByteOrder result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkMOMFileIO_GetByteOrder",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMOMFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMOMFileIO_GetByteOrder" "', argument " "1"" of type '" "btkMOMFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkMOMFileIO * >(argp1);
  {
    try {
      result = (btkAcquisitionFileIO_impl::ByteOrder)(*arg1)->GetByteOrder();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMOMFileIO_GetByteOrderAsString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMOMFileIO *arg1 = (btkMOMFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkMOMFileIO_GetByteOrderAsString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMOMFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMOMFileIO_GetByteOrderAsString" "', argument " "1"" of type '" "btkMOMFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkMOMFileIO * >(argp1);
  {
    try {
      result = (*arg1)->GetByteOrderAsString();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMOMFileIO_SetByteOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMOMFileIO *arg1 = (btkMOMFileIO *) 0 ;
  btkAcquisitionFileIO_impl::ByteOrder arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkMOMFileIO_SetByteOrder",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMOMFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMOMFileIO_SetByteOrder" "', argument " "1"" of type '" "btkMOMFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkMOMFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkMOMFileIO_SetByteOrder" "', argument " "2"" of type '" "btkAcquisitionFileIO_impl::ByteOrder""'");
  } 
  arg2 = static_cast< btkAcquisitionFileIO_impl::ByteOrder >(val2);
  {
    try {
      (*arg1)->SetByteOrder(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMOMFileIO_GetStorageFormat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMOMFileIO *arg1 = (btkMOMFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisitionFileIO_impl::StorageFormat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkMOMFileIO_GetStorageFormat",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMOMFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMOMFileIO_GetStorageFormat" "', argument " "1"" of type '" "btkMOMFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkMOMFileIO * >(argp1);
  {
    try {
      result = (btkAcquisitionFileIO_impl::StorageFormat)(*arg1)->GetStorageFormat();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMOMFileIO_GetStorageFormatAsString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMOMFileIO *arg1 = (btkMOMFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkMOMFileIO_GetStorageFormatAsString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMOMFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMOMFileIO_GetStorageFormatAsString" "', argument " "1"" of type '" "btkMOMFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkMOMFileIO * >(argp1);
  {
    try {
      result = (*arg1)->GetStorageFormatAsString();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMOMFileIO_SetStorageFormat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMOMFileIO *arg1 = (btkMOMFileIO *) 0 ;
  btkAcquisitionFileIO_impl::StorageFormat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkMOMFileIO_SetStorageFormat",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMOMFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMOMFileIO_SetStorageFormat" "', argument " "1"" of type '" "btkMOMFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkMOMFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkMOMFileIO_SetStorageFormat" "', argument " "2"" of type '" "btkAcquisitionFileIO_impl::StorageFormat""'");
  } 
  arg2 = static_cast< btkAcquisitionFileIO_impl::StorageFormat >(val2);
  {
    try {
      (*arg1)->SetStorageFormat(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMOMFileIO_GetInternalsUpdateOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMOMFileIO *arg1 = (btkMOMFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkMOMFileIO_GetInternalsUpdateOptions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMOMFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMOMFileIO_GetInternalsUpdateOptions" "', argument " "1"" of type '" "btkMOMFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkMOMFileIO * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetInternalsUpdateOptions();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMOMFileIO_SetInternalsUpdateOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMOMFileIO *arg1 = (btkMOMFileIO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkMOMFileIO_SetInternalsUpdateOptions",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMOMFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMOMFileIO_SetInternalsUpdateOptions" "', argument " "1"" of type '" "btkMOMFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkMOMFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkMOMFileIO_SetInternalsUpdateOptions" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->SetInternalsUpdateOptions(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMOMFileIO_HasInternalsUpdateOption(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMOMFileIO *arg1 = (btkMOMFileIO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkMOMFileIO_HasInternalsUpdateOption",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMOMFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMOMFileIO_HasInternalsUpdateOption" "', argument " "1"" of type '" "btkMOMFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkMOMFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkMOMFileIO_HasInternalsUpdateOption" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (bool)(*arg1)->HasInternalsUpdateOption(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMOMFileIO_CanReadFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMOMFileIO *arg1 = (btkMOMFileIO *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkMOMFileIO_CanReadFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMOMFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMOMFileIO_CanReadFile" "', argument " "1"" of type '" "btkMOMFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkMOMFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkMOMFileIO_CanReadFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMOMFileIO_CanReadFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)(*arg1)->CanReadFile((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMOMFileIO_CanWriteFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMOMFileIO *arg1 = (btkMOMFileIO *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkMOMFileIO_CanWriteFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMOMFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMOMFileIO_CanWriteFile" "', argument " "1"" of type '" "btkMOMFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkMOMFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkMOMFileIO_CanWriteFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMOMFileIO_CanWriteFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)(*arg1)->CanWriteFile((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMOMFileIO_Read(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMOMFileIO *arg1 = (btkMOMFileIO *) 0 ;
  std::string *arg2 = 0 ;
  btkAcquisition arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkMOMFileIO_Read",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMOMFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMOMFileIO_Read" "', argument " "1"" of type '" "btkMOMFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkMOMFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkMOMFileIO_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMOMFileIO_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkAcquisition,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkMOMFileIO_Read" "', argument " "3"" of type '" "btkAcquisition""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMOMFileIO_Read" "', argument " "3"" of type '" "btkAcquisition""'");
    } else {
      btkAcquisition * temp = reinterpret_cast< btkAcquisition * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->Read((std::string const &)*arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMOMFileIO_Write(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMOMFileIO *arg1 = (btkMOMFileIO *) 0 ;
  std::string *arg2 = 0 ;
  btkAcquisition arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkMOMFileIO_Write",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMOMFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMOMFileIO_Write" "', argument " "1"" of type '" "btkMOMFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkMOMFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkMOMFileIO_Write" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMOMFileIO_Write" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkAcquisition,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkMOMFileIO_Write" "', argument " "3"" of type '" "btkAcquisition""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMOMFileIO_Write" "', argument " "3"" of type '" "btkAcquisition""'");
    } else {
      btkAcquisition * temp = reinterpret_cast< btkAcquisition * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->Write((std::string const &)*arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *btkMOMFileIO_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_btkMOMFileIO, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_btkPWRFileIO__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPWRFileIO *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_btkPWRFileIO")) SWIG_fail;
  {
    try {
      result = (btkPWRFileIO *)new btkPWRFileIO();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkPWRFileIO, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkPWRFileIO__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< btkAcquisitionFileIO > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkPWRFileIO *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_btkPWRFileIO",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_btkAcquisitionFileIO,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkPWRFileIO" "', argument " "1"" of type '" "btkAcquisitionFileIO const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkPWRFileIO" "', argument " "1"" of type '" "btkAcquisitionFileIO const""'");
    } else {
      btkAcquisitionFileIO * temp = reinterpret_cast< btkAcquisitionFileIO * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try {
      result = (btkPWRFileIO *)new btkPWRFileIO(arg1);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkPWRFileIO, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkPWRFileIO(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_btkPWRFileIO__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_btkAcquisitionFileIO, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_btkPWRFileIO__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_btkPWRFileIO'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkPWRFileIO::btkPWRFileIO()\n"
    "    btkPWRFileIO::btkPWRFileIO(btkAcquisitionFileIO const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkPWRFileIO___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPWRFileIO *arg1 = (btkPWRFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkPWRFileIO_impl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkPWRFileIO___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPWRFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPWRFileIO___deref__" "', argument " "1"" of type '" "btkPWRFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkPWRFileIO * >(argp1);
  {
    try {
      result = (btkPWRFileIO_impl *)((btkPWRFileIO const *)arg1)->operator ->();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkPWRFileIO_impl, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_btkPWRFileIO(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPWRFileIO *arg1 = (btkPWRFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_btkPWRFileIO",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPWRFileIO, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_btkPWRFileIO" "', argument " "1"" of type '" "btkPWRFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkPWRFileIO * >(argp1);
  {
    try {
      delete arg1;
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPWRFileIO_GetFileType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPWRFileIO *arg1 = (btkPWRFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisitionFileIO_impl::FileType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkPWRFileIO_GetFileType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPWRFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPWRFileIO_GetFileType" "', argument " "1"" of type '" "btkPWRFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkPWRFileIO * >(argp1);
  {
    try {
      result = (btkAcquisitionFileIO_impl::FileType)(*arg1)->GetFileType();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPWRFileIO_GetByteOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPWRFileIO *arg1 = (btkPWRFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisitionFileIO_impl::ByteOrder result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkPWRFileIO_GetByteOrder",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPWRFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPWRFileIO_GetByteOrder" "', argument " "1"" of type '" "btkPWRFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkPWRFileIO * >(argp1);
  {
    try {
      result = (btkAcquisitionFileIO_impl::ByteOrder)(*arg1)->GetByteOrder();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPWRFileIO_GetByteOrderAsString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPWRFileIO *arg1 = (btkPWRFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkPWRFileIO_GetByteOrderAsString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPWRFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPWRFileIO_GetByteOrderAsString" "', argument " "1"" of type '" "btkPWRFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkPWRFileIO * >(argp1);
  {
    try {
      result = (*arg1)->GetByteOrderAsString();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPWRFileIO_SetByteOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPWRFileIO *arg1 = (btkPWRFileIO *) 0 ;
  btkAcquisitionFileIO_impl::ByteOrder arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkPWRFileIO_SetByteOrder",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPWRFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPWRFileIO_SetByteOrder" "', argument " "1"" of type '" "btkPWRFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkPWRFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkPWRFileIO_SetByteOrder" "', argument " "2"" of type '" "btkAcquisitionFileIO_impl::ByteOrder""'");
  } 
  arg2 = static_cast< btkAcquisitionFileIO_impl::ByteOrder >(val2);
  {
    try {
      (*arg1)->SetByteOrder(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPWRFileIO_GetStorageFormat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPWRFileIO *arg1 = (btkPWRFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisitionFileIO_impl::StorageFormat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkPWRFileIO_GetStorageFormat",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPWRFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPWRFileIO_GetStorageFormat" "', argument " "1"" of type '" "btkPWRFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkPWRFileIO * >(argp1);
  {
    try {
      result = (btkAcquisitionFileIO_impl::StorageFormat)(*arg1)->GetStorageFormat();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPWRFileIO_GetStorageFormatAsString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPWRFileIO *arg1 = (btkPWRFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkPWRFileIO_GetStorageFormatAsString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPWRFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPWRFileIO_GetStorageFormatAsString" "', argument " "1"" of type '" "btkPWRFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkPWRFileIO * >(argp1);
  {
    try {
      result = (*arg1)->GetStorageFormatAsString();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPWRFileIO_SetStorageFormat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPWRFileIO *arg1 = (btkPWRFileIO *) 0 ;
  btkAcquisitionFileIO_impl::StorageFormat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkPWRFileIO_SetStorageFormat",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPWRFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPWRFileIO_SetStorageFormat" "', argument " "1"" of type '" "btkPWRFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkPWRFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkPWRFileIO_SetStorageFormat" "', argument " "2"" of type '" "btkAcquisitionFileIO_impl::StorageFormat""'");
  } 
  arg2 = static_cast< btkAcquisitionFileIO_impl::StorageFormat >(val2);
  {
    try {
      (*arg1)->SetStorageFormat(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPWRFileIO_GetInternalsUpdateOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPWRFileIO *arg1 = (btkPWRFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkPWRFileIO_GetInternalsUpdateOptions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPWRFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPWRFileIO_GetInternalsUpdateOptions" "', argument " "1"" of type '" "btkPWRFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkPWRFileIO * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetInternalsUpdateOptions();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPWRFileIO_SetInternalsUpdateOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPWRFileIO *arg1 = (btkPWRFileIO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkPWRFileIO_SetInternalsUpdateOptions",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPWRFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPWRFileIO_SetInternalsUpdateOptions" "', argument " "1"" of type '" "btkPWRFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkPWRFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkPWRFileIO_SetInternalsUpdateOptions" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->SetInternalsUpdateOptions(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPWRFileIO_HasInternalsUpdateOption(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPWRFileIO *arg1 = (btkPWRFileIO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkPWRFileIO_HasInternalsUpdateOption",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPWRFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPWRFileIO_HasInternalsUpdateOption" "', argument " "1"" of type '" "btkPWRFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkPWRFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkPWRFileIO_HasInternalsUpdateOption" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (bool)(*arg1)->HasInternalsUpdateOption(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPWRFileIO_CanReadFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPWRFileIO *arg1 = (btkPWRFileIO *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkPWRFileIO_CanReadFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPWRFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPWRFileIO_CanReadFile" "', argument " "1"" of type '" "btkPWRFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkPWRFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkPWRFileIO_CanReadFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkPWRFileIO_CanReadFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)(*arg1)->CanReadFile((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPWRFileIO_CanWriteFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPWRFileIO *arg1 = (btkPWRFileIO *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkPWRFileIO_CanWriteFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPWRFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPWRFileIO_CanWriteFile" "', argument " "1"" of type '" "btkPWRFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkPWRFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkPWRFileIO_CanWriteFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkPWRFileIO_CanWriteFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)(*arg1)->CanWriteFile((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPWRFileIO_Read(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPWRFileIO *arg1 = (btkPWRFileIO *) 0 ;
  std::string *arg2 = 0 ;
  btkAcquisition arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkPWRFileIO_Read",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPWRFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPWRFileIO_Read" "', argument " "1"" of type '" "btkPWRFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkPWRFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkPWRFileIO_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkPWRFileIO_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkAcquisition,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkPWRFileIO_Read" "', argument " "3"" of type '" "btkAcquisition""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkPWRFileIO_Read" "', argument " "3"" of type '" "btkAcquisition""'");
    } else {
      btkAcquisition * temp = reinterpret_cast< btkAcquisition * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->Read((std::string const &)*arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkPWRFileIO_Write(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkPWRFileIO *arg1 = (btkPWRFileIO *) 0 ;
  std::string *arg2 = 0 ;
  btkAcquisition arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkPWRFileIO_Write",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkPWRFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkPWRFileIO_Write" "', argument " "1"" of type '" "btkPWRFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkPWRFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkPWRFileIO_Write" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkPWRFileIO_Write" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkAcquisition,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkPWRFileIO_Write" "', argument " "3"" of type '" "btkAcquisition""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkPWRFileIO_Write" "', argument " "3"" of type '" "btkAcquisition""'");
    } else {
      btkAcquisition * temp = reinterpret_cast< btkAcquisition * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->Write((std::string const &)*arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *btkPWRFileIO_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_btkPWRFileIO, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_btkRAxFileIO__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkRAxFileIO *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_btkRAxFileIO")) SWIG_fail;
  {
    try {
      result = (btkRAxFileIO *)new btkRAxFileIO();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkRAxFileIO, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkRAxFileIO__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< btkAcquisitionFileIO > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkRAxFileIO *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_btkRAxFileIO",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_btkAcquisitionFileIO,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkRAxFileIO" "', argument " "1"" of type '" "btkAcquisitionFileIO const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkRAxFileIO" "', argument " "1"" of type '" "btkAcquisitionFileIO const""'");
    } else {
      btkAcquisitionFileIO * temp = reinterpret_cast< btkAcquisitionFileIO * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try {
      result = (btkRAxFileIO *)new btkRAxFileIO(arg1);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkRAxFileIO, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkRAxFileIO(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_btkRAxFileIO__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_btkAcquisitionFileIO, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_btkRAxFileIO__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_btkRAxFileIO'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkRAxFileIO::btkRAxFileIO()\n"
    "    btkRAxFileIO::btkRAxFileIO(btkAcquisitionFileIO const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkRAxFileIO___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkRAxFileIO *arg1 = (btkRAxFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkRAxFileIO_impl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkRAxFileIO___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkRAxFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkRAxFileIO___deref__" "', argument " "1"" of type '" "btkRAxFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkRAxFileIO * >(argp1);
  {
    try {
      result = (btkRAxFileIO_impl *)((btkRAxFileIO const *)arg1)->operator ->();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkRAxFileIO_impl, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_btkRAxFileIO(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkRAxFileIO *arg1 = (btkRAxFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_btkRAxFileIO",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkRAxFileIO, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_btkRAxFileIO" "', argument " "1"" of type '" "btkRAxFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkRAxFileIO * >(argp1);
  {
    try {
      delete arg1;
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkRAxFileIO_GetFileType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkRAxFileIO *arg1 = (btkRAxFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisitionFileIO_impl::FileType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkRAxFileIO_GetFileType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkRAxFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkRAxFileIO_GetFileType" "', argument " "1"" of type '" "btkRAxFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkRAxFileIO * >(argp1);
  {
    try {
      result = (btkAcquisitionFileIO_impl::FileType)(*arg1)->GetFileType();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkRAxFileIO_GetByteOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkRAxFileIO *arg1 = (btkRAxFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisitionFileIO_impl::ByteOrder result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkRAxFileIO_GetByteOrder",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkRAxFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkRAxFileIO_GetByteOrder" "', argument " "1"" of type '" "btkRAxFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkRAxFileIO * >(argp1);
  {
    try {
      result = (btkAcquisitionFileIO_impl::ByteOrder)(*arg1)->GetByteOrder();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkRAxFileIO_GetByteOrderAsString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkRAxFileIO *arg1 = (btkRAxFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkRAxFileIO_GetByteOrderAsString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkRAxFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkRAxFileIO_GetByteOrderAsString" "', argument " "1"" of type '" "btkRAxFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkRAxFileIO * >(argp1);
  {
    try {
      result = (*arg1)->GetByteOrderAsString();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkRAxFileIO_SetByteOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkRAxFileIO *arg1 = (btkRAxFileIO *) 0 ;
  btkAcquisitionFileIO_impl::ByteOrder arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkRAxFileIO_SetByteOrder",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkRAxFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkRAxFileIO_SetByteOrder" "', argument " "1"" of type '" "btkRAxFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkRAxFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkRAxFileIO_SetByteOrder" "', argument " "2"" of type '" "btkAcquisitionFileIO_impl::ByteOrder""'");
  } 
  arg2 = static_cast< btkAcquisitionFileIO_impl::ByteOrder >(val2);
  {
    try {
      (*arg1)->SetByteOrder(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkRAxFileIO_GetStorageFormat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkRAxFileIO *arg1 = (btkRAxFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisitionFileIO_impl::StorageFormat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkRAxFileIO_GetStorageFormat",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkRAxFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkRAxFileIO_GetStorageFormat" "', argument " "1"" of type '" "btkRAxFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkRAxFileIO * >(argp1);
  {
    try {
      result = (btkAcquisitionFileIO_impl::StorageFormat)(*arg1)->GetStorageFormat();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkRAxFileIO_GetStorageFormatAsString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkRAxFileIO *arg1 = (btkRAxFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkRAxFileIO_GetStorageFormatAsString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkRAxFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkRAxFileIO_GetStorageFormatAsString" "', argument " "1"" of type '" "btkRAxFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkRAxFileIO * >(argp1);
  {
    try {
      result = (*arg1)->GetStorageFormatAsString();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkRAxFileIO_SetStorageFormat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkRAxFileIO *arg1 = (btkRAxFileIO *) 0 ;
  btkAcquisitionFileIO_impl::StorageFormat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkRAxFileIO_SetStorageFormat",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkRAxFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkRAxFileIO_SetStorageFormat" "', argument " "1"" of type '" "btkRAxFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkRAxFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkRAxFileIO_SetStorageFormat" "', argument " "2"" of type '" "btkAcquisitionFileIO_impl::StorageFormat""'");
  } 
  arg2 = static_cast< btkAcquisitionFileIO_impl::StorageFormat >(val2);
  {
    try {
      (*arg1)->SetStorageFormat(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkRAxFileIO_GetInternalsUpdateOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkRAxFileIO *arg1 = (btkRAxFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkRAxFileIO_GetInternalsUpdateOptions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkRAxFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkRAxFileIO_GetInternalsUpdateOptions" "', argument " "1"" of type '" "btkRAxFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkRAxFileIO * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetInternalsUpdateOptions();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkRAxFileIO_SetInternalsUpdateOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkRAxFileIO *arg1 = (btkRAxFileIO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkRAxFileIO_SetInternalsUpdateOptions",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkRAxFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkRAxFileIO_SetInternalsUpdateOptions" "', argument " "1"" of type '" "btkRAxFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkRAxFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkRAxFileIO_SetInternalsUpdateOptions" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->SetInternalsUpdateOptions(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkRAxFileIO_HasInternalsUpdateOption(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkRAxFileIO *arg1 = (btkRAxFileIO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkRAxFileIO_HasInternalsUpdateOption",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkRAxFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkRAxFileIO_HasInternalsUpdateOption" "', argument " "1"" of type '" "btkRAxFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkRAxFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkRAxFileIO_HasInternalsUpdateOption" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (bool)(*arg1)->HasInternalsUpdateOption(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkRAxFileIO_CanReadFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkRAxFileIO *arg1 = (btkRAxFileIO *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkRAxFileIO_CanReadFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkRAxFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkRAxFileIO_CanReadFile" "', argument " "1"" of type '" "btkRAxFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkRAxFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkRAxFileIO_CanReadFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkRAxFileIO_CanReadFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)(*arg1)->CanReadFile((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkRAxFileIO_CanWriteFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkRAxFileIO *arg1 = (btkRAxFileIO *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkRAxFileIO_CanWriteFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkRAxFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkRAxFileIO_CanWriteFile" "', argument " "1"" of type '" "btkRAxFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkRAxFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkRAxFileIO_CanWriteFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkRAxFileIO_CanWriteFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)(*arg1)->CanWriteFile((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkRAxFileIO_Read(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkRAxFileIO *arg1 = (btkRAxFileIO *) 0 ;
  std::string *arg2 = 0 ;
  btkAcquisition arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkRAxFileIO_Read",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkRAxFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkRAxFileIO_Read" "', argument " "1"" of type '" "btkRAxFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkRAxFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkRAxFileIO_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkRAxFileIO_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkAcquisition,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkRAxFileIO_Read" "', argument " "3"" of type '" "btkAcquisition""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkRAxFileIO_Read" "', argument " "3"" of type '" "btkAcquisition""'");
    } else {
      btkAcquisition * temp = reinterpret_cast< btkAcquisition * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->Read((std::string const &)*arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkRAxFileIO_Write(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkRAxFileIO *arg1 = (btkRAxFileIO *) 0 ;
  std::string *arg2 = 0 ;
  btkAcquisition arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkRAxFileIO_Write",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkRAxFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkRAxFileIO_Write" "', argument " "1"" of type '" "btkRAxFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkRAxFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkRAxFileIO_Write" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkRAxFileIO_Write" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkAcquisition,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkRAxFileIO_Write" "', argument " "3"" of type '" "btkAcquisition""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkRAxFileIO_Write" "', argument " "3"" of type '" "btkAcquisition""'");
    } else {
      btkAcquisition * temp = reinterpret_cast< btkAcquisition * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->Write((std::string const &)*arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *btkRAxFileIO_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_btkRAxFileIO, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_btkRICFileIO__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkRICFileIO *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_btkRICFileIO")) SWIG_fail;
  {
    try {
      result = (btkRICFileIO *)new btkRICFileIO();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkRICFileIO, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkRICFileIO__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< btkAcquisitionFileIO > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkRICFileIO *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_btkRICFileIO",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_btkAcquisitionFileIO,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkRICFileIO" "', argument " "1"" of type '" "btkAcquisitionFileIO const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkRICFileIO" "', argument " "1"" of type '" "btkAcquisitionFileIO const""'");
    } else {
      btkAcquisitionFileIO * temp = reinterpret_cast< btkAcquisitionFileIO * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try {
      result = (btkRICFileIO *)new btkRICFileIO(arg1);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkRICFileIO, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkRICFileIO(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_btkRICFileIO__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_btkAcquisitionFileIO, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_btkRICFileIO__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_btkRICFileIO'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkRICFileIO::btkRICFileIO()\n"
    "    btkRICFileIO::btkRICFileIO(btkAcquisitionFileIO const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkRICFileIO___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkRICFileIO *arg1 = (btkRICFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkRICFileIO_impl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkRICFileIO___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkRICFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkRICFileIO___deref__" "', argument " "1"" of type '" "btkRICFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkRICFileIO * >(argp1);
  {
    try {
      result = (btkRICFileIO_impl *)((btkRICFileIO const *)arg1)->operator ->();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkRICFileIO_impl, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_btkRICFileIO(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkRICFileIO *arg1 = (btkRICFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_btkRICFileIO",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkRICFileIO, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_btkRICFileIO" "', argument " "1"" of type '" "btkRICFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkRICFileIO * >(argp1);
  {
    try {
      delete arg1;
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkRICFileIO_GetFileType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkRICFileIO *arg1 = (btkRICFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisitionFileIO_impl::FileType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkRICFileIO_GetFileType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkRICFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkRICFileIO_GetFileType" "', argument " "1"" of type '" "btkRICFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkRICFileIO * >(argp1);
  {
    try {
      result = (btkAcquisitionFileIO_impl::FileType)(*arg1)->GetFileType();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkRICFileIO_GetByteOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkRICFileIO *arg1 = (btkRICFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisitionFileIO_impl::ByteOrder result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkRICFileIO_GetByteOrder",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkRICFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkRICFileIO_GetByteOrder" "', argument " "1"" of type '" "btkRICFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkRICFileIO * >(argp1);
  {
    try {
      result = (btkAcquisitionFileIO_impl::ByteOrder)(*arg1)->GetByteOrder();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkRICFileIO_GetByteOrderAsString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkRICFileIO *arg1 = (btkRICFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkRICFileIO_GetByteOrderAsString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkRICFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkRICFileIO_GetByteOrderAsString" "', argument " "1"" of type '" "btkRICFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkRICFileIO * >(argp1);
  {
    try {
      result = (*arg1)->GetByteOrderAsString();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkRICFileIO_SetByteOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkRICFileIO *arg1 = (btkRICFileIO *) 0 ;
  btkAcquisitionFileIO_impl::ByteOrder arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkRICFileIO_SetByteOrder",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkRICFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkRICFileIO_SetByteOrder" "', argument " "1"" of type '" "btkRICFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkRICFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkRICFileIO_SetByteOrder" "', argument " "2"" of type '" "btkAcquisitionFileIO_impl::ByteOrder""'");
  } 
  arg2 = static_cast< btkAcquisitionFileIO_impl::ByteOrder >(val2);
  {
    try {
      (*arg1)->SetByteOrder(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkRICFileIO_GetStorageFormat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkRICFileIO *arg1 = (btkRICFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisitionFileIO_impl::StorageFormat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkRICFileIO_GetStorageFormat",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkRICFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkRICFileIO_GetStorageFormat" "', argument " "1"" of type '" "btkRICFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkRICFileIO * >(argp1);
  {
    try {
      result = (btkAcquisitionFileIO_impl::StorageFormat)(*arg1)->GetStorageFormat();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkRICFileIO_GetStorageFormatAsString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkRICFileIO *arg1 = (btkRICFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkRICFileIO_GetStorageFormatAsString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkRICFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkRICFileIO_GetStorageFormatAsString" "', argument " "1"" of type '" "btkRICFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkRICFileIO * >(argp1);
  {
    try {
      result = (*arg1)->GetStorageFormatAsString();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkRICFileIO_SetStorageFormat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkRICFileIO *arg1 = (btkRICFileIO *) 0 ;
  btkAcquisitionFileIO_impl::StorageFormat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkRICFileIO_SetStorageFormat",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkRICFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkRICFileIO_SetStorageFormat" "', argument " "1"" of type '" "btkRICFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkRICFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkRICFileIO_SetStorageFormat" "', argument " "2"" of type '" "btkAcquisitionFileIO_impl::StorageFormat""'");
  } 
  arg2 = static_cast< btkAcquisitionFileIO_impl::StorageFormat >(val2);
  {
    try {
      (*arg1)->SetStorageFormat(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkRICFileIO_GetInternalsUpdateOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkRICFileIO *arg1 = (btkRICFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkRICFileIO_GetInternalsUpdateOptions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkRICFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkRICFileIO_GetInternalsUpdateOptions" "', argument " "1"" of type '" "btkRICFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkRICFileIO * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetInternalsUpdateOptions();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkRICFileIO_SetInternalsUpdateOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkRICFileIO *arg1 = (btkRICFileIO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkRICFileIO_SetInternalsUpdateOptions",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkRICFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkRICFileIO_SetInternalsUpdateOptions" "', argument " "1"" of type '" "btkRICFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkRICFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkRICFileIO_SetInternalsUpdateOptions" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->SetInternalsUpdateOptions(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkRICFileIO_HasInternalsUpdateOption(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkRICFileIO *arg1 = (btkRICFileIO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkRICFileIO_HasInternalsUpdateOption",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkRICFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkRICFileIO_HasInternalsUpdateOption" "', argument " "1"" of type '" "btkRICFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkRICFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkRICFileIO_HasInternalsUpdateOption" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (bool)(*arg1)->HasInternalsUpdateOption(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkRICFileIO_CanReadFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkRICFileIO *arg1 = (btkRICFileIO *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkRICFileIO_CanReadFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkRICFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkRICFileIO_CanReadFile" "', argument " "1"" of type '" "btkRICFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkRICFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkRICFileIO_CanReadFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkRICFileIO_CanReadFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)(*arg1)->CanReadFile((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkRICFileIO_CanWriteFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkRICFileIO *arg1 = (btkRICFileIO *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkRICFileIO_CanWriteFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkRICFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkRICFileIO_CanWriteFile" "', argument " "1"" of type '" "btkRICFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkRICFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkRICFileIO_CanWriteFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkRICFileIO_CanWriteFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)(*arg1)->CanWriteFile((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkRICFileIO_Read(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkRICFileIO *arg1 = (btkRICFileIO *) 0 ;
  std::string *arg2 = 0 ;
  btkAcquisition arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkRICFileIO_Read",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkRICFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkRICFileIO_Read" "', argument " "1"" of type '" "btkRICFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkRICFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkRICFileIO_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkRICFileIO_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkAcquisition,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkRICFileIO_Read" "', argument " "3"" of type '" "btkAcquisition""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkRICFileIO_Read" "', argument " "3"" of type '" "btkAcquisition""'");
    } else {
      btkAcquisition * temp = reinterpret_cast< btkAcquisition * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->Read((std::string const &)*arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkRICFileIO_Write(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkRICFileIO *arg1 = (btkRICFileIO *) 0 ;
  std::string *arg2 = 0 ;
  btkAcquisition arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkRICFileIO_Write",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkRICFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkRICFileIO_Write" "', argument " "1"" of type '" "btkRICFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkRICFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkRICFileIO_Write" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkRICFileIO_Write" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkAcquisition,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkRICFileIO_Write" "', argument " "3"" of type '" "btkAcquisition""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkRICFileIO_Write" "', argument " "3"" of type '" "btkAcquisition""'");
    } else {
      btkAcquisition * temp = reinterpret_cast< btkAcquisition * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->Write((std::string const &)*arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *btkRICFileIO_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_btkRICFileIO, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_btkTDFFileIO__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkTDFFileIO *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_btkTDFFileIO")) SWIG_fail;
  {
    try {
      result = (btkTDFFileIO *)new btkTDFFileIO();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkTDFFileIO, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkTDFFileIO__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< btkAcquisitionFileIO > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkTDFFileIO *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_btkTDFFileIO",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_btkAcquisitionFileIO,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkTDFFileIO" "', argument " "1"" of type '" "btkAcquisitionFileIO const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkTDFFileIO" "', argument " "1"" of type '" "btkAcquisitionFileIO const""'");
    } else {
      btkAcquisitionFileIO * temp = reinterpret_cast< btkAcquisitionFileIO * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try {
      result = (btkTDFFileIO *)new btkTDFFileIO(arg1);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkTDFFileIO, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkTDFFileIO(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_btkTDFFileIO__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_btkAcquisitionFileIO, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_btkTDFFileIO__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_btkTDFFileIO'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkTDFFileIO::btkTDFFileIO()\n"
    "    btkTDFFileIO::btkTDFFileIO(btkAcquisitionFileIO const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkTDFFileIO___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkTDFFileIO *arg1 = (btkTDFFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkTDFFileIO_impl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkTDFFileIO___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkTDFFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkTDFFileIO___deref__" "', argument " "1"" of type '" "btkTDFFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkTDFFileIO * >(argp1);
  {
    try {
      result = (btkTDFFileIO_impl *)((btkTDFFileIO const *)arg1)->operator ->();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkTDFFileIO_impl, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_btkTDFFileIO(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkTDFFileIO *arg1 = (btkTDFFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_btkTDFFileIO",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkTDFFileIO, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_btkTDFFileIO" "', argument " "1"" of type '" "btkTDFFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkTDFFileIO * >(argp1);
  {
    try {
      delete arg1;
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkTDFFileIO_GetFileType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkTDFFileIO *arg1 = (btkTDFFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisitionFileIO_impl::FileType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkTDFFileIO_GetFileType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkTDFFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkTDFFileIO_GetFileType" "', argument " "1"" of type '" "btkTDFFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkTDFFileIO * >(argp1);
  {
    try {
      result = (btkAcquisitionFileIO_impl::FileType)(*arg1)->GetFileType();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkTDFFileIO_GetByteOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkTDFFileIO *arg1 = (btkTDFFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisitionFileIO_impl::ByteOrder result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkTDFFileIO_GetByteOrder",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkTDFFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkTDFFileIO_GetByteOrder" "', argument " "1"" of type '" "btkTDFFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkTDFFileIO * >(argp1);
  {
    try {
      result = (btkAcquisitionFileIO_impl::ByteOrder)(*arg1)->GetByteOrder();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkTDFFileIO_GetByteOrderAsString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkTDFFileIO *arg1 = (btkTDFFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkTDFFileIO_GetByteOrderAsString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkTDFFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkTDFFileIO_GetByteOrderAsString" "', argument " "1"" of type '" "btkTDFFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkTDFFileIO * >(argp1);
  {
    try {
      result = (*arg1)->GetByteOrderAsString();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkTDFFileIO_SetByteOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkTDFFileIO *arg1 = (btkTDFFileIO *) 0 ;
  btkAcquisitionFileIO_impl::ByteOrder arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkTDFFileIO_SetByteOrder",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkTDFFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkTDFFileIO_SetByteOrder" "', argument " "1"" of type '" "btkTDFFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkTDFFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkTDFFileIO_SetByteOrder" "', argument " "2"" of type '" "btkAcquisitionFileIO_impl::ByteOrder""'");
  } 
  arg2 = static_cast< btkAcquisitionFileIO_impl::ByteOrder >(val2);
  {
    try {
      (*arg1)->SetByteOrder(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkTDFFileIO_GetStorageFormat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkTDFFileIO *arg1 = (btkTDFFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisitionFileIO_impl::StorageFormat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkTDFFileIO_GetStorageFormat",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkTDFFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkTDFFileIO_GetStorageFormat" "', argument " "1"" of type '" "btkTDFFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkTDFFileIO * >(argp1);
  {
    try {
      result = (btkAcquisitionFileIO_impl::StorageFormat)(*arg1)->GetStorageFormat();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkTDFFileIO_GetStorageFormatAsString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkTDFFileIO *arg1 = (btkTDFFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkTDFFileIO_GetStorageFormatAsString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkTDFFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkTDFFileIO_GetStorageFormatAsString" "', argument " "1"" of type '" "btkTDFFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkTDFFileIO * >(argp1);
  {
    try {
      result = (*arg1)->GetStorageFormatAsString();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkTDFFileIO_SetStorageFormat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkTDFFileIO *arg1 = (btkTDFFileIO *) 0 ;
  btkAcquisitionFileIO_impl::StorageFormat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkTDFFileIO_SetStorageFormat",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkTDFFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkTDFFileIO_SetStorageFormat" "', argument " "1"" of type '" "btkTDFFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkTDFFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkTDFFileIO_SetStorageFormat" "', argument " "2"" of type '" "btkAcquisitionFileIO_impl::StorageFormat""'");
  } 
  arg2 = static_cast< btkAcquisitionFileIO_impl::StorageFormat >(val2);
  {
    try {
      (*arg1)->SetStorageFormat(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkTDFFileIO_GetInternalsUpdateOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkTDFFileIO *arg1 = (btkTDFFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkTDFFileIO_GetInternalsUpdateOptions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkTDFFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkTDFFileIO_GetInternalsUpdateOptions" "', argument " "1"" of type '" "btkTDFFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkTDFFileIO * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetInternalsUpdateOptions();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkTDFFileIO_SetInternalsUpdateOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkTDFFileIO *arg1 = (btkTDFFileIO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkTDFFileIO_SetInternalsUpdateOptions",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkTDFFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkTDFFileIO_SetInternalsUpdateOptions" "', argument " "1"" of type '" "btkTDFFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkTDFFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkTDFFileIO_SetInternalsUpdateOptions" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->SetInternalsUpdateOptions(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkTDFFileIO_HasInternalsUpdateOption(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkTDFFileIO *arg1 = (btkTDFFileIO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkTDFFileIO_HasInternalsUpdateOption",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkTDFFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkTDFFileIO_HasInternalsUpdateOption" "', argument " "1"" of type '" "btkTDFFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkTDFFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkTDFFileIO_HasInternalsUpdateOption" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (bool)(*arg1)->HasInternalsUpdateOption(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkTDFFileIO_CanReadFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkTDFFileIO *arg1 = (btkTDFFileIO *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkTDFFileIO_CanReadFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkTDFFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkTDFFileIO_CanReadFile" "', argument " "1"" of type '" "btkTDFFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkTDFFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkTDFFileIO_CanReadFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkTDFFileIO_CanReadFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)(*arg1)->CanReadFile((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkTDFFileIO_CanWriteFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkTDFFileIO *arg1 = (btkTDFFileIO *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkTDFFileIO_CanWriteFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkTDFFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkTDFFileIO_CanWriteFile" "', argument " "1"" of type '" "btkTDFFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkTDFFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkTDFFileIO_CanWriteFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkTDFFileIO_CanWriteFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)(*arg1)->CanWriteFile((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkTDFFileIO_Read(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkTDFFileIO *arg1 = (btkTDFFileIO *) 0 ;
  std::string *arg2 = 0 ;
  btkAcquisition arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkTDFFileIO_Read",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkTDFFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkTDFFileIO_Read" "', argument " "1"" of type '" "btkTDFFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkTDFFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkTDFFileIO_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkTDFFileIO_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkAcquisition,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkTDFFileIO_Read" "', argument " "3"" of type '" "btkAcquisition""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkTDFFileIO_Read" "', argument " "3"" of type '" "btkAcquisition""'");
    } else {
      btkAcquisition * temp = reinterpret_cast< btkAcquisition * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->Read((std::string const &)*arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkTDFFileIO_Write(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkTDFFileIO *arg1 = (btkTDFFileIO *) 0 ;
  std::string *arg2 = 0 ;
  btkAcquisition arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkTDFFileIO_Write",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkTDFFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkTDFFileIO_Write" "', argument " "1"" of type '" "btkTDFFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkTDFFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkTDFFileIO_Write" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkTDFFileIO_Write" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkAcquisition,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkTDFFileIO_Write" "', argument " "3"" of type '" "btkAcquisition""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkTDFFileIO_Write" "', argument " "3"" of type '" "btkAcquisition""'");
    } else {
      btkAcquisition * temp = reinterpret_cast< btkAcquisition * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->Write((std::string const &)*arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *btkTDFFileIO_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_btkTDFFileIO, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_btkTRBFileIO__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkTRBFileIO *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_btkTRBFileIO")) SWIG_fail;
  {
    try {
      result = (btkTRBFileIO *)new btkTRBFileIO();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkTRBFileIO, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkTRBFileIO__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< btkAcquisitionFileIO > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkTRBFileIO *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_btkTRBFileIO",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_btkAcquisitionFileIO,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkTRBFileIO" "', argument " "1"" of type '" "btkAcquisitionFileIO const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkTRBFileIO" "', argument " "1"" of type '" "btkAcquisitionFileIO const""'");
    } else {
      btkAcquisitionFileIO * temp = reinterpret_cast< btkAcquisitionFileIO * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try {
      result = (btkTRBFileIO *)new btkTRBFileIO(arg1);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkTRBFileIO, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkTRBFileIO(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_btkTRBFileIO__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_btkAcquisitionFileIO, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_btkTRBFileIO__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_btkTRBFileIO'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkTRBFileIO::btkTRBFileIO()\n"
    "    btkTRBFileIO::btkTRBFileIO(btkAcquisitionFileIO const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkTRBFileIO___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkTRBFileIO *arg1 = (btkTRBFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkTRBFileIO_impl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkTRBFileIO___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkTRBFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkTRBFileIO___deref__" "', argument " "1"" of type '" "btkTRBFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkTRBFileIO * >(argp1);
  {
    try {
      result = (btkTRBFileIO_impl *)((btkTRBFileIO const *)arg1)->operator ->();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkTRBFileIO_impl, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_btkTRBFileIO(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkTRBFileIO *arg1 = (btkTRBFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_btkTRBFileIO",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkTRBFileIO, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_btkTRBFileIO" "', argument " "1"" of type '" "btkTRBFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkTRBFileIO * >(argp1);
  {
    try {
      delete arg1;
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkTRBFileIO_GetFileType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkTRBFileIO *arg1 = (btkTRBFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisitionFileIO_impl::FileType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkTRBFileIO_GetFileType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkTRBFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkTRBFileIO_GetFileType" "', argument " "1"" of type '" "btkTRBFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkTRBFileIO * >(argp1);
  {
    try {
      result = (btkAcquisitionFileIO_impl::FileType)(*arg1)->GetFileType();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkTRBFileIO_GetByteOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkTRBFileIO *arg1 = (btkTRBFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisitionFileIO_impl::ByteOrder result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkTRBFileIO_GetByteOrder",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkTRBFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkTRBFileIO_GetByteOrder" "', argument " "1"" of type '" "btkTRBFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkTRBFileIO * >(argp1);
  {
    try {
      result = (btkAcquisitionFileIO_impl::ByteOrder)(*arg1)->GetByteOrder();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkTRBFileIO_GetByteOrderAsString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkTRBFileIO *arg1 = (btkTRBFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkTRBFileIO_GetByteOrderAsString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkTRBFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkTRBFileIO_GetByteOrderAsString" "', argument " "1"" of type '" "btkTRBFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkTRBFileIO * >(argp1);
  {
    try {
      result = (*arg1)->GetByteOrderAsString();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkTRBFileIO_SetByteOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkTRBFileIO *arg1 = (btkTRBFileIO *) 0 ;
  btkAcquisitionFileIO_impl::ByteOrder arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkTRBFileIO_SetByteOrder",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkTRBFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkTRBFileIO_SetByteOrder" "', argument " "1"" of type '" "btkTRBFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkTRBFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkTRBFileIO_SetByteOrder" "', argument " "2"" of type '" "btkAcquisitionFileIO_impl::ByteOrder""'");
  } 
  arg2 = static_cast< btkAcquisitionFileIO_impl::ByteOrder >(val2);
  {
    try {
      (*arg1)->SetByteOrder(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkTRBFileIO_GetStorageFormat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkTRBFileIO *arg1 = (btkTRBFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisitionFileIO_impl::StorageFormat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkTRBFileIO_GetStorageFormat",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkTRBFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkTRBFileIO_GetStorageFormat" "', argument " "1"" of type '" "btkTRBFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkTRBFileIO * >(argp1);
  {
    try {
      result = (btkAcquisitionFileIO_impl::StorageFormat)(*arg1)->GetStorageFormat();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkTRBFileIO_GetStorageFormatAsString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkTRBFileIO *arg1 = (btkTRBFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkTRBFileIO_GetStorageFormatAsString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkTRBFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkTRBFileIO_GetStorageFormatAsString" "', argument " "1"" of type '" "btkTRBFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkTRBFileIO * >(argp1);
  {
    try {
      result = (*arg1)->GetStorageFormatAsString();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkTRBFileIO_SetStorageFormat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkTRBFileIO *arg1 = (btkTRBFileIO *) 0 ;
  btkAcquisitionFileIO_impl::StorageFormat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkTRBFileIO_SetStorageFormat",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkTRBFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkTRBFileIO_SetStorageFormat" "', argument " "1"" of type '" "btkTRBFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkTRBFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkTRBFileIO_SetStorageFormat" "', argument " "2"" of type '" "btkAcquisitionFileIO_impl::StorageFormat""'");
  } 
  arg2 = static_cast< btkAcquisitionFileIO_impl::StorageFormat >(val2);
  {
    try {
      (*arg1)->SetStorageFormat(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkTRBFileIO_GetInternalsUpdateOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkTRBFileIO *arg1 = (btkTRBFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkTRBFileIO_GetInternalsUpdateOptions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkTRBFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkTRBFileIO_GetInternalsUpdateOptions" "', argument " "1"" of type '" "btkTRBFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkTRBFileIO * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetInternalsUpdateOptions();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkTRBFileIO_SetInternalsUpdateOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkTRBFileIO *arg1 = (btkTRBFileIO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkTRBFileIO_SetInternalsUpdateOptions",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkTRBFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkTRBFileIO_SetInternalsUpdateOptions" "', argument " "1"" of type '" "btkTRBFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkTRBFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkTRBFileIO_SetInternalsUpdateOptions" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->SetInternalsUpdateOptions(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkTRBFileIO_HasInternalsUpdateOption(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkTRBFileIO *arg1 = (btkTRBFileIO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkTRBFileIO_HasInternalsUpdateOption",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkTRBFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkTRBFileIO_HasInternalsUpdateOption" "', argument " "1"" of type '" "btkTRBFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkTRBFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkTRBFileIO_HasInternalsUpdateOption" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (bool)(*arg1)->HasInternalsUpdateOption(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkTRBFileIO_CanReadFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkTRBFileIO *arg1 = (btkTRBFileIO *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkTRBFileIO_CanReadFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkTRBFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkTRBFileIO_CanReadFile" "', argument " "1"" of type '" "btkTRBFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkTRBFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkTRBFileIO_CanReadFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkTRBFileIO_CanReadFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)(*arg1)->CanReadFile((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkTRBFileIO_CanWriteFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkTRBFileIO *arg1 = (btkTRBFileIO *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkTRBFileIO_CanWriteFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkTRBFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkTRBFileIO_CanWriteFile" "', argument " "1"" of type '" "btkTRBFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkTRBFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkTRBFileIO_CanWriteFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkTRBFileIO_CanWriteFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)(*arg1)->CanWriteFile((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkTRBFileIO_Read(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkTRBFileIO *arg1 = (btkTRBFileIO *) 0 ;
  std::string *arg2 = 0 ;
  btkAcquisition arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkTRBFileIO_Read",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkTRBFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkTRBFileIO_Read" "', argument " "1"" of type '" "btkTRBFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkTRBFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkTRBFileIO_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkTRBFileIO_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkAcquisition,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkTRBFileIO_Read" "', argument " "3"" of type '" "btkAcquisition""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkTRBFileIO_Read" "', argument " "3"" of type '" "btkAcquisition""'");
    } else {
      btkAcquisition * temp = reinterpret_cast< btkAcquisition * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->Read((std::string const &)*arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkTRBFileIO_Write(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkTRBFileIO *arg1 = (btkTRBFileIO *) 0 ;
  std::string *arg2 = 0 ;
  btkAcquisition arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkTRBFileIO_Write",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkTRBFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkTRBFileIO_Write" "', argument " "1"" of type '" "btkTRBFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkTRBFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkTRBFileIO_Write" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkTRBFileIO_Write" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkAcquisition,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkTRBFileIO_Write" "', argument " "3"" of type '" "btkAcquisition""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkTRBFileIO_Write" "', argument " "3"" of type '" "btkAcquisition""'");
    } else {
      btkAcquisition * temp = reinterpret_cast< btkAcquisition * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->Write((std::string const &)*arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *btkTRBFileIO_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_btkTRBFileIO, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_btkTRCFileIO__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkTRCFileIO *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_btkTRCFileIO")) SWIG_fail;
  {
    try {
      result = (btkTRCFileIO *)new btkTRCFileIO();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkTRCFileIO, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkTRCFileIO__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< btkAcquisitionFileIO > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkTRCFileIO *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_btkTRCFileIO",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_btkAcquisitionFileIO,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkTRCFileIO" "', argument " "1"" of type '" "btkAcquisitionFileIO const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkTRCFileIO" "', argument " "1"" of type '" "btkAcquisitionFileIO const""'");
    } else {
      btkAcquisitionFileIO * temp = reinterpret_cast< btkAcquisitionFileIO * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try {
      result = (btkTRCFileIO *)new btkTRCFileIO(arg1);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkTRCFileIO, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkTRCFileIO(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_btkTRCFileIO__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_btkAcquisitionFileIO, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_btkTRCFileIO__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_btkTRCFileIO'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkTRCFileIO::btkTRCFileIO()\n"
    "    btkTRCFileIO::btkTRCFileIO(btkAcquisitionFileIO const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkTRCFileIO___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkTRCFileIO *arg1 = (btkTRCFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkTRCFileIO_impl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkTRCFileIO___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkTRCFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkTRCFileIO___deref__" "', argument " "1"" of type '" "btkTRCFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkTRCFileIO * >(argp1);
  {
    try {
      result = (btkTRCFileIO_impl *)((btkTRCFileIO const *)arg1)->operator ->();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkTRCFileIO_impl, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_btkTRCFileIO(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkTRCFileIO *arg1 = (btkTRCFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_btkTRCFileIO",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkTRCFileIO, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_btkTRCFileIO" "', argument " "1"" of type '" "btkTRCFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkTRCFileIO * >(argp1);
  {
    try {
      delete arg1;
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkTRCFileIO_GetFileType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkTRCFileIO *arg1 = (btkTRCFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisitionFileIO_impl::FileType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkTRCFileIO_GetFileType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkTRCFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkTRCFileIO_GetFileType" "', argument " "1"" of type '" "btkTRCFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkTRCFileIO * >(argp1);
  {
    try {
      result = (btkAcquisitionFileIO_impl::FileType)(*arg1)->GetFileType();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkTRCFileIO_GetByteOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkTRCFileIO *arg1 = (btkTRCFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisitionFileIO_impl::ByteOrder result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkTRCFileIO_GetByteOrder",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkTRCFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkTRCFileIO_GetByteOrder" "', argument " "1"" of type '" "btkTRCFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkTRCFileIO * >(argp1);
  {
    try {
      result = (btkAcquisitionFileIO_impl::ByteOrder)(*arg1)->GetByteOrder();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkTRCFileIO_GetByteOrderAsString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkTRCFileIO *arg1 = (btkTRCFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkTRCFileIO_GetByteOrderAsString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkTRCFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkTRCFileIO_GetByteOrderAsString" "', argument " "1"" of type '" "btkTRCFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkTRCFileIO * >(argp1);
  {
    try {
      result = (*arg1)->GetByteOrderAsString();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkTRCFileIO_SetByteOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkTRCFileIO *arg1 = (btkTRCFileIO *) 0 ;
  btkAcquisitionFileIO_impl::ByteOrder arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkTRCFileIO_SetByteOrder",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkTRCFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkTRCFileIO_SetByteOrder" "', argument " "1"" of type '" "btkTRCFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkTRCFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkTRCFileIO_SetByteOrder" "', argument " "2"" of type '" "btkAcquisitionFileIO_impl::ByteOrder""'");
  } 
  arg2 = static_cast< btkAcquisitionFileIO_impl::ByteOrder >(val2);
  {
    try {
      (*arg1)->SetByteOrder(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkTRCFileIO_GetStorageFormat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkTRCFileIO *arg1 = (btkTRCFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisitionFileIO_impl::StorageFormat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkTRCFileIO_GetStorageFormat",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkTRCFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkTRCFileIO_GetStorageFormat" "', argument " "1"" of type '" "btkTRCFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkTRCFileIO * >(argp1);
  {
    try {
      result = (btkAcquisitionFileIO_impl::StorageFormat)(*arg1)->GetStorageFormat();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkTRCFileIO_GetStorageFormatAsString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkTRCFileIO *arg1 = (btkTRCFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkTRCFileIO_GetStorageFormatAsString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkTRCFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkTRCFileIO_GetStorageFormatAsString" "', argument " "1"" of type '" "btkTRCFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkTRCFileIO * >(argp1);
  {
    try {
      result = (*arg1)->GetStorageFormatAsString();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkTRCFileIO_SetStorageFormat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkTRCFileIO *arg1 = (btkTRCFileIO *) 0 ;
  btkAcquisitionFileIO_impl::StorageFormat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkTRCFileIO_SetStorageFormat",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkTRCFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkTRCFileIO_SetStorageFormat" "', argument " "1"" of type '" "btkTRCFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkTRCFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkTRCFileIO_SetStorageFormat" "', argument " "2"" of type '" "btkAcquisitionFileIO_impl::StorageFormat""'");
  } 
  arg2 = static_cast< btkAcquisitionFileIO_impl::StorageFormat >(val2);
  {
    try {
      (*arg1)->SetStorageFormat(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkTRCFileIO_GetInternalsUpdateOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkTRCFileIO *arg1 = (btkTRCFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkTRCFileIO_GetInternalsUpdateOptions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkTRCFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkTRCFileIO_GetInternalsUpdateOptions" "', argument " "1"" of type '" "btkTRCFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkTRCFileIO * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetInternalsUpdateOptions();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkTRCFileIO_SetInternalsUpdateOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkTRCFileIO *arg1 = (btkTRCFileIO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkTRCFileIO_SetInternalsUpdateOptions",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkTRCFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkTRCFileIO_SetInternalsUpdateOptions" "', argument " "1"" of type '" "btkTRCFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkTRCFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkTRCFileIO_SetInternalsUpdateOptions" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->SetInternalsUpdateOptions(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkTRCFileIO_HasInternalsUpdateOption(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkTRCFileIO *arg1 = (btkTRCFileIO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkTRCFileIO_HasInternalsUpdateOption",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkTRCFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkTRCFileIO_HasInternalsUpdateOption" "', argument " "1"" of type '" "btkTRCFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkTRCFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkTRCFileIO_HasInternalsUpdateOption" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (bool)(*arg1)->HasInternalsUpdateOption(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkTRCFileIO_CanReadFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkTRCFileIO *arg1 = (btkTRCFileIO *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkTRCFileIO_CanReadFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkTRCFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkTRCFileIO_CanReadFile" "', argument " "1"" of type '" "btkTRCFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkTRCFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkTRCFileIO_CanReadFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkTRCFileIO_CanReadFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)(*arg1)->CanReadFile((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkTRCFileIO_CanWriteFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkTRCFileIO *arg1 = (btkTRCFileIO *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkTRCFileIO_CanWriteFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkTRCFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkTRCFileIO_CanWriteFile" "', argument " "1"" of type '" "btkTRCFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkTRCFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkTRCFileIO_CanWriteFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkTRCFileIO_CanWriteFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)(*arg1)->CanWriteFile((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkTRCFileIO_Read(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkTRCFileIO *arg1 = (btkTRCFileIO *) 0 ;
  std::string *arg2 = 0 ;
  btkAcquisition arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkTRCFileIO_Read",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkTRCFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkTRCFileIO_Read" "', argument " "1"" of type '" "btkTRCFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkTRCFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkTRCFileIO_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkTRCFileIO_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkAcquisition,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkTRCFileIO_Read" "', argument " "3"" of type '" "btkAcquisition""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkTRCFileIO_Read" "', argument " "3"" of type '" "btkAcquisition""'");
    } else {
      btkAcquisition * temp = reinterpret_cast< btkAcquisition * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->Read((std::string const &)*arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkTRCFileIO_Write(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkTRCFileIO *arg1 = (btkTRCFileIO *) 0 ;
  std::string *arg2 = 0 ;
  btkAcquisition arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkTRCFileIO_Write",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkTRCFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkTRCFileIO_Write" "', argument " "1"" of type '" "btkTRCFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkTRCFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkTRCFileIO_Write" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkTRCFileIO_Write" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkAcquisition,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkTRCFileIO_Write" "', argument " "3"" of type '" "btkAcquisition""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkTRCFileIO_Write" "', argument " "3"" of type '" "btkAcquisition""'");
    } else {
      btkAcquisition * temp = reinterpret_cast< btkAcquisition * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->Write((std::string const &)*arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *btkTRCFileIO_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_btkTRCFileIO, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_btkXLSOrthoTrakFileIO__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkXLSOrthoTrakFileIO *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_btkXLSOrthoTrakFileIO")) SWIG_fail;
  {
    try {
      result = (btkXLSOrthoTrakFileIO *)new btkXLSOrthoTrakFileIO();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkXLSOrthoTrakFileIO, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkXLSOrthoTrakFileIO__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< btkAcquisitionFileIO > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkXLSOrthoTrakFileIO *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_btkXLSOrthoTrakFileIO",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_btkAcquisitionFileIO,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkXLSOrthoTrakFileIO" "', argument " "1"" of type '" "btkAcquisitionFileIO const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkXLSOrthoTrakFileIO" "', argument " "1"" of type '" "btkAcquisitionFileIO const""'");
    } else {
      btkAcquisitionFileIO * temp = reinterpret_cast< btkAcquisitionFileIO * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try {
      result = (btkXLSOrthoTrakFileIO *)new btkXLSOrthoTrakFileIO(arg1);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkXLSOrthoTrakFileIO, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkXLSOrthoTrakFileIO(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_btkXLSOrthoTrakFileIO__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_btkAcquisitionFileIO, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_btkXLSOrthoTrakFileIO__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_btkXLSOrthoTrakFileIO'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkXLSOrthoTrakFileIO::btkXLSOrthoTrakFileIO()\n"
    "    btkXLSOrthoTrakFileIO::btkXLSOrthoTrakFileIO(btkAcquisitionFileIO const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkXLSOrthoTrakFileIO___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkXLSOrthoTrakFileIO *arg1 = (btkXLSOrthoTrakFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkXLSOrthoTrakFileIO_impl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkXLSOrthoTrakFileIO___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkXLSOrthoTrakFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkXLSOrthoTrakFileIO___deref__" "', argument " "1"" of type '" "btkXLSOrthoTrakFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkXLSOrthoTrakFileIO * >(argp1);
  {
    try {
      result = (btkXLSOrthoTrakFileIO_impl *)((btkXLSOrthoTrakFileIO const *)arg1)->operator ->();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkXLSOrthoTrakFileIO_impl, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_btkXLSOrthoTrakFileIO(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkXLSOrthoTrakFileIO *arg1 = (btkXLSOrthoTrakFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_btkXLSOrthoTrakFileIO",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkXLSOrthoTrakFileIO, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_btkXLSOrthoTrakFileIO" "', argument " "1"" of type '" "btkXLSOrthoTrakFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkXLSOrthoTrakFileIO * >(argp1);
  {
    try {
      delete arg1;
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkXLSOrthoTrakFileIO_GetFileType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkXLSOrthoTrakFileIO *arg1 = (btkXLSOrthoTrakFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisitionFileIO_impl::FileType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkXLSOrthoTrakFileIO_GetFileType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkXLSOrthoTrakFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkXLSOrthoTrakFileIO_GetFileType" "', argument " "1"" of type '" "btkXLSOrthoTrakFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkXLSOrthoTrakFileIO * >(argp1);
  {
    try {
      result = (btkAcquisitionFileIO_impl::FileType)(*arg1)->GetFileType();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkXLSOrthoTrakFileIO_GetByteOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkXLSOrthoTrakFileIO *arg1 = (btkXLSOrthoTrakFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisitionFileIO_impl::ByteOrder result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkXLSOrthoTrakFileIO_GetByteOrder",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkXLSOrthoTrakFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkXLSOrthoTrakFileIO_GetByteOrder" "', argument " "1"" of type '" "btkXLSOrthoTrakFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkXLSOrthoTrakFileIO * >(argp1);
  {
    try {
      result = (btkAcquisitionFileIO_impl::ByteOrder)(*arg1)->GetByteOrder();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkXLSOrthoTrakFileIO_GetByteOrderAsString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkXLSOrthoTrakFileIO *arg1 = (btkXLSOrthoTrakFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkXLSOrthoTrakFileIO_GetByteOrderAsString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkXLSOrthoTrakFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkXLSOrthoTrakFileIO_GetByteOrderAsString" "', argument " "1"" of type '" "btkXLSOrthoTrakFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkXLSOrthoTrakFileIO * >(argp1);
  {
    try {
      result = (*arg1)->GetByteOrderAsString();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkXLSOrthoTrakFileIO_SetByteOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkXLSOrthoTrakFileIO *arg1 = (btkXLSOrthoTrakFileIO *) 0 ;
  btkAcquisitionFileIO_impl::ByteOrder arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkXLSOrthoTrakFileIO_SetByteOrder",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkXLSOrthoTrakFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkXLSOrthoTrakFileIO_SetByteOrder" "', argument " "1"" of type '" "btkXLSOrthoTrakFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkXLSOrthoTrakFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkXLSOrthoTrakFileIO_SetByteOrder" "', argument " "2"" of type '" "btkAcquisitionFileIO_impl::ByteOrder""'");
  } 
  arg2 = static_cast< btkAcquisitionFileIO_impl::ByteOrder >(val2);
  {
    try {
      (*arg1)->SetByteOrder(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkXLSOrthoTrakFileIO_GetStorageFormat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkXLSOrthoTrakFileIO *arg1 = (btkXLSOrthoTrakFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisitionFileIO_impl::StorageFormat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkXLSOrthoTrakFileIO_GetStorageFormat",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkXLSOrthoTrakFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkXLSOrthoTrakFileIO_GetStorageFormat" "', argument " "1"" of type '" "btkXLSOrthoTrakFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkXLSOrthoTrakFileIO * >(argp1);
  {
    try {
      result = (btkAcquisitionFileIO_impl::StorageFormat)(*arg1)->GetStorageFormat();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkXLSOrthoTrakFileIO_GetStorageFormatAsString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkXLSOrthoTrakFileIO *arg1 = (btkXLSOrthoTrakFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkXLSOrthoTrakFileIO_GetStorageFormatAsString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkXLSOrthoTrakFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkXLSOrthoTrakFileIO_GetStorageFormatAsString" "', argument " "1"" of type '" "btkXLSOrthoTrakFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkXLSOrthoTrakFileIO * >(argp1);
  {
    try {
      result = (*arg1)->GetStorageFormatAsString();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkXLSOrthoTrakFileIO_SetStorageFormat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkXLSOrthoTrakFileIO *arg1 = (btkXLSOrthoTrakFileIO *) 0 ;
  btkAcquisitionFileIO_impl::StorageFormat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkXLSOrthoTrakFileIO_SetStorageFormat",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkXLSOrthoTrakFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkXLSOrthoTrakFileIO_SetStorageFormat" "', argument " "1"" of type '" "btkXLSOrthoTrakFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkXLSOrthoTrakFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkXLSOrthoTrakFileIO_SetStorageFormat" "', argument " "2"" of type '" "btkAcquisitionFileIO_impl::StorageFormat""'");
  } 
  arg2 = static_cast< btkAcquisitionFileIO_impl::StorageFormat >(val2);
  {
    try {
      (*arg1)->SetStorageFormat(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkXLSOrthoTrakFileIO_GetInternalsUpdateOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkXLSOrthoTrakFileIO *arg1 = (btkXLSOrthoTrakFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkXLSOrthoTrakFileIO_GetInternalsUpdateOptions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkXLSOrthoTrakFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkXLSOrthoTrakFileIO_GetInternalsUpdateOptions" "', argument " "1"" of type '" "btkXLSOrthoTrakFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkXLSOrthoTrakFileIO * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetInternalsUpdateOptions();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkXLSOrthoTrakFileIO_SetInternalsUpdateOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkXLSOrthoTrakFileIO *arg1 = (btkXLSOrthoTrakFileIO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkXLSOrthoTrakFileIO_SetInternalsUpdateOptions",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkXLSOrthoTrakFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkXLSOrthoTrakFileIO_SetInternalsUpdateOptions" "', argument " "1"" of type '" "btkXLSOrthoTrakFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkXLSOrthoTrakFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkXLSOrthoTrakFileIO_SetInternalsUpdateOptions" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->SetInternalsUpdateOptions(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkXLSOrthoTrakFileIO_HasInternalsUpdateOption(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkXLSOrthoTrakFileIO *arg1 = (btkXLSOrthoTrakFileIO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkXLSOrthoTrakFileIO_HasInternalsUpdateOption",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkXLSOrthoTrakFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkXLSOrthoTrakFileIO_HasInternalsUpdateOption" "', argument " "1"" of type '" "btkXLSOrthoTrakFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkXLSOrthoTrakFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkXLSOrthoTrakFileIO_HasInternalsUpdateOption" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (bool)(*arg1)->HasInternalsUpdateOption(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkXLSOrthoTrakFileIO_CanReadFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkXLSOrthoTrakFileIO *arg1 = (btkXLSOrthoTrakFileIO *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkXLSOrthoTrakFileIO_CanReadFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkXLSOrthoTrakFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkXLSOrthoTrakFileIO_CanReadFile" "', argument " "1"" of type '" "btkXLSOrthoTrakFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkXLSOrthoTrakFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkXLSOrthoTrakFileIO_CanReadFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkXLSOrthoTrakFileIO_CanReadFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)(*arg1)->CanReadFile((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkXLSOrthoTrakFileIO_CanWriteFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkXLSOrthoTrakFileIO *arg1 = (btkXLSOrthoTrakFileIO *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkXLSOrthoTrakFileIO_CanWriteFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkXLSOrthoTrakFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkXLSOrthoTrakFileIO_CanWriteFile" "', argument " "1"" of type '" "btkXLSOrthoTrakFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkXLSOrthoTrakFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkXLSOrthoTrakFileIO_CanWriteFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkXLSOrthoTrakFileIO_CanWriteFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)(*arg1)->CanWriteFile((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkXLSOrthoTrakFileIO_Read(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkXLSOrthoTrakFileIO *arg1 = (btkXLSOrthoTrakFileIO *) 0 ;
  std::string *arg2 = 0 ;
  btkAcquisition arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkXLSOrthoTrakFileIO_Read",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkXLSOrthoTrakFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkXLSOrthoTrakFileIO_Read" "', argument " "1"" of type '" "btkXLSOrthoTrakFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkXLSOrthoTrakFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkXLSOrthoTrakFileIO_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkXLSOrthoTrakFileIO_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkAcquisition,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkXLSOrthoTrakFileIO_Read" "', argument " "3"" of type '" "btkAcquisition""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkXLSOrthoTrakFileIO_Read" "', argument " "3"" of type '" "btkAcquisition""'");
    } else {
      btkAcquisition * temp = reinterpret_cast< btkAcquisition * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->Read((std::string const &)*arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkXLSOrthoTrakFileIO_Write(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkXLSOrthoTrakFileIO *arg1 = (btkXLSOrthoTrakFileIO *) 0 ;
  std::string *arg2 = 0 ;
  btkAcquisition arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkXLSOrthoTrakFileIO_Write",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkXLSOrthoTrakFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkXLSOrthoTrakFileIO_Write" "', argument " "1"" of type '" "btkXLSOrthoTrakFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkXLSOrthoTrakFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkXLSOrthoTrakFileIO_Write" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkXLSOrthoTrakFileIO_Write" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkAcquisition,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkXLSOrthoTrakFileIO_Write" "', argument " "3"" of type '" "btkAcquisition""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkXLSOrthoTrakFileIO_Write" "', argument " "3"" of type '" "btkAcquisition""'");
    } else {
      btkAcquisition * temp = reinterpret_cast< btkAcquisition * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->Write((std::string const &)*arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *btkXLSOrthoTrakFileIO_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_btkXLSOrthoTrakFileIO, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_btkXMOVEFileIO__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkXMOVEFileIO *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_btkXMOVEFileIO")) SWIG_fail;
  {
    try {
      result = (btkXMOVEFileIO *)new btkXMOVEFileIO();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkXMOVEFileIO, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkXMOVEFileIO__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< btkAcquisitionFileIO > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkXMOVEFileIO *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_btkXMOVEFileIO",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_btkAcquisitionFileIO,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkXMOVEFileIO" "', argument " "1"" of type '" "btkAcquisitionFileIO const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkXMOVEFileIO" "', argument " "1"" of type '" "btkAcquisitionFileIO const""'");
    } else {
      btkAcquisitionFileIO * temp = reinterpret_cast< btkAcquisitionFileIO * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try {
      result = (btkXMOVEFileIO *)new btkXMOVEFileIO(arg1);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkXMOVEFileIO, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkXMOVEFileIO(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_btkXMOVEFileIO__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_btkAcquisitionFileIO, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_btkXMOVEFileIO__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_btkXMOVEFileIO'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkXMOVEFileIO::btkXMOVEFileIO()\n"
    "    btkXMOVEFileIO::btkXMOVEFileIO(btkAcquisitionFileIO const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkXMOVEFileIO___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkXMOVEFileIO *arg1 = (btkXMOVEFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkXMOVEFileIO_impl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkXMOVEFileIO___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkXMOVEFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkXMOVEFileIO___deref__" "', argument " "1"" of type '" "btkXMOVEFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkXMOVEFileIO * >(argp1);
  {
    try {
      result = (btkXMOVEFileIO_impl *)((btkXMOVEFileIO const *)arg1)->operator ->();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkXMOVEFileIO_impl, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_btkXMOVEFileIO(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkXMOVEFileIO *arg1 = (btkXMOVEFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_btkXMOVEFileIO",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkXMOVEFileIO, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_btkXMOVEFileIO" "', argument " "1"" of type '" "btkXMOVEFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkXMOVEFileIO * >(argp1);
  {
    try {
      delete arg1;
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkXMOVEFileIO_GetFileType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkXMOVEFileIO *arg1 = (btkXMOVEFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisitionFileIO_impl::FileType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkXMOVEFileIO_GetFileType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkXMOVEFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkXMOVEFileIO_GetFileType" "', argument " "1"" of type '" "btkXMOVEFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkXMOVEFileIO * >(argp1);
  {
    try {
      result = (btkAcquisitionFileIO_impl::FileType)(*arg1)->GetFileType();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkXMOVEFileIO_GetByteOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkXMOVEFileIO *arg1 = (btkXMOVEFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisitionFileIO_impl::ByteOrder result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkXMOVEFileIO_GetByteOrder",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkXMOVEFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkXMOVEFileIO_GetByteOrder" "', argument " "1"" of type '" "btkXMOVEFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkXMOVEFileIO * >(argp1);
  {
    try {
      result = (btkAcquisitionFileIO_impl::ByteOrder)(*arg1)->GetByteOrder();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkXMOVEFileIO_GetByteOrderAsString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkXMOVEFileIO *arg1 = (btkXMOVEFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkXMOVEFileIO_GetByteOrderAsString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkXMOVEFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkXMOVEFileIO_GetByteOrderAsString" "', argument " "1"" of type '" "btkXMOVEFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkXMOVEFileIO * >(argp1);
  {
    try {
      result = (*arg1)->GetByteOrderAsString();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkXMOVEFileIO_SetByteOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkXMOVEFileIO *arg1 = (btkXMOVEFileIO *) 0 ;
  btkAcquisitionFileIO_impl::ByteOrder arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkXMOVEFileIO_SetByteOrder",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkXMOVEFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkXMOVEFileIO_SetByteOrder" "', argument " "1"" of type '" "btkXMOVEFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkXMOVEFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkXMOVEFileIO_SetByteOrder" "', argument " "2"" of type '" "btkAcquisitionFileIO_impl::ByteOrder""'");
  } 
  arg2 = static_cast< btkAcquisitionFileIO_impl::ByteOrder >(val2);
  {
    try {
      (*arg1)->SetByteOrder(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkXMOVEFileIO_GetStorageFormat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkXMOVEFileIO *arg1 = (btkXMOVEFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisitionFileIO_impl::StorageFormat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkXMOVEFileIO_GetStorageFormat",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkXMOVEFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkXMOVEFileIO_GetStorageFormat" "', argument " "1"" of type '" "btkXMOVEFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkXMOVEFileIO * >(argp1);
  {
    try {
      result = (btkAcquisitionFileIO_impl::StorageFormat)(*arg1)->GetStorageFormat();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkXMOVEFileIO_GetStorageFormatAsString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkXMOVEFileIO *arg1 = (btkXMOVEFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkXMOVEFileIO_GetStorageFormatAsString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkXMOVEFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkXMOVEFileIO_GetStorageFormatAsString" "', argument " "1"" of type '" "btkXMOVEFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkXMOVEFileIO * >(argp1);
  {
    try {
      result = (*arg1)->GetStorageFormatAsString();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkXMOVEFileIO_SetStorageFormat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkXMOVEFileIO *arg1 = (btkXMOVEFileIO *) 0 ;
  btkAcquisitionFileIO_impl::StorageFormat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkXMOVEFileIO_SetStorageFormat",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkXMOVEFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkXMOVEFileIO_SetStorageFormat" "', argument " "1"" of type '" "btkXMOVEFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkXMOVEFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkXMOVEFileIO_SetStorageFormat" "', argument " "2"" of type '" "btkAcquisitionFileIO_impl::StorageFormat""'");
  } 
  arg2 = static_cast< btkAcquisitionFileIO_impl::StorageFormat >(val2);
  {
    try {
      (*arg1)->SetStorageFormat(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkXMOVEFileIO_GetInternalsUpdateOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkXMOVEFileIO *arg1 = (btkXMOVEFileIO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkXMOVEFileIO_GetInternalsUpdateOptions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkXMOVEFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkXMOVEFileIO_GetInternalsUpdateOptions" "', argument " "1"" of type '" "btkXMOVEFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkXMOVEFileIO * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetInternalsUpdateOptions();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkXMOVEFileIO_SetInternalsUpdateOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkXMOVEFileIO *arg1 = (btkXMOVEFileIO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkXMOVEFileIO_SetInternalsUpdateOptions",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkXMOVEFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkXMOVEFileIO_SetInternalsUpdateOptions" "', argument " "1"" of type '" "btkXMOVEFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkXMOVEFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkXMOVEFileIO_SetInternalsUpdateOptions" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->SetInternalsUpdateOptions(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkXMOVEFileIO_HasInternalsUpdateOption(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkXMOVEFileIO *arg1 = (btkXMOVEFileIO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkXMOVEFileIO_HasInternalsUpdateOption",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkXMOVEFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkXMOVEFileIO_HasInternalsUpdateOption" "', argument " "1"" of type '" "btkXMOVEFileIO const *""'"); 
  }
  arg1 = reinterpret_cast< btkXMOVEFileIO * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkXMOVEFileIO_HasInternalsUpdateOption" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (bool)(*arg1)->HasInternalsUpdateOption(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkXMOVEFileIO_CanReadFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkXMOVEFileIO *arg1 = (btkXMOVEFileIO *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkXMOVEFileIO_CanReadFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkXMOVEFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkXMOVEFileIO_CanReadFile" "', argument " "1"" of type '" "btkXMOVEFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkXMOVEFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkXMOVEFileIO_CanReadFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkXMOVEFileIO_CanReadFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)(*arg1)->CanReadFile((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkXMOVEFileIO_CanWriteFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkXMOVEFileIO *arg1 = (btkXMOVEFileIO *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkXMOVEFileIO_CanWriteFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkXMOVEFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkXMOVEFileIO_CanWriteFile" "', argument " "1"" of type '" "btkXMOVEFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkXMOVEFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkXMOVEFileIO_CanWriteFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkXMOVEFileIO_CanWriteFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)(*arg1)->CanWriteFile((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkXMOVEFileIO_Read(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkXMOVEFileIO *arg1 = (btkXMOVEFileIO *) 0 ;
  std::string *arg2 = 0 ;
  btkAcquisition arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkXMOVEFileIO_Read",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkXMOVEFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkXMOVEFileIO_Read" "', argument " "1"" of type '" "btkXMOVEFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkXMOVEFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkXMOVEFileIO_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkXMOVEFileIO_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkAcquisition,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkXMOVEFileIO_Read" "', argument " "3"" of type '" "btkAcquisition""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkXMOVEFileIO_Read" "', argument " "3"" of type '" "btkAcquisition""'");
    } else {
      btkAcquisition * temp = reinterpret_cast< btkAcquisition * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->Read((std::string const &)*arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkXMOVEFileIO_Write(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkXMOVEFileIO *arg1 = (btkXMOVEFileIO *) 0 ;
  std::string *arg2 = 0 ;
  btkAcquisition arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkXMOVEFileIO_Write",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkXMOVEFileIO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkXMOVEFileIO_Write" "', argument " "1"" of type '" "btkXMOVEFileIO *""'"); 
  }
  arg1 = reinterpret_cast< btkXMOVEFileIO * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkXMOVEFileIO_Write" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkXMOVEFileIO_Write" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkAcquisition,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkXMOVEFileIO_Write" "', argument " "3"" of type '" "btkAcquisition""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkXMOVEFileIO_Write" "', argument " "3"" of type '" "btkAcquisition""'");
    } else {
      btkAcquisition * temp = reinterpret_cast< btkAcquisition * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->Write((std::string const &)*arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *btkXMOVEFileIO_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_btkXMOVEFileIO, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_btkAcquisitionUnitConverter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisitionUnitConverter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_btkAcquisitionUnitConverter")) SWIG_fail;
  {
    try {
      result = (btkAcquisitionUnitConverter *)new btkAcquisitionUnitConverter();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkAcquisitionUnitConverter, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisitionUnitConverter___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisitionUnitConverter *arg1 = (btkAcquisitionUnitConverter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisitionUnitConverter_impl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisitionUnitConverter___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisitionUnitConverter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisitionUnitConverter___deref__" "', argument " "1"" of type '" "btkAcquisitionUnitConverter const *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisitionUnitConverter * >(argp1);
  {
    try {
      result = (btkAcquisitionUnitConverter_impl *)((btkAcquisitionUnitConverter const *)arg1)->operator ->();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkAcquisitionUnitConverter_impl, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_btkAcquisitionUnitConverter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisitionUnitConverter *arg1 = (btkAcquisitionUnitConverter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_btkAcquisitionUnitConverter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisitionUnitConverter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_btkAcquisitionUnitConverter" "', argument " "1"" of type '" "btkAcquisitionUnitConverter *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisitionUnitConverter * >(argp1);
  {
    try {
      delete arg1;
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisitionUnitConverter_GetInput(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisitionUnitConverter *arg1 = (btkAcquisitionUnitConverter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisition result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisitionUnitConverter_GetInput",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisitionUnitConverter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisitionUnitConverter_GetInput" "', argument " "1"" of type '" "btkAcquisitionUnitConverter *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisitionUnitConverter * >(argp1);
  {
    try {
      result = (*arg1)->GetInput();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkAcquisition(static_cast< const btkAcquisition& >(result))), SWIGTYPE_p_btkAcquisition, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisitionUnitConverter_SetInput(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisitionUnitConverter *arg1 = (btkAcquisitionUnitConverter *) 0 ;
  btkAcquisition arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAcquisitionUnitConverter_SetInput",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisitionUnitConverter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisitionUnitConverter_SetInput" "', argument " "1"" of type '" "btkAcquisitionUnitConverter *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisitionUnitConverter * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkAcquisition,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkAcquisitionUnitConverter_SetInput" "', argument " "2"" of type '" "btkAcquisition""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkAcquisitionUnitConverter_SetInput" "', argument " "2"" of type '" "btkAcquisition""'");
    } else {
      btkAcquisition * temp = reinterpret_cast< btkAcquisition * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->SetInput(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisitionUnitConverter_GetOutput(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisitionUnitConverter *arg1 = (btkAcquisitionUnitConverter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisition result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisitionUnitConverter_GetOutput",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisitionUnitConverter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisitionUnitConverter_GetOutput" "', argument " "1"" of type '" "btkAcquisitionUnitConverter *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisitionUnitConverter * >(argp1);
  {
    try {
      result = (*arg1)->GetOutput();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkAcquisition(static_cast< const btkAcquisition& >(result))), SWIGTYPE_p_btkAcquisition, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisitionUnitConverter_SetUnit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisitionUnitConverter *arg1 = (btkAcquisitionUnitConverter *) 0 ;
  btkAcquisitionUnitConverter_impl::Unit arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkAcquisitionUnitConverter_SetUnit",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisitionUnitConverter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisitionUnitConverter_SetUnit" "', argument " "1"" of type '" "btkAcquisitionUnitConverter *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisitionUnitConverter * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkAcquisitionUnitConverter_SetUnit" "', argument " "2"" of type '" "btkAcquisitionUnitConverter_impl::Unit""'");
  } 
  arg2 = static_cast< btkAcquisitionUnitConverter_impl::Unit >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkAcquisitionUnitConverter_SetUnit" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkAcquisitionUnitConverter_SetUnit" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (*arg1)->SetUnit(arg2,(std::string const &)*arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisitionUnitConverter_GetUnit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisitionUnitConverter *arg1 = (btkAcquisitionUnitConverter *) 0 ;
  btkAcquisitionUnitConverter_impl::Unit arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAcquisitionUnitConverter_GetUnit",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisitionUnitConverter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisitionUnitConverter_GetUnit" "', argument " "1"" of type '" "btkAcquisitionUnitConverter *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisitionUnitConverter * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkAcquisitionUnitConverter_GetUnit" "', argument " "2"" of type '" "btkAcquisitionUnitConverter_impl::Unit""'");
  } 
  arg2 = static_cast< btkAcquisitionUnitConverter_impl::Unit >(val2);
  {
    try {
      result = (std::string *) &(*arg1)->GetUnit(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisitionUnitConverter_GetInputNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisitionUnitConverter *arg1 = (btkAcquisitionUnitConverter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisitionUnitConverter_GetInputNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisitionUnitConverter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisitionUnitConverter_GetInputNumber" "', argument " "1"" of type '" "btkAcquisitionUnitConverter const *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisitionUnitConverter * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetInputNumber();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisitionUnitConverter_GetValidInputNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisitionUnitConverter *arg1 = (btkAcquisitionUnitConverter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisitionUnitConverter_GetValidInputNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisitionUnitConverter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisitionUnitConverter_GetValidInputNumber" "', argument " "1"" of type '" "btkAcquisitionUnitConverter const *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisitionUnitConverter * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetValidInputNumber();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisitionUnitConverter_GetOutputNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisitionUnitConverter *arg1 = (btkAcquisitionUnitConverter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisitionUnitConverter_GetOutputNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisitionUnitConverter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisitionUnitConverter_GetOutputNumber" "', argument " "1"" of type '" "btkAcquisitionUnitConverter const *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisitionUnitConverter * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetOutputNumber();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisitionUnitConverter_ResetState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisitionUnitConverter *arg1 = (btkAcquisitionUnitConverter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisitionUnitConverter_ResetState",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisitionUnitConverter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisitionUnitConverter_ResetState" "', argument " "1"" of type '" "btkAcquisitionUnitConverter *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisitionUnitConverter * >(argp1);
  {
    try {
      (*arg1)->ResetState();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisitionUnitConverter_Update(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisitionUnitConverter *arg1 = (btkAcquisitionUnitConverter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisitionUnitConverter_Update",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisitionUnitConverter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisitionUnitConverter_Update" "', argument " "1"" of type '" "btkAcquisitionUnitConverter *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisitionUnitConverter * >(argp1);
  {
    try {
      (*arg1)->Update();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAcquisitionUnitConverter_GetTimestamp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAcquisitionUnitConverter *arg1 = (btkAcquisitionUnitConverter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAcquisitionUnitConverter_GetTimestamp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAcquisitionUnitConverter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAcquisitionUnitConverter_GetTimestamp" "', argument " "1"" of type '" "btkAcquisitionUnitConverter const *""'"); 
  }
  arg1 = reinterpret_cast< btkAcquisitionUnitConverter * >(argp1);
  {
    try {
      result = (unsigned long)(*arg1)->GetTimestamp();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *btkAcquisitionUnitConverter_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_btkAcquisitionUnitConverter, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_btkAnalogOffsetRemover(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalogOffsetRemover *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_btkAnalogOffsetRemover")) SWIG_fail;
  {
    try {
      result = (btkAnalogOffsetRemover *)new btkAnalogOffsetRemover();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkAnalogOffsetRemover, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalogOffsetRemover___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalogOffsetRemover *arg1 = (btkAnalogOffsetRemover *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAnalogOffsetRemover_impl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAnalogOffsetRemover___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalogOffsetRemover, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalogOffsetRemover___deref__" "', argument " "1"" of type '" "btkAnalogOffsetRemover const *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalogOffsetRemover * >(argp1);
  {
    try {
      result = (btkAnalogOffsetRemover_impl *)((btkAnalogOffsetRemover const *)arg1)->operator ->();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkAnalogOffsetRemover_impl, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_btkAnalogOffsetRemover(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalogOffsetRemover *arg1 = (btkAnalogOffsetRemover *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_btkAnalogOffsetRemover",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalogOffsetRemover, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_btkAnalogOffsetRemover" "', argument " "1"" of type '" "btkAnalogOffsetRemover *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalogOffsetRemover * >(argp1);
  {
    try {
      delete arg1;
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalogOffsetRemover_SetRawInput(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalogOffsetRemover *arg1 = (btkAnalogOffsetRemover *) 0 ;
  btkAcquisition arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAnalogOffsetRemover_SetRawInput",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalogOffsetRemover, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalogOffsetRemover_SetRawInput" "', argument " "1"" of type '" "btkAnalogOffsetRemover *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalogOffsetRemover * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkAcquisition,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkAnalogOffsetRemover_SetRawInput" "', argument " "2"" of type '" "btkAcquisition""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkAnalogOffsetRemover_SetRawInput" "', argument " "2"" of type '" "btkAcquisition""'");
    } else {
      btkAcquisition * temp = reinterpret_cast< btkAcquisition * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->SetRawInput(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalogOffsetRemover_GetRawInput(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalogOffsetRemover *arg1 = (btkAnalogOffsetRemover *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisition result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAnalogOffsetRemover_GetRawInput",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalogOffsetRemover, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalogOffsetRemover_GetRawInput" "', argument " "1"" of type '" "btkAnalogOffsetRemover *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalogOffsetRemover * >(argp1);
  {
    try {
      result = (*arg1)->GetRawInput();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkAcquisition(static_cast< const btkAcquisition& >(result))), SWIGTYPE_p_btkAcquisition, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalogOffsetRemover_SetOffsetInput(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalogOffsetRemover *arg1 = (btkAnalogOffsetRemover *) 0 ;
  btkAcquisition arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkAnalogOffsetRemover_SetOffsetInput",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalogOffsetRemover, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalogOffsetRemover_SetOffsetInput" "', argument " "1"" of type '" "btkAnalogOffsetRemover *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalogOffsetRemover * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkAcquisition,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkAnalogOffsetRemover_SetOffsetInput" "', argument " "2"" of type '" "btkAcquisition""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkAnalogOffsetRemover_SetOffsetInput" "', argument " "2"" of type '" "btkAcquisition""'");
    } else {
      btkAcquisition * temp = reinterpret_cast< btkAcquisition * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->SetOffsetInput(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalogOffsetRemover_GetOffsetInput(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalogOffsetRemover *arg1 = (btkAnalogOffsetRemover *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisition result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAnalogOffsetRemover_GetOffsetInput",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalogOffsetRemover, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalogOffsetRemover_GetOffsetInput" "', argument " "1"" of type '" "btkAnalogOffsetRemover *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalogOffsetRemover * >(argp1);
  {
    try {
      result = (*arg1)->GetOffsetInput();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkAcquisition(static_cast< const btkAcquisition& >(result))), SWIGTYPE_p_btkAcquisition, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalogOffsetRemover_GetOutput(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalogOffsetRemover *arg1 = (btkAnalogOffsetRemover *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisition result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAnalogOffsetRemover_GetOutput",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalogOffsetRemover, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalogOffsetRemover_GetOutput" "', argument " "1"" of type '" "btkAnalogOffsetRemover *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalogOffsetRemover * >(argp1);
  {
    try {
      result = (*arg1)->GetOutput();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkAcquisition(static_cast< const btkAcquisition& >(result))), SWIGTYPE_p_btkAcquisition, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalogOffsetRemover_GetInputNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalogOffsetRemover *arg1 = (btkAnalogOffsetRemover *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAnalogOffsetRemover_GetInputNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalogOffsetRemover, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalogOffsetRemover_GetInputNumber" "', argument " "1"" of type '" "btkAnalogOffsetRemover const *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalogOffsetRemover * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetInputNumber();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalogOffsetRemover_GetValidInputNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalogOffsetRemover *arg1 = (btkAnalogOffsetRemover *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAnalogOffsetRemover_GetValidInputNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalogOffsetRemover, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalogOffsetRemover_GetValidInputNumber" "', argument " "1"" of type '" "btkAnalogOffsetRemover const *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalogOffsetRemover * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetValidInputNumber();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalogOffsetRemover_GetOutputNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalogOffsetRemover *arg1 = (btkAnalogOffsetRemover *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAnalogOffsetRemover_GetOutputNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalogOffsetRemover, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalogOffsetRemover_GetOutputNumber" "', argument " "1"" of type '" "btkAnalogOffsetRemover const *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalogOffsetRemover * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetOutputNumber();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalogOffsetRemover_ResetState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalogOffsetRemover *arg1 = (btkAnalogOffsetRemover *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAnalogOffsetRemover_ResetState",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalogOffsetRemover, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalogOffsetRemover_ResetState" "', argument " "1"" of type '" "btkAnalogOffsetRemover *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalogOffsetRemover * >(argp1);
  {
    try {
      (*arg1)->ResetState();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalogOffsetRemover_Update(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalogOffsetRemover *arg1 = (btkAnalogOffsetRemover *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAnalogOffsetRemover_Update",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalogOffsetRemover, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalogOffsetRemover_Update" "', argument " "1"" of type '" "btkAnalogOffsetRemover *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalogOffsetRemover * >(argp1);
  {
    try {
      (*arg1)->Update();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkAnalogOffsetRemover_GetTimestamp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkAnalogOffsetRemover *arg1 = (btkAnalogOffsetRemover *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkAnalogOffsetRemover_GetTimestamp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkAnalogOffsetRemover, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkAnalogOffsetRemover_GetTimestamp" "', argument " "1"" of type '" "btkAnalogOffsetRemover const *""'"); 
  }
  arg1 = reinterpret_cast< btkAnalogOffsetRemover * >(argp1);
  {
    try {
      result = (unsigned long)(*arg1)->GetTimestamp();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *btkAnalogOffsetRemover_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_btkAnalogOffsetRemover, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_btkWrenchDownsampleFilter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrenchDownsampleFilter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_btkWrenchDownsampleFilter")) SWIG_fail;
  {
    try {
      result = (btkWrenchDownsampleFilter *)new btkWrenchDownsampleFilter();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkWrenchDownsampleFilter, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkWrenchDownsampleFilter___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrenchDownsampleFilter *arg1 = (btkWrenchDownsampleFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkWrenchDownsampleFilter_impl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkWrenchDownsampleFilter___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrenchDownsampleFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrenchDownsampleFilter___deref__" "', argument " "1"" of type '" "btkWrenchDownsampleFilter const *""'"); 
  }
  arg1 = reinterpret_cast< btkWrenchDownsampleFilter * >(argp1);
  {
    try {
      result = (btkWrenchDownsampleFilter_impl *)((btkWrenchDownsampleFilter const *)arg1)->operator ->();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkWrenchDownsampleFilter_impl, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_btkWrenchDownsampleFilter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrenchDownsampleFilter *arg1 = (btkWrenchDownsampleFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_btkWrenchDownsampleFilter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrenchDownsampleFilter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_btkWrenchDownsampleFilter" "', argument " "1"" of type '" "btkWrenchDownsampleFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkWrenchDownsampleFilter * >(argp1);
  {
    try {
      delete arg1;
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkWrenchDownsampleFilter_GetInput(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrenchDownsampleFilter *arg1 = (btkWrenchDownsampleFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkWrench result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkWrenchDownsampleFilter_GetInput",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrenchDownsampleFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrenchDownsampleFilter_GetInput" "', argument " "1"" of type '" "btkWrenchDownsampleFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkWrenchDownsampleFilter * >(argp1);
  {
    try {
      result = (*arg1)->GetInput();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkWrench(static_cast< const btkWrench& >(result))), SWIGTYPE_p_btkWrench, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkWrenchDownsampleFilter_SetInput(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrenchDownsampleFilter *arg1 = (btkWrenchDownsampleFilter *) 0 ;
  btkWrench arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkWrenchDownsampleFilter_SetInput",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrenchDownsampleFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrenchDownsampleFilter_SetInput" "', argument " "1"" of type '" "btkWrenchDownsampleFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkWrenchDownsampleFilter * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkWrench,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkWrenchDownsampleFilter_SetInput" "', argument " "2"" of type '" "btkWrench""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkWrenchDownsampleFilter_SetInput" "', argument " "2"" of type '" "btkWrench""'");
    } else {
      btkWrench * temp = reinterpret_cast< btkWrench * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->SetInput(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkWrenchDownsampleFilter_GetOutput(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrenchDownsampleFilter *arg1 = (btkWrenchDownsampleFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkWrench result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkWrenchDownsampleFilter_GetOutput",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrenchDownsampleFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrenchDownsampleFilter_GetOutput" "', argument " "1"" of type '" "btkWrenchDownsampleFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkWrenchDownsampleFilter * >(argp1);
  {
    try {
      result = (*arg1)->GetOutput();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkWrench(static_cast< const btkWrench& >(result))), SWIGTYPE_p_btkWrench, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkWrenchDownsampleFilter_GetUpDownRatio(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrenchDownsampleFilter *arg1 = (btkWrenchDownsampleFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkWrenchDownsampleFilter_GetUpDownRatio",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrenchDownsampleFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrenchDownsampleFilter_GetUpDownRatio" "', argument " "1"" of type '" "btkWrenchDownsampleFilter const *""'"); 
  }
  arg1 = reinterpret_cast< btkWrenchDownsampleFilter * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetUpDownRatio();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkWrenchDownsampleFilter_SetUpDownRatio(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrenchDownsampleFilter *arg1 = (btkWrenchDownsampleFilter *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkWrenchDownsampleFilter_SetUpDownRatio",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrenchDownsampleFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrenchDownsampleFilter_SetUpDownRatio" "', argument " "1"" of type '" "btkWrenchDownsampleFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkWrenchDownsampleFilter * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkWrenchDownsampleFilter_SetUpDownRatio" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->SetUpDownRatio(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkWrenchDownsampleFilter_GetInputNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrenchDownsampleFilter *arg1 = (btkWrenchDownsampleFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkWrenchDownsampleFilter_GetInputNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrenchDownsampleFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrenchDownsampleFilter_GetInputNumber" "', argument " "1"" of type '" "btkWrenchDownsampleFilter const *""'"); 
  }
  arg1 = reinterpret_cast< btkWrenchDownsampleFilter * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetInputNumber();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkWrenchDownsampleFilter_GetValidInputNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrenchDownsampleFilter *arg1 = (btkWrenchDownsampleFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkWrenchDownsampleFilter_GetValidInputNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrenchDownsampleFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrenchDownsampleFilter_GetValidInputNumber" "', argument " "1"" of type '" "btkWrenchDownsampleFilter const *""'"); 
  }
  arg1 = reinterpret_cast< btkWrenchDownsampleFilter * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetValidInputNumber();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkWrenchDownsampleFilter_GetOutputNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrenchDownsampleFilter *arg1 = (btkWrenchDownsampleFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkWrenchDownsampleFilter_GetOutputNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrenchDownsampleFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrenchDownsampleFilter_GetOutputNumber" "', argument " "1"" of type '" "btkWrenchDownsampleFilter const *""'"); 
  }
  arg1 = reinterpret_cast< btkWrenchDownsampleFilter * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetOutputNumber();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkWrenchDownsampleFilter_ResetState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrenchDownsampleFilter *arg1 = (btkWrenchDownsampleFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkWrenchDownsampleFilter_ResetState",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrenchDownsampleFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrenchDownsampleFilter_ResetState" "', argument " "1"" of type '" "btkWrenchDownsampleFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkWrenchDownsampleFilter * >(argp1);
  {
    try {
      (*arg1)->ResetState();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkWrenchDownsampleFilter_Update(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrenchDownsampleFilter *arg1 = (btkWrenchDownsampleFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkWrenchDownsampleFilter_Update",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrenchDownsampleFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrenchDownsampleFilter_Update" "', argument " "1"" of type '" "btkWrenchDownsampleFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkWrenchDownsampleFilter * >(argp1);
  {
    try {
      (*arg1)->Update();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkWrenchDownsampleFilter_GetTimestamp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrenchDownsampleFilter *arg1 = (btkWrenchDownsampleFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkWrenchDownsampleFilter_GetTimestamp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrenchDownsampleFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrenchDownsampleFilter_GetTimestamp" "', argument " "1"" of type '" "btkWrenchDownsampleFilter const *""'"); 
  }
  arg1 = reinterpret_cast< btkWrenchDownsampleFilter * >(argp1);
  {
    try {
      result = (unsigned long)(*arg1)->GetTimestamp();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *btkWrenchDownsampleFilter_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_btkWrenchDownsampleFilter, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_btkWrenchCollectionDownsampleFilter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrenchCollectionDownsampleFilter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_btkWrenchCollectionDownsampleFilter")) SWIG_fail;
  {
    try {
      result = (btkWrenchCollectionDownsampleFilter *)new btkWrenchCollectionDownsampleFilter();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkWrenchCollectionDownsampleFilter, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkWrenchCollectionDownsampleFilter___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrenchCollectionDownsampleFilter *arg1 = (btkWrenchCollectionDownsampleFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkWrenchCollectionDownsampleFilter_impl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkWrenchCollectionDownsampleFilter___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrenchCollectionDownsampleFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrenchCollectionDownsampleFilter___deref__" "', argument " "1"" of type '" "btkWrenchCollectionDownsampleFilter const *""'"); 
  }
  arg1 = reinterpret_cast< btkWrenchCollectionDownsampleFilter * >(argp1);
  {
    try {
      result = (btkWrenchCollectionDownsampleFilter_impl *)((btkWrenchCollectionDownsampleFilter const *)arg1)->operator ->();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkWrenchCollectionDownsampleFilter_impl, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_btkWrenchCollectionDownsampleFilter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrenchCollectionDownsampleFilter *arg1 = (btkWrenchCollectionDownsampleFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_btkWrenchCollectionDownsampleFilter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrenchCollectionDownsampleFilter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_btkWrenchCollectionDownsampleFilter" "', argument " "1"" of type '" "btkWrenchCollectionDownsampleFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkWrenchCollectionDownsampleFilter * >(argp1);
  {
    try {
      delete arg1;
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkWrenchCollectionDownsampleFilter_GetInput(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrenchCollectionDownsampleFilter *arg1 = (btkWrenchCollectionDownsampleFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkWrenchCollection result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkWrenchCollectionDownsampleFilter_GetInput",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrenchCollectionDownsampleFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrenchCollectionDownsampleFilter_GetInput" "', argument " "1"" of type '" "btkWrenchCollectionDownsampleFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkWrenchCollectionDownsampleFilter * >(argp1);
  {
    try {
      result = (*arg1)->GetInput();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkWrenchCollection(static_cast< const btkWrenchCollection& >(result))), SWIGTYPE_p_btkWrenchCollection, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkWrenchCollectionDownsampleFilter_SetInput(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrenchCollectionDownsampleFilter *arg1 = (btkWrenchCollectionDownsampleFilter *) 0 ;
  btkWrenchCollection arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkWrenchCollectionDownsampleFilter_SetInput",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrenchCollectionDownsampleFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrenchCollectionDownsampleFilter_SetInput" "', argument " "1"" of type '" "btkWrenchCollectionDownsampleFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkWrenchCollectionDownsampleFilter * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkWrenchCollection,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkWrenchCollectionDownsampleFilter_SetInput" "', argument " "2"" of type '" "btkWrenchCollection""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkWrenchCollectionDownsampleFilter_SetInput" "', argument " "2"" of type '" "btkWrenchCollection""'");
    } else {
      btkWrenchCollection * temp = reinterpret_cast< btkWrenchCollection * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->SetInput(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkWrenchCollectionDownsampleFilter_GetOutput(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrenchCollectionDownsampleFilter *arg1 = (btkWrenchCollectionDownsampleFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkWrenchCollection result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkWrenchCollectionDownsampleFilter_GetOutput",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrenchCollectionDownsampleFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrenchCollectionDownsampleFilter_GetOutput" "', argument " "1"" of type '" "btkWrenchCollectionDownsampleFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkWrenchCollectionDownsampleFilter * >(argp1);
  {
    try {
      result = (*arg1)->GetOutput();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkWrenchCollection(static_cast< const btkWrenchCollection& >(result))), SWIGTYPE_p_btkWrenchCollection, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkWrenchCollectionDownsampleFilter_GetUpDownRatio(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrenchCollectionDownsampleFilter *arg1 = (btkWrenchCollectionDownsampleFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkWrenchCollectionDownsampleFilter_GetUpDownRatio",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrenchCollectionDownsampleFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrenchCollectionDownsampleFilter_GetUpDownRatio" "', argument " "1"" of type '" "btkWrenchCollectionDownsampleFilter const *""'"); 
  }
  arg1 = reinterpret_cast< btkWrenchCollectionDownsampleFilter * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetUpDownRatio();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkWrenchCollectionDownsampleFilter_SetUpDownRatio(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrenchCollectionDownsampleFilter *arg1 = (btkWrenchCollectionDownsampleFilter *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkWrenchCollectionDownsampleFilter_SetUpDownRatio",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrenchCollectionDownsampleFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrenchCollectionDownsampleFilter_SetUpDownRatio" "', argument " "1"" of type '" "btkWrenchCollectionDownsampleFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkWrenchCollectionDownsampleFilter * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkWrenchCollectionDownsampleFilter_SetUpDownRatio" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->SetUpDownRatio(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkWrenchCollectionDownsampleFilter_GetInputNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrenchCollectionDownsampleFilter *arg1 = (btkWrenchCollectionDownsampleFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkWrenchCollectionDownsampleFilter_GetInputNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrenchCollectionDownsampleFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrenchCollectionDownsampleFilter_GetInputNumber" "', argument " "1"" of type '" "btkWrenchCollectionDownsampleFilter const *""'"); 
  }
  arg1 = reinterpret_cast< btkWrenchCollectionDownsampleFilter * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetInputNumber();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkWrenchCollectionDownsampleFilter_GetValidInputNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrenchCollectionDownsampleFilter *arg1 = (btkWrenchCollectionDownsampleFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkWrenchCollectionDownsampleFilter_GetValidInputNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrenchCollectionDownsampleFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrenchCollectionDownsampleFilter_GetValidInputNumber" "', argument " "1"" of type '" "btkWrenchCollectionDownsampleFilter const *""'"); 
  }
  arg1 = reinterpret_cast< btkWrenchCollectionDownsampleFilter * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetValidInputNumber();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkWrenchCollectionDownsampleFilter_GetOutputNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrenchCollectionDownsampleFilter *arg1 = (btkWrenchCollectionDownsampleFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkWrenchCollectionDownsampleFilter_GetOutputNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrenchCollectionDownsampleFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrenchCollectionDownsampleFilter_GetOutputNumber" "', argument " "1"" of type '" "btkWrenchCollectionDownsampleFilter const *""'"); 
  }
  arg1 = reinterpret_cast< btkWrenchCollectionDownsampleFilter * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetOutputNumber();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkWrenchCollectionDownsampleFilter_ResetState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrenchCollectionDownsampleFilter *arg1 = (btkWrenchCollectionDownsampleFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkWrenchCollectionDownsampleFilter_ResetState",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrenchCollectionDownsampleFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrenchCollectionDownsampleFilter_ResetState" "', argument " "1"" of type '" "btkWrenchCollectionDownsampleFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkWrenchCollectionDownsampleFilter * >(argp1);
  {
    try {
      (*arg1)->ResetState();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkWrenchCollectionDownsampleFilter_Update(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrenchCollectionDownsampleFilter *arg1 = (btkWrenchCollectionDownsampleFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkWrenchCollectionDownsampleFilter_Update",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrenchCollectionDownsampleFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrenchCollectionDownsampleFilter_Update" "', argument " "1"" of type '" "btkWrenchCollectionDownsampleFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkWrenchCollectionDownsampleFilter * >(argp1);
  {
    try {
      (*arg1)->Update();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkWrenchCollectionDownsampleFilter_GetTimestamp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrenchCollectionDownsampleFilter *arg1 = (btkWrenchCollectionDownsampleFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkWrenchCollectionDownsampleFilter_GetTimestamp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrenchCollectionDownsampleFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrenchCollectionDownsampleFilter_GetTimestamp" "', argument " "1"" of type '" "btkWrenchCollectionDownsampleFilter const *""'"); 
  }
  arg1 = reinterpret_cast< btkWrenchCollectionDownsampleFilter * >(argp1);
  {
    try {
      result = (unsigned long)(*arg1)->GetTimestamp();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *btkWrenchCollectionDownsampleFilter_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_btkWrenchCollectionDownsampleFilter, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_btkForcePlatformsExtractor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatformsExtractor *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_btkForcePlatformsExtractor")) SWIG_fail;
  {
    try {
      result = (btkForcePlatformsExtractor *)new btkForcePlatformsExtractor();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkForcePlatformsExtractor, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatformsExtractor___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatformsExtractor *arg1 = (btkForcePlatformsExtractor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkForcePlatformsExtractor_impl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkForcePlatformsExtractor___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatformsExtractor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatformsExtractor___deref__" "', argument " "1"" of type '" "btkForcePlatformsExtractor const *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatformsExtractor * >(argp1);
  {
    try {
      result = (btkForcePlatformsExtractor_impl *)((btkForcePlatformsExtractor const *)arg1)->operator ->();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkForcePlatformsExtractor_impl, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_btkForcePlatformsExtractor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatformsExtractor *arg1 = (btkForcePlatformsExtractor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_btkForcePlatformsExtractor",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatformsExtractor, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_btkForcePlatformsExtractor" "', argument " "1"" of type '" "btkForcePlatformsExtractor *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatformsExtractor * >(argp1);
  {
    try {
      delete arg1;
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatformsExtractor_GetInput(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatformsExtractor *arg1 = (btkForcePlatformsExtractor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisition result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkForcePlatformsExtractor_GetInput",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatformsExtractor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatformsExtractor_GetInput" "', argument " "1"" of type '" "btkForcePlatformsExtractor *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatformsExtractor * >(argp1);
  {
    try {
      result = (*arg1)->GetInput();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkAcquisition(static_cast< const btkAcquisition& >(result))), SWIGTYPE_p_btkAcquisition, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatformsExtractor_SetInput(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatformsExtractor *arg1 = (btkForcePlatformsExtractor *) 0 ;
  btkAcquisition arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkForcePlatformsExtractor_SetInput",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatformsExtractor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatformsExtractor_SetInput" "', argument " "1"" of type '" "btkForcePlatformsExtractor *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatformsExtractor * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkAcquisition,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkForcePlatformsExtractor_SetInput" "', argument " "2"" of type '" "btkAcquisition""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkForcePlatformsExtractor_SetInput" "', argument " "2"" of type '" "btkAcquisition""'");
    } else {
      btkAcquisition * temp = reinterpret_cast< btkAcquisition * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->SetInput(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatformsExtractor_GetOutput(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatformsExtractor *arg1 = (btkForcePlatformsExtractor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkForcePlatformCollection result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkForcePlatformsExtractor_GetOutput",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatformsExtractor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatformsExtractor_GetOutput" "', argument " "1"" of type '" "btkForcePlatformsExtractor *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatformsExtractor * >(argp1);
  {
    try {
      result = (*arg1)->GetOutput();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkForcePlatformCollection(static_cast< const btkForcePlatformCollection& >(result))), SWIGTYPE_p_btkForcePlatformCollection, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatformsExtractor_GetInputNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatformsExtractor *arg1 = (btkForcePlatformsExtractor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkForcePlatformsExtractor_GetInputNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatformsExtractor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatformsExtractor_GetInputNumber" "', argument " "1"" of type '" "btkForcePlatformsExtractor const *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatformsExtractor * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetInputNumber();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatformsExtractor_GetValidInputNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatformsExtractor *arg1 = (btkForcePlatformsExtractor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkForcePlatformsExtractor_GetValidInputNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatformsExtractor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatformsExtractor_GetValidInputNumber" "', argument " "1"" of type '" "btkForcePlatformsExtractor const *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatformsExtractor * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetValidInputNumber();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatformsExtractor_GetOutputNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatformsExtractor *arg1 = (btkForcePlatformsExtractor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkForcePlatformsExtractor_GetOutputNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatformsExtractor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatformsExtractor_GetOutputNumber" "', argument " "1"" of type '" "btkForcePlatformsExtractor const *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatformsExtractor * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetOutputNumber();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatformsExtractor_ResetState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatformsExtractor *arg1 = (btkForcePlatformsExtractor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkForcePlatformsExtractor_ResetState",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatformsExtractor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatformsExtractor_ResetState" "', argument " "1"" of type '" "btkForcePlatformsExtractor *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatformsExtractor * >(argp1);
  {
    try {
      (*arg1)->ResetState();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatformsExtractor_Update(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatformsExtractor *arg1 = (btkForcePlatformsExtractor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkForcePlatformsExtractor_Update",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatformsExtractor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatformsExtractor_Update" "', argument " "1"" of type '" "btkForcePlatformsExtractor *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatformsExtractor * >(argp1);
  {
    try {
      (*arg1)->Update();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatformsExtractor_GetTimestamp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatformsExtractor *arg1 = (btkForcePlatformsExtractor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkForcePlatformsExtractor_GetTimestamp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatformsExtractor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatformsExtractor_GetTimestamp" "', argument " "1"" of type '" "btkForcePlatformsExtractor const *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatformsExtractor * >(argp1);
  {
    try {
      result = (unsigned long)(*arg1)->GetTimestamp();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *btkForcePlatformsExtractor_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_btkForcePlatformsExtractor, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_btkForcePlatformWrenchFilter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatformWrenchFilter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_btkForcePlatformWrenchFilter")) SWIG_fail;
  {
    try {
      result = (btkForcePlatformWrenchFilter *)new btkForcePlatformWrenchFilter();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkForcePlatformWrenchFilter, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatformWrenchFilter___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatformWrenchFilter *arg1 = (btkForcePlatformWrenchFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkForcePlatformWrenchFilter_impl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkForcePlatformWrenchFilter___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatformWrenchFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatformWrenchFilter___deref__" "', argument " "1"" of type '" "btkForcePlatformWrenchFilter const *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatformWrenchFilter * >(argp1);
  {
    try {
      result = (btkForcePlatformWrenchFilter_impl *)((btkForcePlatformWrenchFilter const *)arg1)->operator ->();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkForcePlatformWrenchFilter_impl, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_btkForcePlatformWrenchFilter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatformWrenchFilter *arg1 = (btkForcePlatformWrenchFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_btkForcePlatformWrenchFilter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatformWrenchFilter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_btkForcePlatformWrenchFilter" "', argument " "1"" of type '" "btkForcePlatformWrenchFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatformWrenchFilter * >(argp1);
  {
    try {
      delete arg1;
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatformWrenchFilter_GetInput(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatformWrenchFilter *arg1 = (btkForcePlatformWrenchFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkForcePlatformCollection result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkForcePlatformWrenchFilter_GetInput",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatformWrenchFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatformWrenchFilter_GetInput" "', argument " "1"" of type '" "btkForcePlatformWrenchFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatformWrenchFilter * >(argp1);
  {
    try {
      result = (*arg1)->GetInput();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkForcePlatformCollection(static_cast< const btkForcePlatformCollection& >(result))), SWIGTYPE_p_btkForcePlatformCollection, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatformWrenchFilter_SetInput__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatformWrenchFilter *arg1 = (btkForcePlatformWrenchFilter *) 0 ;
  SwigValueWrapper< btkForcePlatform > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkForcePlatformWrenchFilter_SetInput",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatformWrenchFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatformWrenchFilter_SetInput" "', argument " "1"" of type '" "btkForcePlatformWrenchFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatformWrenchFilter * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkForcePlatform,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkForcePlatformWrenchFilter_SetInput" "', argument " "2"" of type '" "btkForcePlatform""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkForcePlatformWrenchFilter_SetInput" "', argument " "2"" of type '" "btkForcePlatform""'");
    } else {
      btkForcePlatform * temp = reinterpret_cast< btkForcePlatform * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->SetInput(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatformWrenchFilter_SetInput__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatformWrenchFilter *arg1 = (btkForcePlatformWrenchFilter *) 0 ;
  btkForcePlatformCollection arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkForcePlatformWrenchFilter_SetInput",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatformWrenchFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatformWrenchFilter_SetInput" "', argument " "1"" of type '" "btkForcePlatformWrenchFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatformWrenchFilter * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkForcePlatformCollection,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkForcePlatformWrenchFilter_SetInput" "', argument " "2"" of type '" "btkForcePlatformCollection""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkForcePlatformWrenchFilter_SetInput" "', argument " "2"" of type '" "btkForcePlatformCollection""'");
    } else {
      btkForcePlatformCollection * temp = reinterpret_cast< btkForcePlatformCollection * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->SetInput(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatformWrenchFilter_SetInput(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkForcePlatformWrenchFilter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_btkForcePlatform, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_btkForcePlatformWrenchFilter_SetInput__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkForcePlatformWrenchFilter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_btkForcePlatformCollection, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_btkForcePlatformWrenchFilter_SetInput__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkForcePlatformWrenchFilter_SetInput'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkForcePlatformWrenchFilter_impl::SetInput(btkForcePlatform)\n"
    "    btkForcePlatformWrenchFilter_impl::SetInput(btkForcePlatformCollection)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkForcePlatformWrenchFilter_GetOutput(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatformWrenchFilter *arg1 = (btkForcePlatformWrenchFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkWrenchCollection result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkForcePlatformWrenchFilter_GetOutput",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatformWrenchFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatformWrenchFilter_GetOutput" "', argument " "1"" of type '" "btkForcePlatformWrenchFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatformWrenchFilter * >(argp1);
  {
    try {
      result = (*arg1)->GetOutput();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkWrenchCollection(static_cast< const btkWrenchCollection& >(result))), SWIGTYPE_p_btkWrenchCollection, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatformWrenchFilter_SetTransformToGlobalFrame__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatformWrenchFilter *arg1 = (btkForcePlatformWrenchFilter *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkForcePlatformWrenchFilter_SetTransformToGlobalFrame",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatformWrenchFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatformWrenchFilter_SetTransformToGlobalFrame" "', argument " "1"" of type '" "btkForcePlatformWrenchFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatformWrenchFilter * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkForcePlatformWrenchFilter_SetTransformToGlobalFrame" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (*arg1)->SetTransformToGlobalFrame(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatformWrenchFilter_SetTransformToGlobalFrame__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatformWrenchFilter *arg1 = (btkForcePlatformWrenchFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkForcePlatformWrenchFilter_SetTransformToGlobalFrame",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatformWrenchFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatformWrenchFilter_SetTransformToGlobalFrame" "', argument " "1"" of type '" "btkForcePlatformWrenchFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatformWrenchFilter * >(argp1);
  {
    try {
      (*arg1)->SetTransformToGlobalFrame();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatformWrenchFilter_SetTransformToGlobalFrame(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkForcePlatformWrenchFilter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_btkForcePlatformWrenchFilter_SetTransformToGlobalFrame__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkForcePlatformWrenchFilter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_btkForcePlatformWrenchFilter_SetTransformToGlobalFrame__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkForcePlatformWrenchFilter_SetTransformToGlobalFrame'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkForcePlatformWrenchFilter_impl::SetTransformToGlobalFrame(bool)\n"
    "    btkForcePlatformWrenchFilter_impl::SetTransformToGlobalFrame()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkForcePlatformWrenchFilter_GetTransformToGlobalFrame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatformWrenchFilter *arg1 = (btkForcePlatformWrenchFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkForcePlatformWrenchFilter_GetTransformToGlobalFrame",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatformWrenchFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatformWrenchFilter_GetTransformToGlobalFrame" "', argument " "1"" of type '" "btkForcePlatformWrenchFilter const *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatformWrenchFilter * >(argp1);
  {
    try {
      result = (bool)(*arg1)->GetTransformToGlobalFrame();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatformWrenchFilter_GetInputNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatformWrenchFilter *arg1 = (btkForcePlatformWrenchFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkForcePlatformWrenchFilter_GetInputNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatformWrenchFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatformWrenchFilter_GetInputNumber" "', argument " "1"" of type '" "btkForcePlatformWrenchFilter const *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatformWrenchFilter * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetInputNumber();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatformWrenchFilter_GetValidInputNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatformWrenchFilter *arg1 = (btkForcePlatformWrenchFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkForcePlatformWrenchFilter_GetValidInputNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatformWrenchFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatformWrenchFilter_GetValidInputNumber" "', argument " "1"" of type '" "btkForcePlatformWrenchFilter const *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatformWrenchFilter * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetValidInputNumber();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatformWrenchFilter_GetOutputNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatformWrenchFilter *arg1 = (btkForcePlatformWrenchFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkForcePlatformWrenchFilter_GetOutputNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatformWrenchFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatformWrenchFilter_GetOutputNumber" "', argument " "1"" of type '" "btkForcePlatformWrenchFilter const *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatformWrenchFilter * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetOutputNumber();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatformWrenchFilter_ResetState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatformWrenchFilter *arg1 = (btkForcePlatformWrenchFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkForcePlatformWrenchFilter_ResetState",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatformWrenchFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatformWrenchFilter_ResetState" "', argument " "1"" of type '" "btkForcePlatformWrenchFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatformWrenchFilter * >(argp1);
  {
    try {
      (*arg1)->ResetState();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatformWrenchFilter_Update(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatformWrenchFilter *arg1 = (btkForcePlatformWrenchFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkForcePlatformWrenchFilter_Update",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatformWrenchFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatformWrenchFilter_Update" "', argument " "1"" of type '" "btkForcePlatformWrenchFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatformWrenchFilter * >(argp1);
  {
    try {
      (*arg1)->Update();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkForcePlatformWrenchFilter_GetTimestamp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkForcePlatformWrenchFilter *arg1 = (btkForcePlatformWrenchFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkForcePlatformWrenchFilter_GetTimestamp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkForcePlatformWrenchFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkForcePlatformWrenchFilter_GetTimestamp" "', argument " "1"" of type '" "btkForcePlatformWrenchFilter const *""'"); 
  }
  arg1 = reinterpret_cast< btkForcePlatformWrenchFilter * >(argp1);
  {
    try {
      result = (unsigned long)(*arg1)->GetTimestamp();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *btkForcePlatformWrenchFilter_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_btkForcePlatformWrenchFilter, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_btkGroundReactionWrenchFilter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkGroundReactionWrenchFilter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_btkGroundReactionWrenchFilter")) SWIG_fail;
  {
    try {
      result = (btkGroundReactionWrenchFilter *)new btkGroundReactionWrenchFilter();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkGroundReactionWrenchFilter, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkGroundReactionWrenchFilter___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkGroundReactionWrenchFilter *arg1 = (btkGroundReactionWrenchFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkGroundReactionWrenchFilter_impl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkGroundReactionWrenchFilter___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkGroundReactionWrenchFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkGroundReactionWrenchFilter___deref__" "', argument " "1"" of type '" "btkGroundReactionWrenchFilter const *""'"); 
  }
  arg1 = reinterpret_cast< btkGroundReactionWrenchFilter * >(argp1);
  {
    try {
      result = (btkGroundReactionWrenchFilter_impl *)((btkGroundReactionWrenchFilter const *)arg1)->operator ->();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkGroundReactionWrenchFilter_impl, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_btkGroundReactionWrenchFilter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkGroundReactionWrenchFilter *arg1 = (btkGroundReactionWrenchFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_btkGroundReactionWrenchFilter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkGroundReactionWrenchFilter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_btkGroundReactionWrenchFilter" "', argument " "1"" of type '" "btkGroundReactionWrenchFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkGroundReactionWrenchFilter * >(argp1);
  {
    try {
      delete arg1;
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkGroundReactionWrenchFilter_GetInput(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkGroundReactionWrenchFilter *arg1 = (btkGroundReactionWrenchFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkForcePlatformCollection result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkGroundReactionWrenchFilter_GetInput",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkGroundReactionWrenchFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkGroundReactionWrenchFilter_GetInput" "', argument " "1"" of type '" "btkGroundReactionWrenchFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkGroundReactionWrenchFilter * >(argp1);
  {
    try {
      result = (*arg1)->GetInput();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkForcePlatformCollection(static_cast< const btkForcePlatformCollection& >(result))), SWIGTYPE_p_btkForcePlatformCollection, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkGroundReactionWrenchFilter_SetInput__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkGroundReactionWrenchFilter *arg1 = (btkGroundReactionWrenchFilter *) 0 ;
  SwigValueWrapper< btkForcePlatform > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkGroundReactionWrenchFilter_SetInput",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkGroundReactionWrenchFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkGroundReactionWrenchFilter_SetInput" "', argument " "1"" of type '" "btkGroundReactionWrenchFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkGroundReactionWrenchFilter * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkForcePlatform,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkGroundReactionWrenchFilter_SetInput" "', argument " "2"" of type '" "btkForcePlatform""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkGroundReactionWrenchFilter_SetInput" "', argument " "2"" of type '" "btkForcePlatform""'");
    } else {
      btkForcePlatform * temp = reinterpret_cast< btkForcePlatform * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->SetInput(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkGroundReactionWrenchFilter_SetInput__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkGroundReactionWrenchFilter *arg1 = (btkGroundReactionWrenchFilter *) 0 ;
  btkForcePlatformCollection arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkGroundReactionWrenchFilter_SetInput",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkGroundReactionWrenchFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkGroundReactionWrenchFilter_SetInput" "', argument " "1"" of type '" "btkGroundReactionWrenchFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkGroundReactionWrenchFilter * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkForcePlatformCollection,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkGroundReactionWrenchFilter_SetInput" "', argument " "2"" of type '" "btkForcePlatformCollection""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkGroundReactionWrenchFilter_SetInput" "', argument " "2"" of type '" "btkForcePlatformCollection""'");
    } else {
      btkForcePlatformCollection * temp = reinterpret_cast< btkForcePlatformCollection * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->SetInput(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkGroundReactionWrenchFilter_SetInput(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkGroundReactionWrenchFilter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_btkForcePlatform, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_btkGroundReactionWrenchFilter_SetInput__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkGroundReactionWrenchFilter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_btkForcePlatformCollection, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_btkGroundReactionWrenchFilter_SetInput__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkGroundReactionWrenchFilter_SetInput'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkGroundReactionWrenchFilter_impl::SetInput(btkForcePlatform)\n"
    "    btkGroundReactionWrenchFilter_impl::SetInput(btkForcePlatformCollection)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkGroundReactionWrenchFilter_GetOutput(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkGroundReactionWrenchFilter *arg1 = (btkGroundReactionWrenchFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkWrenchCollection result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkGroundReactionWrenchFilter_GetOutput",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkGroundReactionWrenchFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkGroundReactionWrenchFilter_GetOutput" "', argument " "1"" of type '" "btkGroundReactionWrenchFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkGroundReactionWrenchFilter * >(argp1);
  {
    try {
      result = (*arg1)->GetOutput();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkWrenchCollection(static_cast< const btkWrenchCollection& >(result))), SWIGTYPE_p_btkWrenchCollection, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkGroundReactionWrenchFilter_SetTransformToGlobalFrame__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkGroundReactionWrenchFilter *arg1 = (btkGroundReactionWrenchFilter *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkGroundReactionWrenchFilter_SetTransformToGlobalFrame",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkGroundReactionWrenchFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkGroundReactionWrenchFilter_SetTransformToGlobalFrame" "', argument " "1"" of type '" "btkGroundReactionWrenchFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkGroundReactionWrenchFilter * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkGroundReactionWrenchFilter_SetTransformToGlobalFrame" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (*arg1)->SetTransformToGlobalFrame(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkGroundReactionWrenchFilter_SetTransformToGlobalFrame__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkGroundReactionWrenchFilter *arg1 = (btkGroundReactionWrenchFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkGroundReactionWrenchFilter_SetTransformToGlobalFrame",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkGroundReactionWrenchFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkGroundReactionWrenchFilter_SetTransformToGlobalFrame" "', argument " "1"" of type '" "btkGroundReactionWrenchFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkGroundReactionWrenchFilter * >(argp1);
  {
    try {
      (*arg1)->SetTransformToGlobalFrame();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkGroundReactionWrenchFilter_SetTransformToGlobalFrame(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkGroundReactionWrenchFilter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_btkGroundReactionWrenchFilter_SetTransformToGlobalFrame__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkGroundReactionWrenchFilter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_btkGroundReactionWrenchFilter_SetTransformToGlobalFrame__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkGroundReactionWrenchFilter_SetTransformToGlobalFrame'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkGroundReactionWrenchFilter_impl::SetTransformToGlobalFrame(bool)\n"
    "    btkGroundReactionWrenchFilter_impl::SetTransformToGlobalFrame()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkGroundReactionWrenchFilter_GetTransformToGlobalFrame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkGroundReactionWrenchFilter *arg1 = (btkGroundReactionWrenchFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkGroundReactionWrenchFilter_GetTransformToGlobalFrame",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkGroundReactionWrenchFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkGroundReactionWrenchFilter_GetTransformToGlobalFrame" "', argument " "1"" of type '" "btkGroundReactionWrenchFilter const *""'"); 
  }
  arg1 = reinterpret_cast< btkGroundReactionWrenchFilter * >(argp1);
  {
    try {
      result = (bool)(*arg1)->GetTransformToGlobalFrame();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkGroundReactionWrenchFilter_GetThresholdState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkGroundReactionWrenchFilter *arg1 = (btkGroundReactionWrenchFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkGroundReactionWrenchFilter_GetThresholdState",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkGroundReactionWrenchFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkGroundReactionWrenchFilter_GetThresholdState" "', argument " "1"" of type '" "btkGroundReactionWrenchFilter const *""'"); 
  }
  arg1 = reinterpret_cast< btkGroundReactionWrenchFilter * >(argp1);
  {
    try {
      result = (bool)(*arg1)->GetThresholdState();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkGroundReactionWrenchFilter_SetThresholdState__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkGroundReactionWrenchFilter *arg1 = (btkGroundReactionWrenchFilter *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkGroundReactionWrenchFilter_SetThresholdState",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkGroundReactionWrenchFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkGroundReactionWrenchFilter_SetThresholdState" "', argument " "1"" of type '" "btkGroundReactionWrenchFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkGroundReactionWrenchFilter * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkGroundReactionWrenchFilter_SetThresholdState" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (*arg1)->SetThresholdState(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkGroundReactionWrenchFilter_SetThresholdState__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkGroundReactionWrenchFilter *arg1 = (btkGroundReactionWrenchFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkGroundReactionWrenchFilter_SetThresholdState",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkGroundReactionWrenchFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkGroundReactionWrenchFilter_SetThresholdState" "', argument " "1"" of type '" "btkGroundReactionWrenchFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkGroundReactionWrenchFilter * >(argp1);
  {
    try {
      (*arg1)->SetThresholdState();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkGroundReactionWrenchFilter_SetThresholdState(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkGroundReactionWrenchFilter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_btkGroundReactionWrenchFilter_SetThresholdState__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkGroundReactionWrenchFilter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_btkGroundReactionWrenchFilter_SetThresholdState__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkGroundReactionWrenchFilter_SetThresholdState'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkGroundReactionWrenchFilter_impl::SetThresholdState(bool)\n"
    "    btkGroundReactionWrenchFilter_impl::SetThresholdState()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkGroundReactionWrenchFilter_GetThresholdValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkGroundReactionWrenchFilter *arg1 = (btkGroundReactionWrenchFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkGroundReactionWrenchFilter_GetThresholdValue",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkGroundReactionWrenchFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkGroundReactionWrenchFilter_GetThresholdValue" "', argument " "1"" of type '" "btkGroundReactionWrenchFilter const *""'"); 
  }
  arg1 = reinterpret_cast< btkGroundReactionWrenchFilter * >(argp1);
  {
    try {
      result = (double)(*arg1)->GetThresholdValue();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkGroundReactionWrenchFilter_SetThresholdValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkGroundReactionWrenchFilter *arg1 = (btkGroundReactionWrenchFilter *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkGroundReactionWrenchFilter_SetThresholdValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkGroundReactionWrenchFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkGroundReactionWrenchFilter_SetThresholdValue" "', argument " "1"" of type '" "btkGroundReactionWrenchFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkGroundReactionWrenchFilter * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkGroundReactionWrenchFilter_SetThresholdValue" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (*arg1)->SetThresholdValue(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkGroundReactionWrenchFilter_GetInputNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkGroundReactionWrenchFilter *arg1 = (btkGroundReactionWrenchFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkGroundReactionWrenchFilter_GetInputNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkGroundReactionWrenchFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkGroundReactionWrenchFilter_GetInputNumber" "', argument " "1"" of type '" "btkGroundReactionWrenchFilter const *""'"); 
  }
  arg1 = reinterpret_cast< btkGroundReactionWrenchFilter * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetInputNumber();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkGroundReactionWrenchFilter_GetValidInputNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkGroundReactionWrenchFilter *arg1 = (btkGroundReactionWrenchFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkGroundReactionWrenchFilter_GetValidInputNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkGroundReactionWrenchFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkGroundReactionWrenchFilter_GetValidInputNumber" "', argument " "1"" of type '" "btkGroundReactionWrenchFilter const *""'"); 
  }
  arg1 = reinterpret_cast< btkGroundReactionWrenchFilter * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetValidInputNumber();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkGroundReactionWrenchFilter_GetOutputNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkGroundReactionWrenchFilter *arg1 = (btkGroundReactionWrenchFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkGroundReactionWrenchFilter_GetOutputNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkGroundReactionWrenchFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkGroundReactionWrenchFilter_GetOutputNumber" "', argument " "1"" of type '" "btkGroundReactionWrenchFilter const *""'"); 
  }
  arg1 = reinterpret_cast< btkGroundReactionWrenchFilter * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetOutputNumber();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkGroundReactionWrenchFilter_ResetState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkGroundReactionWrenchFilter *arg1 = (btkGroundReactionWrenchFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkGroundReactionWrenchFilter_ResetState",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkGroundReactionWrenchFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkGroundReactionWrenchFilter_ResetState" "', argument " "1"" of type '" "btkGroundReactionWrenchFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkGroundReactionWrenchFilter * >(argp1);
  {
    try {
      (*arg1)->ResetState();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkGroundReactionWrenchFilter_Update(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkGroundReactionWrenchFilter *arg1 = (btkGroundReactionWrenchFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkGroundReactionWrenchFilter_Update",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkGroundReactionWrenchFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkGroundReactionWrenchFilter_Update" "', argument " "1"" of type '" "btkGroundReactionWrenchFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkGroundReactionWrenchFilter * >(argp1);
  {
    try {
      (*arg1)->Update();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkGroundReactionWrenchFilter_GetTimestamp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkGroundReactionWrenchFilter *arg1 = (btkGroundReactionWrenchFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkGroundReactionWrenchFilter_GetTimestamp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkGroundReactionWrenchFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkGroundReactionWrenchFilter_GetTimestamp" "', argument " "1"" of type '" "btkGroundReactionWrenchFilter const *""'"); 
  }
  arg1 = reinterpret_cast< btkGroundReactionWrenchFilter * >(argp1);
  {
    try {
      result = (unsigned long)(*arg1)->GetTimestamp();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *btkGroundReactionWrenchFilter_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_btkGroundReactionWrenchFilter, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_btkIMUsExtractor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMUsExtractor *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_btkIMUsExtractor")) SWIG_fail;
  {
    try {
      result = (btkIMUsExtractor *)new btkIMUsExtractor();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkIMUsExtractor, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMUsExtractor___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMUsExtractor *arg1 = (btkIMUsExtractor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkIMUsExtractor_impl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkIMUsExtractor___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkIMUsExtractor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMUsExtractor___deref__" "', argument " "1"" of type '" "btkIMUsExtractor const *""'"); 
  }
  arg1 = reinterpret_cast< btkIMUsExtractor * >(argp1);
  {
    try {
      result = (btkIMUsExtractor_impl *)((btkIMUsExtractor const *)arg1)->operator ->();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkIMUsExtractor_impl, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_btkIMUsExtractor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMUsExtractor *arg1 = (btkIMUsExtractor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_btkIMUsExtractor",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkIMUsExtractor, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_btkIMUsExtractor" "', argument " "1"" of type '" "btkIMUsExtractor *""'"); 
  }
  arg1 = reinterpret_cast< btkIMUsExtractor * >(argp1);
  {
    try {
      delete arg1;
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMUsExtractor_GetInput__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMUsExtractor *arg1 = (btkIMUsExtractor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisition result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkIMUsExtractor_GetInput",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkIMUsExtractor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMUsExtractor_GetInput" "', argument " "1"" of type '" "btkIMUsExtractor *""'"); 
  }
  arg1 = reinterpret_cast< btkIMUsExtractor * >(argp1);
  {
    try {
      result = (*arg1)->GetInput();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkAcquisition(static_cast< const btkAcquisition& >(result))), SWIGTYPE_p_btkAcquisition, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMUsExtractor_GetInput__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMUsExtractor *arg1 = (btkIMUsExtractor *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  btkAcquisition result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkIMUsExtractor_GetInput",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkIMUsExtractor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMUsExtractor_GetInput" "', argument " "1"" of type '" "btkIMUsExtractor *""'"); 
  }
  arg1 = reinterpret_cast< btkIMUsExtractor * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkIMUsExtractor_GetInput" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (*arg1)->GetInput(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkAcquisition(static_cast< const btkAcquisition& >(result))), SWIGTYPE_p_btkAcquisition, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMUsExtractor_GetInput(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkIMUsExtractor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_btkIMUsExtractor_GetInput__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkIMUsExtractor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_btkIMUsExtractor_GetInput__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkIMUsExtractor_GetInput'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkIMUsExtractor_impl::GetInput()\n"
    "    btkIMUsExtractor_impl::GetInput(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkIMUsExtractor_SetInput__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMUsExtractor *arg1 = (btkIMUsExtractor *) 0 ;
  btkAcquisition arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkIMUsExtractor_SetInput",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkIMUsExtractor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMUsExtractor_SetInput" "', argument " "1"" of type '" "btkIMUsExtractor *""'"); 
  }
  arg1 = reinterpret_cast< btkIMUsExtractor * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkAcquisition,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkIMUsExtractor_SetInput" "', argument " "2"" of type '" "btkAcquisition""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkIMUsExtractor_SetInput" "', argument " "2"" of type '" "btkAcquisition""'");
    } else {
      btkAcquisition * temp = reinterpret_cast< btkAcquisition * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->SetInput(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMUsExtractor_SetInput__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMUsExtractor *arg1 = (btkIMUsExtractor *) 0 ;
  int arg2 ;
  btkAcquisition arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkIMUsExtractor_SetInput",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkIMUsExtractor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMUsExtractor_SetInput" "', argument " "1"" of type '" "btkIMUsExtractor *""'"); 
  }
  arg1 = reinterpret_cast< btkIMUsExtractor * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkIMUsExtractor_SetInput" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkAcquisition,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkIMUsExtractor_SetInput" "', argument " "3"" of type '" "btkAcquisition""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkIMUsExtractor_SetInput" "', argument " "3"" of type '" "btkAcquisition""'");
    } else {
      btkAcquisition * temp = reinterpret_cast< btkAcquisition * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->SetInput(arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMUsExtractor_SetInput(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkIMUsExtractor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_btkAcquisition, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_btkIMUsExtractor_SetInput__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkIMUsExtractor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_btkAcquisition, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_btkIMUsExtractor_SetInput__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkIMUsExtractor_SetInput'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkIMUsExtractor_impl::SetInput(btkAcquisition)\n"
    "    btkIMUsExtractor_impl::SetInput(int,btkAcquisition)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkIMUsExtractor_GetOutput(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMUsExtractor *arg1 = (btkIMUsExtractor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkIMUCollection result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkIMUsExtractor_GetOutput",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkIMUsExtractor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMUsExtractor_GetOutput" "', argument " "1"" of type '" "btkIMUsExtractor *""'"); 
  }
  arg1 = reinterpret_cast< btkIMUsExtractor * >(argp1);
  {
    try {
      result = (*arg1)->GetOutput();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkIMUCollection(static_cast< const btkIMUCollection& >(result))), SWIGTYPE_p_btkIMUCollection, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMUsExtractor_GetInputNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMUsExtractor *arg1 = (btkIMUsExtractor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkIMUsExtractor_GetInputNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkIMUsExtractor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMUsExtractor_GetInputNumber" "', argument " "1"" of type '" "btkIMUsExtractor const *""'"); 
  }
  arg1 = reinterpret_cast< btkIMUsExtractor * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetInputNumber();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMUsExtractor_GetValidInputNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMUsExtractor *arg1 = (btkIMUsExtractor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkIMUsExtractor_GetValidInputNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkIMUsExtractor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMUsExtractor_GetValidInputNumber" "', argument " "1"" of type '" "btkIMUsExtractor const *""'"); 
  }
  arg1 = reinterpret_cast< btkIMUsExtractor * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetValidInputNumber();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMUsExtractor_GetOutputNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMUsExtractor *arg1 = (btkIMUsExtractor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkIMUsExtractor_GetOutputNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkIMUsExtractor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMUsExtractor_GetOutputNumber" "', argument " "1"" of type '" "btkIMUsExtractor const *""'"); 
  }
  arg1 = reinterpret_cast< btkIMUsExtractor * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetOutputNumber();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMUsExtractor_ResetState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMUsExtractor *arg1 = (btkIMUsExtractor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkIMUsExtractor_ResetState",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkIMUsExtractor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMUsExtractor_ResetState" "', argument " "1"" of type '" "btkIMUsExtractor *""'"); 
  }
  arg1 = reinterpret_cast< btkIMUsExtractor * >(argp1);
  {
    try {
      (*arg1)->ResetState();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMUsExtractor_Update(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMUsExtractor *arg1 = (btkIMUsExtractor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkIMUsExtractor_Update",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkIMUsExtractor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMUsExtractor_Update" "', argument " "1"" of type '" "btkIMUsExtractor *""'"); 
  }
  arg1 = reinterpret_cast< btkIMUsExtractor * >(argp1);
  {
    try {
      (*arg1)->Update();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkIMUsExtractor_GetTimestamp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkIMUsExtractor *arg1 = (btkIMUsExtractor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkIMUsExtractor_GetTimestamp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkIMUsExtractor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkIMUsExtractor_GetTimestamp" "', argument " "1"" of type '" "btkIMUsExtractor const *""'"); 
  }
  arg1 = reinterpret_cast< btkIMUsExtractor * >(argp1);
  {
    try {
      result = (unsigned long)(*arg1)->GetTimestamp();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *btkIMUsExtractor_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_btkIMUsExtractor, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_btkMergeAcquisitionFilter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMergeAcquisitionFilter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_btkMergeAcquisitionFilter")) SWIG_fail;
  {
    try {
      result = (btkMergeAcquisitionFilter *)new btkMergeAcquisitionFilter();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkMergeAcquisitionFilter, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMergeAcquisitionFilter___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMergeAcquisitionFilter *arg1 = (btkMergeAcquisitionFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkMergeAcquisitionFilter_impl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkMergeAcquisitionFilter___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMergeAcquisitionFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMergeAcquisitionFilter___deref__" "', argument " "1"" of type '" "btkMergeAcquisitionFilter const *""'"); 
  }
  arg1 = reinterpret_cast< btkMergeAcquisitionFilter * >(argp1);
  {
    try {
      result = (btkMergeAcquisitionFilter_impl *)((btkMergeAcquisitionFilter const *)arg1)->operator ->();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkMergeAcquisitionFilter_impl, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_btkMergeAcquisitionFilter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMergeAcquisitionFilter *arg1 = (btkMergeAcquisitionFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_btkMergeAcquisitionFilter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMergeAcquisitionFilter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_btkMergeAcquisitionFilter" "', argument " "1"" of type '" "btkMergeAcquisitionFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkMergeAcquisitionFilter * >(argp1);
  {
    try {
      delete arg1;
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMergeAcquisitionFilter_GetFirstFrameRule(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMergeAcquisitionFilter *arg1 = (btkMergeAcquisitionFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkMergeAcquisitionFilter_GetFirstFrameRule",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMergeAcquisitionFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMergeAcquisitionFilter_GetFirstFrameRule" "', argument " "1"" of type '" "btkMergeAcquisitionFilter const *""'"); 
  }
  arg1 = reinterpret_cast< btkMergeAcquisitionFilter * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetFirstFrameRule();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMergeAcquisitionFilter_SetFirstFrameRule(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMergeAcquisitionFilter *arg1 = (btkMergeAcquisitionFilter *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkMergeAcquisitionFilter_SetFirstFrameRule",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMergeAcquisitionFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMergeAcquisitionFilter_SetFirstFrameRule" "', argument " "1"" of type '" "btkMergeAcquisitionFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkMergeAcquisitionFilter * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkMergeAcquisitionFilter_SetFirstFrameRule" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->SetFirstFrameRule(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMergeAcquisitionFilter_GetInput(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMergeAcquisitionFilter *arg1 = (btkMergeAcquisitionFilter *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  btkAcquisition result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkMergeAcquisitionFilter_GetInput",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMergeAcquisitionFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMergeAcquisitionFilter_GetInput" "', argument " "1"" of type '" "btkMergeAcquisitionFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkMergeAcquisitionFilter * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkMergeAcquisitionFilter_GetInput" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (*arg1)->GetInput(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkAcquisition(static_cast< const btkAcquisition& >(result))), SWIGTYPE_p_btkAcquisition, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMergeAcquisitionFilter_SetInput(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMergeAcquisitionFilter *arg1 = (btkMergeAcquisitionFilter *) 0 ;
  int arg2 ;
  btkAcquisition arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkMergeAcquisitionFilter_SetInput",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMergeAcquisitionFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMergeAcquisitionFilter_SetInput" "', argument " "1"" of type '" "btkMergeAcquisitionFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkMergeAcquisitionFilter * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkMergeAcquisitionFilter_SetInput" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkAcquisition,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkMergeAcquisitionFilter_SetInput" "', argument " "3"" of type '" "btkAcquisition""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkMergeAcquisitionFilter_SetInput" "', argument " "3"" of type '" "btkAcquisition""'");
    } else {
      btkAcquisition * temp = reinterpret_cast< btkAcquisition * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->SetInput(arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMergeAcquisitionFilter_GetOutput(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMergeAcquisitionFilter *arg1 = (btkMergeAcquisitionFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisition result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkMergeAcquisitionFilter_GetOutput",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMergeAcquisitionFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMergeAcquisitionFilter_GetOutput" "', argument " "1"" of type '" "btkMergeAcquisitionFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkMergeAcquisitionFilter * >(argp1);
  {
    try {
      result = (*arg1)->GetOutput();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkAcquisition(static_cast< const btkAcquisition& >(result))), SWIGTYPE_p_btkAcquisition, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMergeAcquisitionFilter_GetInputNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMergeAcquisitionFilter *arg1 = (btkMergeAcquisitionFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkMergeAcquisitionFilter_GetInputNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMergeAcquisitionFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMergeAcquisitionFilter_GetInputNumber" "', argument " "1"" of type '" "btkMergeAcquisitionFilter const *""'"); 
  }
  arg1 = reinterpret_cast< btkMergeAcquisitionFilter * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetInputNumber();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMergeAcquisitionFilter_GetValidInputNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMergeAcquisitionFilter *arg1 = (btkMergeAcquisitionFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkMergeAcquisitionFilter_GetValidInputNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMergeAcquisitionFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMergeAcquisitionFilter_GetValidInputNumber" "', argument " "1"" of type '" "btkMergeAcquisitionFilter const *""'"); 
  }
  arg1 = reinterpret_cast< btkMergeAcquisitionFilter * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetValidInputNumber();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMergeAcquisitionFilter_GetOutputNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMergeAcquisitionFilter *arg1 = (btkMergeAcquisitionFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkMergeAcquisitionFilter_GetOutputNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMergeAcquisitionFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMergeAcquisitionFilter_GetOutputNumber" "', argument " "1"" of type '" "btkMergeAcquisitionFilter const *""'"); 
  }
  arg1 = reinterpret_cast< btkMergeAcquisitionFilter * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetOutputNumber();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMergeAcquisitionFilter_ResetState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMergeAcquisitionFilter *arg1 = (btkMergeAcquisitionFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkMergeAcquisitionFilter_ResetState",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMergeAcquisitionFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMergeAcquisitionFilter_ResetState" "', argument " "1"" of type '" "btkMergeAcquisitionFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkMergeAcquisitionFilter * >(argp1);
  {
    try {
      (*arg1)->ResetState();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMergeAcquisitionFilter_Update(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMergeAcquisitionFilter *arg1 = (btkMergeAcquisitionFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkMergeAcquisitionFilter_Update",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMergeAcquisitionFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMergeAcquisitionFilter_Update" "', argument " "1"" of type '" "btkMergeAcquisitionFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkMergeAcquisitionFilter * >(argp1);
  {
    try {
      (*arg1)->Update();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkMergeAcquisitionFilter_GetTimestamp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkMergeAcquisitionFilter *arg1 = (btkMergeAcquisitionFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkMergeAcquisitionFilter_GetTimestamp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkMergeAcquisitionFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkMergeAcquisitionFilter_GetTimestamp" "', argument " "1"" of type '" "btkMergeAcquisitionFilter const *""'"); 
  }
  arg1 = reinterpret_cast< btkMergeAcquisitionFilter * >(argp1);
  {
    try {
      result = (unsigned long)(*arg1)->GetTimestamp();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *btkMergeAcquisitionFilter_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_btkMergeAcquisitionFilter, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_btkSeparateKnownVirtualMarkersFilter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkSeparateKnownVirtualMarkersFilter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_btkSeparateKnownVirtualMarkersFilter")) SWIG_fail;
  {
    try {
      result = (btkSeparateKnownVirtualMarkersFilter *)new btkSeparateKnownVirtualMarkersFilter();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkSeparateKnownVirtualMarkersFilter, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkSeparateKnownVirtualMarkersFilter___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkSeparateKnownVirtualMarkersFilter *arg1 = (btkSeparateKnownVirtualMarkersFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkSeparateKnownVirtualMarkersFilter_impl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkSeparateKnownVirtualMarkersFilter___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkSeparateKnownVirtualMarkersFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkSeparateKnownVirtualMarkersFilter___deref__" "', argument " "1"" of type '" "btkSeparateKnownVirtualMarkersFilter const *""'"); 
  }
  arg1 = reinterpret_cast< btkSeparateKnownVirtualMarkersFilter * >(argp1);
  {
    try {
      result = (btkSeparateKnownVirtualMarkersFilter_impl *)((btkSeparateKnownVirtualMarkersFilter const *)arg1)->operator ->();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkSeparateKnownVirtualMarkersFilter_impl, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_btkSeparateKnownVirtualMarkersFilter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkSeparateKnownVirtualMarkersFilter *arg1 = (btkSeparateKnownVirtualMarkersFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_btkSeparateKnownVirtualMarkersFilter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkSeparateKnownVirtualMarkersFilter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_btkSeparateKnownVirtualMarkersFilter" "', argument " "1"" of type '" "btkSeparateKnownVirtualMarkersFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkSeparateKnownVirtualMarkersFilter * >(argp1);
  {
    try {
      delete arg1;
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkSeparateKnownVirtualMarkersFilter_AppendVirtualReferenceFrame__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkSeparateKnownVirtualMarkersFilter *arg1 = (btkSeparateKnownVirtualMarkersFilter *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  int res5 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:btkSeparateKnownVirtualMarkersFilter_AppendVirtualReferenceFrame",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkSeparateKnownVirtualMarkersFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkSeparateKnownVirtualMarkersFilter_AppendVirtualReferenceFrame" "', argument " "1"" of type '" "btkSeparateKnownVirtualMarkersFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkSeparateKnownVirtualMarkersFilter * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkSeparateKnownVirtualMarkersFilter_AppendVirtualReferenceFrame" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkSeparateKnownVirtualMarkersFilter_AppendVirtualReferenceFrame" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkSeparateKnownVirtualMarkersFilter_AppendVirtualReferenceFrame" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkSeparateKnownVirtualMarkersFilter_AppendVirtualReferenceFrame" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "btkSeparateKnownVirtualMarkersFilter_AppendVirtualReferenceFrame" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkSeparateKnownVirtualMarkersFilter_AppendVirtualReferenceFrame" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "btkSeparateKnownVirtualMarkersFilter_AppendVirtualReferenceFrame" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkSeparateKnownVirtualMarkersFilter_AppendVirtualReferenceFrame" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    arg5 = ptr;
  }
  {
    try {
      (*arg1)->AppendVirtualReferenceFrame((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkSeparateKnownVirtualMarkersFilter_AppendVirtualReferenceFrame__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkSeparateKnownVirtualMarkersFilter *arg1 = (btkSeparateKnownVirtualMarkersFilter *) 0 ;
  btkStringAxes *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkSeparateKnownVirtualMarkersFilter_AppendVirtualReferenceFrame",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkSeparateKnownVirtualMarkersFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkSeparateKnownVirtualMarkersFilter_AppendVirtualReferenceFrame" "', argument " "1"" of type '" "btkSeparateKnownVirtualMarkersFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkSeparateKnownVirtualMarkersFilter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkStringAxes,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkSeparateKnownVirtualMarkersFilter_AppendVirtualReferenceFrame" "', argument " "2"" of type '" "btkStringAxes const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkSeparateKnownVirtualMarkersFilter_AppendVirtualReferenceFrame" "', argument " "2"" of type '" "btkStringAxes const &""'"); 
  }
  arg2 = reinterpret_cast< btkStringAxes * >(argp2);
  {
    try {
      (*arg1)->AppendVirtualReferenceFrame((btkStringAxes const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkSeparateKnownVirtualMarkersFilter_AppendVirtualReferenceFrame(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkSeparateKnownVirtualMarkersFilter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_btkStringAxes, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_btkSeparateKnownVirtualMarkersFilter_AppendVirtualReferenceFrame__SWIG_1(self, args);
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkSeparateKnownVirtualMarkersFilter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_btkSeparateKnownVirtualMarkersFilter_AppendVirtualReferenceFrame__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkSeparateKnownVirtualMarkersFilter_AppendVirtualReferenceFrame'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkSeparateKnownVirtualMarkersFilter_impl::AppendVirtualReferenceFrame(std::string const &,std::string const &,std::string const &,std::string const &)\n"
    "    btkSeparateKnownVirtualMarkersFilter_impl::AppendVirtualReferenceFrame(btkStringAxes const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkSeparateKnownVirtualMarkersFilter_AppendVirtualReferenceFrames(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkSeparateKnownVirtualMarkersFilter *arg1 = (btkSeparateKnownVirtualMarkersFilter *) 0 ;
  std::list< btkStringAxes,std::allocator< btkStringAxes > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkSeparateKnownVirtualMarkersFilter_AppendVirtualReferenceFrames",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkSeparateKnownVirtualMarkersFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkSeparateKnownVirtualMarkersFilter_AppendVirtualReferenceFrames" "', argument " "1"" of type '" "btkSeparateKnownVirtualMarkersFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkSeparateKnownVirtualMarkersFilter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__listT_btkStringAxes_std__allocatorT_btkStringAxes_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkSeparateKnownVirtualMarkersFilter_AppendVirtualReferenceFrames" "', argument " "2"" of type '" "std::list< btkStringAxes,std::allocator< btkStringAxes > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkSeparateKnownVirtualMarkersFilter_AppendVirtualReferenceFrames" "', argument " "2"" of type '" "std::list< btkStringAxes,std::allocator< btkStringAxes > > const &""'"); 
  }
  arg2 = reinterpret_cast< std::list< btkStringAxes,std::allocator< btkStringAxes > > * >(argp2);
  {
    try {
      (*arg1)->AppendVirtualReferenceFrames((std::list< btkStringAxes,std::allocator< btkStringAxes > > const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkSeparateKnownVirtualMarkersFilter_SetVirtualReferenceFrames(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkSeparateKnownVirtualMarkersFilter *arg1 = (btkSeparateKnownVirtualMarkersFilter *) 0 ;
  std::list< btkStringAxes,std::allocator< btkStringAxes > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkSeparateKnownVirtualMarkersFilter_SetVirtualReferenceFrames",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkSeparateKnownVirtualMarkersFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkSeparateKnownVirtualMarkersFilter_SetVirtualReferenceFrames" "', argument " "1"" of type '" "btkSeparateKnownVirtualMarkersFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkSeparateKnownVirtualMarkersFilter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__listT_btkStringAxes_std__allocatorT_btkStringAxes_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkSeparateKnownVirtualMarkersFilter_SetVirtualReferenceFrames" "', argument " "2"" of type '" "std::list< btkStringAxes,std::allocator< btkStringAxes > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkSeparateKnownVirtualMarkersFilter_SetVirtualReferenceFrames" "', argument " "2"" of type '" "std::list< btkStringAxes,std::allocator< btkStringAxes > > const &""'"); 
  }
  arg2 = reinterpret_cast< std::list< btkStringAxes,std::allocator< btkStringAxes > > * >(argp2);
  {
    try {
      (*arg1)->SetVirtualReferenceFrames((std::list< btkStringAxes,std::allocator< btkStringAxes > > const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkSeparateKnownVirtualMarkersFilter_GetVirtualReferenceFrames(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkSeparateKnownVirtualMarkersFilter *arg1 = (btkSeparateKnownVirtualMarkersFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< btkStringAxes,std::allocator< btkStringAxes > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkSeparateKnownVirtualMarkersFilter_GetVirtualReferenceFrames",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkSeparateKnownVirtualMarkersFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkSeparateKnownVirtualMarkersFilter_GetVirtualReferenceFrames" "', argument " "1"" of type '" "btkSeparateKnownVirtualMarkersFilter const *""'"); 
  }
  arg1 = reinterpret_cast< btkSeparateKnownVirtualMarkersFilter * >(argp1);
  {
    try {
      result = (std::list< btkStringAxes,std::allocator< btkStringAxes > > *) &(*arg1)->GetVirtualReferenceFrames();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_btkStringAxes_std__allocatorT_btkStringAxes_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkSeparateKnownVirtualMarkersFilter_AppendVirtualMarker(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkSeparateKnownVirtualMarkersFilter *arg1 = (btkSeparateKnownVirtualMarkersFilter *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkSeparateKnownVirtualMarkersFilter_AppendVirtualMarker",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkSeparateKnownVirtualMarkersFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkSeparateKnownVirtualMarkersFilter_AppendVirtualMarker" "', argument " "1"" of type '" "btkSeparateKnownVirtualMarkersFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkSeparateKnownVirtualMarkersFilter * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkSeparateKnownVirtualMarkersFilter_AppendVirtualMarker" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkSeparateKnownVirtualMarkersFilter_AppendVirtualMarker" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->AppendVirtualMarker((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkSeparateKnownVirtualMarkersFilter_AppendVirtualMarkers(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkSeparateKnownVirtualMarkersFilter *arg1 = (btkSeparateKnownVirtualMarkersFilter *) 0 ;
  std::list< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkSeparateKnownVirtualMarkersFilter_AppendVirtualMarkers",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkSeparateKnownVirtualMarkersFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkSeparateKnownVirtualMarkersFilter_AppendVirtualMarkers" "', argument " "1"" of type '" "btkSeparateKnownVirtualMarkersFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkSeparateKnownVirtualMarkersFilter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__listT_std__string_std__allocatorT_std__string_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkSeparateKnownVirtualMarkersFilter_AppendVirtualMarkers" "', argument " "2"" of type '" "std::list< std::string,std::allocator< std::string > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkSeparateKnownVirtualMarkersFilter_AppendVirtualMarkers" "', argument " "2"" of type '" "std::list< std::string,std::allocator< std::string > > const &""'"); 
  }
  arg2 = reinterpret_cast< std::list< std::string,std::allocator< std::string > > * >(argp2);
  {
    try {
      (*arg1)->AppendVirtualMarkers((std::list< std::string,std::allocator< std::string > > const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkSeparateKnownVirtualMarkersFilter_SetVirtualMarkers(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkSeparateKnownVirtualMarkersFilter *arg1 = (btkSeparateKnownVirtualMarkersFilter *) 0 ;
  std::list< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkSeparateKnownVirtualMarkersFilter_SetVirtualMarkers",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkSeparateKnownVirtualMarkersFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkSeparateKnownVirtualMarkersFilter_SetVirtualMarkers" "', argument " "1"" of type '" "btkSeparateKnownVirtualMarkersFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkSeparateKnownVirtualMarkersFilter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__listT_std__string_std__allocatorT_std__string_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkSeparateKnownVirtualMarkersFilter_SetVirtualMarkers" "', argument " "2"" of type '" "std::list< std::string,std::allocator< std::string > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkSeparateKnownVirtualMarkersFilter_SetVirtualMarkers" "', argument " "2"" of type '" "std::list< std::string,std::allocator< std::string > > const &""'"); 
  }
  arg2 = reinterpret_cast< std::list< std::string,std::allocator< std::string > > * >(argp2);
  {
    try {
      (*arg1)->SetVirtualMarkers((std::list< std::string,std::allocator< std::string > > const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkSeparateKnownVirtualMarkersFilter_GetVirtualMarkers(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkSeparateKnownVirtualMarkersFilter *arg1 = (btkSeparateKnownVirtualMarkersFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< std::string,std::allocator< std::string > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkSeparateKnownVirtualMarkersFilter_GetVirtualMarkers",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkSeparateKnownVirtualMarkersFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkSeparateKnownVirtualMarkersFilter_GetVirtualMarkers" "', argument " "1"" of type '" "btkSeparateKnownVirtualMarkersFilter const *""'"); 
  }
  arg1 = reinterpret_cast< btkSeparateKnownVirtualMarkersFilter * >(argp1);
  {
    try {
      result = (std::list< std::string,std::allocator< std::string > > *) &(*arg1)->GetVirtualMarkers();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkSeparateKnownVirtualMarkersFilter_SetLabelPrefix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkSeparateKnownVirtualMarkersFilter *arg1 = (btkSeparateKnownVirtualMarkersFilter *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkSeparateKnownVirtualMarkersFilter_SetLabelPrefix",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkSeparateKnownVirtualMarkersFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkSeparateKnownVirtualMarkersFilter_SetLabelPrefix" "', argument " "1"" of type '" "btkSeparateKnownVirtualMarkersFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkSeparateKnownVirtualMarkersFilter * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkSeparateKnownVirtualMarkersFilter_SetLabelPrefix" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkSeparateKnownVirtualMarkersFilter_SetLabelPrefix" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->SetLabelPrefix((std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkSeparateKnownVirtualMarkersFilter_GetLabelPrefix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkSeparateKnownVirtualMarkersFilter *arg1 = (btkSeparateKnownVirtualMarkersFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkSeparateKnownVirtualMarkersFilter_GetLabelPrefix",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkSeparateKnownVirtualMarkersFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkSeparateKnownVirtualMarkersFilter_GetLabelPrefix" "', argument " "1"" of type '" "btkSeparateKnownVirtualMarkersFilter const *""'"); 
  }
  arg1 = reinterpret_cast< btkSeparateKnownVirtualMarkersFilter * >(argp1);
  {
    try {
      result = (std::string *) &(*arg1)->GetLabelPrefix();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkSeparateKnownVirtualMarkersFilter_GetInput(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkSeparateKnownVirtualMarkersFilter *arg1 = (btkSeparateKnownVirtualMarkersFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkPointCollection result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkSeparateKnownVirtualMarkersFilter_GetInput",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkSeparateKnownVirtualMarkersFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkSeparateKnownVirtualMarkersFilter_GetInput" "', argument " "1"" of type '" "btkSeparateKnownVirtualMarkersFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkSeparateKnownVirtualMarkersFilter * >(argp1);
  {
    try {
      result = (*arg1)->GetInput();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkPointCollection(static_cast< const btkPointCollection& >(result))), SWIGTYPE_p_btkPointCollection, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkSeparateKnownVirtualMarkersFilter_SetInput(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkSeparateKnownVirtualMarkersFilter *arg1 = (btkSeparateKnownVirtualMarkersFilter *) 0 ;
  btkPointCollection arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkSeparateKnownVirtualMarkersFilter_SetInput",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkSeparateKnownVirtualMarkersFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkSeparateKnownVirtualMarkersFilter_SetInput" "', argument " "1"" of type '" "btkSeparateKnownVirtualMarkersFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkSeparateKnownVirtualMarkersFilter * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkPointCollection,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkSeparateKnownVirtualMarkersFilter_SetInput" "', argument " "2"" of type '" "btkPointCollection""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkSeparateKnownVirtualMarkersFilter_SetInput" "', argument " "2"" of type '" "btkPointCollection""'");
    } else {
      btkPointCollection * temp = reinterpret_cast< btkPointCollection * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->SetInput(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkSeparateKnownVirtualMarkersFilter_GetOutput(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkSeparateKnownVirtualMarkersFilter *arg1 = (btkSeparateKnownVirtualMarkersFilter *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  btkPointCollection result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkSeparateKnownVirtualMarkersFilter_GetOutput",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkSeparateKnownVirtualMarkersFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkSeparateKnownVirtualMarkersFilter_GetOutput" "', argument " "1"" of type '" "btkSeparateKnownVirtualMarkersFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkSeparateKnownVirtualMarkersFilter * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkSeparateKnownVirtualMarkersFilter_GetOutput" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (*arg1)->GetOutput(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkPointCollection(static_cast< const btkPointCollection& >(result))), SWIGTYPE_p_btkPointCollection, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkSeparateKnownVirtualMarkersFilter_GetInputNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkSeparateKnownVirtualMarkersFilter *arg1 = (btkSeparateKnownVirtualMarkersFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkSeparateKnownVirtualMarkersFilter_GetInputNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkSeparateKnownVirtualMarkersFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkSeparateKnownVirtualMarkersFilter_GetInputNumber" "', argument " "1"" of type '" "btkSeparateKnownVirtualMarkersFilter const *""'"); 
  }
  arg1 = reinterpret_cast< btkSeparateKnownVirtualMarkersFilter * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetInputNumber();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkSeparateKnownVirtualMarkersFilter_GetValidInputNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkSeparateKnownVirtualMarkersFilter *arg1 = (btkSeparateKnownVirtualMarkersFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkSeparateKnownVirtualMarkersFilter_GetValidInputNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkSeparateKnownVirtualMarkersFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkSeparateKnownVirtualMarkersFilter_GetValidInputNumber" "', argument " "1"" of type '" "btkSeparateKnownVirtualMarkersFilter const *""'"); 
  }
  arg1 = reinterpret_cast< btkSeparateKnownVirtualMarkersFilter * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetValidInputNumber();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkSeparateKnownVirtualMarkersFilter_GetOutputNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkSeparateKnownVirtualMarkersFilter *arg1 = (btkSeparateKnownVirtualMarkersFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkSeparateKnownVirtualMarkersFilter_GetOutputNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkSeparateKnownVirtualMarkersFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkSeparateKnownVirtualMarkersFilter_GetOutputNumber" "', argument " "1"" of type '" "btkSeparateKnownVirtualMarkersFilter const *""'"); 
  }
  arg1 = reinterpret_cast< btkSeparateKnownVirtualMarkersFilter * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetOutputNumber();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkSeparateKnownVirtualMarkersFilter_ResetState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkSeparateKnownVirtualMarkersFilter *arg1 = (btkSeparateKnownVirtualMarkersFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkSeparateKnownVirtualMarkersFilter_ResetState",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkSeparateKnownVirtualMarkersFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkSeparateKnownVirtualMarkersFilter_ResetState" "', argument " "1"" of type '" "btkSeparateKnownVirtualMarkersFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkSeparateKnownVirtualMarkersFilter * >(argp1);
  {
    try {
      (*arg1)->ResetState();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkSeparateKnownVirtualMarkersFilter_Update(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkSeparateKnownVirtualMarkersFilter *arg1 = (btkSeparateKnownVirtualMarkersFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkSeparateKnownVirtualMarkersFilter_Update",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkSeparateKnownVirtualMarkersFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkSeparateKnownVirtualMarkersFilter_Update" "', argument " "1"" of type '" "btkSeparateKnownVirtualMarkersFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkSeparateKnownVirtualMarkersFilter * >(argp1);
  {
    try {
      (*arg1)->Update();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkSeparateKnownVirtualMarkersFilter_GetTimestamp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkSeparateKnownVirtualMarkersFilter *arg1 = (btkSeparateKnownVirtualMarkersFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkSeparateKnownVirtualMarkersFilter_GetTimestamp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkSeparateKnownVirtualMarkersFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkSeparateKnownVirtualMarkersFilter_GetTimestamp" "', argument " "1"" of type '" "btkSeparateKnownVirtualMarkersFilter const *""'"); 
  }
  arg1 = reinterpret_cast< btkSeparateKnownVirtualMarkersFilter * >(argp1);
  {
    try {
      result = (unsigned long)(*arg1)->GetTimestamp();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *btkSeparateKnownVirtualMarkersFilter_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_btkSeparateKnownVirtualMarkersFilter, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_btkSpecializedPointsExtractor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkSpecializedPointsExtractor *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_btkSpecializedPointsExtractor")) SWIG_fail;
  {
    try {
      result = (btkSpecializedPointsExtractor *)new btkSpecializedPointsExtractor();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkSpecializedPointsExtractor, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkSpecializedPointsExtractor___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkSpecializedPointsExtractor *arg1 = (btkSpecializedPointsExtractor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkSpecializedPointsExtractor_impl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkSpecializedPointsExtractor___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkSpecializedPointsExtractor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkSpecializedPointsExtractor___deref__" "', argument " "1"" of type '" "btkSpecializedPointsExtractor const *""'"); 
  }
  arg1 = reinterpret_cast< btkSpecializedPointsExtractor * >(argp1);
  {
    try {
      result = (btkSpecializedPointsExtractor_impl *)((btkSpecializedPointsExtractor const *)arg1)->operator ->();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkSpecializedPointsExtractor_impl, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_btkSpecializedPointsExtractor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkSpecializedPointsExtractor *arg1 = (btkSpecializedPointsExtractor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_btkSpecializedPointsExtractor",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkSpecializedPointsExtractor, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_btkSpecializedPointsExtractor" "', argument " "1"" of type '" "btkSpecializedPointsExtractor *""'"); 
  }
  arg1 = reinterpret_cast< btkSpecializedPointsExtractor * >(argp1);
  {
    try {
      delete arg1;
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkSpecializedPointsExtractor_GetInput(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkSpecializedPointsExtractor *arg1 = (btkSpecializedPointsExtractor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisition result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkSpecializedPointsExtractor_GetInput",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkSpecializedPointsExtractor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkSpecializedPointsExtractor_GetInput" "', argument " "1"" of type '" "btkSpecializedPointsExtractor *""'"); 
  }
  arg1 = reinterpret_cast< btkSpecializedPointsExtractor * >(argp1);
  {
    try {
      result = (*arg1)->GetInput();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkAcquisition(static_cast< const btkAcquisition& >(result))), SWIGTYPE_p_btkAcquisition, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkSpecializedPointsExtractor_SetInput(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkSpecializedPointsExtractor *arg1 = (btkSpecializedPointsExtractor *) 0 ;
  btkAcquisition arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkSpecializedPointsExtractor_SetInput",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkSpecializedPointsExtractor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkSpecializedPointsExtractor_SetInput" "', argument " "1"" of type '" "btkSpecializedPointsExtractor *""'"); 
  }
  arg1 = reinterpret_cast< btkSpecializedPointsExtractor * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkAcquisition,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkSpecializedPointsExtractor_SetInput" "', argument " "2"" of type '" "btkAcquisition""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkSpecializedPointsExtractor_SetInput" "', argument " "2"" of type '" "btkAcquisition""'");
    } else {
      btkAcquisition * temp = reinterpret_cast< btkAcquisition * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->SetInput(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkSpecializedPointsExtractor_GetOutput(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkSpecializedPointsExtractor *arg1 = (btkSpecializedPointsExtractor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkPointCollection result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkSpecializedPointsExtractor_GetOutput",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkSpecializedPointsExtractor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkSpecializedPointsExtractor_GetOutput" "', argument " "1"" of type '" "btkSpecializedPointsExtractor *""'"); 
  }
  arg1 = reinterpret_cast< btkSpecializedPointsExtractor * >(argp1);
  {
    try {
      result = (*arg1)->GetOutput();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkPointCollection(static_cast< const btkPointCollection& >(result))), SWIGTYPE_p_btkPointCollection, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkSpecializedPointsExtractor_GetPointType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkSpecializedPointsExtractor *arg1 = (btkSpecializedPointsExtractor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkPoint_impl::Type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkSpecializedPointsExtractor_GetPointType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkSpecializedPointsExtractor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkSpecializedPointsExtractor_GetPointType" "', argument " "1"" of type '" "btkSpecializedPointsExtractor *""'"); 
  }
  arg1 = reinterpret_cast< btkSpecializedPointsExtractor * >(argp1);
  {
    try {
      result = (btkPoint_impl::Type)(*arg1)->GetPointType();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkSpecializedPointsExtractor_SetPointType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkSpecializedPointsExtractor *arg1 = (btkSpecializedPointsExtractor *) 0 ;
  btkPoint_impl::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkSpecializedPointsExtractor_SetPointType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkSpecializedPointsExtractor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkSpecializedPointsExtractor_SetPointType" "', argument " "1"" of type '" "btkSpecializedPointsExtractor *""'"); 
  }
  arg1 = reinterpret_cast< btkSpecializedPointsExtractor * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkSpecializedPointsExtractor_SetPointType" "', argument " "2"" of type '" "btkPoint_impl::Type""'");
  } 
  arg2 = static_cast< btkPoint_impl::Type >(val2);
  {
    try {
      (*arg1)->SetPointType(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkSpecializedPointsExtractor_GetInputNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkSpecializedPointsExtractor *arg1 = (btkSpecializedPointsExtractor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkSpecializedPointsExtractor_GetInputNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkSpecializedPointsExtractor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkSpecializedPointsExtractor_GetInputNumber" "', argument " "1"" of type '" "btkSpecializedPointsExtractor const *""'"); 
  }
  arg1 = reinterpret_cast< btkSpecializedPointsExtractor * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetInputNumber();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkSpecializedPointsExtractor_GetValidInputNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkSpecializedPointsExtractor *arg1 = (btkSpecializedPointsExtractor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkSpecializedPointsExtractor_GetValidInputNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkSpecializedPointsExtractor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkSpecializedPointsExtractor_GetValidInputNumber" "', argument " "1"" of type '" "btkSpecializedPointsExtractor const *""'"); 
  }
  arg1 = reinterpret_cast< btkSpecializedPointsExtractor * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetValidInputNumber();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkSpecializedPointsExtractor_GetOutputNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkSpecializedPointsExtractor *arg1 = (btkSpecializedPointsExtractor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkSpecializedPointsExtractor_GetOutputNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkSpecializedPointsExtractor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkSpecializedPointsExtractor_GetOutputNumber" "', argument " "1"" of type '" "btkSpecializedPointsExtractor const *""'"); 
  }
  arg1 = reinterpret_cast< btkSpecializedPointsExtractor * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetOutputNumber();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkSpecializedPointsExtractor_ResetState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkSpecializedPointsExtractor *arg1 = (btkSpecializedPointsExtractor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkSpecializedPointsExtractor_ResetState",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkSpecializedPointsExtractor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkSpecializedPointsExtractor_ResetState" "', argument " "1"" of type '" "btkSpecializedPointsExtractor *""'"); 
  }
  arg1 = reinterpret_cast< btkSpecializedPointsExtractor * >(argp1);
  {
    try {
      (*arg1)->ResetState();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkSpecializedPointsExtractor_Update(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkSpecializedPointsExtractor *arg1 = (btkSpecializedPointsExtractor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkSpecializedPointsExtractor_Update",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkSpecializedPointsExtractor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkSpecializedPointsExtractor_Update" "', argument " "1"" of type '" "btkSpecializedPointsExtractor *""'"); 
  }
  arg1 = reinterpret_cast< btkSpecializedPointsExtractor * >(argp1);
  {
    try {
      (*arg1)->Update();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkSpecializedPointsExtractor_GetTimestamp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkSpecializedPointsExtractor *arg1 = (btkSpecializedPointsExtractor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkSpecializedPointsExtractor_GetTimestamp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkSpecializedPointsExtractor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkSpecializedPointsExtractor_GetTimestamp" "', argument " "1"" of type '" "btkSpecializedPointsExtractor const *""'"); 
  }
  arg1 = reinterpret_cast< btkSpecializedPointsExtractor * >(argp1);
  {
    try {
      result = (unsigned long)(*arg1)->GetTimestamp();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *btkSpecializedPointsExtractor_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_btkSpecializedPointsExtractor, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_btkSubAcquisitionFilter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkSubAcquisitionFilter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_btkSubAcquisitionFilter")) SWIG_fail;
  {
    try {
      result = (btkSubAcquisitionFilter *)new btkSubAcquisitionFilter();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkSubAcquisitionFilter, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkSubAcquisitionFilter___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkSubAcquisitionFilter *arg1 = (btkSubAcquisitionFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkSubAcquisitionFilter_impl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkSubAcquisitionFilter___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkSubAcquisitionFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkSubAcquisitionFilter___deref__" "', argument " "1"" of type '" "btkSubAcquisitionFilter const *""'"); 
  }
  arg1 = reinterpret_cast< btkSubAcquisitionFilter * >(argp1);
  {
    try {
      result = (btkSubAcquisitionFilter_impl *)((btkSubAcquisitionFilter const *)arg1)->operator ->();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkSubAcquisitionFilter_impl, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkSubAcquisitionFilter_GetExtractionOption__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkSubAcquisitionFilter *arg1 = (btkSubAcquisitionFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkSubAcquisitionFilter::ExtractionOption result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkSubAcquisitionFilter_GetExtractionOption",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkSubAcquisitionFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkSubAcquisitionFilter_GetExtractionOption" "', argument " "1"" of type '" "btkSubAcquisitionFilter const *""'"); 
  }
  arg1 = reinterpret_cast< btkSubAcquisitionFilter * >(argp1);
  {
    try {
      result = (btkSubAcquisitionFilter::ExtractionOption)btkSubAcquisitionFilter_GetExtractionOption__SWIG_0((btkSubAcquisitionFilter const *)arg1);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkSubAcquisitionFilter_SetExtractionOption__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkSubAcquisitionFilter *arg1 = (btkSubAcquisitionFilter *) 0 ;
  btkSubAcquisitionFilter::ExtractionOption arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkSubAcquisitionFilter_SetExtractionOption",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkSubAcquisitionFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkSubAcquisitionFilter_SetExtractionOption" "', argument " "1"" of type '" "btkSubAcquisitionFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkSubAcquisitionFilter * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkSubAcquisitionFilter_SetExtractionOption" "', argument " "2"" of type '" "btkSubAcquisitionFilter::ExtractionOption""'");
  } 
  arg2 = static_cast< btkSubAcquisitionFilter::ExtractionOption >(val2);
  {
    try {
      btkSubAcquisitionFilter_SetExtractionOption__SWIG_0(arg1,arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkSubAcquisitionFilter_GetExtractionOption__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkSubAcquisitionFilter *arg1 = (btkSubAcquisitionFilter *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  btkSubAcquisitionFilter::ExtractionOption result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkSubAcquisitionFilter_GetExtractionOption",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkSubAcquisitionFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkSubAcquisitionFilter_GetExtractionOption" "', argument " "1"" of type '" "btkSubAcquisitionFilter const *""'"); 
  }
  arg1 = reinterpret_cast< btkSubAcquisitionFilter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkSubAcquisitionFilter_GetExtractionOption" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkSubAcquisitionFilter_GetExtractionOption" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< int,std::allocator< int > > * >(argp2);
  {
    try {
      result = (btkSubAcquisitionFilter::ExtractionOption)btkSubAcquisitionFilter_GetExtractionOption__SWIG_1((btkSubAcquisitionFilter const *)arg1,*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkSubAcquisitionFilter_GetExtractionOption(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkSubAcquisitionFilter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_btkSubAcquisitionFilter_GetExtractionOption__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkSubAcquisitionFilter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_btkSubAcquisitionFilter_GetExtractionOption__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkSubAcquisitionFilter_GetExtractionOption'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkSubAcquisitionFilter::GetExtractionOption() const\n"
    "    btkSubAcquisitionFilter::GetExtractionOption(std::vector< int,std::allocator< int > > &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkSubAcquisitionFilter_SetExtractionOption__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkSubAcquisitionFilter *arg1 = (btkSubAcquisitionFilter *) 0 ;
  btkSubAcquisitionFilter::ExtractionOption arg2 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkSubAcquisitionFilter_SetExtractionOption",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkSubAcquisitionFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkSubAcquisitionFilter_SetExtractionOption" "', argument " "1"" of type '" "btkSubAcquisitionFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkSubAcquisitionFilter * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkSubAcquisitionFilter_SetExtractionOption" "', argument " "2"" of type '" "btkSubAcquisitionFilter::ExtractionOption""'");
  } 
  arg2 = static_cast< btkSubAcquisitionFilter::ExtractionOption >(val2);
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkSubAcquisitionFilter_SetExtractionOption" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkSubAcquisitionFilter_SetExtractionOption" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      btkSubAcquisitionFilter_SetExtractionOption__SWIG_1(arg1,arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkSubAcquisitionFilter_SetExtractionOption(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkSubAcquisitionFilter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_btkSubAcquisitionFilter_SetExtractionOption__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkSubAcquisitionFilter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_btkSubAcquisitionFilter_SetExtractionOption__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkSubAcquisitionFilter_SetExtractionOption'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkSubAcquisitionFilter::SetExtractionOption(btkSubAcquisitionFilter::ExtractionOption)\n"
    "    btkSubAcquisitionFilter::SetExtractionOption(btkSubAcquisitionFilter::ExtractionOption,std::vector< int,std::allocator< int > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_btkSubAcquisitionFilter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkSubAcquisitionFilter *arg1 = (btkSubAcquisitionFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_btkSubAcquisitionFilter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkSubAcquisitionFilter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_btkSubAcquisitionFilter" "', argument " "1"" of type '" "btkSubAcquisitionFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkSubAcquisitionFilter * >(argp1);
  {
    try {
      delete arg1;
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkSubAcquisitionFilter_SetInput(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkSubAcquisitionFilter *arg1 = (btkSubAcquisitionFilter *) 0 ;
  btkAcquisition arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkSubAcquisitionFilter_SetInput",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkSubAcquisitionFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkSubAcquisitionFilter_SetInput" "', argument " "1"" of type '" "btkSubAcquisitionFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkSubAcquisitionFilter * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkAcquisition,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkSubAcquisitionFilter_SetInput" "', argument " "2"" of type '" "btkAcquisition""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkSubAcquisitionFilter_SetInput" "', argument " "2"" of type '" "btkAcquisition""'");
    } else {
      btkAcquisition * temp = reinterpret_cast< btkAcquisition * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->SetInput(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkSubAcquisitionFilter_GetInput(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkSubAcquisitionFilter *arg1 = (btkSubAcquisitionFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisition result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkSubAcquisitionFilter_GetInput",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkSubAcquisitionFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkSubAcquisitionFilter_GetInput" "', argument " "1"" of type '" "btkSubAcquisitionFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkSubAcquisitionFilter * >(argp1);
  {
    try {
      result = (*arg1)->GetInput();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkAcquisition(static_cast< const btkAcquisition& >(result))), SWIGTYPE_p_btkAcquisition, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkSubAcquisitionFilter_GetOutput(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkSubAcquisitionFilter *arg1 = (btkSubAcquisitionFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkAcquisition result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkSubAcquisitionFilter_GetOutput",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkSubAcquisitionFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkSubAcquisitionFilter_GetOutput" "', argument " "1"" of type '" "btkSubAcquisitionFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkSubAcquisitionFilter * >(argp1);
  {
    try {
      result = (*arg1)->GetOutput();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkAcquisition(static_cast< const btkAcquisition& >(result))), SWIGTYPE_p_btkAcquisition, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkSubAcquisitionFilter_GetFramesIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkSubAcquisitionFilter *arg1 = (btkSubAcquisitionFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkSubAcquisitionFilter_GetFramesIndex",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkSubAcquisitionFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkSubAcquisitionFilter_GetFramesIndex" "', argument " "1"" of type '" "btkSubAcquisitionFilter const *""'"); 
  }
  arg1 = reinterpret_cast< btkSubAcquisitionFilter * >(argp1);
  {
    try {
      result = (int *)(*arg1)->GetFramesIndex();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkSubAcquisitionFilter_SetFramesIndex__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkSubAcquisitionFilter *arg1 = (btkSubAcquisitionFilter *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkSubAcquisitionFilter_SetFramesIndex",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkSubAcquisitionFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkSubAcquisitionFilter_SetFramesIndex" "', argument " "1"" of type '" "btkSubAcquisitionFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkSubAcquisitionFilter * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkSubAcquisitionFilter_SetFramesIndex" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkSubAcquisitionFilter_SetFramesIndex" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (*arg1)->SetFramesIndex(arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkSubAcquisitionFilter_SetFramesIndex__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkSubAcquisitionFilter *arg1 = (btkSubAcquisitionFilter *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkSubAcquisitionFilter_SetFramesIndex",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkSubAcquisitionFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkSubAcquisitionFilter_SetFramesIndex" "', argument " "1"" of type '" "btkSubAcquisitionFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkSubAcquisitionFilter * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkSubAcquisitionFilter_SetFramesIndex" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->SetFramesIndex(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkSubAcquisitionFilter_SetFramesIndex__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkSubAcquisitionFilter *arg1 = (btkSubAcquisitionFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkSubAcquisitionFilter_SetFramesIndex",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkSubAcquisitionFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkSubAcquisitionFilter_SetFramesIndex" "', argument " "1"" of type '" "btkSubAcquisitionFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkSubAcquisitionFilter * >(argp1);
  {
    try {
      (*arg1)->SetFramesIndex();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkSubAcquisitionFilter_SetFramesIndex(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkSubAcquisitionFilter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_btkSubAcquisitionFilter_SetFramesIndex__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkSubAcquisitionFilter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_btkSubAcquisitionFilter_SetFramesIndex__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkSubAcquisitionFilter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_btkSubAcquisitionFilter_SetFramesIndex__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkSubAcquisitionFilter_SetFramesIndex'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkSubAcquisitionFilter_impl::SetFramesIndex(int,int)\n"
    "    btkSubAcquisitionFilter_impl::SetFramesIndex(int)\n"
    "    btkSubAcquisitionFilter_impl::SetFramesIndex()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkSubAcquisitionFilter_GetInputNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkSubAcquisitionFilter *arg1 = (btkSubAcquisitionFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkSubAcquisitionFilter_GetInputNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkSubAcquisitionFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkSubAcquisitionFilter_GetInputNumber" "', argument " "1"" of type '" "btkSubAcquisitionFilter const *""'"); 
  }
  arg1 = reinterpret_cast< btkSubAcquisitionFilter * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetInputNumber();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkSubAcquisitionFilter_GetValidInputNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkSubAcquisitionFilter *arg1 = (btkSubAcquisitionFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkSubAcquisitionFilter_GetValidInputNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkSubAcquisitionFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkSubAcquisitionFilter_GetValidInputNumber" "', argument " "1"" of type '" "btkSubAcquisitionFilter const *""'"); 
  }
  arg1 = reinterpret_cast< btkSubAcquisitionFilter * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetValidInputNumber();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkSubAcquisitionFilter_GetOutputNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkSubAcquisitionFilter *arg1 = (btkSubAcquisitionFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkSubAcquisitionFilter_GetOutputNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkSubAcquisitionFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkSubAcquisitionFilter_GetOutputNumber" "', argument " "1"" of type '" "btkSubAcquisitionFilter const *""'"); 
  }
  arg1 = reinterpret_cast< btkSubAcquisitionFilter * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetOutputNumber();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkSubAcquisitionFilter_ResetState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkSubAcquisitionFilter *arg1 = (btkSubAcquisitionFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkSubAcquisitionFilter_ResetState",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkSubAcquisitionFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkSubAcquisitionFilter_ResetState" "', argument " "1"" of type '" "btkSubAcquisitionFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkSubAcquisitionFilter * >(argp1);
  {
    try {
      (*arg1)->ResetState();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkSubAcquisitionFilter_Update(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkSubAcquisitionFilter *arg1 = (btkSubAcquisitionFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkSubAcquisitionFilter_Update",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkSubAcquisitionFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkSubAcquisitionFilter_Update" "', argument " "1"" of type '" "btkSubAcquisitionFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkSubAcquisitionFilter * >(argp1);
  {
    try {
      (*arg1)->Update();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkSubAcquisitionFilter_GetTimestamp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkSubAcquisitionFilter *arg1 = (btkSubAcquisitionFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkSubAcquisitionFilter_GetTimestamp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkSubAcquisitionFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkSubAcquisitionFilter_GetTimestamp" "', argument " "1"" of type '" "btkSubAcquisitionFilter const *""'"); 
  }
  arg1 = reinterpret_cast< btkSubAcquisitionFilter * >(argp1);
  {
    try {
      result = (unsigned long)(*arg1)->GetTimestamp();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *btkSubAcquisitionFilter_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_btkSubAcquisitionFilter, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_btkVerticalGroundReactionForceGaitEventDetector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkVerticalGroundReactionForceGaitEventDetector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_btkVerticalGroundReactionForceGaitEventDetector")) SWIG_fail;
  {
    try {
      result = (btkVerticalGroundReactionForceGaitEventDetector *)new btkVerticalGroundReactionForceGaitEventDetector();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkVerticalGroundReactionForceGaitEventDetector, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkVerticalGroundReactionForceGaitEventDetector___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkVerticalGroundReactionForceGaitEventDetector *arg1 = (btkVerticalGroundReactionForceGaitEventDetector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkVerticalGroundReactionForceGaitEventDetector_impl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkVerticalGroundReactionForceGaitEventDetector___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkVerticalGroundReactionForceGaitEventDetector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkVerticalGroundReactionForceGaitEventDetector___deref__" "', argument " "1"" of type '" "btkVerticalGroundReactionForceGaitEventDetector const *""'"); 
  }
  arg1 = reinterpret_cast< btkVerticalGroundReactionForceGaitEventDetector * >(argp1);
  {
    try {
      result = (btkVerticalGroundReactionForceGaitEventDetector_impl *)((btkVerticalGroundReactionForceGaitEventDetector const *)arg1)->operator ->();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkVerticalGroundReactionForceGaitEventDetector_impl, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_btkVerticalGroundReactionForceGaitEventDetector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkVerticalGroundReactionForceGaitEventDetector *arg1 = (btkVerticalGroundReactionForceGaitEventDetector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_btkVerticalGroundReactionForceGaitEventDetector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkVerticalGroundReactionForceGaitEventDetector, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_btkVerticalGroundReactionForceGaitEventDetector" "', argument " "1"" of type '" "btkVerticalGroundReactionForceGaitEventDetector *""'"); 
  }
  arg1 = reinterpret_cast< btkVerticalGroundReactionForceGaitEventDetector * >(argp1);
  {
    try {
      delete arg1;
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkVerticalGroundReactionForceGaitEventDetector_GetInput(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkVerticalGroundReactionForceGaitEventDetector *arg1 = (btkVerticalGroundReactionForceGaitEventDetector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkWrenchCollection result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkVerticalGroundReactionForceGaitEventDetector_GetInput",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkVerticalGroundReactionForceGaitEventDetector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkVerticalGroundReactionForceGaitEventDetector_GetInput" "', argument " "1"" of type '" "btkVerticalGroundReactionForceGaitEventDetector *""'"); 
  }
  arg1 = reinterpret_cast< btkVerticalGroundReactionForceGaitEventDetector * >(argp1);
  {
    try {
      result = (*arg1)->GetInput();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkWrenchCollection(static_cast< const btkWrenchCollection& >(result))), SWIGTYPE_p_btkWrenchCollection, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkVerticalGroundReactionForceGaitEventDetector_SetInput__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkVerticalGroundReactionForceGaitEventDetector *arg1 = (btkVerticalGroundReactionForceGaitEventDetector *) 0 ;
  btkWrench arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkVerticalGroundReactionForceGaitEventDetector_SetInput",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkVerticalGroundReactionForceGaitEventDetector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkVerticalGroundReactionForceGaitEventDetector_SetInput" "', argument " "1"" of type '" "btkVerticalGroundReactionForceGaitEventDetector *""'"); 
  }
  arg1 = reinterpret_cast< btkVerticalGroundReactionForceGaitEventDetector * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkWrench,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkVerticalGroundReactionForceGaitEventDetector_SetInput" "', argument " "2"" of type '" "btkWrench""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkVerticalGroundReactionForceGaitEventDetector_SetInput" "', argument " "2"" of type '" "btkWrench""'");
    } else {
      btkWrench * temp = reinterpret_cast< btkWrench * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->SetInput(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkVerticalGroundReactionForceGaitEventDetector_SetInput__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkVerticalGroundReactionForceGaitEventDetector *arg1 = (btkVerticalGroundReactionForceGaitEventDetector *) 0 ;
  btkWrenchCollection arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkVerticalGroundReactionForceGaitEventDetector_SetInput",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkVerticalGroundReactionForceGaitEventDetector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkVerticalGroundReactionForceGaitEventDetector_SetInput" "', argument " "1"" of type '" "btkVerticalGroundReactionForceGaitEventDetector *""'"); 
  }
  arg1 = reinterpret_cast< btkVerticalGroundReactionForceGaitEventDetector * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkWrenchCollection,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkVerticalGroundReactionForceGaitEventDetector_SetInput" "', argument " "2"" of type '" "btkWrenchCollection""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkVerticalGroundReactionForceGaitEventDetector_SetInput" "', argument " "2"" of type '" "btkWrenchCollection""'");
    } else {
      btkWrenchCollection * temp = reinterpret_cast< btkWrenchCollection * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->SetInput(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkVerticalGroundReactionForceGaitEventDetector_SetInput(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkVerticalGroundReactionForceGaitEventDetector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_btkWrench, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_btkVerticalGroundReactionForceGaitEventDetector_SetInput__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkVerticalGroundReactionForceGaitEventDetector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_btkWrenchCollection, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_btkVerticalGroundReactionForceGaitEventDetector_SetInput__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkVerticalGroundReactionForceGaitEventDetector_SetInput'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkVerticalGroundReactionForceGaitEventDetector_impl::SetInput(btkWrench)\n"
    "    btkVerticalGroundReactionForceGaitEventDetector_impl::SetInput(btkWrenchCollection)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkVerticalGroundReactionForceGaitEventDetector_GetOutput(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkVerticalGroundReactionForceGaitEventDetector *arg1 = (btkVerticalGroundReactionForceGaitEventDetector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkEventCollection result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkVerticalGroundReactionForceGaitEventDetector_GetOutput",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkVerticalGroundReactionForceGaitEventDetector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkVerticalGroundReactionForceGaitEventDetector_GetOutput" "', argument " "1"" of type '" "btkVerticalGroundReactionForceGaitEventDetector *""'"); 
  }
  arg1 = reinterpret_cast< btkVerticalGroundReactionForceGaitEventDetector * >(argp1);
  {
    try {
      result = (*arg1)->GetOutput();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkEventCollection(static_cast< const btkEventCollection& >(result))), SWIGTYPE_p_btkEventCollection, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkVerticalGroundReactionForceGaitEventDetector_SetThresholdValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkVerticalGroundReactionForceGaitEventDetector *arg1 = (btkVerticalGroundReactionForceGaitEventDetector *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkVerticalGroundReactionForceGaitEventDetector_SetThresholdValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkVerticalGroundReactionForceGaitEventDetector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkVerticalGroundReactionForceGaitEventDetector_SetThresholdValue" "', argument " "1"" of type '" "btkVerticalGroundReactionForceGaitEventDetector *""'"); 
  }
  arg1 = reinterpret_cast< btkVerticalGroundReactionForceGaitEventDetector * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkVerticalGroundReactionForceGaitEventDetector_SetThresholdValue" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->SetThresholdValue(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkVerticalGroundReactionForceGaitEventDetector_GetThresholdValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkVerticalGroundReactionForceGaitEventDetector *arg1 = (btkVerticalGroundReactionForceGaitEventDetector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkVerticalGroundReactionForceGaitEventDetector_GetThresholdValue",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkVerticalGroundReactionForceGaitEventDetector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkVerticalGroundReactionForceGaitEventDetector_GetThresholdValue" "', argument " "1"" of type '" "btkVerticalGroundReactionForceGaitEventDetector const *""'"); 
  }
  arg1 = reinterpret_cast< btkVerticalGroundReactionForceGaitEventDetector * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetThresholdValue();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkVerticalGroundReactionForceGaitEventDetector_SetForceplateContextMapping(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkVerticalGroundReactionForceGaitEventDetector *arg1 = (btkVerticalGroundReactionForceGaitEventDetector *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkVerticalGroundReactionForceGaitEventDetector_SetForceplateContextMapping",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkVerticalGroundReactionForceGaitEventDetector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkVerticalGroundReactionForceGaitEventDetector_SetForceplateContextMapping" "', argument " "1"" of type '" "btkVerticalGroundReactionForceGaitEventDetector *""'"); 
  }
  arg1 = reinterpret_cast< btkVerticalGroundReactionForceGaitEventDetector * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkVerticalGroundReactionForceGaitEventDetector_SetForceplateContextMapping" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkVerticalGroundReactionForceGaitEventDetector_SetForceplateContextMapping" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->SetForceplateContextMapping((std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkVerticalGroundReactionForceGaitEventDetector_GetForceplateContextMapping(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkVerticalGroundReactionForceGaitEventDetector *arg1 = (btkVerticalGroundReactionForceGaitEventDetector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkVerticalGroundReactionForceGaitEventDetector_GetForceplateContextMapping",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkVerticalGroundReactionForceGaitEventDetector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkVerticalGroundReactionForceGaitEventDetector_GetForceplateContextMapping" "', argument " "1"" of type '" "btkVerticalGroundReactionForceGaitEventDetector const *""'"); 
  }
  arg1 = reinterpret_cast< btkVerticalGroundReactionForceGaitEventDetector * >(argp1);
  {
    try {
      result = (std::vector< std::string,std::allocator< std::string > > *) &(*arg1)->GetForceplateContextMapping();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkVerticalGroundReactionForceGaitEventDetector_SetRegionOfInterest__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkVerticalGroundReactionForceGaitEventDetector *arg1 = (btkVerticalGroundReactionForceGaitEventDetector *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkVerticalGroundReactionForceGaitEventDetector_SetRegionOfInterest",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkVerticalGroundReactionForceGaitEventDetector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkVerticalGroundReactionForceGaitEventDetector_SetRegionOfInterest" "', argument " "1"" of type '" "btkVerticalGroundReactionForceGaitEventDetector *""'"); 
  }
  arg1 = reinterpret_cast< btkVerticalGroundReactionForceGaitEventDetector * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkVerticalGroundReactionForceGaitEventDetector_SetRegionOfInterest" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkVerticalGroundReactionForceGaitEventDetector_SetRegionOfInterest" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (*arg1)->SetRegionOfInterest(arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkVerticalGroundReactionForceGaitEventDetector_SetRegionOfInterest__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkVerticalGroundReactionForceGaitEventDetector *arg1 = (btkVerticalGroundReactionForceGaitEventDetector *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkVerticalGroundReactionForceGaitEventDetector_SetRegionOfInterest",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkVerticalGroundReactionForceGaitEventDetector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkVerticalGroundReactionForceGaitEventDetector_SetRegionOfInterest" "', argument " "1"" of type '" "btkVerticalGroundReactionForceGaitEventDetector *""'"); 
  }
  arg1 = reinterpret_cast< btkVerticalGroundReactionForceGaitEventDetector * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkVerticalGroundReactionForceGaitEventDetector_SetRegionOfInterest" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->SetRegionOfInterest(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkVerticalGroundReactionForceGaitEventDetector_SetRegionOfInterest__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkVerticalGroundReactionForceGaitEventDetector *arg1 = (btkVerticalGroundReactionForceGaitEventDetector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkVerticalGroundReactionForceGaitEventDetector_SetRegionOfInterest",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkVerticalGroundReactionForceGaitEventDetector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkVerticalGroundReactionForceGaitEventDetector_SetRegionOfInterest" "', argument " "1"" of type '" "btkVerticalGroundReactionForceGaitEventDetector *""'"); 
  }
  arg1 = reinterpret_cast< btkVerticalGroundReactionForceGaitEventDetector * >(argp1);
  {
    try {
      (*arg1)->SetRegionOfInterest();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkVerticalGroundReactionForceGaitEventDetector_SetRegionOfInterest(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkVerticalGroundReactionForceGaitEventDetector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_btkVerticalGroundReactionForceGaitEventDetector_SetRegionOfInterest__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkVerticalGroundReactionForceGaitEventDetector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_btkVerticalGroundReactionForceGaitEventDetector_SetRegionOfInterest__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btkVerticalGroundReactionForceGaitEventDetector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_btkVerticalGroundReactionForceGaitEventDetector_SetRegionOfInterest__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkVerticalGroundReactionForceGaitEventDetector_SetRegionOfInterest'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    btkVerticalGroundReactionForceGaitEventDetector_impl::SetRegionOfInterest(int,int)\n"
    "    btkVerticalGroundReactionForceGaitEventDetector_impl::SetRegionOfInterest(int)\n"
    "    btkVerticalGroundReactionForceGaitEventDetector_impl::SetRegionOfInterest()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkVerticalGroundReactionForceGaitEventDetector_GetRegionOfInterest(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkVerticalGroundReactionForceGaitEventDetector *arg1 = (btkVerticalGroundReactionForceGaitEventDetector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkVerticalGroundReactionForceGaitEventDetector_GetRegionOfInterest",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkVerticalGroundReactionForceGaitEventDetector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkVerticalGroundReactionForceGaitEventDetector_GetRegionOfInterest" "', argument " "1"" of type '" "btkVerticalGroundReactionForceGaitEventDetector const *""'"); 
  }
  arg1 = reinterpret_cast< btkVerticalGroundReactionForceGaitEventDetector * >(argp1);
  {
    try {
      result = (int *)(*arg1)->GetRegionOfInterest();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkVerticalGroundReactionForceGaitEventDetector_SetAcquisitionInformation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkVerticalGroundReactionForceGaitEventDetector *arg1 = (btkVerticalGroundReactionForceGaitEventDetector *) 0 ;
  int arg2 ;
  double arg3 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:btkVerticalGroundReactionForceGaitEventDetector_SetAcquisitionInformation",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkVerticalGroundReactionForceGaitEventDetector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkVerticalGroundReactionForceGaitEventDetector_SetAcquisitionInformation" "', argument " "1"" of type '" "btkVerticalGroundReactionForceGaitEventDetector *""'"); 
  }
  arg1 = reinterpret_cast< btkVerticalGroundReactionForceGaitEventDetector * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkVerticalGroundReactionForceGaitEventDetector_SetAcquisitionInformation" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkVerticalGroundReactionForceGaitEventDetector_SetAcquisitionInformation" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "btkVerticalGroundReactionForceGaitEventDetector_SetAcquisitionInformation" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkVerticalGroundReactionForceGaitEventDetector_SetAcquisitionInformation" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      (*arg1)->SetAcquisitionInformation(arg2,arg3,(std::string const &)*arg4);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkVerticalGroundReactionForceGaitEventDetector_GetAcquisitionInformation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkVerticalGroundReactionForceGaitEventDetector *arg1 = (btkVerticalGroundReactionForceGaitEventDetector *) 0 ;
  int *arg2 = 0 ;
  double *arg3 = 0 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:btkVerticalGroundReactionForceGaitEventDetector_GetAcquisitionInformation",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkVerticalGroundReactionForceGaitEventDetector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkVerticalGroundReactionForceGaitEventDetector_GetAcquisitionInformation" "', argument " "1"" of type '" "btkVerticalGroundReactionForceGaitEventDetector *""'"); 
  }
  arg1 = reinterpret_cast< btkVerticalGroundReactionForceGaitEventDetector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_int,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkVerticalGroundReactionForceGaitEventDetector_GetAcquisitionInformation" "', argument " "2"" of type '" "int &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkVerticalGroundReactionForceGaitEventDetector_GetAcquisitionInformation" "', argument " "2"" of type '" "int &""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkVerticalGroundReactionForceGaitEventDetector_GetAcquisitionInformation" "', argument " "3"" of type '" "double &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkVerticalGroundReactionForceGaitEventDetector_GetAcquisitionInformation" "', argument " "3"" of type '" "double &""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "btkVerticalGroundReactionForceGaitEventDetector_GetAcquisitionInformation" "', argument " "4"" of type '" "std::string &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkVerticalGroundReactionForceGaitEventDetector_GetAcquisitionInformation" "', argument " "4"" of type '" "std::string &""'"); 
  }
  arg4 = reinterpret_cast< std::string * >(argp4);
  {
    try {
      (*arg1)->GetAcquisitionInformation(*arg2,*arg3,*arg4);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkVerticalGroundReactionForceGaitEventDetector_GetInputNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkVerticalGroundReactionForceGaitEventDetector *arg1 = (btkVerticalGroundReactionForceGaitEventDetector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkVerticalGroundReactionForceGaitEventDetector_GetInputNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkVerticalGroundReactionForceGaitEventDetector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkVerticalGroundReactionForceGaitEventDetector_GetInputNumber" "', argument " "1"" of type '" "btkVerticalGroundReactionForceGaitEventDetector const *""'"); 
  }
  arg1 = reinterpret_cast< btkVerticalGroundReactionForceGaitEventDetector * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetInputNumber();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkVerticalGroundReactionForceGaitEventDetector_GetValidInputNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkVerticalGroundReactionForceGaitEventDetector *arg1 = (btkVerticalGroundReactionForceGaitEventDetector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkVerticalGroundReactionForceGaitEventDetector_GetValidInputNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkVerticalGroundReactionForceGaitEventDetector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkVerticalGroundReactionForceGaitEventDetector_GetValidInputNumber" "', argument " "1"" of type '" "btkVerticalGroundReactionForceGaitEventDetector const *""'"); 
  }
  arg1 = reinterpret_cast< btkVerticalGroundReactionForceGaitEventDetector * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetValidInputNumber();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkVerticalGroundReactionForceGaitEventDetector_GetOutputNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkVerticalGroundReactionForceGaitEventDetector *arg1 = (btkVerticalGroundReactionForceGaitEventDetector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkVerticalGroundReactionForceGaitEventDetector_GetOutputNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkVerticalGroundReactionForceGaitEventDetector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkVerticalGroundReactionForceGaitEventDetector_GetOutputNumber" "', argument " "1"" of type '" "btkVerticalGroundReactionForceGaitEventDetector const *""'"); 
  }
  arg1 = reinterpret_cast< btkVerticalGroundReactionForceGaitEventDetector * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetOutputNumber();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkVerticalGroundReactionForceGaitEventDetector_ResetState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkVerticalGroundReactionForceGaitEventDetector *arg1 = (btkVerticalGroundReactionForceGaitEventDetector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkVerticalGroundReactionForceGaitEventDetector_ResetState",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkVerticalGroundReactionForceGaitEventDetector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkVerticalGroundReactionForceGaitEventDetector_ResetState" "', argument " "1"" of type '" "btkVerticalGroundReactionForceGaitEventDetector *""'"); 
  }
  arg1 = reinterpret_cast< btkVerticalGroundReactionForceGaitEventDetector * >(argp1);
  {
    try {
      (*arg1)->ResetState();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkVerticalGroundReactionForceGaitEventDetector_Update(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkVerticalGroundReactionForceGaitEventDetector *arg1 = (btkVerticalGroundReactionForceGaitEventDetector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkVerticalGroundReactionForceGaitEventDetector_Update",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkVerticalGroundReactionForceGaitEventDetector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkVerticalGroundReactionForceGaitEventDetector_Update" "', argument " "1"" of type '" "btkVerticalGroundReactionForceGaitEventDetector *""'"); 
  }
  arg1 = reinterpret_cast< btkVerticalGroundReactionForceGaitEventDetector * >(argp1);
  {
    try {
      (*arg1)->Update();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkVerticalGroundReactionForceGaitEventDetector_GetTimestamp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkVerticalGroundReactionForceGaitEventDetector *arg1 = (btkVerticalGroundReactionForceGaitEventDetector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkVerticalGroundReactionForceGaitEventDetector_GetTimestamp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkVerticalGroundReactionForceGaitEventDetector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkVerticalGroundReactionForceGaitEventDetector_GetTimestamp" "', argument " "1"" of type '" "btkVerticalGroundReactionForceGaitEventDetector const *""'"); 
  }
  arg1 = reinterpret_cast< btkVerticalGroundReactionForceGaitEventDetector * >(argp1);
  {
    try {
      result = (unsigned long)(*arg1)->GetTimestamp();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *btkVerticalGroundReactionForceGaitEventDetector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_btkVerticalGroundReactionForceGaitEventDetector, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_btkWrenchDirectionAngleFilter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrenchDirectionAngleFilter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_btkWrenchDirectionAngleFilter")) SWIG_fail;
  {
    try {
      result = (btkWrenchDirectionAngleFilter *)new btkWrenchDirectionAngleFilter();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkWrenchDirectionAngleFilter, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkWrenchDirectionAngleFilter___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrenchDirectionAngleFilter *arg1 = (btkWrenchDirectionAngleFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkWrenchDirectionAngleFilter_impl *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkWrenchDirectionAngleFilter___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrenchDirectionAngleFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrenchDirectionAngleFilter___deref__" "', argument " "1"" of type '" "btkWrenchDirectionAngleFilter const *""'"); 
  }
  arg1 = reinterpret_cast< btkWrenchDirectionAngleFilter * >(argp1);
  {
    try {
      result = (btkWrenchDirectionAngleFilter_impl *)((btkWrenchDirectionAngleFilter const *)arg1)->operator ->();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkWrenchDirectionAngleFilter_impl, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_btkWrenchDirectionAngleFilter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrenchDirectionAngleFilter *arg1 = (btkWrenchDirectionAngleFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_btkWrenchDirectionAngleFilter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrenchDirectionAngleFilter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_btkWrenchDirectionAngleFilter" "', argument " "1"" of type '" "btkWrenchDirectionAngleFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkWrenchDirectionAngleFilter * >(argp1);
  {
    try {
      delete arg1;
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkWrenchDirectionAngleFilter_GetInput(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrenchDirectionAngleFilter *arg1 = (btkWrenchDirectionAngleFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkWrenchCollection result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkWrenchDirectionAngleFilter_GetInput",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrenchDirectionAngleFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrenchDirectionAngleFilter_GetInput" "', argument " "1"" of type '" "btkWrenchDirectionAngleFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkWrenchDirectionAngleFilter * >(argp1);
  {
    try {
      result = (*arg1)->GetInput();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkWrenchCollection(static_cast< const btkWrenchCollection& >(result))), SWIGTYPE_p_btkWrenchCollection, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkWrenchDirectionAngleFilter_SetInput(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrenchDirectionAngleFilter *arg1 = (btkWrenchDirectionAngleFilter *) 0 ;
  btkWrenchCollection arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkWrenchDirectionAngleFilter_SetInput",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrenchDirectionAngleFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrenchDirectionAngleFilter_SetInput" "', argument " "1"" of type '" "btkWrenchDirectionAngleFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkWrenchDirectionAngleFilter * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkWrenchCollection,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkWrenchDirectionAngleFilter_SetInput" "', argument " "2"" of type '" "btkWrenchCollection""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkWrenchDirectionAngleFilter_SetInput" "', argument " "2"" of type '" "btkWrenchCollection""'");
    } else {
      btkWrenchCollection * temp = reinterpret_cast< btkWrenchCollection * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->SetInput(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkWrenchDirectionAngleFilter_GetOutput(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrenchDirectionAngleFilter *arg1 = (btkWrenchDirectionAngleFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  btkPointCollection result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkWrenchDirectionAngleFilter_GetOutput",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrenchDirectionAngleFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrenchDirectionAngleFilter_GetOutput" "', argument " "1"" of type '" "btkWrenchDirectionAngleFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkWrenchDirectionAngleFilter * >(argp1);
  {
    try {
      result = (*arg1)->GetOutput();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new btkPointCollection(static_cast< const btkPointCollection& >(result))), SWIGTYPE_p_btkPointCollection, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkWrenchDirectionAngleFilter_GetInputNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrenchDirectionAngleFilter *arg1 = (btkWrenchDirectionAngleFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkWrenchDirectionAngleFilter_GetInputNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrenchDirectionAngleFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrenchDirectionAngleFilter_GetInputNumber" "', argument " "1"" of type '" "btkWrenchDirectionAngleFilter const *""'"); 
  }
  arg1 = reinterpret_cast< btkWrenchDirectionAngleFilter * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetInputNumber();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkWrenchDirectionAngleFilter_GetValidInputNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrenchDirectionAngleFilter *arg1 = (btkWrenchDirectionAngleFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkWrenchDirectionAngleFilter_GetValidInputNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrenchDirectionAngleFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrenchDirectionAngleFilter_GetValidInputNumber" "', argument " "1"" of type '" "btkWrenchDirectionAngleFilter const *""'"); 
  }
  arg1 = reinterpret_cast< btkWrenchDirectionAngleFilter * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetValidInputNumber();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkWrenchDirectionAngleFilter_GetOutputNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrenchDirectionAngleFilter *arg1 = (btkWrenchDirectionAngleFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkWrenchDirectionAngleFilter_GetOutputNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrenchDirectionAngleFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrenchDirectionAngleFilter_GetOutputNumber" "', argument " "1"" of type '" "btkWrenchDirectionAngleFilter const *""'"); 
  }
  arg1 = reinterpret_cast< btkWrenchDirectionAngleFilter * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetOutputNumber();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkWrenchDirectionAngleFilter_ResetState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrenchDirectionAngleFilter *arg1 = (btkWrenchDirectionAngleFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkWrenchDirectionAngleFilter_ResetState",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrenchDirectionAngleFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrenchDirectionAngleFilter_ResetState" "', argument " "1"" of type '" "btkWrenchDirectionAngleFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkWrenchDirectionAngleFilter * >(argp1);
  {
    try {
      (*arg1)->ResetState();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkWrenchDirectionAngleFilter_Update(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrenchDirectionAngleFilter *arg1 = (btkWrenchDirectionAngleFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkWrenchDirectionAngleFilter_Update",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrenchDirectionAngleFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrenchDirectionAngleFilter_Update" "', argument " "1"" of type '" "btkWrenchDirectionAngleFilter *""'"); 
  }
  arg1 = reinterpret_cast< btkWrenchDirectionAngleFilter * >(argp1);
  {
    try {
      (*arg1)->Update();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkWrenchDirectionAngleFilter_GetTimestamp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkWrenchDirectionAngleFilter *arg1 = (btkWrenchDirectionAngleFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkWrenchDirectionAngleFilter_GetTimestamp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkWrenchDirectionAngleFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkWrenchDirectionAngleFilter_GetTimestamp" "', argument " "1"" of type '" "btkWrenchDirectionAngleFilter const *""'"); 
  }
  arg1 = reinterpret_cast< btkWrenchDirectionAngleFilter * >(argp1);
  {
    try {
      result = (unsigned long)(*arg1)->GetTimestamp();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *btkWrenchDirectionAngleFilter_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_btkWrenchDirectionAngleFilter, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_btkStringAxes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  btkStringAxes *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_btkStringAxes",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkStringAxes" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkStringAxes" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_btkStringAxes" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkStringAxes" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_btkStringAxes" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkStringAxes" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_btkStringAxes" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkStringAxes" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      result = (btkStringAxes *)new btkStringAxes((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkStringAxes, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringAxes_Origin_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkStringAxes *arg1 = (btkStringAxes *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkStringAxes_Origin_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkStringAxes, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringAxes_Origin_set" "', argument " "1"" of type '" "btkStringAxes *""'"); 
  }
  arg1 = reinterpret_cast< btkStringAxes * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkStringAxes_Origin_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkStringAxes_Origin_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->Origin = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringAxes_Origin_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkStringAxes *arg1 = (btkStringAxes *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkStringAxes_Origin_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkStringAxes, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringAxes_Origin_get" "', argument " "1"" of type '" "btkStringAxes *""'"); 
  }
  arg1 = reinterpret_cast< btkStringAxes * >(argp1);
  result = (std::string *) & ((arg1)->Origin);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringAxes_Axis1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkStringAxes *arg1 = (btkStringAxes *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkStringAxes_Axis1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkStringAxes, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringAxes_Axis1_set" "', argument " "1"" of type '" "btkStringAxes *""'"); 
  }
  arg1 = reinterpret_cast< btkStringAxes * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkStringAxes_Axis1_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkStringAxes_Axis1_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->Axis1 = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringAxes_Axis1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkStringAxes *arg1 = (btkStringAxes *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkStringAxes_Axis1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkStringAxes, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringAxes_Axis1_get" "', argument " "1"" of type '" "btkStringAxes *""'"); 
  }
  arg1 = reinterpret_cast< btkStringAxes * >(argp1);
  result = (std::string *) & ((arg1)->Axis1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringAxes_Axis2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkStringAxes *arg1 = (btkStringAxes *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkStringAxes_Axis2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkStringAxes, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringAxes_Axis2_set" "', argument " "1"" of type '" "btkStringAxes *""'"); 
  }
  arg1 = reinterpret_cast< btkStringAxes * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkStringAxes_Axis2_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkStringAxes_Axis2_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->Axis2 = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringAxes_Axis2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkStringAxes *arg1 = (btkStringAxes *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkStringAxes_Axis2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkStringAxes, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringAxes_Axis2_get" "', argument " "1"" of type '" "btkStringAxes *""'"); 
  }
  arg1 = reinterpret_cast< btkStringAxes * >(argp1);
  result = (std::string *) & ((arg1)->Axis2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringAxes_Axis3_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkStringAxes *arg1 = (btkStringAxes *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkStringAxes_Axis3_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkStringAxes, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringAxes_Axis3_set" "', argument " "1"" of type '" "btkStringAxes *""'"); 
  }
  arg1 = reinterpret_cast< btkStringAxes * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkStringAxes_Axis3_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkStringAxes_Axis3_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->Axis3 = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringAxes_Axis3_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkStringAxes *arg1 = (btkStringAxes *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkStringAxes_Axis3_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkStringAxes, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringAxes_Axis3_get" "', argument " "1"" of type '" "btkStringAxes *""'"); 
  }
  arg1 = reinterpret_cast< btkStringAxes * >(argp1);
  result = (std::string *) & ((arg1)->Axis3);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_btkStringAxes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  btkStringAxes *arg1 = (btkStringAxes *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_btkStringAxes",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_btkStringAxes, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_btkStringAxes" "', argument " "1"" of type '" "btkStringAxes *""'"); 
  }
  arg1 = reinterpret_cast< btkStringAxes * >(argp1);
  {
    try {
      delete arg1;
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *btkStringAxes_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_btkStringAxes, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_btkStringAxesList_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< btkStringAxes > *arg1 = (std::list< btkStringAxes > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:btkStringAxesList_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_btkStringAxes_std__allocatorT_btkStringAxes_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringAxesList_iterator" "', argument " "1"" of type '" "std::list< btkStringAxes > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< btkStringAxes > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_list_Sl_btkStringAxes_Sg__iterator(arg1,arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringAxesList___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< btkStringAxes > *arg1 = (std::list< btkStringAxes > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkStringAxesList___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_btkStringAxes_std__allocatorT_btkStringAxes_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringAxesList___nonzero__" "', argument " "1"" of type '" "std::list< btkStringAxes > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< btkStringAxes > * >(argp1);
  {
    try {
      result = (bool)std_list_Sl_btkStringAxes_Sg____nonzero__((std::list< btkStringAxes > const *)arg1);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringAxesList___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< btkStringAxes > *arg1 = (std::list< btkStringAxes > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkStringAxesList___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_btkStringAxes_std__allocatorT_btkStringAxes_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringAxesList___bool__" "', argument " "1"" of type '" "std::list< btkStringAxes > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< btkStringAxes > * >(argp1);
  {
    try {
      result = (bool)std_list_Sl_btkStringAxes_Sg____bool__((std::list< btkStringAxes > const *)arg1);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringAxesList___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< btkStringAxes > *arg1 = (std::list< btkStringAxes > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< btkStringAxes >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkStringAxesList___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_btkStringAxes_std__allocatorT_btkStringAxes_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringAxesList___len__" "', argument " "1"" of type '" "std::list< btkStringAxes > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< btkStringAxes > * >(argp1);
  {
    try {
      result = std_list_Sl_btkStringAxes_Sg____len__((std::list< btkStringAxes > const *)arg1);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringAxesList___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< btkStringAxes > *arg1 = (std::list< btkStringAxes > *) 0 ;
  std::list< btkStringAxes >::difference_type arg2 ;
  std::list< btkStringAxes >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::list< btkStringAxes,std::allocator< btkStringAxes > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkStringAxesList___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_btkStringAxes_std__allocatorT_btkStringAxes_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringAxesList___getslice__" "', argument " "1"" of type '" "std::list< btkStringAxes > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< btkStringAxes > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkStringAxesList___getslice__" "', argument " "2"" of type '" "std::list< btkStringAxes >::difference_type""'");
  } 
  arg2 = static_cast< std::list< btkStringAxes >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkStringAxesList___getslice__" "', argument " "3"" of type '" "std::list< btkStringAxes >::difference_type""'");
  } 
  arg3 = static_cast< std::list< btkStringAxes >::difference_type >(val3);
  {
    try {
      try {
        result = (std::list< btkStringAxes,std::allocator< btkStringAxes > > *)std_list_Sl_btkStringAxes_Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_btkStringAxes_std__allocatorT_btkStringAxes_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringAxesList___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< btkStringAxes > *arg1 = (std::list< btkStringAxes > *) 0 ;
  std::list< btkStringAxes >::difference_type arg2 ;
  std::list< btkStringAxes >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkStringAxesList___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_btkStringAxes_std__allocatorT_btkStringAxes_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringAxesList___setslice__" "', argument " "1"" of type '" "std::list< btkStringAxes > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< btkStringAxes > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkStringAxesList___setslice__" "', argument " "2"" of type '" "std::list< btkStringAxes >::difference_type""'");
  } 
  arg2 = static_cast< std::list< btkStringAxes >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkStringAxesList___setslice__" "', argument " "3"" of type '" "std::list< btkStringAxes >::difference_type""'");
  } 
  arg3 = static_cast< std::list< btkStringAxes >::difference_type >(val3);
  {
    try {
      try {
        std_list_Sl_btkStringAxes_Sg____setslice____SWIG_0(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringAxesList___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< btkStringAxes > *arg1 = (std::list< btkStringAxes > *) 0 ;
  std::list< btkStringAxes >::difference_type arg2 ;
  std::list< btkStringAxes >::difference_type arg3 ;
  std::list< btkStringAxes,std::allocator< btkStringAxes > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:btkStringAxesList___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_btkStringAxes_std__allocatorT_btkStringAxes_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringAxesList___setslice__" "', argument " "1"" of type '" "std::list< btkStringAxes > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< btkStringAxes > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkStringAxesList___setslice__" "', argument " "2"" of type '" "std::list< btkStringAxes >::difference_type""'");
  } 
  arg2 = static_cast< std::list< btkStringAxes >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkStringAxesList___setslice__" "', argument " "3"" of type '" "std::list< btkStringAxes >::difference_type""'");
  } 
  arg3 = static_cast< std::list< btkStringAxes >::difference_type >(val3);
  {
    std::list< btkStringAxes,std::allocator< btkStringAxes > > *ptr = (std::list< btkStringAxes,std::allocator< btkStringAxes > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "btkStringAxesList___setslice__" "', argument " "4"" of type '" "std::list< btkStringAxes,std::allocator< btkStringAxes > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkStringAxesList___setslice__" "', argument " "4"" of type '" "std::list< btkStringAxes,std::allocator< btkStringAxes > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      try {
        std_list_Sl_btkStringAxes_Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::list< btkStringAxes,std::allocator< btkStringAxes > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringAxesList___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< btkStringAxes,std::allocator< btkStringAxes > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_btkStringAxesList___setslice____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< btkStringAxes,std::allocator< btkStringAxes > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::list< btkStringAxes,std::allocator< btkStringAxes > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_btkStringAxesList___setslice____SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkStringAxesList___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< btkStringAxes >::__setslice__(std::list< btkStringAxes >::difference_type,std::list< btkStringAxes >::difference_type)\n"
    "    std::list< btkStringAxes >::__setslice__(std::list< btkStringAxes >::difference_type,std::list< btkStringAxes >::difference_type,std::list< btkStringAxes,std::allocator< btkStringAxes > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkStringAxesList___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< btkStringAxes > *arg1 = (std::list< btkStringAxes > *) 0 ;
  std::list< btkStringAxes >::difference_type arg2 ;
  std::list< btkStringAxes >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkStringAxesList___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_btkStringAxes_std__allocatorT_btkStringAxes_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringAxesList___delslice__" "', argument " "1"" of type '" "std::list< btkStringAxes > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< btkStringAxes > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkStringAxesList___delslice__" "', argument " "2"" of type '" "std::list< btkStringAxes >::difference_type""'");
  } 
  arg2 = static_cast< std::list< btkStringAxes >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkStringAxesList___delslice__" "', argument " "3"" of type '" "std::list< btkStringAxes >::difference_type""'");
  } 
  arg3 = static_cast< std::list< btkStringAxes >::difference_type >(val3);
  {
    try {
      try {
        std_list_Sl_btkStringAxes_Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringAxesList___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< btkStringAxes > *arg1 = (std::list< btkStringAxes > *) 0 ;
  std::list< btkStringAxes >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkStringAxesList___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_btkStringAxes_std__allocatorT_btkStringAxes_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringAxesList___delitem__" "', argument " "1"" of type '" "std::list< btkStringAxes > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< btkStringAxes > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkStringAxesList___delitem__" "', argument " "2"" of type '" "std::list< btkStringAxes >::difference_type""'");
  } 
  arg2 = static_cast< std::list< btkStringAxes >::difference_type >(val2);
  {
    try {
      try {
        std_list_Sl_btkStringAxes_Sg____delitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringAxesList___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< btkStringAxes > *arg1 = (std::list< btkStringAxes > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< btkStringAxes,std::allocator< btkStringAxes > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkStringAxesList___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_btkStringAxes_std__allocatorT_btkStringAxes_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringAxesList___getitem__" "', argument " "1"" of type '" "std::list< btkStringAxes > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< btkStringAxes > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "btkStringAxesList___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        result = (std::list< btkStringAxes,std::allocator< btkStringAxes > > *)std_list_Sl_btkStringAxes_Sg____getitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_btkStringAxes_std__allocatorT_btkStringAxes_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringAxesList___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< btkStringAxes > *arg1 = (std::list< btkStringAxes > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::list< btkStringAxes,std::allocator< btkStringAxes > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkStringAxesList___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_btkStringAxes_std__allocatorT_btkStringAxes_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringAxesList___setitem__" "', argument " "1"" of type '" "std::list< btkStringAxes > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< btkStringAxes > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "btkStringAxesList___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::list< btkStringAxes,std::allocator< btkStringAxes > > *ptr = (std::list< btkStringAxes,std::allocator< btkStringAxes > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkStringAxesList___setitem__" "', argument " "3"" of type '" "std::list< btkStringAxes,std::allocator< btkStringAxes > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkStringAxesList___setitem__" "', argument " "3"" of type '" "std::list< btkStringAxes,std::allocator< btkStringAxes > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      try {
        std_list_Sl_btkStringAxes_Sg____setitem____SWIG_0(arg1,arg2,(std::list< btkStringAxes,std::allocator< btkStringAxes > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringAxesList___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< btkStringAxes > *arg1 = (std::list< btkStringAxes > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkStringAxesList___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_btkStringAxes_std__allocatorT_btkStringAxes_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringAxesList___setitem__" "', argument " "1"" of type '" "std::list< btkStringAxes > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< btkStringAxes > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "btkStringAxesList___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        std_list_Sl_btkStringAxes_Sg____setitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringAxesList___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< btkStringAxes > *arg1 = (std::list< btkStringAxes > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkStringAxesList___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_btkStringAxes_std__allocatorT_btkStringAxes_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringAxesList___delitem__" "', argument " "1"" of type '" "std::list< btkStringAxes > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< btkStringAxes > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "btkStringAxesList___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        std_list_Sl_btkStringAxes_Sg____delitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringAxesList___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< btkStringAxes,std::allocator< btkStringAxes > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_btkStringAxesList___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< btkStringAxes,std::allocator< btkStringAxes > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_btkStringAxesList___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkStringAxesList___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< btkStringAxes >::__delitem__(std::list< btkStringAxes >::difference_type)\n"
    "    std::list< btkStringAxes >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkStringAxesList___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< btkStringAxes > *arg1 = (std::list< btkStringAxes > *) 0 ;
  std::list< btkStringAxes >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< btkStringAxes >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkStringAxesList___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_btkStringAxes_std__allocatorT_btkStringAxes_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringAxesList___getitem__" "', argument " "1"" of type '" "std::list< btkStringAxes > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< btkStringAxes > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkStringAxesList___getitem__" "', argument " "2"" of type '" "std::list< btkStringAxes >::difference_type""'");
  } 
  arg2 = static_cast< std::list< btkStringAxes >::difference_type >(val2);
  {
    try {
      try {
        result = (std::list< btkStringAxes >::value_type *) &std_list_Sl_btkStringAxes_Sg____getitem____SWIG_1((std::list< btkStringAxes > const *)arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkStringAxes, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringAxesList___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< btkStringAxes,std::allocator< btkStringAxes > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_btkStringAxesList___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< btkStringAxes,std::allocator< btkStringAxes > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_btkStringAxesList___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkStringAxesList___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< btkStringAxes >::__getitem__(PySliceObject *)\n"
    "    std::list< btkStringAxes >::__getitem__(std::list< btkStringAxes >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkStringAxesList___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< btkStringAxes > *arg1 = (std::list< btkStringAxes > *) 0 ;
  std::list< btkStringAxes >::difference_type arg2 ;
  std::list< btkStringAxes >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkStringAxesList___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_btkStringAxes_std__allocatorT_btkStringAxes_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringAxesList___setitem__" "', argument " "1"" of type '" "std::list< btkStringAxes > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< btkStringAxes > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkStringAxesList___setitem__" "', argument " "2"" of type '" "std::list< btkStringAxes >::difference_type""'");
  } 
  arg2 = static_cast< std::list< btkStringAxes >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkStringAxes,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkStringAxesList___setitem__" "', argument " "3"" of type '" "std::list< btkStringAxes >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkStringAxesList___setitem__" "', argument " "3"" of type '" "std::list< btkStringAxes >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::list< btkStringAxes >::value_type * >(argp3);
  {
    try {
      try {
        std_list_Sl_btkStringAxes_Sg____setitem____SWIG_2(arg1,arg2,(btkStringAxes const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringAxesList___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< btkStringAxes,std::allocator< btkStringAxes > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_btkStringAxesList___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< btkStringAxes,std::allocator< btkStringAxes > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::list< btkStringAxes,std::allocator< btkStringAxes > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_btkStringAxesList___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< btkStringAxes,std::allocator< btkStringAxes > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_btkStringAxes, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_btkStringAxesList___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkStringAxesList___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< btkStringAxes >::__setitem__(PySliceObject *,std::list< btkStringAxes,std::allocator< btkStringAxes > > const &)\n"
    "    std::list< btkStringAxes >::__setitem__(PySliceObject *)\n"
    "    std::list< btkStringAxes >::__setitem__(std::list< btkStringAxes >::difference_type,std::list< btkStringAxes >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkStringAxesList_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< btkStringAxes > *arg1 = (std::list< btkStringAxes > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< btkStringAxes > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkStringAxesList_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_btkStringAxes_std__allocatorT_btkStringAxes_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringAxesList_pop" "', argument " "1"" of type '" "std::list< btkStringAxes > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< btkStringAxes > * >(argp1);
  {
    try {
      try {
        result = std_list_Sl_btkStringAxes_Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new std::list< btkStringAxes >::value_type(static_cast< const std::list< btkStringAxes >::value_type& >(result))), SWIGTYPE_p_btkStringAxes, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringAxesList_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< btkStringAxes > *arg1 = (std::list< btkStringAxes > *) 0 ;
  std::list< btkStringAxes >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkStringAxesList_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_btkStringAxes_std__allocatorT_btkStringAxes_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringAxesList_append" "', argument " "1"" of type '" "std::list< btkStringAxes > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< btkStringAxes > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkStringAxes,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkStringAxesList_append" "', argument " "2"" of type '" "std::list< btkStringAxes >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkStringAxesList_append" "', argument " "2"" of type '" "std::list< btkStringAxes >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::list< btkStringAxes >::value_type * >(argp2);
  {
    try {
      std_list_Sl_btkStringAxes_Sg__append(arg1,(btkStringAxes const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkStringAxesList__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< btkStringAxes > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_btkStringAxesList")) SWIG_fail;
  {
    try {
      result = (std::list< btkStringAxes > *)new std::list< btkStringAxes >();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_btkStringAxes_std__allocatorT_btkStringAxes_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkStringAxesList__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< btkStringAxes > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::list< btkStringAxes > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_btkStringAxesList",&obj0)) SWIG_fail;
  {
    std::list< btkStringAxes,std::allocator< btkStringAxes > > *ptr = (std::list< btkStringAxes,std::allocator< btkStringAxes > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkStringAxesList" "', argument " "1"" of type '" "std::list< btkStringAxes > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkStringAxesList" "', argument " "1"" of type '" "std::list< btkStringAxes > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::list< btkStringAxes > *)new std::list< btkStringAxes >((std::list< btkStringAxes > const &)*arg1);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_btkStringAxes_std__allocatorT_btkStringAxes_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringAxesList_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< btkStringAxes > *arg1 = (std::list< btkStringAxes > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkStringAxesList_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_btkStringAxes_std__allocatorT_btkStringAxes_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringAxesList_empty" "', argument " "1"" of type '" "std::list< btkStringAxes > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< btkStringAxes > * >(argp1);
  {
    try {
      result = (bool)((std::list< btkStringAxes > const *)arg1)->empty();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringAxesList_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< btkStringAxes > *arg1 = (std::list< btkStringAxes > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< btkStringAxes >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkStringAxesList_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_btkStringAxes_std__allocatorT_btkStringAxes_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringAxesList_size" "', argument " "1"" of type '" "std::list< btkStringAxes > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< btkStringAxes > * >(argp1);
  {
    try {
      result = ((std::list< btkStringAxes > const *)arg1)->size();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringAxesList_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< btkStringAxes > *arg1 = (std::list< btkStringAxes > *) 0 ;
  std::list< btkStringAxes > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkStringAxesList_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_btkStringAxes_std__allocatorT_btkStringAxes_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringAxesList_swap" "', argument " "1"" of type '" "std::list< btkStringAxes > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< btkStringAxes > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__listT_btkStringAxes_std__allocatorT_btkStringAxes_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkStringAxesList_swap" "', argument " "2"" of type '" "std::list< btkStringAxes > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkStringAxesList_swap" "', argument " "2"" of type '" "std::list< btkStringAxes > &""'"); 
  }
  arg2 = reinterpret_cast< std::list< btkStringAxes > * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringAxesList_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< btkStringAxes > *arg1 = (std::list< btkStringAxes > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< btkStringAxes >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkStringAxesList_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_btkStringAxes_std__allocatorT_btkStringAxes_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringAxesList_begin" "', argument " "1"" of type '" "std::list< btkStringAxes > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< btkStringAxes > * >(argp1);
  {
    try {
      result = (arg1)->begin();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< btkStringAxes >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringAxesList_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< btkStringAxes > *arg1 = (std::list< btkStringAxes > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< btkStringAxes >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkStringAxesList_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_btkStringAxes_std__allocatorT_btkStringAxes_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringAxesList_end" "', argument " "1"" of type '" "std::list< btkStringAxes > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< btkStringAxes > * >(argp1);
  {
    try {
      result = (arg1)->end();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< btkStringAxes >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringAxesList_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< btkStringAxes > *arg1 = (std::list< btkStringAxes > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< btkStringAxes >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkStringAxesList_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_btkStringAxes_std__allocatorT_btkStringAxes_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringAxesList_rbegin" "', argument " "1"" of type '" "std::list< btkStringAxes > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< btkStringAxes > * >(argp1);
  {
    try {
      result = (arg1)->rbegin();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< btkStringAxes >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringAxesList_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< btkStringAxes > *arg1 = (std::list< btkStringAxes > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< btkStringAxes >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkStringAxesList_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_btkStringAxes_std__allocatorT_btkStringAxes_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringAxesList_rend" "', argument " "1"" of type '" "std::list< btkStringAxes > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< btkStringAxes > * >(argp1);
  {
    try {
      result = (arg1)->rend();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< btkStringAxes >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringAxesList_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< btkStringAxes > *arg1 = (std::list< btkStringAxes > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkStringAxesList_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_btkStringAxes_std__allocatorT_btkStringAxes_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringAxesList_clear" "', argument " "1"" of type '" "std::list< btkStringAxes > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< btkStringAxes > * >(argp1);
  {
    try {
      (arg1)->clear();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringAxesList_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< btkStringAxes > *arg1 = (std::list< btkStringAxes > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< btkStringAxes > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkStringAxesList_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_btkStringAxes_std__allocatorT_btkStringAxes_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringAxesList_get_allocator" "', argument " "1"" of type '" "std::list< btkStringAxes > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< btkStringAxes > * >(argp1);
  {
    try {
      result = ((std::list< btkStringAxes > const *)arg1)->get_allocator();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new std::list< btkStringAxes >::allocator_type(static_cast< const std::list< btkStringAxes >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_btkStringAxes_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkStringAxesList__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< btkStringAxes >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< btkStringAxes > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_btkStringAxesList",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_btkStringAxesList" "', argument " "1"" of type '" "std::list< btkStringAxes >::size_type""'");
  } 
  arg1 = static_cast< std::list< btkStringAxes >::size_type >(val1);
  {
    try {
      result = (std::list< btkStringAxes > *)new std::list< btkStringAxes >(arg1);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_btkStringAxes_std__allocatorT_btkStringAxes_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringAxesList_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< btkStringAxes > *arg1 = (std::list< btkStringAxes > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkStringAxesList_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_btkStringAxes_std__allocatorT_btkStringAxes_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringAxesList_pop_back" "', argument " "1"" of type '" "std::list< btkStringAxes > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< btkStringAxes > * >(argp1);
  {
    try {
      (arg1)->pop_back();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringAxesList_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< btkStringAxes > *arg1 = (std::list< btkStringAxes > *) 0 ;
  std::list< btkStringAxes >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkStringAxesList_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_btkStringAxes_std__allocatorT_btkStringAxes_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringAxesList_resize" "', argument " "1"" of type '" "std::list< btkStringAxes > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< btkStringAxes > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkStringAxesList_resize" "', argument " "2"" of type '" "std::list< btkStringAxes >::size_type""'");
  } 
  arg2 = static_cast< std::list< btkStringAxes >::size_type >(val2);
  {
    try {
      (arg1)->resize(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringAxesList_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< btkStringAxes > *arg1 = (std::list< btkStringAxes > *) 0 ;
  std::list< btkStringAxes >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< btkStringAxes >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkStringAxesList_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_btkStringAxes_std__allocatorT_btkStringAxes_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringAxesList_erase" "', argument " "1"" of type '" "std::list< btkStringAxes > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< btkStringAxes > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "btkStringAxesList_erase" "', argument " "2"" of type '" "std::list< btkStringAxes >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::list< btkStringAxes >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::list< btkStringAxes >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "btkStringAxesList_erase" "', argument " "2"" of type '" "std::list< btkStringAxes >::iterator""'");
    }
  }
  {
    try {
      result = std_list_Sl_btkStringAxes_Sg__erase__SWIG_0(arg1,arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< btkStringAxes >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringAxesList_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< btkStringAxes > *arg1 = (std::list< btkStringAxes > *) 0 ;
  std::list< btkStringAxes >::iterator arg2 ;
  std::list< btkStringAxes >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::list< btkStringAxes >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkStringAxesList_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_btkStringAxes_std__allocatorT_btkStringAxes_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringAxesList_erase" "', argument " "1"" of type '" "std::list< btkStringAxes > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< btkStringAxes > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "btkStringAxesList_erase" "', argument " "2"" of type '" "std::list< btkStringAxes >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::list< btkStringAxes >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::list< btkStringAxes >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "btkStringAxesList_erase" "', argument " "2"" of type '" "std::list< btkStringAxes >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "btkStringAxesList_erase" "', argument " "3"" of type '" "std::list< btkStringAxes >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::list< btkStringAxes >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::list< btkStringAxes >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "btkStringAxesList_erase" "', argument " "3"" of type '" "std::list< btkStringAxes >::iterator""'");
    }
  }
  {
    try {
      result = std_list_Sl_btkStringAxes_Sg__erase__SWIG_1(arg1,arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< btkStringAxes >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringAxesList_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< btkStringAxes,std::allocator< btkStringAxes > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::list< btkStringAxes >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_btkStringAxesList_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< btkStringAxes,std::allocator< btkStringAxes > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::list< btkStringAxes >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::list< btkStringAxes >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_btkStringAxesList_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkStringAxesList_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< btkStringAxes >::erase(std::list< btkStringAxes >::iterator)\n"
    "    std::list< btkStringAxes >::erase(std::list< btkStringAxes >::iterator,std::list< btkStringAxes >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_btkStringAxesList__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< btkStringAxes >::size_type arg1 ;
  std::list< btkStringAxes >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< btkStringAxes > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_btkStringAxesList",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_btkStringAxesList" "', argument " "1"" of type '" "std::list< btkStringAxes >::size_type""'");
  } 
  arg1 = static_cast< std::list< btkStringAxes >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkStringAxes,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_btkStringAxesList" "', argument " "2"" of type '" "std::list< btkStringAxes >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkStringAxesList" "', argument " "2"" of type '" "std::list< btkStringAxes >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::list< btkStringAxes >::value_type * >(argp2);
  {
    try {
      result = (std::list< btkStringAxes > *)new std::list< btkStringAxes >(arg1,(std::list< btkStringAxes >::value_type const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_btkStringAxes_std__allocatorT_btkStringAxes_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkStringAxesList(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_btkStringAxesList__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_btkStringAxesList__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< btkStringAxes,std::allocator< btkStringAxes > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_btkStringAxesList__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_btkStringAxes, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_btkStringAxesList__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_btkStringAxesList'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< btkStringAxes >::list()\n"
    "    std::list< btkStringAxes >::list(std::list< btkStringAxes > const &)\n"
    "    std::list< btkStringAxes >::list(std::list< btkStringAxes >::size_type)\n"
    "    std::list< btkStringAxes >::list(std::list< btkStringAxes >::size_type,std::list< btkStringAxes >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkStringAxesList_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< btkStringAxes > *arg1 = (std::list< btkStringAxes > *) 0 ;
  std::list< btkStringAxes >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkStringAxesList_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_btkStringAxes_std__allocatorT_btkStringAxes_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringAxesList_push_back" "', argument " "1"" of type '" "std::list< btkStringAxes > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< btkStringAxes > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkStringAxes,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkStringAxesList_push_back" "', argument " "2"" of type '" "std::list< btkStringAxes >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkStringAxesList_push_back" "', argument " "2"" of type '" "std::list< btkStringAxes >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::list< btkStringAxes >::value_type * >(argp2);
  {
    try {
      (arg1)->push_back((std::list< btkStringAxes >::value_type const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringAxesList_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< btkStringAxes > *arg1 = (std::list< btkStringAxes > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< btkStringAxes >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkStringAxesList_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_btkStringAxes_std__allocatorT_btkStringAxes_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringAxesList_front" "', argument " "1"" of type '" "std::list< btkStringAxes > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< btkStringAxes > * >(argp1);
  {
    try {
      result = (std::list< btkStringAxes >::value_type *) &((std::list< btkStringAxes > const *)arg1)->front();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkStringAxes, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringAxesList_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< btkStringAxes > *arg1 = (std::list< btkStringAxes > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< btkStringAxes >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkStringAxesList_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_btkStringAxes_std__allocatorT_btkStringAxes_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringAxesList_back" "', argument " "1"" of type '" "std::list< btkStringAxes > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< btkStringAxes > * >(argp1);
  {
    try {
      result = (std::list< btkStringAxes >::value_type *) &((std::list< btkStringAxes > const *)arg1)->back();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btkStringAxes, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringAxesList_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< btkStringAxes > *arg1 = (std::list< btkStringAxes > *) 0 ;
  std::list< btkStringAxes >::size_type arg2 ;
  std::list< btkStringAxes >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkStringAxesList_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_btkStringAxes_std__allocatorT_btkStringAxes_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringAxesList_assign" "', argument " "1"" of type '" "std::list< btkStringAxes > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< btkStringAxes > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkStringAxesList_assign" "', argument " "2"" of type '" "std::list< btkStringAxes >::size_type""'");
  } 
  arg2 = static_cast< std::list< btkStringAxes >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkStringAxes,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkStringAxesList_assign" "', argument " "3"" of type '" "std::list< btkStringAxes >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkStringAxesList_assign" "', argument " "3"" of type '" "std::list< btkStringAxes >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::list< btkStringAxes >::value_type * >(argp3);
  {
    try {
      (arg1)->assign(arg2,(std::list< btkStringAxes >::value_type const &)*arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringAxesList_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< btkStringAxes > *arg1 = (std::list< btkStringAxes > *) 0 ;
  std::list< btkStringAxes >::size_type arg2 ;
  std::list< btkStringAxes >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkStringAxesList_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_btkStringAxes_std__allocatorT_btkStringAxes_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringAxesList_resize" "', argument " "1"" of type '" "std::list< btkStringAxes > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< btkStringAxes > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkStringAxesList_resize" "', argument " "2"" of type '" "std::list< btkStringAxes >::size_type""'");
  } 
  arg2 = static_cast< std::list< btkStringAxes >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkStringAxes,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkStringAxesList_resize" "', argument " "3"" of type '" "std::list< btkStringAxes >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkStringAxesList_resize" "', argument " "3"" of type '" "std::list< btkStringAxes >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::list< btkStringAxes >::value_type * >(argp3);
  {
    try {
      (arg1)->resize(arg2,(std::list< btkStringAxes >::value_type const &)*arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringAxesList_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< btkStringAxes,std::allocator< btkStringAxes > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_btkStringAxesList_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< btkStringAxes,std::allocator< btkStringAxes > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_btkStringAxes, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_btkStringAxesList_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkStringAxesList_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< btkStringAxes >::resize(std::list< btkStringAxes >::size_type)\n"
    "    std::list< btkStringAxes >::resize(std::list< btkStringAxes >::size_type,std::list< btkStringAxes >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkStringAxesList_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< btkStringAxes > *arg1 = (std::list< btkStringAxes > *) 0 ;
  std::list< btkStringAxes >::iterator arg2 ;
  std::list< btkStringAxes >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::list< btkStringAxes >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkStringAxesList_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_btkStringAxes_std__allocatorT_btkStringAxes_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringAxesList_insert" "', argument " "1"" of type '" "std::list< btkStringAxes > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< btkStringAxes > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "btkStringAxesList_insert" "', argument " "2"" of type '" "std::list< btkStringAxes >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::list< btkStringAxes >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::list< btkStringAxes >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "btkStringAxesList_insert" "', argument " "2"" of type '" "std::list< btkStringAxes >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_btkStringAxes,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkStringAxesList_insert" "', argument " "3"" of type '" "std::list< btkStringAxes >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkStringAxesList_insert" "', argument " "3"" of type '" "std::list< btkStringAxes >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::list< btkStringAxes >::value_type * >(argp3);
  {
    try {
      result = std_list_Sl_btkStringAxes_Sg__insert__SWIG_0(arg1,arg2,(btkStringAxes const &)*arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< btkStringAxes >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringAxesList_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< btkStringAxes > *arg1 = (std::list< btkStringAxes > *) 0 ;
  std::list< btkStringAxes >::iterator arg2 ;
  std::list< btkStringAxes >::size_type arg3 ;
  std::list< btkStringAxes >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:btkStringAxesList_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_btkStringAxes_std__allocatorT_btkStringAxes_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringAxesList_insert" "', argument " "1"" of type '" "std::list< btkStringAxes > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< btkStringAxes > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "btkStringAxesList_insert" "', argument " "2"" of type '" "std::list< btkStringAxes >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::list< btkStringAxes >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::list< btkStringAxes >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "btkStringAxesList_insert" "', argument " "2"" of type '" "std::list< btkStringAxes >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkStringAxesList_insert" "', argument " "3"" of type '" "std::list< btkStringAxes >::size_type""'");
  } 
  arg3 = static_cast< std::list< btkStringAxes >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_btkStringAxes,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "btkStringAxesList_insert" "', argument " "4"" of type '" "std::list< btkStringAxes >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkStringAxesList_insert" "', argument " "4"" of type '" "std::list< btkStringAxes >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::list< btkStringAxes >::value_type * >(argp4);
  {
    try {
      std_list_Sl_btkStringAxes_Sg__insert__SWIG_1(arg1,arg2,arg3,(btkStringAxes const &)*arg4);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringAxesList_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< btkStringAxes,std::allocator< btkStringAxes > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::list< btkStringAxes >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_btkStringAxes, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_btkStringAxesList_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< btkStringAxes,std::allocator< btkStringAxes > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::list< btkStringAxes >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_btkStringAxes, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_btkStringAxesList_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkStringAxesList_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< btkStringAxes >::insert(std::list< btkStringAxes >::iterator,std::list< btkStringAxes >::value_type const &)\n"
    "    std::list< btkStringAxes >::insert(std::list< btkStringAxes >::iterator,std::list< btkStringAxes >::size_type,std::list< btkStringAxes >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkStringAxesList_pop_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< btkStringAxes > *arg1 = (std::list< btkStringAxes > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkStringAxesList_pop_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_btkStringAxes_std__allocatorT_btkStringAxes_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringAxesList_pop_front" "', argument " "1"" of type '" "std::list< btkStringAxes > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< btkStringAxes > * >(argp1);
  {
    try {
      (arg1)->pop_front();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringAxesList_push_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< btkStringAxes > *arg1 = (std::list< btkStringAxes > *) 0 ;
  std::list< btkStringAxes >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkStringAxesList_push_front",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_btkStringAxes_std__allocatorT_btkStringAxes_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringAxesList_push_front" "', argument " "1"" of type '" "std::list< btkStringAxes > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< btkStringAxes > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_btkStringAxes,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkStringAxesList_push_front" "', argument " "2"" of type '" "std::list< btkStringAxes >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkStringAxesList_push_front" "', argument " "2"" of type '" "std::list< btkStringAxes >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::list< btkStringAxes >::value_type * >(argp2);
  {
    try {
      (arg1)->push_front((std::list< btkStringAxes >::value_type const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringAxesList_reverse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< btkStringAxes > *arg1 = (std::list< btkStringAxes > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkStringAxesList_reverse",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_btkStringAxes_std__allocatorT_btkStringAxes_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringAxesList_reverse" "', argument " "1"" of type '" "std::list< btkStringAxes > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< btkStringAxes > * >(argp1);
  {
    try {
      (arg1)->reverse();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_btkStringAxesList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< btkStringAxes > *arg1 = (std::list< btkStringAxes > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_btkStringAxesList",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_btkStringAxes_std__allocatorT_btkStringAxes_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_btkStringAxesList" "', argument " "1"" of type '" "std::list< btkStringAxes > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< btkStringAxes > * >(argp1);
  {
    try {
      delete arg1;
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *btkStringAxesList_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__listT_btkStringAxes_std__allocatorT_btkStringAxes_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_btkStringList_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:btkStringList_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringList_iterator" "', argument " "1"" of type '" "std::list< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::string > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_list_Sl_std_string_Sg__iterator(arg1,arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringList___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkStringList___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringList___nonzero__" "', argument " "1"" of type '" "std::list< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::string > * >(argp1);
  {
    try {
      result = (bool)std_list_Sl_std_string_Sg____nonzero__((std::list< std::string > const *)arg1);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringList___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkStringList___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringList___bool__" "', argument " "1"" of type '" "std::list< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::string > * >(argp1);
  {
    try {
      result = (bool)std_list_Sl_std_string_Sg____bool__((std::list< std::string > const *)arg1);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringList___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< std::string >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkStringList___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringList___len__" "', argument " "1"" of type '" "std::list< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::string > * >(argp1);
  {
    try {
      result = std_list_Sl_std_string_Sg____len__((std::list< std::string > const *)arg1);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringList___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  std::list< std::string >::difference_type arg2 ;
  std::list< std::string >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::list< std::string,std::allocator< std::string > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkStringList___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringList___getslice__" "', argument " "1"" of type '" "std::list< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkStringList___getslice__" "', argument " "2"" of type '" "std::list< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::list< std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkStringList___getslice__" "', argument " "3"" of type '" "std::list< std::string >::difference_type""'");
  } 
  arg3 = static_cast< std::list< std::string >::difference_type >(val3);
  {
    try {
      try {
        result = (std::list< std::string,std::allocator< std::string > > *)std_list_Sl_std_string_Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringList___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  std::list< std::string >::difference_type arg2 ;
  std::list< std::string >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkStringList___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringList___setslice__" "', argument " "1"" of type '" "std::list< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkStringList___setslice__" "', argument " "2"" of type '" "std::list< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::list< std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkStringList___setslice__" "', argument " "3"" of type '" "std::list< std::string >::difference_type""'");
  } 
  arg3 = static_cast< std::list< std::string >::difference_type >(val3);
  {
    try {
      try {
        std_list_Sl_std_string_Sg____setslice____SWIG_0(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringList___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  std::list< std::string >::difference_type arg2 ;
  std::list< std::string >::difference_type arg3 ;
  std::list< std::string,std::allocator< std::string > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:btkStringList___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringList___setslice__" "', argument " "1"" of type '" "std::list< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkStringList___setslice__" "', argument " "2"" of type '" "std::list< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::list< std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkStringList___setslice__" "', argument " "3"" of type '" "std::list< std::string >::difference_type""'");
  } 
  arg3 = static_cast< std::list< std::string >::difference_type >(val3);
  {
    std::list< std::string,std::allocator< std::string > > *ptr = (std::list< std::string,std::allocator< std::string > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "btkStringList___setslice__" "', argument " "4"" of type '" "std::list< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkStringList___setslice__" "', argument " "4"" of type '" "std::list< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      try {
        std_list_Sl_std_string_Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::list< std::string,std::allocator< std::string > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringList___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_btkStringList___setslice____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::list< std::string,std::allocator< std::string > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_btkStringList___setslice____SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkStringList___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< std::string >::__setslice__(std::list< std::string >::difference_type,std::list< std::string >::difference_type)\n"
    "    std::list< std::string >::__setslice__(std::list< std::string >::difference_type,std::list< std::string >::difference_type,std::list< std::string,std::allocator< std::string > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkStringList___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  std::list< std::string >::difference_type arg2 ;
  std::list< std::string >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkStringList___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringList___delslice__" "', argument " "1"" of type '" "std::list< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkStringList___delslice__" "', argument " "2"" of type '" "std::list< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::list< std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkStringList___delslice__" "', argument " "3"" of type '" "std::list< std::string >::difference_type""'");
  } 
  arg3 = static_cast< std::list< std::string >::difference_type >(val3);
  {
    try {
      try {
        std_list_Sl_std_string_Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringList___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  std::list< std::string >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkStringList___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringList___delitem__" "', argument " "1"" of type '" "std::list< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkStringList___delitem__" "', argument " "2"" of type '" "std::list< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::list< std::string >::difference_type >(val2);
  {
    try {
      try {
        std_list_Sl_std_string_Sg____delitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringList___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< std::string,std::allocator< std::string > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkStringList___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringList___getitem__" "', argument " "1"" of type '" "std::list< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::string > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "btkStringList___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        result = (std::list< std::string,std::allocator< std::string > > *)std_list_Sl_std_string_Sg____getitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringList___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::list< std::string,std::allocator< std::string > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkStringList___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringList___setitem__" "', argument " "1"" of type '" "std::list< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::string > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "btkStringList___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::list< std::string,std::allocator< std::string > > *ptr = (std::list< std::string,std::allocator< std::string > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkStringList___setitem__" "', argument " "3"" of type '" "std::list< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkStringList___setitem__" "', argument " "3"" of type '" "std::list< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      try {
        std_list_Sl_std_string_Sg____setitem____SWIG_0(arg1,arg2,(std::list< std::string,std::allocator< std::string > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringList___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkStringList___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringList___setitem__" "', argument " "1"" of type '" "std::list< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::string > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "btkStringList___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        std_list_Sl_std_string_Sg____setitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringList___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkStringList___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringList___delitem__" "', argument " "1"" of type '" "std::list< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::string > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "btkStringList___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        std_list_Sl_std_string_Sg____delitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringList___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_btkStringList___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_btkStringList___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkStringList___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< std::string >::__delitem__(std::list< std::string >::difference_type)\n"
    "    std::list< std::string >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkStringList___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  std::list< std::string >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< std::string >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkStringList___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringList___getitem__" "', argument " "1"" of type '" "std::list< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkStringList___getitem__" "', argument " "2"" of type '" "std::list< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::list< std::string >::difference_type >(val2);
  {
    try {
      try {
        result = (std::list< std::string >::value_type *) &std_list_Sl_std_string_Sg____getitem____SWIG_1((std::list< std::string > const *)arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringList___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_btkStringList___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_btkStringList___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkStringList___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< std::string >::__getitem__(PySliceObject *)\n"
    "    std::list< std::string >::__getitem__(std::list< std::string >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkStringList___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  std::list< std::string >::difference_type arg2 ;
  std::list< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkStringList___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringList___setitem__" "', argument " "1"" of type '" "std::list< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkStringList___setitem__" "', argument " "2"" of type '" "std::list< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::list< std::string >::difference_type >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkStringList___setitem__" "', argument " "3"" of type '" "std::list< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkStringList___setitem__" "', argument " "3"" of type '" "std::list< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      try {
        std_list_Sl_std_string_Sg____setitem____SWIG_2(arg1,arg2,(std::string const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringList___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_btkStringList___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::list< std::string,std::allocator< std::string > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_btkStringList___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_btkStringList___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkStringList___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< std::string >::__setitem__(PySliceObject *,std::list< std::string,std::allocator< std::string > > const &)\n"
    "    std::list< std::string >::__setitem__(PySliceObject *)\n"
    "    std::list< std::string >::__setitem__(std::list< std::string >::difference_type,std::list< std::string >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkStringList_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< std::string >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkStringList_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringList_pop" "', argument " "1"" of type '" "std::list< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::string > * >(argp1);
  {
    try {
      try {
        result = std_list_Sl_std_string_Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringList_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  std::list< std::string >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkStringList_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringList_append" "', argument " "1"" of type '" "std::list< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkStringList_append" "', argument " "2"" of type '" "std::list< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkStringList_append" "', argument " "2"" of type '" "std::list< std::string >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      std_list_Sl_std_string_Sg__append(arg1,(std::string const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkStringList__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::string > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_btkStringList")) SWIG_fail;
  {
    try {
      result = (std::list< std::string > *)new std::list< std::string >();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkStringList__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::string > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::list< std::string > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_btkStringList",&obj0)) SWIG_fail;
  {
    std::list< std::string,std::allocator< std::string > > *ptr = (std::list< std::string,std::allocator< std::string > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_btkStringList" "', argument " "1"" of type '" "std::list< std::string > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkStringList" "', argument " "1"" of type '" "std::list< std::string > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::list< std::string > *)new std::list< std::string >((std::list< std::string > const &)*arg1);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringList_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkStringList_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringList_empty" "', argument " "1"" of type '" "std::list< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::string > * >(argp1);
  {
    try {
      result = (bool)((std::list< std::string > const *)arg1)->empty();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringList_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< std::string >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkStringList_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringList_size" "', argument " "1"" of type '" "std::list< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::string > * >(argp1);
  {
    try {
      result = ((std::list< std::string > const *)arg1)->size();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringList_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  std::list< std::string > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkStringList_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringList_swap" "', argument " "1"" of type '" "std::list< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__listT_std__string_std__allocatorT_std__string_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkStringList_swap" "', argument " "2"" of type '" "std::list< std::string > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkStringList_swap" "', argument " "2"" of type '" "std::list< std::string > &""'"); 
  }
  arg2 = reinterpret_cast< std::list< std::string > * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringList_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< std::string >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkStringList_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringList_begin" "', argument " "1"" of type '" "std::list< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::string > * >(argp1);
  {
    try {
      result = (arg1)->begin();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringList_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< std::string >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkStringList_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringList_end" "', argument " "1"" of type '" "std::list< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::string > * >(argp1);
  {
    try {
      result = (arg1)->end();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringList_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< std::string >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkStringList_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringList_rbegin" "', argument " "1"" of type '" "std::list< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::string > * >(argp1);
  {
    try {
      result = (arg1)->rbegin();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< std::string >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringList_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< std::string >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkStringList_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringList_rend" "', argument " "1"" of type '" "std::list< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::string > * >(argp1);
  {
    try {
      result = (arg1)->rend();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< std::string >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringList_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkStringList_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringList_clear" "', argument " "1"" of type '" "std::list< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::string > * >(argp1);
  {
    try {
      (arg1)->clear();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringList_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkStringList_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringList_get_allocator" "', argument " "1"" of type '" "std::list< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::string > * >(argp1);
  {
    try {
      result = ((std::list< std::string > const *)arg1)->get_allocator();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj((new std::list< std::string >::allocator_type(static_cast< const std::list< std::string >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_std__string_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkStringList__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::string >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< std::string > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_btkStringList",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_btkStringList" "', argument " "1"" of type '" "std::list< std::string >::size_type""'");
  } 
  arg1 = static_cast< std::list< std::string >::size_type >(val1);
  {
    try {
      result = (std::list< std::string > *)new std::list< std::string >(arg1);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringList_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkStringList_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringList_pop_back" "', argument " "1"" of type '" "std::list< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::string > * >(argp1);
  {
    try {
      (arg1)->pop_back();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringList_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  std::list< std::string >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkStringList_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringList_resize" "', argument " "1"" of type '" "std::list< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkStringList_resize" "', argument " "2"" of type '" "std::list< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::list< std::string >::size_type >(val2);
  {
    try {
      (arg1)->resize(arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringList_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  std::list< std::string >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< std::string >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkStringList_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringList_erase" "', argument " "1"" of type '" "std::list< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "btkStringList_erase" "', argument " "2"" of type '" "std::list< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::list< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::list< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "btkStringList_erase" "', argument " "2"" of type '" "std::list< std::string >::iterator""'");
    }
  }
  {
    try {
      result = std_list_Sl_std_string_Sg__erase__SWIG_0(arg1,arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringList_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  std::list< std::string >::iterator arg2 ;
  std::list< std::string >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::list< std::string >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkStringList_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringList_erase" "', argument " "1"" of type '" "std::list< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "btkStringList_erase" "', argument " "2"" of type '" "std::list< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::list< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::list< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "btkStringList_erase" "', argument " "2"" of type '" "std::list< std::string >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "btkStringList_erase" "', argument " "3"" of type '" "std::list< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::list< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::list< std::string >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "btkStringList_erase" "', argument " "3"" of type '" "std::list< std::string >::iterator""'");
    }
  }
  {
    try {
      result = std_list_Sl_std_string_Sg__erase__SWIG_1(arg1,arg2,arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringList_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::list< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_btkStringList_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::list< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::list< std::string >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_btkStringList_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkStringList_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< std::string >::erase(std::list< std::string >::iterator)\n"
    "    std::list< std::string >::erase(std::list< std::string >::iterator,std::list< std::string >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_btkStringList__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::string >::size_type arg1 ;
  std::list< std::string >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< std::string > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_btkStringList",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_btkStringList" "', argument " "1"" of type '" "std::list< std::string >::size_type""'");
  } 
  arg1 = static_cast< std::list< std::string >::size_type >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_btkStringList" "', argument " "2"" of type '" "std::list< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_btkStringList" "', argument " "2"" of type '" "std::list< std::string >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (std::list< std::string > *)new std::list< std::string >(arg1,(std::list< std::string >::value_type const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_btkStringList(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_btkStringList__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_btkStringList__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_btkStringList__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_btkStringList__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_btkStringList'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< std::string >::list()\n"
    "    std::list< std::string >::list(std::list< std::string > const &)\n"
    "    std::list< std::string >::list(std::list< std::string >::size_type)\n"
    "    std::list< std::string >::list(std::list< std::string >::size_type,std::list< std::string >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkStringList_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  std::list< std::string >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkStringList_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringList_push_back" "', argument " "1"" of type '" "std::list< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkStringList_push_back" "', argument " "2"" of type '" "std::list< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkStringList_push_back" "', argument " "2"" of type '" "std::list< std::string >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->push_back((std::list< std::string >::value_type const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringList_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< std::string >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkStringList_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringList_front" "', argument " "1"" of type '" "std::list< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::string > * >(argp1);
  {
    try {
      result = (std::list< std::string >::value_type *) &((std::list< std::string > const *)arg1)->front();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringList_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< std::string >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkStringList_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringList_back" "', argument " "1"" of type '" "std::list< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::string > * >(argp1);
  {
    try {
      result = (std::list< std::string >::value_type *) &((std::list< std::string > const *)arg1)->back();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringList_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  std::list< std::string >::size_type arg2 ;
  std::list< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkStringList_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringList_assign" "', argument " "1"" of type '" "std::list< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkStringList_assign" "', argument " "2"" of type '" "std::list< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::list< std::string >::size_type >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkStringList_assign" "', argument " "3"" of type '" "std::list< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkStringList_assign" "', argument " "3"" of type '" "std::list< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->assign(arg2,(std::list< std::string >::value_type const &)*arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringList_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  std::list< std::string >::size_type arg2 ;
  std::list< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkStringList_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringList_resize" "', argument " "1"" of type '" "std::list< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "btkStringList_resize" "', argument " "2"" of type '" "std::list< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::list< std::string >::size_type >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkStringList_resize" "', argument " "3"" of type '" "std::list< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkStringList_resize" "', argument " "3"" of type '" "std::list< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->resize(arg2,(std::list< std::string >::value_type const &)*arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringList_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_btkStringList_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_btkStringList_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkStringList_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< std::string >::resize(std::list< std::string >::size_type)\n"
    "    std::list< std::string >::resize(std::list< std::string >::size_type,std::list< std::string >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkStringList_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  std::list< std::string >::iterator arg2 ;
  std::list< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::list< std::string >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:btkStringList_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringList_insert" "', argument " "1"" of type '" "std::list< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "btkStringList_insert" "', argument " "2"" of type '" "std::list< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::list< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::list< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "btkStringList_insert" "', argument " "2"" of type '" "std::list< std::string >::iterator""'");
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "btkStringList_insert" "', argument " "3"" of type '" "std::list< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkStringList_insert" "', argument " "3"" of type '" "std::list< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = std_list_Sl_std_string_Sg__insert__SWIG_0(arg1,arg2,(std::string const &)*arg3);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringList_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  std::list< std::string >::iterator arg2 ;
  std::list< std::string >::size_type arg3 ;
  std::list< std::string >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:btkStringList_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringList_insert" "', argument " "1"" of type '" "std::list< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "btkStringList_insert" "', argument " "2"" of type '" "std::list< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::list< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::list< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "btkStringList_insert" "', argument " "2"" of type '" "std::list< std::string >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "btkStringList_insert" "', argument " "3"" of type '" "std::list< std::string >::size_type""'");
  } 
  arg3 = static_cast< std::list< std::string >::size_type >(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "btkStringList_insert" "', argument " "4"" of type '" "std::list< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkStringList_insert" "', argument " "4"" of type '" "std::list< std::string >::value_type const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      std_list_Sl_std_string_Sg__insert__SWIG_1(arg1,arg2,arg3,(std::string const &)*arg4);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringList_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::list< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_btkStringList_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::list< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_btkStringList_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'btkStringList_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< std::string >::insert(std::list< std::string >::iterator,std::list< std::string >::value_type const &)\n"
    "    std::list< std::string >::insert(std::list< std::string >::iterator,std::list< std::string >::size_type,std::list< std::string >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_btkStringList_pop_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkStringList_pop_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringList_pop_front" "', argument " "1"" of type '" "std::list< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::string > * >(argp1);
  {
    try {
      (arg1)->pop_front();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringList_push_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  std::list< std::string >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:btkStringList_push_front",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringList_push_front" "', argument " "1"" of type '" "std::list< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "btkStringList_push_front" "', argument " "2"" of type '" "std::list< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "btkStringList_push_front" "', argument " "2"" of type '" "std::list< std::string >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->push_front((std::list< std::string >::value_type const &)*arg2);
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_btkStringList_reverse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:btkStringList_reverse",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "btkStringList_reverse" "', argument " "1"" of type '" "std::list< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::string > * >(argp1);
  {
    try {
      (arg1)->reverse();
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_btkStringList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_btkStringList",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_btkStringList" "', argument " "1"" of type '" "std::list< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::string > * >(argp1);
  {
    try {
      delete arg1;
    } catch(btk::Exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError,"Unknown exception");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *btkStringList_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__listT_std__string_std__allocatorT_std__string_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

static PyMethodDef SwigMethods[] = {
	 { (char *)"SWIG_PyInstanceMethod_New", (PyCFunction)SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { (char *)"delete_SwigPyIterator", _wrap_delete_SwigPyIterator, METH_VARARGS, (char *)"delete_SwigPyIterator(self)"},
	 { (char *)"SwigPyIterator_value", _wrap_SwigPyIterator_value, METH_VARARGS, (char *)"SwigPyIterator_value(self) -> PyObject *"},
	 { (char *)"SwigPyIterator_incr", _wrap_SwigPyIterator_incr, METH_VARARGS, (char *)"\n"
		"incr(n=1) -> SwigPyIterator\n"
		"SwigPyIterator_incr(self) -> SwigPyIterator\n"
		""},
	 { (char *)"SwigPyIterator_decr", _wrap_SwigPyIterator_decr, METH_VARARGS, (char *)"\n"
		"decr(n=1) -> SwigPyIterator\n"
		"SwigPyIterator_decr(self) -> SwigPyIterator\n"
		""},
	 { (char *)"SwigPyIterator_distance", _wrap_SwigPyIterator_distance, METH_VARARGS, (char *)"SwigPyIterator_distance(self, x) -> ptrdiff_t"},
	 { (char *)"SwigPyIterator_equal", _wrap_SwigPyIterator_equal, METH_VARARGS, (char *)"SwigPyIterator_equal(self, x) -> bool"},
	 { (char *)"SwigPyIterator_copy", _wrap_SwigPyIterator_copy, METH_VARARGS, (char *)"SwigPyIterator_copy(self) -> SwigPyIterator"},
	 { (char *)"SwigPyIterator_next", _wrap_SwigPyIterator_next, METH_VARARGS, (char *)"SwigPyIterator_next(self) -> PyObject *"},
	 { (char *)"SwigPyIterator___next__", _wrap_SwigPyIterator___next__, METH_VARARGS, (char *)"SwigPyIterator___next__(self) -> PyObject *"},
	 { (char *)"SwigPyIterator_previous", _wrap_SwigPyIterator_previous, METH_VARARGS, (char *)"SwigPyIterator_previous(self) -> PyObject *"},
	 { (char *)"SwigPyIterator_advance", _wrap_SwigPyIterator_advance, METH_VARARGS, (char *)"SwigPyIterator_advance(self, n) -> SwigPyIterator"},
	 { (char *)"SwigPyIterator___eq__", _wrap_SwigPyIterator___eq__, METH_VARARGS, (char *)"SwigPyIterator___eq__(self, x) -> bool"},
	 { (char *)"SwigPyIterator___ne__", _wrap_SwigPyIterator___ne__, METH_VARARGS, (char *)"SwigPyIterator___ne__(self, x) -> bool"},
	 { (char *)"SwigPyIterator___iadd__", _wrap_SwigPyIterator___iadd__, METH_VARARGS, (char *)"SwigPyIterator___iadd__(self, n) -> SwigPyIterator"},
	 { (char *)"SwigPyIterator___isub__", _wrap_SwigPyIterator___isub__, METH_VARARGS, (char *)"SwigPyIterator___isub__(self, n) -> SwigPyIterator"},
	 { (char *)"SwigPyIterator___add__", _wrap_SwigPyIterator___add__, METH_VARARGS, (char *)"SwigPyIterator___add__(self, n) -> SwigPyIterator"},
	 { (char *)"SwigPyIterator___sub__", _wrap_SwigPyIterator___sub__, METH_VARARGS, (char *)"\n"
		"__sub__(n) -> SwigPyIterator\n"
		"SwigPyIterator___sub__(self, x) -> ptrdiff_t\n"
		""},
	 { (char *)"SwigPyIterator_swigregister", SwigPyIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_btkEvent", _wrap_new_btkEvent, METH_VARARGS, (char *)"\n"
		"btkEvent()\n"
		"btkEvent(label, t, context, detectionFlags, subject, desc, id=0)\n"
		"btkEvent(label, t, context, detectionFlags, subject, desc)\n"
		"btkEvent(label, t, context, detectionFlags, subject)\n"
		"btkEvent(label, t, context, detectionFlags)\n"
		"btkEvent(label, t, context)\n"
		"btkEvent(label, t)\n"
		"btkEvent(label, f, context, detectionFlags, subject, desc, id=0)\n"
		"btkEvent(label, f, context, detectionFlags, subject, desc)\n"
		"btkEvent(label, f, context, detectionFlags, subject)\n"
		"btkEvent(label, f, context, detectionFlags)\n"
		"btkEvent(label, f, context)\n"
		"btkEvent(label, f)\n"
		"btkEvent(label, t, f, context, detectionFlags, subject, desc, id=0)\n"
		"btkEvent(label, t, f, context, detectionFlags, subject, desc)\n"
		"btkEvent(label, t, f, context, detectionFlags, subject)\n"
		"btkEvent(label, t, f, context, detectionFlags)\n"
		"btkEvent(label, t, f, context)\n"
		"new_btkEvent(label, t, f) -> btkEvent\n"
		"\n"
		"\n"
		"An event is defined as:\n"
		" - a label (string);\n"
		" - a time (double);\n"
		" - a frame (integer);\n"
		" - a context (string);\n"
		" - a detection flag (integer);\n"
		" - a description (string);\n"
		" - an ID (integer).\n"
		"\n"
		"The detection flag has a limited range of possible values and are listed in the following enumeration:\n"
		" - btk.btkEvent.Unknown: Unknown method used to detect the event;\n"
		" - btk.btkEvent.Manual: Event detected manually;\n"
		" - btk.btkEvent.Automatic: Automatic method used to detect the event;\n"
		" - btk.btkEvent.FromForcePlatform: Method based on force platform data to detect the event.\n"
		"\n"
		"Note: Even if there is no rule for the id value, these 3 next values are used in Vicon Workstation and Nexus to distinguish events' type:\n"
		" - The value 0 is for general event;\n"
		" - Value 1 corresponds to the foot strike event;\n"
		" - Value 2 for the foot off. Without the use of these values.\n"
		"It is known that Workstation and Nexus put all events in general (default value is 0). \n"
		"For Polygon, one user reported that some points had their values set to 0.\n"
		"\n"
		"For example, a Heel Strike event on the left leg or the subject John Doe at frame 143 can be set by\n"
		"evt = btk.btkEvent('FootStrike', 143, 'Right', btk.btkEvent.Manual, 'John Doe', 'Heel strike event', 2)\n"
		""},
	 { (char *)"btkEvent_Clone", _wrap_btkEvent_Clone, METH_VARARGS, (char *)"\n"
		"btkEvent_Clone(self) -> btkEvent\n"
		"\n"
		"Deep copy of the object.\n"
		""},
	 { (char *)"btkEvent___deref__", _wrap_btkEvent___deref__, METH_VARARGS, (char *)"btkEvent___deref__(self) -> btkEvent_impl *"},
	 { (char *)"delete_btkEvent", _wrap_delete_btkEvent, METH_VARARGS, (char *)"delete_btkEvent(self)"},
	 { (char *)"btkEvent_GetLabel", _wrap_btkEvent_GetLabel, METH_VARARGS, (char *)"\n"
		"btkEvent_GetLabel(self) -> std::string const &\n"
		"\n"
		"Returns the event's label.\n"
		""},
	 { (char *)"btkEvent_SetLabel", _wrap_btkEvent_SetLabel, METH_VARARGS, (char *)"\n"
		"SetLabel(self, string)\n"
		"\n"
		"Sets the event's label.\n"
		""},
	 { (char *)"btkEvent_GetDescription", _wrap_btkEvent_GetDescription, METH_VARARGS, (char *)"\n"
		"btkEvent_GetDescription(self) -> std::string const &\n"
		"\n"
		"Returns the event's description.\n"
		""},
	 { (char *)"btkEvent_SetDescription", _wrap_btkEvent_SetDescription, METH_VARARGS, (char *)"\n"
		"SetDescription(self, string)\n"
		"\n"
		"Sets the event's description.\n"
		""},
	 { (char *)"btkEvent_GetContext", _wrap_btkEvent_GetContext, METH_VARARGS, (char *)"\n"
		"btkEvent_GetContext(self) -> std::string const &\n"
		"\n"
		"Returns the event's context.\n"
		""},
	 { (char *)"btkEvent_SetContext", _wrap_btkEvent_SetContext, METH_VARARGS, (char *)"\n"
		"SetContext(self, string)\n"
		"\n"
		"Sets the event's context.\n"
		""},
	 { (char *)"btkEvent_GetSubject", _wrap_btkEvent_GetSubject, METH_VARARGS, (char *)"\n"
		"btkEvent_GetSubject(self) -> std::string const &\n"
		"\n"
		"Returns the event's subject.\n"
		""},
	 { (char *)"btkEvent_SetSubject", _wrap_btkEvent_SetSubject, METH_VARARGS, (char *)"\n"
		"SetSubject(self, string)\n"
		"\n"
		"Sets the event's subject.\n"
		""},
	 { (char *)"btkEvent_GetTime", _wrap_btkEvent_GetTime, METH_VARARGS, (char *)"\n"
		"btkEvent_GetTime(self) -> double const\n"
		"\n"
		"Returns the event's time.\n"
		""},
	 { (char *)"btkEvent_SetTime", _wrap_btkEvent_SetTime, METH_VARARGS, (char *)"\n"
		"SetTime(self, double)\n"
		"\n"
		"Sets the event's time.\n"
		""},
	 { (char *)"btkEvent_GetFrame", _wrap_btkEvent_GetFrame, METH_VARARGS, (char *)"\n"
		"btkEvent_GetFrame(self) -> int const\n"
		"\n"
		"Returns the event's frame.\n"
		""},
	 { (char *)"btkEvent_SetFrame", _wrap_btkEvent_SetFrame, METH_VARARGS, (char *)"\n"
		"SetFrame(self, int)\n"
		"\n"
		"Sets the event's frame.\n"
		""},
	 { (char *)"btkEvent_GetDetectionFlags", _wrap_btkEvent_GetDetectionFlags, METH_VARARGS, (char *)"\n"
		"btkEvent_GetDetectionFlags(self) -> int const\n"
		"\n"
		"Returns the event's detection flags.\n"
		""},
	 { (char *)"btkEvent_SetDetectionFlags", _wrap_btkEvent_SetDetectionFlags, METH_VARARGS, (char *)"\n"
		"SetDetectionFlags(self, int)\n"
		"\n"
		"Sets the event's detection flags\n"
		""},
	 { (char *)"btkEvent_HasDetectionFlag", _wrap_btkEvent_HasDetectionFlag, METH_VARARGS, (char *)"\n"
		"HasDetectionFlag(self, DetectionFlag) -> bool\n"
		"\n"
		"Check if the event has the given detection flag.\n"
		""},
	 { (char *)"btkEvent_GetId", _wrap_btkEvent_GetId, METH_VARARGS, (char *)"\n"
		"btkEvent_GetId(self) -> int const\n"
		"\n"
		"Returns the event's ID.\n"
		""},
	 { (char *)"btkEvent_SetId", _wrap_btkEvent_SetId, METH_VARARGS, (char *)"\n"
		"SetId(self, int)\n"
		"\n"
		"Sets the event's ID.\n"
		""},
	 { (char *)"btkEvent_Update", _wrap_btkEvent_Update, METH_VARARGS, (char *)"\n"
		"btkEvent_Update(self)\n"
		"\n"
		"Updates the ProcessObject associated with this DataObject.\n"
		""},
	 { (char *)"btkEvent_GetTimestamp", _wrap_btkEvent_GetTimestamp, METH_VARARGS, (char *)"\n"
		"btkEvent_GetTimestamp(self) -> unsigned long\n"
		"\n"
		"Returns the timestamp of the object.\n"
		""},
	 { (char *)"btkEvent_swigregister", btkEvent_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_btkAnalog", _wrap_new_btkAnalog, METH_VARARGS, (char *)"\n"
		"btkAnalog(label, desc)\n"
		"btkAnalog(label)\n"
		"btkAnalog()\n"
		"btkAnalog(frameNumber)\n"
		"new_btkAnalog(label, frameNumber) -> btkAnalog\n"
		"\n"
		"\n"
		"An analog channel is defined as:\n"
		" - an array of double containing the samples (NumPy array);\n"
		" - a unit (string);\n"
		" - a scale (double);\n"
		" - an offset (integer);\n"
		" - a gain (integer).\n"
		"\n"
		"The gain has a limited range of possible values and are listed in the following enumeration:\n"
		" - btk.btkAnalog.Unknown: unknwon gain;\n"
		" - btk.btkAnalog.PlusMinus10: gain for the range +/- 10 volts;\n"
		" - btk.btkAnalog.PlusMinus5: gain for the range +/- 5 volts;\n"
		" - btk.btkAnalog.PlusMinus2Dot5: gain for the range +/- 2.5 volts;\n"
		" - btk.btkAnalog.PlusMinus1Dot65: gain for the range +/- 1.65 volts;\n"
		" - btk.btkAnalog.PlusMinus1Dot25: gain for the range +/- 1.25 volts;\n"
		" - btk.btkAnalog.PlusMinus1: gain for the range +/- 1 volt;\n"
		" - btk.btkAnalog.PlusMinus0Dot5: gain for the range +/- 0.5 volt;\n"
		" - btk.btkAnalog.PlusMinus0Dot25: gain for the range +/- 0.25 volt;\n"
		" - btk.btkAnalog.PlusMinus0Dot1: gain for the range +/- 0.1 volt;\n"
		" - btk.btkAnalog.PlusMinus0Dot05: gain for the range +/- 0.05 volt.\n"
		"\n"
		"Note: The informations associated (unit, scale, offset, gain) are useful for other classes/methods. \n"
		"For example, when you save an acquisition in a file, analog's data are generally unscaled and written as integer, \n"
		"then the scale and offset are important.\n"
		""},
	 { (char *)"btkAnalog_Clone", _wrap_btkAnalog_Clone, METH_VARARGS, (char *)"\n"
		"btkAnalog_Clone(self) -> btkAnalog\n"
		"\n"
		"Deep copy of the object.\n"
		""},
	 { (char *)"btkAnalog___deref__", _wrap_btkAnalog___deref__, METH_VARARGS, (char *)"btkAnalog___deref__(self) -> btkAnalog_impl *"},
	 { (char *)"btkAnalog_GetValue", _wrap_btkAnalog_GetValue, METH_VARARGS, (char *)"\n"
		"btkAnalog_GetValue(self, idx) -> double\n"
		"\n"
		"Returns only one sample.\n"
		""},
	 { (char *)"btkAnalog_SetValue", _wrap_btkAnalog_SetValue, METH_VARARGS, (char *)"\n"
		"SetValue(self, int, double)\n"
		"\n"
		"Sets only one sample.\n"
		""},
	 { (char *)"delete_btkAnalog", _wrap_delete_btkAnalog, METH_VARARGS, (char *)"delete_btkAnalog(self)"},
	 { (char *)"btkAnalog_GetLabel", _wrap_btkAnalog_GetLabel, METH_VARARGS, (char *)"\n"
		"btkAnalog_GetLabel(self) -> std::string const &\n"
		"\n"
		"Returns the analog's label.\n"
		""},
	 { (char *)"btkAnalog_SetLabel", _wrap_btkAnalog_SetLabel, METH_VARARGS, (char *)"\n"
		"SetLabel(self, string)\n"
		"\n"
		"Sets the analog's label.\n"
		""},
	 { (char *)"btkAnalog_GetDescription", _wrap_btkAnalog_GetDescription, METH_VARARGS, (char *)"\n"
		"btkAnalog_GetDescription(self) -> std::string const &\n"
		"\n"
		"Returns the analog's description.\n"
		""},
	 { (char *)"btkAnalog_SetDescription", _wrap_btkAnalog_SetDescription, METH_VARARGS, (char *)"\n"
		"SetDescription(self, string)\n"
		"\n"
		"Sets the analog's description.\n"
		""},
	 { (char *)"btkAnalog_GetValues", _wrap_btkAnalog_GetValues, METH_VARARGS, (char *)"\n"
		"GetValues(self) -> array (NumPy)\n"
		"\n"
		"Returns the analog's samples.\n"
		"WARNING:You cannot set values using this method. Use the methods SetValues of SetValue for that.\n"
		""},
	 { (char *)"btkAnalog_SetValues", _wrap_btkAnalog_SetValues, METH_VARARGS, (char *)"\n"
		"SetValues(self, array)\n"
		"\n"
		"Sets the analog's samples.\n"
		""},
	 { (char *)"btkAnalog_GetFrameNumber", _wrap_btkAnalog_GetFrameNumber, METH_VARARGS, (char *)"\n"
		"btkAnalog_GetFrameNumber(self) -> int const\n"
		"\n"
		"Returns the number of frames.\n"
		""},
	 { (char *)"btkAnalog_SetFrameNumber", _wrap_btkAnalog_SetFrameNumber, METH_VARARGS, (char *)"\n"
		"SetFrameNumber(self, int)\n"
		"\n"
		"Sets the number of frames.\n"
		""},
	 { (char *)"btkAnalog_GetUnit", _wrap_btkAnalog_GetUnit, METH_VARARGS, (char *)"\n"
		"btkAnalog_GetUnit(self) -> std::string const &\n"
		"\n"
		"Returns the analog's unit.\n"
		""},
	 { (char *)"btkAnalog_SetUnit", _wrap_btkAnalog_SetUnit, METH_VARARGS, (char *)"\n"
		"SetUnit(self, string)\n"
		"\n"
		"Sets the analog's unit.\n"
		""},
	 { (char *)"btkAnalog_GetGain", _wrap_btkAnalog_GetGain, METH_VARARGS, (char *)"\n"
		"btkAnalog_GetGain(self) -> btkAnalog_impl::Gain const\n"
		"\n"
		"Returns the analog's gain.\n"
		""},
	 { (char *)"btkAnalog_SetGain", _wrap_btkAnalog_SetGain, METH_VARARGS, (char *)"\n"
		"SetGain(self, int)\n"
		"\n"
		"Sets the analog's gain.\n"
		""},
	 { (char *)"btkAnalog_GetOffset", _wrap_btkAnalog_GetOffset, METH_VARARGS, (char *)"btkAnalog_GetOffset(self) -> double const"},
	 { (char *)"btkAnalog_SetOffset", _wrap_btkAnalog_SetOffset, METH_VARARGS, (char *)"btkAnalog_SetOffset(self, arg3)"},
	 { (char *)"btkAnalog_GetScale", _wrap_btkAnalog_GetScale, METH_VARARGS, (char *)"btkAnalog_GetScale(self) -> double const"},
	 { (char *)"btkAnalog_SetScale", _wrap_btkAnalog_SetScale, METH_VARARGS, (char *)"btkAnalog_SetScale(self, arg3)"},
	 { (char *)"btkAnalog_GetData", _wrap_btkAnalog_GetData, METH_VARARGS, (char *)"\n"
		"GetData(self) -> btkAnalogData\n"
		"\n"
		"Return the data of this analog channel\n"
		""},
	 { (char *)"btkAnalog_SetData", _wrap_btkAnalog_SetData, METH_VARARGS, (char *)"\n"
		"SetData(self, btkAnalogData, parenting = true)\n"
		"SetData(self, btkAnalogData, parenting = true)\n"
		"\n"
		"Sets the data of this analog channel. By default, this object will take the parent of the data. Setting 'parenting' to false will unparent the old data, assign the new one, but doesn't set the point as its parent.\n"
		""},
	 { (char *)"btkAnalog_SetDataSlice", _wrap_btkAnalog_SetDataSlice, METH_VARARGS, (char *)"btkAnalog_SetDataSlice(self, arg3, arg4)"},
	 { (char *)"btkAnalog_Update", _wrap_btkAnalog_Update, METH_VARARGS, (char *)"\n"
		"btkAnalog_Update(self)\n"
		"\n"
		"Updates the ProcessObject associated with this DataObject.\n"
		""},
	 { (char *)"btkAnalog_GetTimestamp", _wrap_btkAnalog_GetTimestamp, METH_VARARGS, (char *)"\n"
		"btkAnalog_GetTimestamp(self) -> unsigned long\n"
		"\n"
		"Returns the timestamp of the object.\n"
		""},
	 { (char *)"btkAnalog_swigregister", btkAnalog_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_btkAnalogData", _wrap_new_btkAnalogData, METH_VARARGS, (char *)"\n"
		"new_btkAnalogData(frameNumber) -> btkAnalogData\n"
		"\n"
		"\n"
		"Class storing the measures for one analog channel.\n"
		"\n"
		""},
	 { (char *)"btkAnalogData_Clone", _wrap_btkAnalogData_Clone, METH_VARARGS, (char *)"\n"
		"btkAnalogData_Clone(self) -> btkAnalogData\n"
		"\n"
		"Deep copy of the object.\n"
		""},
	 { (char *)"btkAnalogData___deref__", _wrap_btkAnalogData___deref__, METH_VARARGS, (char *)"btkAnalogData___deref__(self) -> btkAnalogData_impl *"},
	 { (char *)"btkAnalogData_GetValue", _wrap_btkAnalogData_GetValue, METH_VARARGS, (char *)"\n"
		"btkAnalogData_GetValue(self, idx) -> double\n"
		"\n"
		"Returns only one sample.\n"
		""},
	 { (char *)"btkAnalogData_SetValue", _wrap_btkAnalogData_SetValue, METH_VARARGS, (char *)"\n"
		"SetValue(self, int, double)\n"
		"\n"
		"Sets only one sample.\n"
		""},
	 { (char *)"delete_btkAnalogData", _wrap_delete_btkAnalogData, METH_VARARGS, (char *)"delete_btkAnalogData(self)"},
	 { (char *)"btkAnalogData_GetValues", _wrap_btkAnalogData_GetValues, METH_VARARGS, (char *)"\n"
		"GetValues(self) -> array (NumPy)\n"
		"\n"
		"Returns the analog's values.\n"
		"WARNING:You cannot set values using this method.\n"
		""},
	 { (char *)"btkAnalogData_SetValues", _wrap_btkAnalogData_SetValues, METH_VARARGS, (char *)"\n"
		"SetValues(self, array)\n"
		"\n"
		"Sets the analog's values.\n"
		""},
	 { (char *)"btkAnalogData_Resize", _wrap_btkAnalogData_Resize, METH_VARARGS, (char *)"\n"
		"Resize(self, int)\n"
		"\n"
		"Resize the data to the given number of frames.\n"
		""},
	 { (char *)"btkAnalogData_Update", _wrap_btkAnalogData_Update, METH_VARARGS, (char *)"\n"
		"btkAnalogData_Update(self)\n"
		"\n"
		"Updates the ProcessObject associated with this DataObject.\n"
		""},
	 { (char *)"btkAnalogData_GetTimestamp", _wrap_btkAnalogData_GetTimestamp, METH_VARARGS, (char *)"\n"
		"btkAnalogData_GetTimestamp(self) -> unsigned long\n"
		"\n"
		"Returns the timestamp of the object.\n"
		""},
	 { (char *)"btkAnalogData_swigregister", btkAnalogData_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_btkPoint", _wrap_new_btkPoint, METH_VARARGS, (char *)"\n"
		"btkPoint(frameNumber)\n"
		"btkPoint(label, frameNumber, t, desc)\n"
		"btkPoint(label, frameNumber, t)\n"
		"new_btkPoint(label, frameNumber) -> btkPoint\n"
		"\n"
		"\n"
		"The coordinates of the point are generally measured by an acquisition system. For each frame, the\n"
		"3D value has a residual. It can provide informations on the quality of these 3D data \n"
		"(residual associated with the reconstruction of the marker). \n"
		"\n"
		"This class is also used to represent angles, forces, moments, powers and scalars. \n"
		"To know/set the type of the point, you can use the methods GetType() and SetType(). \n"
		"\n"
		"The type has a limited range of possible values and are listed in the following enumeration:\n"
		" - btk.btkPoint.Marker: Set the point object as a marker;\n"
		" - btk.btkPoint.Angle: Set the point object as an angle;\n"
		" - btk.btkPoint.Force: Set the point object as a force;\n"
		" - btk.btkPoint.Moment: Set the point object as a moment;\n"
		" - btk.btkPoint.Power: Set the point object as a power;\n"
		" - btk.btkPoint.Scalar: Set the point object as a scalar along the time;\n"
		" - btk.btkPoint.Reaction: Special type to indicate the point corresponds to one part of a wrench (not really used);\n"
		"\n"
		"Note: In some case the values at specific frames are invalid (mainly due to marker's occlusion).\n"
		"To detect if the frame is invalid, you can check the residual which will be \n"
		"set to the value -1. It is the same thing if you want to set the frame as invalid. You can set\n"
		"the values of the frames to 0 and the associated residual to -1.\n"
		"\n"
		"Note: A residual with a value equal to 0 means that this frame has been post-processed (interpolation, filtering, etc.).\n"
		""},
	 { (char *)"btkPoint_Clone", _wrap_btkPoint_Clone, METH_VARARGS, (char *)"\n"
		"btkPoint_Clone(self) -> btkPoint\n"
		"\n"
		"Deep copy of the object.\n"
		""},
	 { (char *)"btkPoint___deref__", _wrap_btkPoint___deref__, METH_VARARGS, (char *)"btkPoint___deref__(self) -> btkPoint_impl *"},
	 { (char *)"btkPoint_GetValue", _wrap_btkPoint_GetValue, METH_VARARGS, (char *)"\n"
		"btkPoint_GetValue(self, row, col) -> double\n"
		"\n"
		"Returns only one value for the given component and frame.\n"
		""},
	 { (char *)"btkPoint_SetValue", _wrap_btkPoint_SetValue, METH_VARARGS, (char *)"\n"
		"SetValue(self, int, int, double)\n"
		"\n"
		"Sets only one value for the given component and frame.\n"
		""},
	 { (char *)"btkPoint_GetResidual", _wrap_btkPoint_GetResidual, METH_VARARGS, (char *)"\n"
		"btkPoint_GetResidual(self, idx) -> double\n"
		"\n"
		"Returns only one residual for the given frame.\n"
		""},
	 { (char *)"btkPoint_SetResidual", _wrap_btkPoint_SetResidual, METH_VARARGS, (char *)"\n"
		"SetResidual(self, int, double)\n"
		"\n"
		"Sets only one residual for the given frame.\n"
		""},
	 { (char *)"delete_btkPoint", _wrap_delete_btkPoint, METH_VARARGS, (char *)"delete_btkPoint(self)"},
	 { (char *)"btkPoint_GetLabel", _wrap_btkPoint_GetLabel, METH_VARARGS, (char *)"\n"
		"btkPoint_GetLabel(self) -> std::string const &\n"
		"\n"
		"Returns the point's label.\n"
		""},
	 { (char *)"btkPoint_SetLabel", _wrap_btkPoint_SetLabel, METH_VARARGS, (char *)"\n"
		"SetLabel(self, string)\n"
		"\n"
		"Sets the point's label.\n"
		""},
	 { (char *)"btkPoint_GetDescription", _wrap_btkPoint_GetDescription, METH_VARARGS, (char *)"\n"
		"btkPoint_GetDescription(self) -> std::string const &\n"
		"\n"
		"Returns the point's description.\n"
		""},
	 { (char *)"btkPoint_SetDescription", _wrap_btkPoint_SetDescription, METH_VARARGS, (char *)"\n"
		"SetDescription(self, string)\n"
		"\n"
		"Sets the point's description.\n"
		""},
	 { (char *)"btkPoint_GetValues", _wrap_btkPoint_GetValues, METH_VARARGS, (char *)"\n"
		"GetValues(self) -> array (NumPy)\n"
		"\n"
		"Returns the point's values.\n"
		"WARNING:You cannot set values using this method. Use the methods SetValues of SetValue for that.\n"
		""},
	 { (char *)"btkPoint_SetValues", _wrap_btkPoint_SetValues, METH_VARARGS, (char *)"\n"
		"SetValues(self, array)\n"
		"\n"
		"Sets the point's values.\n"
		""},
	 { (char *)"btkPoint_GetResiduals", _wrap_btkPoint_GetResiduals, METH_VARARGS, (char *)"\n"
		"GetResiduals(self) -> array (NumPy)\n"
		"\n"
		"Returns the point's residuals.\n"
		""},
	 { (char *)"btkPoint_SetResiduals", _wrap_btkPoint_SetResiduals, METH_VARARGS, (char *)"\n"
		"SetResiduals(self, array)\n"
		"\n"
		"Sets the point's residuals.\n"
		""},
	 { (char *)"btkPoint_GetFrameNumber", _wrap_btkPoint_GetFrameNumber, METH_VARARGS, (char *)"\n"
		"btkPoint_GetFrameNumber(self) -> int const\n"
		"\n"
		"Returns the number of frames.\n"
		""},
	 { (char *)"btkPoint_SetFrameNumber", _wrap_btkPoint_SetFrameNumber, METH_VARARGS, (char *)"\n"
		"SetFrameNumber(self, int)\n"
		"\n"
		"Sets the number of frames.\n"
		""},
	 { (char *)"btkPoint_GetType", _wrap_btkPoint_GetType, METH_VARARGS, (char *)"\n"
		"btkPoint_GetType(self) -> btkPoint_impl::Type const\n"
		"\n"
		"Returns the point's type.\n"
		""},
	 { (char *)"btkPoint_SetType", _wrap_btkPoint_SetType, METH_VARARGS, (char *)"\n"
		"SetUnit(self, int)\n"
		"\n"
		"Sets the point's type.\n"
		""},
	 { (char *)"btkPoint_GetData", _wrap_btkPoint_GetData, METH_VARARGS, (char *)"\n"
		"GetData(self) -> btkPointData\n"
		"\n"
		"Return the data of this point\n"
		""},
	 { (char *)"btkPoint_SetData", _wrap_btkPoint_SetData, METH_VARARGS, (char *)"\n"
		"SetData(self, btkPointData, parenting = true)\n"
		"SetData(self, btkPointData, parenting = true)\n"
		"\n"
		"Sets the data of this point. By default, this object will take the parent of the data. Setting 'parenting' to false will unparent the old data, assign the new one, but doesn't set the point as its parent.\n"
		""},
	 { (char *)"btkPoint_SetDataSlice", _wrap_btkPoint_SetDataSlice, METH_VARARGS, (char *)"\n"
		"SetDataSlice(arg2, arg3, arg4, arg5, res=0.0)\n"
		"btkPoint_SetDataSlice(self, arg3, arg4, arg5, arg6)\n"
		"\n"
		"Convenient method to easily set the coordinates x,y,z and the residual for the given frame.\n"
		"WARNING: This function is not safe. There is no checking to determine if the frame is out of range or not. It has the advantage to be faster.\n"
		""},
	 { (char *)"btkPoint_Update", _wrap_btkPoint_Update, METH_VARARGS, (char *)"\n"
		"btkPoint_Update(self)\n"
		"\n"
		"Updates the ProcessObject associated with this DataObject.\n"
		""},
	 { (char *)"btkPoint_GetTimestamp", _wrap_btkPoint_GetTimestamp, METH_VARARGS, (char *)"\n"
		"btkPoint_GetTimestamp(self) -> unsigned long\n"
		"\n"
		"Returns the timestamp of the object.\n"
		""},
	 { (char *)"btkPoint_swigregister", btkPoint_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_btkPointData", _wrap_new_btkPointData, METH_VARARGS, (char *)"\n"
		"new_btkPointData(frameNumber) -> btkPointData\n"
		"\n"
		"\n"
		"Class storing the measures for a point (3D values and residuals along the time).\n"
		"\n"
		""},
	 { (char *)"btkPointData_Clone", _wrap_btkPointData_Clone, METH_VARARGS, (char *)"\n"
		"btkPointData_Clone(self) -> btkPointData\n"
		"\n"
		"Deep copy of the object.\n"
		""},
	 { (char *)"btkPointData___deref__", _wrap_btkPointData___deref__, METH_VARARGS, (char *)"btkPointData___deref__(self) -> btkPointData_impl *"},
	 { (char *)"btkPointData_GetValue", _wrap_btkPointData_GetValue, METH_VARARGS, (char *)"btkPointData_GetValue(self, row, col) -> double"},
	 { (char *)"btkPointData_SetValue", _wrap_btkPointData_SetValue, METH_VARARGS, (char *)"btkPointData_SetValue(self, row, col, v)"},
	 { (char *)"btkPointData_GetResidual", _wrap_btkPointData_GetResidual, METH_VARARGS, (char *)"btkPointData_GetResidual(self, idx) -> double"},
	 { (char *)"btkPointData_SetResidual", _wrap_btkPointData_SetResidual, METH_VARARGS, (char *)"btkPointData_SetResidual(self, idx, v)"},
	 { (char *)"delete_btkPointData", _wrap_delete_btkPointData, METH_VARARGS, (char *)"delete_btkPointData(self)"},
	 { (char *)"btkPointData_GetValues", _wrap_btkPointData_GetValues, METH_VARARGS, (char *)"\n"
		"GetValues(self) -> array (NumPy)\n"
		"\n"
		"Returns the point's values.\n"
		"WARNING:You cannot set values using this method.\n"
		""},
	 { (char *)"btkPointData_SetValues", _wrap_btkPointData_SetValues, METH_VARARGS, (char *)"\n"
		"SetValues(self, array)\n"
		"\n"
		"Sets the point's values.\n"
		""},
	 { (char *)"btkPointData_GetResiduals", _wrap_btkPointData_GetResiduals, METH_VARARGS, (char *)"\n"
		"GetResiduals(self) -> array (NumPy)\n"
		"\n"
		"Returns the point's residuals.\n"
		""},
	 { (char *)"btkPointData_SetResiduals", _wrap_btkPointData_SetResiduals, METH_VARARGS, (char *)"\n"
		"SetResiduals(self, array)\n"
		"\n"
		"Sets the point's residuals.\n"
		""},
	 { (char *)"btkPointData_Resize", _wrap_btkPointData_Resize, METH_VARARGS, (char *)"\n"
		"Resize(self, int)\n"
		"\n"
		"Resize the data to the given number of frames.\n"
		""},
	 { (char *)"btkPointData_Update", _wrap_btkPointData_Update, METH_VARARGS, (char *)"\n"
		"btkPointData_Update(self)\n"
		"\n"
		"Updates the ProcessObject associated with this DataObject.\n"
		""},
	 { (char *)"btkPointData_GetTimestamp", _wrap_btkPointData_GetTimestamp, METH_VARARGS, (char *)"\n"
		"btkPointData_GetTimestamp(self) -> unsigned long\n"
		"\n"
		"Returns the timestamp of the object.\n"
		""},
	 { (char *)"btkPointData_swigregister", btkPointData_swigregister, METH_VARARGS, NULL},
	 { (char *)"btkForcePlatform_Clone", _wrap_btkForcePlatform_Clone, METH_VARARGS, (char *)"\n"
		"btkForcePlatform_Clone(self) -> btkForcePlatform\n"
		"\n"
		"Deep copy of the object.\n"
		""},
	 { (char *)"btkForcePlatform___deref__", _wrap_btkForcePlatform___deref__, METH_VARARGS, (char *)"btkForcePlatform___deref__(self) -> btkForcePlatform_impl *"},
	 { (char *)"delete_btkForcePlatform", _wrap_delete_btkForcePlatform, METH_VARARGS, (char *)"delete_btkForcePlatform(self)"},
	 { (char *)"btkForcePlatform_Begin", _wrap_btkForcePlatform_Begin, METH_VARARGS, (char *)"\n"
		"Begin(self) -> btkAnalogIterator\n"
		"\n"
		"Returns an iterator to the beginning of the list of items.\n"
		""},
	 { (char *)"btkForcePlatform_End", _wrap_btkForcePlatform_End, METH_VARARGS, (char *)"\n"
		"End(self) -> btkAnalogIterator\n"
		"\n"
		"Returns an iterator just past the last item.\n"
		""},
	 { (char *)"btkForcePlatform_GetChannelNumber", _wrap_btkForcePlatform_GetChannelNumber, METH_VARARGS, (char *)"\n"
		"btkForcePlatform_GetChannelNumber(self) -> int\n"
		"\n"
		"Returns the number of analog channels used by the force platform.\n"
		""},
	 { (char *)"btkForcePlatform_GetChannel", _wrap_btkForcePlatform_GetChannel, METH_VARARGS, (char *)"\n"
		"GetChannel(self, int) -> btkAnalog)\n"
		"\n"
		"Returns the analog channel for the given index.\n"
		""},
	 { (char *)"btkForcePlatform_SetChannel", _wrap_btkForcePlatform_SetChannel, METH_VARARGS, (char *)"\n"
		"SetChannel(self, int , btkAnalog)\n"
		"\n"
		"Sets the analog channel for the given index.\n"
		""},
	 { (char *)"btkForcePlatform_GetChannels", _wrap_btkForcePlatform_GetChannels, METH_VARARGS, (char *)"\n"
		"btkForcePlatform_GetChannels(self) -> btkAnalogCollection\n"
		"\n"
		"Returns force platform's channels.\n"
		""},
	 { (char *)"btkForcePlatform_GetOrigin", _wrap_btkForcePlatform_GetOrigin, METH_VARARGS, (char *)"\n"
		"GetOrigin(self) -> array (NumPy)\n"
		"\n"
		"Returns the origin of the force platform.\n"
		""},
	 { (char *)"btkForcePlatform__set_origin_1", _wrap_btkForcePlatform__set_origin_1, METH_VARARGS, (char *)"\n"
		"_set_origin_1(self, array)\n"
		"\n"
		"Internal method. Sets the origin.\n"
		""},
	 { (char *)"btkForcePlatform__set_origin_2", _wrap_btkForcePlatform__set_origin_2, METH_VARARGS, (char *)"\n"
		"_set_origin_2(self, double, double, double)\n"
		"\n"
		"Internal method. Sets the origin.\n"
		""},
	 { (char *)"btkForcePlatform_GetCorner", _wrap_btkForcePlatform_GetCorner, METH_VARARGS, (char *)"\n"
		"GetCorner(self, int) -> array (NumPy)\n"
		"\n"
		"Returns the corner for the given index.\n"
		""},
	 { (char *)"btkForcePlatform__set_corner_2", _wrap_btkForcePlatform__set_corner_2, METH_VARARGS, (char *)"\n"
		"_set_corner_2(self, int, int, double)\n"
		"\n"
		"Internal method. Sets the corner for the given index.\n"
		""},
	 { (char *)"btkForcePlatform__set_corner_3", _wrap_btkForcePlatform__set_corner_3, METH_VARARGS, (char *)"\n"
		"_set_corner_3(self, int, double, double, double)\n"
		"\n"
		"Internal method. Sets the corner for the given index.\n"
		""},
	 { (char *)"btkForcePlatform__set_corner_1", _wrap_btkForcePlatform__set_corner_1, METH_VARARGS, (char *)"\n"
		"_set_corner_1(self, int, array)\n"
		"\n"
		"Internal method. Sets the corner for the given index.\n"
		""},
	 { (char *)"btkForcePlatform_GetCorners", _wrap_btkForcePlatform_GetCorners, METH_VARARGS, (char *)"\n"
		"GetCorners(self) -> array (NumPy)\n"
		"\n"
		"Returns corners' coordinates.\n"
		""},
	 { (char *)"btkForcePlatform_SetCorners", _wrap_btkForcePlatform_SetCorners, METH_VARARGS, (char *)"\n"
		"SetCorners(self, array)\n"
		"\n"
		"Sets corners' coordinates.\n"
		""},
	 { (char *)"btkForcePlatform_GetCalMatrix", _wrap_btkForcePlatform_GetCalMatrix, METH_VARARGS, (char *)"\n"
		"GetCalMatrix(self) -> array (NumPy)\n"
		"\n"
		"Returns the calibration matrix.\n"
		""},
	 { (char *)"btkForcePlatform_SetCalMatrix", _wrap_btkForcePlatform_SetCalMatrix, METH_VARARGS, (char *)"\n"
		"SetCalMatrix(self, array)\n"
		"\n"
		"Sets the calibration matrix.\n"
		""},
	 { (char *)"btkForcePlatform_GetType", _wrap_btkForcePlatform_GetType, METH_VARARGS, (char *)"\n"
		"btkForcePlatform_GetType(self) -> int\n"
		"\n"
		"Returns the type of the force platform.\n"
		""},
	 { (char *)"btkForcePlatform_Update", _wrap_btkForcePlatform_Update, METH_VARARGS, (char *)"\n"
		"btkForcePlatform_Update(self)\n"
		"\n"
		"Updates the ProcessObject associated with this DataObject.\n"
		""},
	 { (char *)"btkForcePlatform_GetTimestamp", _wrap_btkForcePlatform_GetTimestamp, METH_VARARGS, (char *)"\n"
		"btkForcePlatform_GetTimestamp(self) -> unsigned long\n"
		"\n"
		"Returns the timestamp of the object.\n"
		""},
	 { (char *)"btkForcePlatform_swigregister", btkForcePlatform_swigregister, METH_VARARGS, NULL},
	 { (char *)"btkForcePlatformType1", _wrap_btkForcePlatformType1, METH_VARARGS, (char *)"\n"
		"btkForcePlatformType1() -> btkForcePlatform\n"
		"\n"
		"\n"
		"Force platform composed of 6 channels:\n"
		" - FX: Horizontal forces on the axis X of the platform;\n"
		" - FY: Horizontal forces on the axis Y of the platform;\n"
		" - FZ: Vertical forces on the axis Z of the platform;\n"
		" - PX: Position of the centre of pressure (CoP) on the axis X of the platform;\n"
		" - PY: Position of the centre of pressure (CoP) on the axis Y of the platform;\n"
		" - MZ: Vertical moment on the axis Z of the platform.\n"
		""},
	 { (char *)"btkForcePlatformType2", _wrap_btkForcePlatformType2, METH_VARARGS, (char *)"\n"
		"btkForcePlatformType2() -> btkForcePlatform\n"
		"\n"
		"\n"
		"Force platform composed of 6 channels:\n"
		" - FX: Horizontal forces on the axis X of the platform;\n"
		" - FY: Horizontal forces on the axis Y of the platform;\n"
		" - FZ: Vertical forces on the axis Z of the platform;\n"
		" - MX: Horizontal moment on the axis X of the platform;\n"
		" - MY: Horizontal moment on the axis Y of the platform;\n"
		" - MZ: Vertical moment on the axis Z of the platform.\n"
		""},
	 { (char *)"btkForcePlatformType3", _wrap_btkForcePlatformType3, METH_VARARGS, (char *)"\n"
		"btkForcePlatformType3() -> btkForcePlatform\n"
		"\n"
		"\n"
		"Force platform composed of 8 channels:\n"
		" - FZ1: Vertical forces measured by the sensor on the corner 1;\n"
		" - FZ2: Vertical forces measured by the sensor on the corner 2;\n"
		" - FZ3: Vertical forces measured by the sensor on the corner 3;\n"
		" - FZ4: Vertical forces measured by the sensor on the corner 4;\n"
		" - FX12: Horizontal forces measured by the sensors 1 & 2;\n"
		" - FX34: Horizontal forces measured by the sensors 3 & 4;\n"
		" - FY14: Horizontal forces measured by the sensors 1 & 4;\n"
		" - FY23: Horizontal forces measured by the sensors 2 & 3.\n"
		""},
	 { (char *)"btkForcePlatformType4", _wrap_btkForcePlatformType4, METH_VARARGS, (char *)"\n"
		"btkForcePlatformType4() -> btkForcePlatform\n"
		"\n"
		"\n"
		"Force platform composed of 6 channels and a 6 columns by 6 rows calibration matrix. \n"
		"The definition of the channels are the same than the force platform Type 2.\n"
		""},
	 { (char *)"btkForcePlatformType5", _wrap_btkForcePlatformType5, METH_VARARGS, (char *)"\n"
		"btkForcePlatformType5() -> btkForcePlatform\n"
		"\n"
		"\n"
		"Force platform composed of 8 channels and a 8 columns by 6 rows calibration matrix. \n"
		"The definition of the channels are the same than the force platform Type 3.\n"
		""},
	 { (char *)"btkForcePlatformType6", _wrap_btkForcePlatformType6, METH_VARARGS, (char *)"\n"
		"btkForcePlatformType6() -> btkForcePlatform\n"
		"\n"
		"\n"
		"Force platform composed of 12 channels and a 12 columns by 12 rows calibration matrix:\n"
		" - FX1: Horizontal forces measured by the sensor on the corner 1;\n"
		" - FX2: Horizontal forces measured by the sensor on the corner 2;\n"
		" - FX3: Horizontal forces measured by the sensor on the corner 3;\n"
		" - FX4: Horizontal forces measured by the sensor on the corner 4;\n"
		" - FY1: Horizontal forces measured by the sensor on the corner 1;\n"
		" - FY2: Horizontal forces measured by the sensor on the corner 2;\n"
		" - FY3: Horizontal forces measured by the sensor on the corner 3;\n"
		" - FY4: Horizontal forces measured by the sensor on the corner 4;\n"
		" - FZ1: Vertical forces measured by the sensor on the corner 1;\n"
		" - FZ2: Vertical forces measured by the sensor on the corner 2;\n"
		" - FZ3: Vertical forces measured by the sensor on the corner 3;\n"
		" - FZ4: Vertical forces measured by the sensor on the corner 4.\n"
		""},
	 { (char *)"new_btkWrench", _wrap_new_btkWrench, METH_VARARGS, (char *)"\n"
		"btkWrench(label)\n"
		"btkWrench()\n"
		"btkWrench(frameNumber)\n"
		"new_btkWrench(label, frameNumber) -> btkWrench\n"
		"\n"
		"\n"
		"Represents a wrench as position, force and moment varying during the time.\n"
		"\n"
		"This class is mainly used to have a compact way to store forces and moment acting (or reacting) at a given position.\n"
		"The moment should be expressed at the position as it is defined in general mechanics.\n"
		"\n"
		"By default, the label used for the forces and the moments corresponds to the given label followed by the suffix '.F' and '.M' respectively.\n"
		"\n"
		"Warning: The call of the constructor btkWrench(label) must be followed by the use of the method btkWrench::SetFrameNumber as it creates a null matrix for the values.\n"
		""},
	 { (char *)"btkWrench_Clone", _wrap_btkWrench_Clone, METH_VARARGS, (char *)"btkWrench_Clone(self) -> btkWrench"},
	 { (char *)"btkWrench___deref__", _wrap_btkWrench___deref__, METH_VARARGS, (char *)"btkWrench___deref__(self) -> btkWrench_impl *"},
	 { (char *)"delete_btkWrench", _wrap_delete_btkWrench, METH_VARARGS, (char *)"delete_btkWrench(self)"},
	 { (char *)"btkWrench_GetPosition", _wrap_btkWrench_GetPosition, METH_VARARGS, (char *)"\n"
		"btkWrench_GetPosition(self) -> btkPoint\n"
		"\n"
		"Returns the wrench's position.\n"
		""},
	 { (char *)"btkWrench_SetPosition", _wrap_btkWrench_SetPosition, METH_VARARGS, (char *)"\n"
		"SetPosition(self, btkPoint)\n"
		"\n"
		"Sets the wrench's position.\n"
		""},
	 { (char *)"btkWrench_GetForce", _wrap_btkWrench_GetForce, METH_VARARGS, (char *)"\n"
		"btkWrench_GetForce(self) -> btkPoint\n"
		"\n"
		"Returns the wrench's force.\n"
		""},
	 { (char *)"btkWrench_SetForce", _wrap_btkWrench_SetForce, METH_VARARGS, (char *)"\n"
		"SetForce(self, btkPoint)\n"
		"\n"
		"Sets the wrench's moment.\n"
		""},
	 { (char *)"btkWrench_GetMoment", _wrap_btkWrench_GetMoment, METH_VARARGS, (char *)"\n"
		"btkWrench_GetMoment(self) -> btkPoint\n"
		"\n"
		"Returns the wrench's moment.\n"
		""},
	 { (char *)"btkWrench_SetMoment", _wrap_btkWrench_SetMoment, METH_VARARGS, (char *)"SetMoment(self, btkPoint)"},
	 { (char *)"btkWrench_GetComponent", _wrap_btkWrench_GetComponent, METH_VARARGS, (char *)"\n"
		"GetComponent(self, int) -> btkPoint)\n"
		"\n"
		"Returns the component with the given index. The possible value for the index are: 0: Returns the position, 1: Returns the force, 2: Returns the moment. Any other value will trigger an exception.\n"
		""},
	 { (char *)"btkWrench_SetFrameNumber", _wrap_btkWrench_SetFrameNumber, METH_VARARGS, (char *)"\n"
		"SetFrameNumber(self, int)\n"
		"\n"
		"Set the number of frames in the wrenches. The given number of frames must be greater than 0.\n"
		""},
	 { (char *)"btkWrench_Update", _wrap_btkWrench_Update, METH_VARARGS, (char *)"\n"
		"btkWrench_Update(self)\n"
		"\n"
		"Updates the ProcessObject associated with this DataObject.\n"
		""},
	 { (char *)"btkWrench_GetTimestamp", _wrap_btkWrench_GetTimestamp, METH_VARARGS, (char *)"\n"
		"btkWrench_GetTimestamp(self) -> unsigned long\n"
		"\n"
		"Returns the timestamp of the object.\n"
		""},
	 { (char *)"btkWrench_swigregister", btkWrench_swigregister, METH_VARARGS, NULL},
	 { (char *)"btkIMU_Clone", _wrap_btkIMU_Clone, METH_VARARGS, (char *)"btkIMU_Clone(self) -> btkIMU"},
	 { (char *)"btkIMU___deref__", _wrap_btkIMU___deref__, METH_VARARGS, (char *)"btkIMU___deref__(self) -> btkIMU_impl *"},
	 { (char *)"delete_btkIMU", _wrap_delete_btkIMU, METH_VARARGS, (char *)"delete_btkIMU(self)"},
	 { (char *)"btkIMU_GetLabel", _wrap_btkIMU_GetLabel, METH_VARARGS, (char *)"btkIMU_GetLabel(self) -> std::string const &"},
	 { (char *)"btkIMU_SetLabel", _wrap_btkIMU_SetLabel, METH_VARARGS, (char *)"btkIMU_SetLabel(self, arg3)"},
	 { (char *)"btkIMU_GetDescription", _wrap_btkIMU_GetDescription, METH_VARARGS, (char *)"btkIMU_GetDescription(self) -> std::string const &"},
	 { (char *)"btkIMU_SetDescription", _wrap_btkIMU_SetDescription, METH_VARARGS, (char *)"btkIMU_SetDescription(self, arg3)"},
	 { (char *)"btkIMU_SetChannels", _wrap_btkIMU_SetChannels, METH_VARARGS, (char *)"\n"
		"SetChannels(self, btkAnalog, btkAnalog, btkAnalog, btkAnalog, btkAnalog, btkAnalog)\n"
		"\n"
		"Sets the 6 first channels of the IMUs with the analog channels @a accX, @a accY, @a accZ, @a gyroX, @a gyroY, @a gyroZ.\n"
		""},
	 { (char *)"btkIMU_GetChannels", _wrap_btkIMU_GetChannels, METH_VARARGS, (char *)"\n"
		"GetChannels(self) -> btkAnalogCollection\n"
		"\n"
		"Returns the analog channels of the IMU in a collection. The analog channels are pushed in the collection by using their ID.\n"
		""},
	 { (char *)"btkIMU_SetChannel", _wrap_btkIMU_SetChannel, METH_VARARGS, (char *)"\n"
		"SetChannel(self, id, btkAnalog)\n"
		"\n"
		"Sets an analog channel to the given ID. If an analog channel is already set to this ID, then it is replaced.\n"
		""},
	 { (char *)"btkIMU_GetChannel", _wrap_btkIMU_GetChannel, METH_VARARGS, (char *)"\n"
		"GetChannel(self, id) -> btkAnalog\n"
		"btkIMU_GetChannel(self, arg3) -> btkAnalog\n"
		"\n"
		"Returns the analog channel with the given ID or label. If there is no analog channel with the given ID, then an exception is thrown.\n"
		""},
	 { (char *)"btkIMU_GetChannelNumber", _wrap_btkIMU_GetChannelNumber, METH_VARARGS, (char *)"\n"
		"btkIMU_GetChannelNumber(self) -> int\n"
		"\n"
		"Returns the number of analog channels associated to this IMU.\n"
		""},
	 { (char *)"btkIMU_GetType", _wrap_btkIMU_GetType, METH_VARARGS, (char *)"\n"
		"btkIMU_GetType(self) -> int\n"
		"\n"
		"Returns the type of the IMU.\n"
		""},
	 { (char *)"btkIMU_GetFrameNumber", _wrap_btkIMU_GetFrameNumber, METH_VARARGS, (char *)"\n"
		"btkIMU_GetFrameNumber(self) -> int\n"
		"\n"
		"Returns the number of frames set in this IMU.\n"
		""},
	 { (char *)"btkIMU_SetFrameNumber", _wrap_btkIMU_SetFrameNumber, METH_VARARGS, (char *)"\n"
		"btkIMU_SetFrameNumber(self, fn)\n"
		"\n"
		"Set the number of frames for the IMU and modify also the number of frames for the channels.\n"
		""},
	 { (char *)"btkIMU_GetFrequency", _wrap_btkIMU_GetFrequency, METH_VARARGS, (char *)"\n"
		"btkIMU_GetFrequency(self) -> double\n"
		"\n"
		"Returns the frequency set to the IMU. (by default it is 0 Hz).\n"
		""},
	 { (char *)"btkIMU_SetFrequency", _wrap_btkIMU_SetFrequency, METH_VARARGS, (char *)"\n"
		"btkIMU_SetFrequency(self, f)\n"
		"\n"
		"Sets the acquisition sample rate associated to the IMU.\n"
		""},
	 { (char *)"btkIMU_GetCalMatrix", _wrap_btkIMU_GetCalMatrix, METH_VARARGS, (char *)"GetCalMatrix(self) -> array (NumPy)"},
	 { (char *)"btkIMU_SetCalMatrix", _wrap_btkIMU_SetCalMatrix, METH_VARARGS, (char *)"SetCalMatrix(self, array)"},
	 { (char *)"btkIMU_GetAccelerometerX", _wrap_btkIMU_GetAccelerometerX, METH_VARARGS, (char *)"\n"
		"GetAccelerometerX(self) -> btkAnalog\n"
		"\n"
		"Convenient method to return the analog channel with the ID 0 (which should correspond to an accelerometer measuring data on the X axis of the IMU).\n"
		""},
	 { (char *)"btkIMU_GetAccelerometerY", _wrap_btkIMU_GetAccelerometerY, METH_VARARGS, (char *)"\n"
		"GetAccelerometerY(self) -> btkAnalog\n"
		"\n"
		"Convenient method to return the analog channel with the ID 1 (which should correspond to an accelerometer measuring data on the Y axis of the IMU).\n"
		""},
	 { (char *)"btkIMU_GetAccelerometerZ", _wrap_btkIMU_GetAccelerometerZ, METH_VARARGS, (char *)"\n"
		"GetAccelerometerZ(self) -> btkAnalog\n"
		"\n"
		"Convenient method to return the analog channel with the ID 2 (which should correspond to an accelerometer measuring data on the Z axis of the IMU).\n"
		""},
	 { (char *)"btkIMU_GetGyroscopeX", _wrap_btkIMU_GetGyroscopeX, METH_VARARGS, (char *)"\n"
		"GetGyroscopeX(self) -> btkAnalog\n"
		"\n"
		"Convenient method to return the analog channel with the ID 3 (which should correspond to a gyroscope measuring data on the X axis of the IMU).\n"
		""},
	 { (char *)"btkIMU_GetGyroscopeY", _wrap_btkIMU_GetGyroscopeY, METH_VARARGS, (char *)"\n"
		"GetGyroscopeY(self) -> btkAnalog\n"
		"\n"
		"Convenient method to return the analog channel with the ID 4 (which should correspond to a gyroscope measuring data on the Y axis of the IMU).\n"
		""},
	 { (char *)"btkIMU_GetGyroscopeZ", _wrap_btkIMU_GetGyroscopeZ, METH_VARARGS, (char *)"\n"
		"GetGyroscopeZ(self) -> btkAnalog\n"
		"\n"
		"Convenient method to return the analog channel with the ID 5 (which should correspond to a gyroscope measuring data on the Z axis of the IMU).\n"
		""},
	 { (char *)"btkIMU_Rotate", _wrap_btkIMU_Rotate, METH_VARARGS, (char *)"\n"
		"btkIMU_Rotate(self, arg3)\n"
		"\n"
		"Convenient method to rotate the analog channels with the IDs 0-5. This method handles the case where some of these analog channels are missing.\n"
		""},
	 { (char *)"btkIMU_Update", _wrap_btkIMU_Update, METH_VARARGS, (char *)"\n"
		"btkIMU_Update(self)\n"
		"\n"
		"Updates the ProcessObject associated with this DataObject.\n"
		""},
	 { (char *)"btkIMU_GetTimestamp", _wrap_btkIMU_GetTimestamp, METH_VARARGS, (char *)"\n"
		"btkIMU_GetTimestamp(self) -> unsigned long\n"
		"\n"
		"Returns the timestamp of the object.\n"
		""},
	 { (char *)"btkIMU_swigregister", btkIMU_swigregister, METH_VARARGS, NULL},
	 { (char *)"btkIMUType1", _wrap_btkIMUType1, METH_VARARGS, (char *)"\n"
		"btkIMUType1(label, desc, init=True) -> btkIMU\n"
		"btkIMUType1(label, desc) -> btkIMU\n"
		"btkIMUType1(label) -> btkIMU\n"
		"btkIMUType1() -> btkIMU\n"
		"\n"
		"\n"
		"IMU 6D (3 accelerometers and 3 gyroscopes).\n"
		""},
	 { (char *)"btkIMUType2", _wrap_btkIMUType2, METH_VARARGS, (char *)"\n"
		"btkIMUType2(label, desc, init=True) -> btkIMU\n"
		"btkIMUType2(label, desc) -> btkIMU\n"
		"btkIMUType2(label) -> btkIMU\n"
		"btkIMUType2() -> btkIMU\n"
		"\n"
		"\n"
		"IMU 6D (same as Type 1) with a calibration matrix used to align sensors (accelerometers and gyroscopes) on the same inertial reference frame.\n"
		""},
	 { (char *)"new_btkEventCollectionIterator", _wrap_new_btkEventCollectionIterator, METH_VARARGS, (char *)"new_btkEventCollectionIterator() -> btkEventCollectionIterator"},
	 { (char *)"btkEventCollectionIterator_incr", _wrap_btkEventCollectionIterator_incr, METH_VARARGS, (char *)"btkEventCollectionIterator_incr(self)"},
	 { (char *)"btkEventCollectionIterator_decr", _wrap_btkEventCollectionIterator_decr, METH_VARARGS, (char *)"btkEventCollectionIterator_decr(self)"},
	 { (char *)"btkEventCollectionIterator_value", _wrap_btkEventCollectionIterator_value, METH_VARARGS, (char *)"btkEventCollectionIterator_value(self) -> btkEvent"},
	 { (char *)"btkEventCollectionIterator___eq__", _wrap_btkEventCollectionIterator___eq__, METH_VARARGS, (char *)"btkEventCollectionIterator___eq__(self, rhs) -> bool"},
	 { (char *)"btkEventCollectionIterator___ne__", _wrap_btkEventCollectionIterator___ne__, METH_VARARGS, (char *)"btkEventCollectionIterator___ne__(self, rhs) -> bool"},
	 { (char *)"delete_btkEventCollectionIterator", _wrap_delete_btkEventCollectionIterator, METH_VARARGS, (char *)"delete_btkEventCollectionIterator(self)"},
	 { (char *)"btkEventCollectionIterator_swigregister", btkEventCollectionIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_btkEventCollection", _wrap_new_btkEventCollection, METH_VARARGS, (char *)"\n"
		"new_btkEventCollection() -> btkEventCollection\n"
		"\n"
		"\n"
		"Collection of events stored in a list.\n"
		""},
	 { (char *)"btkEventCollection_Clone", _wrap_btkEventCollection_Clone, METH_VARARGS, (char *)"\n"
		"btkEventCollection_Clone(self) -> btkEventCollection\n"
		"\n"
		"Deep copy of the object\n"
		""},
	 { (char *)"btkEventCollection___deref__", _wrap_btkEventCollection___deref__, METH_VARARGS, (char *)"btkEventCollection___deref__(self) -> btkEventCollection_impl *"},
	 { (char *)"delete_btkEventCollection", _wrap_delete_btkEventCollection, METH_VARARGS, (char *)"delete_btkEventCollection(self)"},
	 { (char *)"btkEventCollection_Begin", _wrap_btkEventCollection_Begin, METH_VARARGS, (char *)"\n"
		"Begin(self) -> btkEventIterator\n"
		"\n"
		"Returns an iterator to the beginning of the list of items.\n"
		""},
	 { (char *)"btkEventCollection_End", _wrap_btkEventCollection_End, METH_VARARGS, (char *)"\n"
		"End(self) -> btkEventIterator\n"
		"\n"
		"Returns an iterator just past the last item.\n"
		""},
	 { (char *)"btkEventCollection_IsEmpty", _wrap_btkEventCollection_IsEmpty, METH_VARARGS, (char *)"\n"
		"btkEventCollection_IsEmpty(self) -> bool\n"
		"\n"
		"Returns true if the collection is empty.\n"
		""},
	 { (char *)"btkEventCollection_GetItemNumber", _wrap_btkEventCollection_GetItemNumber, METH_VARARGS, (char *)"\n"
		"btkEventCollection_GetItemNumber(self) -> int\n"
		"\n"
		"Returns the number of events\n"
		""},
	 { (char *)"btkEventCollection_SetItemNumber", _wrap_btkEventCollection_SetItemNumber, METH_VARARGS, (char *)"\n"
		"btkEventCollection_SetItemNumber(self, arg3)\n"
		"\n"
		"Sets the number of events\n"
		""},
	 { (char *)"btkEventCollection_GetIndexOf", _wrap_btkEventCollection_GetIndexOf, METH_VARARGS, (char *)"\n"
		"GetIndexOf(self, int) -> btkEvent\n"
		"\n"
		"Returns the index of the given item.\n"
		""},
	 { (char *)"btkEventCollection_GetItem", _wrap_btkEventCollection_GetItem, METH_VARARGS, (char *)"\n"
		"GetItem(self, int) -> btkEvent\n"
		"\n"
		"Returns the event for the given index.\n"
		""},
	 { (char *)"btkEventCollection_InsertItem", _wrap_btkEventCollection_InsertItem, METH_VARARGS, (char *)"\n"
		"InsertItem(self, btkEventIterator, btkEvent) -> bool\n"
		"InsertItem(self, int, btkEvent) -> bool\n"
		"InsertItem(self, btkEvent) -> bool\n"
		"\n"
		"Inserts an event in the list.\n"
		""},
	 { (char *)"btkEventCollection_SetItem", _wrap_btkEventCollection_SetItem, METH_VARARGS, (char *)"\n"
		"SetItem(self, int) -> btkEvent\n"
		"\n"
		"Sets an event.\n"
		""},
	 { (char *)"btkEventCollection_RemoveItem", _wrap_btkEventCollection_RemoveItem, METH_VARARGS, (char *)"\n"
		"RemoveItem(self, btkEventIterator) -> btkEventIterator\n"
		"RemoveItem(self, int)\n"
		"\n"
		"Removes an event.\n"
		""},
	 { (char *)"btkEventCollection_TakeItem", _wrap_btkEventCollection_TakeItem, METH_VARARGS, (char *)"\n"
		"TakeItem(self, btkEventIterator) -> btkEvent\n"
		"TakeItem(self, int) -> btkEvent\n"
		"\n"
		"Removes an event and return it.\n"
		""},
	 { (char *)"btkEventCollection_Clear", _wrap_btkEventCollection_Clear, METH_VARARGS, (char *)"\n"
		"btkEventCollection_Clear(self)\n"
		"\n"
		"Clear the contents of the collection.\n"
		""},
	 { (char *)"btkEventCollection_Update", _wrap_btkEventCollection_Update, METH_VARARGS, (char *)"\n"
		"btkEventCollection_Update(self)\n"
		"\n"
		"Updates the ProcessObject associated with this DataObject.\n"
		""},
	 { (char *)"btkEventCollection_GetTimestamp", _wrap_btkEventCollection_GetTimestamp, METH_VARARGS, (char *)"\n"
		"btkEventCollection_GetTimestamp(self) -> unsigned long\n"
		"\n"
		"Returns the timestamp of the object.\n"
		""},
	 { (char *)"btkEventCollection_swigregister", btkEventCollection_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_btkAnalogCollectionIterator", _wrap_new_btkAnalogCollectionIterator, METH_VARARGS, (char *)"new_btkAnalogCollectionIterator() -> btkAnalogCollectionIterator"},
	 { (char *)"btkAnalogCollectionIterator_incr", _wrap_btkAnalogCollectionIterator_incr, METH_VARARGS, (char *)"btkAnalogCollectionIterator_incr(self)"},
	 { (char *)"btkAnalogCollectionIterator_decr", _wrap_btkAnalogCollectionIterator_decr, METH_VARARGS, (char *)"btkAnalogCollectionIterator_decr(self)"},
	 { (char *)"btkAnalogCollectionIterator_value", _wrap_btkAnalogCollectionIterator_value, METH_VARARGS, (char *)"btkAnalogCollectionIterator_value(self) -> btkAnalog"},
	 { (char *)"btkAnalogCollectionIterator___eq__", _wrap_btkAnalogCollectionIterator___eq__, METH_VARARGS, (char *)"btkAnalogCollectionIterator___eq__(self, rhs) -> bool"},
	 { (char *)"btkAnalogCollectionIterator___ne__", _wrap_btkAnalogCollectionIterator___ne__, METH_VARARGS, (char *)"btkAnalogCollectionIterator___ne__(self, rhs) -> bool"},
	 { (char *)"delete_btkAnalogCollectionIterator", _wrap_delete_btkAnalogCollectionIterator, METH_VARARGS, (char *)"delete_btkAnalogCollectionIterator(self)"},
	 { (char *)"btkAnalogCollectionIterator_swigregister", btkAnalogCollectionIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_btkAnalogCollection", _wrap_new_btkAnalogCollection, METH_VARARGS, (char *)"\n"
		"new_btkAnalogCollection() -> btkAnalogCollection\n"
		"\n"
		"\n"
		"Collection of analog channels stored in a list.\n"
		""},
	 { (char *)"btkAnalogCollection_Clone", _wrap_btkAnalogCollection_Clone, METH_VARARGS, (char *)"\n"
		"btkAnalogCollection_Clone(self) -> btkAnalogCollection\n"
		"\n"
		"Deep copy of the object\n"
		""},
	 { (char *)"btkAnalogCollection___deref__", _wrap_btkAnalogCollection___deref__, METH_VARARGS, (char *)"btkAnalogCollection___deref__(self) -> btkAnalogCollection_impl *"},
	 { (char *)"delete_btkAnalogCollection", _wrap_delete_btkAnalogCollection, METH_VARARGS, (char *)"delete_btkAnalogCollection(self)"},
	 { (char *)"btkAnalogCollection_Begin", _wrap_btkAnalogCollection_Begin, METH_VARARGS, (char *)"\n"
		"Begin(self) -> btkAnalogIterator\n"
		"\n"
		"Returns an iterator to the beginning of the list of items.\n"
		""},
	 { (char *)"btkAnalogCollection_End", _wrap_btkAnalogCollection_End, METH_VARARGS, (char *)"\n"
		"End(self) -> btkAnalogIterator\n"
		"\n"
		"Returns an iterator just past the last item.\n"
		""},
	 { (char *)"btkAnalogCollection_IsEmpty", _wrap_btkAnalogCollection_IsEmpty, METH_VARARGS, (char *)"\n"
		"btkAnalogCollection_IsEmpty(self) -> bool\n"
		"\n"
		"Returns true if the collection is empty.\n"
		""},
	 { (char *)"btkAnalogCollection_GetItemNumber", _wrap_btkAnalogCollection_GetItemNumber, METH_VARARGS, (char *)"\n"
		"btkAnalogCollection_GetItemNumber(self) -> int\n"
		"\n"
		"Returns the number of analog channels\n"
		""},
	 { (char *)"btkAnalogCollection_SetItemNumber", _wrap_btkAnalogCollection_SetItemNumber, METH_VARARGS, (char *)"\n"
		"btkAnalogCollection_SetItemNumber(self, arg3)\n"
		"\n"
		"Sets the number of analog channels\n"
		""},
	 { (char *)"btkAnalogCollection_GetIndexOf", _wrap_btkAnalogCollection_GetIndexOf, METH_VARARGS, (char *)"\n"
		"GetIndexOf(self, int) -> btkAnalog\n"
		"\n"
		"Returns the index of the given item.\n"
		""},
	 { (char *)"btkAnalogCollection_GetItem", _wrap_btkAnalogCollection_GetItem, METH_VARARGS, (char *)"\n"
		"GetItem(self, int) -> btkAnalog\n"
		"\n"
		"Returns the analog channel for the given index.\n"
		""},
	 { (char *)"btkAnalogCollection_InsertItem", _wrap_btkAnalogCollection_InsertItem, METH_VARARGS, (char *)"\n"
		"InsertItem(self, btkAnalogIterator, btkAnalog) -> bool\n"
		"InsertItem(self, int, btkAnalog) -> bool\n"
		"InsertItem(self, btkAnalog) -> bool\n"
		"\n"
		"Inserts an analog channel in the list.\n"
		""},
	 { (char *)"btkAnalogCollection_SetItem", _wrap_btkAnalogCollection_SetItem, METH_VARARGS, (char *)"\n"
		"SetItem(self, int) -> btkAnalog\n"
		"\n"
		"Sets an analog channel.\n"
		""},
	 { (char *)"btkAnalogCollection_RemoveItem", _wrap_btkAnalogCollection_RemoveItem, METH_VARARGS, (char *)"\n"
		"RemoveItem(self, btkAnalogIterator) -> btkAnalogIterator\n"
		"RemoveItem(self, int)\n"
		"\n"
		"Removes an analog channel.\n"
		""},
	 { (char *)"btkAnalogCollection_TakeItem", _wrap_btkAnalogCollection_TakeItem, METH_VARARGS, (char *)"\n"
		"TakeItem(self, btkAnalogIterator) -> btkAnalog\n"
		"TakeItem(self, int) -> btkAnalog\n"
		"\n"
		"Removes an analog channel and return it.\n"
		""},
	 { (char *)"btkAnalogCollection_Clear", _wrap_btkAnalogCollection_Clear, METH_VARARGS, (char *)"\n"
		"btkAnalogCollection_Clear(self)\n"
		"\n"
		"Clear the contents of the collection.\n"
		""},
	 { (char *)"btkAnalogCollection_Update", _wrap_btkAnalogCollection_Update, METH_VARARGS, (char *)"\n"
		"btkAnalogCollection_Update(self)\n"
		"\n"
		"Updates the ProcessObject associated with this DataObject.\n"
		""},
	 { (char *)"btkAnalogCollection_GetTimestamp", _wrap_btkAnalogCollection_GetTimestamp, METH_VARARGS, (char *)"\n"
		"btkAnalogCollection_GetTimestamp(self) -> unsigned long\n"
		"\n"
		"Returns the timestamp of the object.\n"
		""},
	 { (char *)"btkAnalogCollection_swigregister", btkAnalogCollection_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_btkPointCollectionIterator", _wrap_new_btkPointCollectionIterator, METH_VARARGS, (char *)"new_btkPointCollectionIterator() -> btkPointCollectionIterator"},
	 { (char *)"btkPointCollectionIterator_incr", _wrap_btkPointCollectionIterator_incr, METH_VARARGS, (char *)"btkPointCollectionIterator_incr(self)"},
	 { (char *)"btkPointCollectionIterator_decr", _wrap_btkPointCollectionIterator_decr, METH_VARARGS, (char *)"btkPointCollectionIterator_decr(self)"},
	 { (char *)"btkPointCollectionIterator_value", _wrap_btkPointCollectionIterator_value, METH_VARARGS, (char *)"btkPointCollectionIterator_value(self) -> btkPoint"},
	 { (char *)"btkPointCollectionIterator___eq__", _wrap_btkPointCollectionIterator___eq__, METH_VARARGS, (char *)"btkPointCollectionIterator___eq__(self, rhs) -> bool"},
	 { (char *)"btkPointCollectionIterator___ne__", _wrap_btkPointCollectionIterator___ne__, METH_VARARGS, (char *)"btkPointCollectionIterator___ne__(self, rhs) -> bool"},
	 { (char *)"delete_btkPointCollectionIterator", _wrap_delete_btkPointCollectionIterator, METH_VARARGS, (char *)"delete_btkPointCollectionIterator(self)"},
	 { (char *)"btkPointCollectionIterator_swigregister", btkPointCollectionIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_btkPointCollection", _wrap_new_btkPointCollection, METH_VARARGS, (char *)"\n"
		"new_btkPointCollection() -> btkPointCollection\n"
		"\n"
		"\n"
		"Collection of point stored in a list.\n"
		""},
	 { (char *)"btkPointCollection_Clone", _wrap_btkPointCollection_Clone, METH_VARARGS, (char *)"\n"
		"btkPointCollection_Clone(self) -> btkPointCollection\n"
		"\n"
		"Deep copy of the object\n"
		""},
	 { (char *)"btkPointCollection___deref__", _wrap_btkPointCollection___deref__, METH_VARARGS, (char *)"btkPointCollection___deref__(self) -> btkPointCollection_impl *"},
	 { (char *)"delete_btkPointCollection", _wrap_delete_btkPointCollection, METH_VARARGS, (char *)"delete_btkPointCollection(self)"},
	 { (char *)"btkPointCollection_Begin", _wrap_btkPointCollection_Begin, METH_VARARGS, (char *)"\n"
		"Begin(self) -> btkPointIterator\n"
		"\n"
		"Returns an iterator to the beginning of the list of items.\n"
		""},
	 { (char *)"btkPointCollection_End", _wrap_btkPointCollection_End, METH_VARARGS, (char *)"\n"
		"End(self) -> btkPointIterator\n"
		"\n"
		"Returns an iterator just past the last item.\n"
		""},
	 { (char *)"btkPointCollection_IsEmpty", _wrap_btkPointCollection_IsEmpty, METH_VARARGS, (char *)"\n"
		"btkPointCollection_IsEmpty(self) -> bool\n"
		"\n"
		"Returns true if the collection is empty.\n"
		""},
	 { (char *)"btkPointCollection_GetItemNumber", _wrap_btkPointCollection_GetItemNumber, METH_VARARGS, (char *)"\n"
		"btkPointCollection_GetItemNumber(self) -> int\n"
		"\n"
		"Returns the number of points\n"
		""},
	 { (char *)"btkPointCollection_SetItemNumber", _wrap_btkPointCollection_SetItemNumber, METH_VARARGS, (char *)"\n"
		"btkPointCollection_SetItemNumber(self, arg3)\n"
		"\n"
		"Sets the number of points\n"
		""},
	 { (char *)"btkPointCollection_GetIndexOf", _wrap_btkPointCollection_GetIndexOf, METH_VARARGS, (char *)"\n"
		"GetIndexOf(self, int) -> btkPoint\n"
		"\n"
		"Returns the index of the given item.\n"
		""},
	 { (char *)"btkPointCollection_GetItem", _wrap_btkPointCollection_GetItem, METH_VARARGS, (char *)"\n"
		"GetItem(self, int) -> btkPoint\n"
		"\n"
		"Returns the point for the given index.\n"
		""},
	 { (char *)"btkPointCollection_InsertItem", _wrap_btkPointCollection_InsertItem, METH_VARARGS, (char *)"\n"
		"InsertItem(self, btkPointIterator, btkPoint) -> bool\n"
		"InsertItem(self, int, btkPoint) -> bool\n"
		"InsertItem(self, btkPoint) -> bool\n"
		"\n"
		"Inserts a point in the list.\n"
		""},
	 { (char *)"btkPointCollection_SetItem", _wrap_btkPointCollection_SetItem, METH_VARARGS, (char *)"\n"
		"SetItem(self, int) -> btkPoint\n"
		"\n"
		"Sets a point.\n"
		""},
	 { (char *)"btkPointCollection_RemoveItem", _wrap_btkPointCollection_RemoveItem, METH_VARARGS, (char *)"\n"
		"RemoveItem(self, btkPointIterator) -> btkPointIterator\n"
		"RemoveItem(self, int)\n"
		"\n"
		"Removes a point.\n"
		""},
	 { (char *)"btkPointCollection_TakeItem", _wrap_btkPointCollection_TakeItem, METH_VARARGS, (char *)"\n"
		"TakeItem(self, btkPointIterator) -> btkPoint\n"
		"TakeItem(self, int) -> btkPoint\n"
		"\n"
		"Removes a point and return it.\n"
		""},
	 { (char *)"btkPointCollection_Clear", _wrap_btkPointCollection_Clear, METH_VARARGS, (char *)"\n"
		"btkPointCollection_Clear(self)\n"
		"\n"
		"Clear the contents of the collection.\n"
		""},
	 { (char *)"btkPointCollection_Update", _wrap_btkPointCollection_Update, METH_VARARGS, (char *)"\n"
		"btkPointCollection_Update(self)\n"
		"\n"
		"Updates the ProcessObject associated with this DataObject.\n"
		""},
	 { (char *)"btkPointCollection_GetTimestamp", _wrap_btkPointCollection_GetTimestamp, METH_VARARGS, (char *)"\n"
		"btkPointCollection_GetTimestamp(self) -> unsigned long\n"
		"\n"
		"Returns the timestamp of the object.\n"
		""},
	 { (char *)"btkPointCollection_swigregister", btkPointCollection_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_btkForcePlatformCollectionIterator", _wrap_new_btkForcePlatformCollectionIterator, METH_VARARGS, (char *)"new_btkForcePlatformCollectionIterator() -> btkForcePlatformCollectionIterator"},
	 { (char *)"btkForcePlatformCollectionIterator_incr", _wrap_btkForcePlatformCollectionIterator_incr, METH_VARARGS, (char *)"btkForcePlatformCollectionIterator_incr(self)"},
	 { (char *)"btkForcePlatformCollectionIterator_decr", _wrap_btkForcePlatformCollectionIterator_decr, METH_VARARGS, (char *)"btkForcePlatformCollectionIterator_decr(self)"},
	 { (char *)"btkForcePlatformCollectionIterator_value", _wrap_btkForcePlatformCollectionIterator_value, METH_VARARGS, (char *)"btkForcePlatformCollectionIterator_value(self) -> btkForcePlatform"},
	 { (char *)"btkForcePlatformCollectionIterator___eq__", _wrap_btkForcePlatformCollectionIterator___eq__, METH_VARARGS, (char *)"btkForcePlatformCollectionIterator___eq__(self, rhs) -> bool"},
	 { (char *)"btkForcePlatformCollectionIterator___ne__", _wrap_btkForcePlatformCollectionIterator___ne__, METH_VARARGS, (char *)"btkForcePlatformCollectionIterator___ne__(self, rhs) -> bool"},
	 { (char *)"delete_btkForcePlatformCollectionIterator", _wrap_delete_btkForcePlatformCollectionIterator, METH_VARARGS, (char *)"delete_btkForcePlatformCollectionIterator(self)"},
	 { (char *)"btkForcePlatformCollectionIterator_swigregister", btkForcePlatformCollectionIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_btkForcePlatformCollection", _wrap_new_btkForcePlatformCollection, METH_VARARGS, (char *)"\n"
		"new_btkForcePlatformCollection() -> btkForcePlatformCollection\n"
		"\n"
		"\n"
		"Collection of force platforms stored in a list.\n"
		""},
	 { (char *)"btkForcePlatformCollection_Clone", _wrap_btkForcePlatformCollection_Clone, METH_VARARGS, (char *)"\n"
		"btkForcePlatformCollection_Clone(self) -> btkForcePlatformCollection\n"
		"\n"
		"Deep copy of the object\n"
		""},
	 { (char *)"btkForcePlatformCollection___deref__", _wrap_btkForcePlatformCollection___deref__, METH_VARARGS, (char *)"btkForcePlatformCollection___deref__(self) -> btkForcePlatformCollection_impl *"},
	 { (char *)"delete_btkForcePlatformCollection", _wrap_delete_btkForcePlatformCollection, METH_VARARGS, (char *)"delete_btkForcePlatformCollection(self)"},
	 { (char *)"btkForcePlatformCollection_Begin", _wrap_btkForcePlatformCollection_Begin, METH_VARARGS, (char *)"\n"
		"Begin(self) -> btkForcePlatformIterator\n"
		"\n"
		"Returns an iterator to the beginning of the list of items.\n"
		""},
	 { (char *)"btkForcePlatformCollection_End", _wrap_btkForcePlatformCollection_End, METH_VARARGS, (char *)"\n"
		"End(self) -> btkForcePlatformIterator\n"
		"\n"
		"Returns an iterator just past the last item.\n"
		""},
	 { (char *)"btkForcePlatformCollection_IsEmpty", _wrap_btkForcePlatformCollection_IsEmpty, METH_VARARGS, (char *)"\n"
		"btkForcePlatformCollection_IsEmpty(self) -> bool\n"
		"\n"
		"Returns true if the collection is empty.\n"
		""},
	 { (char *)"btkForcePlatformCollection_GetItemNumber", _wrap_btkForcePlatformCollection_GetItemNumber, METH_VARARGS, (char *)"\n"
		"btkForcePlatformCollection_GetItemNumber(self) -> int\n"
		"\n"
		"Returns the number of force platforms\n"
		""},
	 { (char *)"btkForcePlatformCollection_SetItemNumber", _wrap_btkForcePlatformCollection_SetItemNumber, METH_VARARGS, (char *)"\n"
		"btkForcePlatformCollection_SetItemNumber(self, arg3)\n"
		"\n"
		"Sets the number of force platforms\n"
		""},
	 { (char *)"btkForcePlatformCollection_GetIndexOf", _wrap_btkForcePlatformCollection_GetIndexOf, METH_VARARGS, (char *)"\n"
		"GetIndexOf(self, int) -> btkForcePlatform\n"
		"\n"
		"Returns the index of the given item.\n"
		""},
	 { (char *)"btkForcePlatformCollection_GetItem", _wrap_btkForcePlatformCollection_GetItem, METH_VARARGS, (char *)"\n"
		"GetItem(self, int) -> btkForcePlatform\n"
		"\n"
		"Returns the force platform for the given index.\n"
		""},
	 { (char *)"btkForcePlatformCollection_InsertItem", _wrap_btkForcePlatformCollection_InsertItem, METH_VARARGS, (char *)"\n"
		"InsertItem(self, btkForcePlatformIterator, btkForcePlatform) -> bool\n"
		"InsertItem(self, int, btkForcePlatform) -> bool\n"
		"InsertItem(self, btkForcePlatform) -> bool\n"
		"\n"
		"Inserts a force platform in the list.\n"
		""},
	 { (char *)"btkForcePlatformCollection_SetItem", _wrap_btkForcePlatformCollection_SetItem, METH_VARARGS, (char *)"\n"
		"SetItem(self, int) -> btkForcePlatform\n"
		"\n"
		"Sets a force platform.\n"
		""},
	 { (char *)"btkForcePlatformCollection_RemoveItem", _wrap_btkForcePlatformCollection_RemoveItem, METH_VARARGS, (char *)"\n"
		"RemoveItem(self, btkForcePlatformIterator) -> btkForcePlatformIterator\n"
		"RemoveItem(self, int)\n"
		"\n"
		"Removes a force platform.\n"
		""},
	 { (char *)"btkForcePlatformCollection_TakeItem", _wrap_btkForcePlatformCollection_TakeItem, METH_VARARGS, (char *)"\n"
		"TakeItem(self, btkForcePlatformIterator) -> btkForcePlatform\n"
		"TakeItem(self, int) -> btkForcePlatform\n"
		"\n"
		"Removes a force platform and return it.\n"
		""},
	 { (char *)"btkForcePlatformCollection_Clear", _wrap_btkForcePlatformCollection_Clear, METH_VARARGS, (char *)"\n"
		"btkForcePlatformCollection_Clear(self)\n"
		"\n"
		"Clear the contents of the collection.\n"
		""},
	 { (char *)"btkForcePlatformCollection_Update", _wrap_btkForcePlatformCollection_Update, METH_VARARGS, (char *)"\n"
		"btkForcePlatformCollection_Update(self)\n"
		"\n"
		"Updates the ProcessObject associated with this DataObject.\n"
		""},
	 { (char *)"btkForcePlatformCollection_GetTimestamp", _wrap_btkForcePlatformCollection_GetTimestamp, METH_VARARGS, (char *)"\n"
		"btkForcePlatformCollection_GetTimestamp(self) -> unsigned long\n"
		"\n"
		"Returns the timestamp of the object.\n"
		""},
	 { (char *)"btkForcePlatformCollection_swigregister", btkForcePlatformCollection_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_btkWrenchCollectionIterator", _wrap_new_btkWrenchCollectionIterator, METH_VARARGS, (char *)"new_btkWrenchCollectionIterator() -> btkWrenchCollectionIterator"},
	 { (char *)"btkWrenchCollectionIterator_incr", _wrap_btkWrenchCollectionIterator_incr, METH_VARARGS, (char *)"btkWrenchCollectionIterator_incr(self)"},
	 { (char *)"btkWrenchCollectionIterator_decr", _wrap_btkWrenchCollectionIterator_decr, METH_VARARGS, (char *)"btkWrenchCollectionIterator_decr(self)"},
	 { (char *)"btkWrenchCollectionIterator_value", _wrap_btkWrenchCollectionIterator_value, METH_VARARGS, (char *)"btkWrenchCollectionIterator_value(self) -> btkWrench"},
	 { (char *)"btkWrenchCollectionIterator___eq__", _wrap_btkWrenchCollectionIterator___eq__, METH_VARARGS, (char *)"btkWrenchCollectionIterator___eq__(self, rhs) -> bool"},
	 { (char *)"btkWrenchCollectionIterator___ne__", _wrap_btkWrenchCollectionIterator___ne__, METH_VARARGS, (char *)"btkWrenchCollectionIterator___ne__(self, rhs) -> bool"},
	 { (char *)"delete_btkWrenchCollectionIterator", _wrap_delete_btkWrenchCollectionIterator, METH_VARARGS, (char *)"delete_btkWrenchCollectionIterator(self)"},
	 { (char *)"btkWrenchCollectionIterator_swigregister", btkWrenchCollectionIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_btkWrenchCollection", _wrap_new_btkWrenchCollection, METH_VARARGS, (char *)"\n"
		"new_btkWrenchCollection() -> btkWrenchCollection\n"
		"\n"
		"\n"
		"Collection of wrenchs stored in a list.\n"
		""},
	 { (char *)"btkWrenchCollection_Clone", _wrap_btkWrenchCollection_Clone, METH_VARARGS, (char *)"\n"
		"btkWrenchCollection_Clone(self) -> btkWrenchCollection\n"
		"\n"
		"Deep copy of the object\n"
		""},
	 { (char *)"btkWrenchCollection___deref__", _wrap_btkWrenchCollection___deref__, METH_VARARGS, (char *)"btkWrenchCollection___deref__(self) -> btkWrenchCollection_impl *"},
	 { (char *)"delete_btkWrenchCollection", _wrap_delete_btkWrenchCollection, METH_VARARGS, (char *)"delete_btkWrenchCollection(self)"},
	 { (char *)"btkWrenchCollection_Begin", _wrap_btkWrenchCollection_Begin, METH_VARARGS, (char *)"\n"
		"Begin(self) -> btkWrenchIterator\n"
		"\n"
		"Returns an iterator to the beginning of the list of items.\n"
		""},
	 { (char *)"btkWrenchCollection_End", _wrap_btkWrenchCollection_End, METH_VARARGS, (char *)"\n"
		"End(self) -> btkWrenchIterator\n"
		"\n"
		"Returns an iterator just past the last item.\n"
		""},
	 { (char *)"btkWrenchCollection_IsEmpty", _wrap_btkWrenchCollection_IsEmpty, METH_VARARGS, (char *)"\n"
		"btkWrenchCollection_IsEmpty(self) -> bool\n"
		"\n"
		"Returns true if the collection is empty.\n"
		""},
	 { (char *)"btkWrenchCollection_GetItemNumber", _wrap_btkWrenchCollection_GetItemNumber, METH_VARARGS, (char *)"\n"
		"btkWrenchCollection_GetItemNumber(self) -> int\n"
		"\n"
		"Returns the number of wrenches\n"
		""},
	 { (char *)"btkWrenchCollection_SetItemNumber", _wrap_btkWrenchCollection_SetItemNumber, METH_VARARGS, (char *)"\n"
		"btkWrenchCollection_SetItemNumber(self, arg3)\n"
		"\n"
		"Sets the number of wrenches\n"
		""},
	 { (char *)"btkWrenchCollection_GetIndexOf", _wrap_btkWrenchCollection_GetIndexOf, METH_VARARGS, (char *)"\n"
		"GetIndexOf(self, int) -> btkWrench\n"
		"\n"
		"Returns the index of the given item.\n"
		""},
	 { (char *)"btkWrenchCollection_GetItem", _wrap_btkWrenchCollection_GetItem, METH_VARARGS, (char *)"\n"
		"GetItem(self, int) -> btkWrench\n"
		"\n"
		"Returns the wrench for the given index.\n"
		""},
	 { (char *)"btkWrenchCollection_InsertItem", _wrap_btkWrenchCollection_InsertItem, METH_VARARGS, (char *)"\n"
		"InsertItem(self, btkWrenchIterator, btkWrench) -> bool\n"
		"InsertItem(self, int, btkWrench) -> bool\n"
		"InsertItem(self, btkWrench) -> bool\n"
		"\n"
		"Inserts a wrench in the list.\n"
		""},
	 { (char *)"btkWrenchCollection_SetItem", _wrap_btkWrenchCollection_SetItem, METH_VARARGS, (char *)"\n"
		"SetItem(self, int) -> btkWrench\n"
		"\n"
		"Sets a wrench.\n"
		""},
	 { (char *)"btkWrenchCollection_RemoveItem", _wrap_btkWrenchCollection_RemoveItem, METH_VARARGS, (char *)"\n"
		"RemoveItem(self, btkWrenchIterator) -> btkWrenchIterator\n"
		"RemoveItem(self, int)\n"
		"\n"
		"Removes a wrench.\n"
		""},
	 { (char *)"btkWrenchCollection_TakeItem", _wrap_btkWrenchCollection_TakeItem, METH_VARARGS, (char *)"\n"
		"TakeItem(self, btkWrenchIterator) -> btkWrench\n"
		"TakeItem(self, int) -> btkWrench\n"
		"\n"
		"Removes a wrench and return it.\n"
		""},
	 { (char *)"btkWrenchCollection_Clear", _wrap_btkWrenchCollection_Clear, METH_VARARGS, (char *)"\n"
		"btkWrenchCollection_Clear(self)\n"
		"\n"
		"Clear the contents of the collection.\n"
		""},
	 { (char *)"btkWrenchCollection_Update", _wrap_btkWrenchCollection_Update, METH_VARARGS, (char *)"\n"
		"btkWrenchCollection_Update(self)\n"
		"\n"
		"Updates the ProcessObject associated with this DataObject.\n"
		""},
	 { (char *)"btkWrenchCollection_GetTimestamp", _wrap_btkWrenchCollection_GetTimestamp, METH_VARARGS, (char *)"\n"
		"btkWrenchCollection_GetTimestamp(self) -> unsigned long\n"
		"\n"
		"Returns the timestamp of the object.\n"
		""},
	 { (char *)"btkWrenchCollection_swigregister", btkWrenchCollection_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_btkIMUCollectionIterator", _wrap_new_btkIMUCollectionIterator, METH_VARARGS, (char *)"new_btkIMUCollectionIterator() -> btkIMUCollectionIterator"},
	 { (char *)"btkIMUCollectionIterator_incr", _wrap_btkIMUCollectionIterator_incr, METH_VARARGS, (char *)"btkIMUCollectionIterator_incr(self)"},
	 { (char *)"btkIMUCollectionIterator_decr", _wrap_btkIMUCollectionIterator_decr, METH_VARARGS, (char *)"btkIMUCollectionIterator_decr(self)"},
	 { (char *)"btkIMUCollectionIterator_value", _wrap_btkIMUCollectionIterator_value, METH_VARARGS, (char *)"btkIMUCollectionIterator_value(self) -> btkIMU"},
	 { (char *)"btkIMUCollectionIterator___eq__", _wrap_btkIMUCollectionIterator___eq__, METH_VARARGS, (char *)"btkIMUCollectionIterator___eq__(self, rhs) -> bool"},
	 { (char *)"btkIMUCollectionIterator___ne__", _wrap_btkIMUCollectionIterator___ne__, METH_VARARGS, (char *)"btkIMUCollectionIterator___ne__(self, rhs) -> bool"},
	 { (char *)"delete_btkIMUCollectionIterator", _wrap_delete_btkIMUCollectionIterator, METH_VARARGS, (char *)"delete_btkIMUCollectionIterator(self)"},
	 { (char *)"btkIMUCollectionIterator_swigregister", btkIMUCollectionIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_btkIMUCollection", _wrap_new_btkIMUCollection, METH_VARARGS, (char *)"\n"
		"new_btkIMUCollection() -> btkIMUCollection\n"
		"\n"
		"\n"
		"Collection of IMUs stored in a list.\n"
		""},
	 { (char *)"btkIMUCollection_Clone", _wrap_btkIMUCollection_Clone, METH_VARARGS, (char *)"\n"
		"btkIMUCollection_Clone(self) -> btkIMUCollection\n"
		"\n"
		"Deep copy of the object\n"
		""},
	 { (char *)"btkIMUCollection___deref__", _wrap_btkIMUCollection___deref__, METH_VARARGS, (char *)"btkIMUCollection___deref__(self) -> btkIMUCollection_impl *"},
	 { (char *)"delete_btkIMUCollection", _wrap_delete_btkIMUCollection, METH_VARARGS, (char *)"delete_btkIMUCollection(self)"},
	 { (char *)"btkIMUCollection_Begin", _wrap_btkIMUCollection_Begin, METH_VARARGS, (char *)"\n"
		"Begin(self) -> btkIMUIterator\n"
		"\n"
		"Returns an iterator to the beginning of the list of items.\n"
		""},
	 { (char *)"btkIMUCollection_End", _wrap_btkIMUCollection_End, METH_VARARGS, (char *)"\n"
		"End(self) -> btkIMUIterator\n"
		"\n"
		"Returns an iterator just past the last item.\n"
		""},
	 { (char *)"btkIMUCollection_IsEmpty", _wrap_btkIMUCollection_IsEmpty, METH_VARARGS, (char *)"\n"
		"btkIMUCollection_IsEmpty(self) -> bool\n"
		"\n"
		"Returns true if the collection is empty.\n"
		""},
	 { (char *)"btkIMUCollection_GetItemNumber", _wrap_btkIMUCollection_GetItemNumber, METH_VARARGS, (char *)"\n"
		"btkIMUCollection_GetItemNumber(self) -> int\n"
		"\n"
		"Returns the number of IMUs\n"
		""},
	 { (char *)"btkIMUCollection_SetItemNumber", _wrap_btkIMUCollection_SetItemNumber, METH_VARARGS, (char *)"\n"
		"btkIMUCollection_SetItemNumber(self, arg3)\n"
		"\n"
		"Sets the number of IMUs\n"
		""},
	 { (char *)"btkIMUCollection_GetIndexOf", _wrap_btkIMUCollection_GetIndexOf, METH_VARARGS, (char *)"\n"
		"GetIndexOf(self, int) -> btkIMU\n"
		"\n"
		"Returns the index of the given item.\n"
		""},
	 { (char *)"btkIMUCollection_GetItem", _wrap_btkIMUCollection_GetItem, METH_VARARGS, (char *)"\n"
		"GetItem(self, int) -> btkIMU\n"
		"\n"
		"Returns the IMU for the given index.\n"
		""},
	 { (char *)"btkIMUCollection_InsertItem", _wrap_btkIMUCollection_InsertItem, METH_VARARGS, (char *)"\n"
		"InsertItem(self, btkIMUIterator, btkIMU) -> bool\n"
		"InsertItem(self, int, btkIMU) -> bool\n"
		"InsertItem(self, btkIMU) -> bool\n"
		"\n"
		"Inserts an IMU in the list.\n"
		""},
	 { (char *)"btkIMUCollection_SetItem", _wrap_btkIMUCollection_SetItem, METH_VARARGS, (char *)"\n"
		"SetItem(self, int) -> btkIMU\n"
		"\n"
		"Sets an IMU.\n"
		""},
	 { (char *)"btkIMUCollection_RemoveItem", _wrap_btkIMUCollection_RemoveItem, METH_VARARGS, (char *)"\n"
		"RemoveItem(self, btkIMUIterator) -> btkIMUIterator\n"
		"RemoveItem(self, int)\n"
		"\n"
		"Removes a IMU.\n"
		""},
	 { (char *)"btkIMUCollection_TakeItem", _wrap_btkIMUCollection_TakeItem, METH_VARARGS, (char *)"\n"
		"TakeItem(self, btkIMUIterator) -> btkIMU\n"
		"TakeItem(self, int) -> btkIMU\n"
		"\n"
		"Removes an IMU and return it.\n"
		""},
	 { (char *)"btkIMUCollection_Clear", _wrap_btkIMUCollection_Clear, METH_VARARGS, (char *)"\n"
		"btkIMUCollection_Clear(self)\n"
		"\n"
		"Clear the contents of the collection.\n"
		""},
	 { (char *)"btkIMUCollection_Update", _wrap_btkIMUCollection_Update, METH_VARARGS, (char *)"\n"
		"btkIMUCollection_Update(self)\n"
		"\n"
		"Updates the ProcessObject associated with this DataObject.\n"
		""},
	 { (char *)"btkIMUCollection_GetTimestamp", _wrap_btkIMUCollection_GetTimestamp, METH_VARARGS, (char *)"\n"
		"btkIMUCollection_GetTimestamp(self) -> unsigned long\n"
		"\n"
		"Returns the timestamp of the object.\n"
		""},
	 { (char *)"btkIMUCollection_swigregister", btkIMUCollection_swigregister, METH_VARARGS, NULL},
	 { (char *)"btkStringArray_iterator", _wrap_btkStringArray_iterator, METH_VARARGS, (char *)"btkStringArray_iterator(self) -> SwigPyIterator"},
	 { (char *)"btkStringArray___nonzero__", _wrap_btkStringArray___nonzero__, METH_VARARGS, (char *)"btkStringArray___nonzero__(self) -> bool"},
	 { (char *)"btkStringArray___bool__", _wrap_btkStringArray___bool__, METH_VARARGS, (char *)"btkStringArray___bool__(self) -> bool"},
	 { (char *)"btkStringArray___len__", _wrap_btkStringArray___len__, METH_VARARGS, (char *)"btkStringArray___len__(self) -> std::vector< std::string >::size_type"},
	 { (char *)"btkStringArray___getslice__", _wrap_btkStringArray___getslice__, METH_VARARGS, (char *)"btkStringArray___getslice__(self, i, j) -> btkStringArray"},
	 { (char *)"btkStringArray___setslice__", _wrap_btkStringArray___setslice__, METH_VARARGS, (char *)"\n"
		"__setslice__(i, j)\n"
		"btkStringArray___setslice__(self, i, j, v)\n"
		""},
	 { (char *)"btkStringArray___delslice__", _wrap_btkStringArray___delslice__, METH_VARARGS, (char *)"btkStringArray___delslice__(self, i, j)"},
	 { (char *)"btkStringArray___delitem__", _wrap_btkStringArray___delitem__, METH_VARARGS, (char *)"\n"
		"__delitem__(i)\n"
		"btkStringArray___delitem__(self, slice)\n"
		""},
	 { (char *)"btkStringArray___getitem__", _wrap_btkStringArray___getitem__, METH_VARARGS, (char *)"\n"
		"__getitem__(slice) -> btkStringArray\n"
		"btkStringArray___getitem__(self, i) -> std::vector< std::string >::value_type const &\n"
		""},
	 { (char *)"btkStringArray___setitem__", _wrap_btkStringArray___setitem__, METH_VARARGS, (char *)"\n"
		"__setitem__(slice, v)\n"
		"__setitem__(slice)\n"
		"btkStringArray___setitem__(self, i, x)\n"
		""},
	 { (char *)"btkStringArray_pop", _wrap_btkStringArray_pop, METH_VARARGS, (char *)"btkStringArray_pop(self) -> std::vector< std::string >::value_type"},
	 { (char *)"btkStringArray_append", _wrap_btkStringArray_append, METH_VARARGS, (char *)"btkStringArray_append(self, x)"},
	 { (char *)"btkStringArray_empty", _wrap_btkStringArray_empty, METH_VARARGS, (char *)"btkStringArray_empty(self) -> bool"},
	 { (char *)"btkStringArray_size", _wrap_btkStringArray_size, METH_VARARGS, (char *)"btkStringArray_size(self) -> std::vector< std::string >::size_type"},
	 { (char *)"btkStringArray_swap", _wrap_btkStringArray_swap, METH_VARARGS, (char *)"btkStringArray_swap(self, v)"},
	 { (char *)"btkStringArray_begin", _wrap_btkStringArray_begin, METH_VARARGS, (char *)"btkStringArray_begin(self) -> std::vector< std::string >::iterator"},
	 { (char *)"btkStringArray_end", _wrap_btkStringArray_end, METH_VARARGS, (char *)"btkStringArray_end(self) -> std::vector< std::string >::iterator"},
	 { (char *)"btkStringArray_rbegin", _wrap_btkStringArray_rbegin, METH_VARARGS, (char *)"btkStringArray_rbegin(self) -> std::vector< std::string >::reverse_iterator"},
	 { (char *)"btkStringArray_rend", _wrap_btkStringArray_rend, METH_VARARGS, (char *)"btkStringArray_rend(self) -> std::vector< std::string >::reverse_iterator"},
	 { (char *)"btkStringArray_clear", _wrap_btkStringArray_clear, METH_VARARGS, (char *)"btkStringArray_clear(self)"},
	 { (char *)"btkStringArray_get_allocator", _wrap_btkStringArray_get_allocator, METH_VARARGS, (char *)"btkStringArray_get_allocator(self) -> std::vector< std::string >::allocator_type"},
	 { (char *)"btkStringArray_pop_back", _wrap_btkStringArray_pop_back, METH_VARARGS, (char *)"btkStringArray_pop_back(self)"},
	 { (char *)"btkStringArray_erase", _wrap_btkStringArray_erase, METH_VARARGS, (char *)"\n"
		"erase(pos) -> std::vector< std::string >::iterator\n"
		"btkStringArray_erase(self, first, last) -> std::vector< std::string >::iterator\n"
		""},
	 { (char *)"new_btkStringArray", _wrap_new_btkStringArray, METH_VARARGS, (char *)"\n"
		"btkStringArray()\n"
		"btkStringArray(arg2)\n"
		"btkStringArray(size)\n"
		"new_btkStringArray(size, value) -> btkStringArray\n"
		""},
	 { (char *)"btkStringArray_push_back", _wrap_btkStringArray_push_back, METH_VARARGS, (char *)"btkStringArray_push_back(self, x)"},
	 { (char *)"btkStringArray_front", _wrap_btkStringArray_front, METH_VARARGS, (char *)"btkStringArray_front(self) -> std::vector< std::string >::value_type const &"},
	 { (char *)"btkStringArray_back", _wrap_btkStringArray_back, METH_VARARGS, (char *)"btkStringArray_back(self) -> std::vector< std::string >::value_type const &"},
	 { (char *)"btkStringArray_assign", _wrap_btkStringArray_assign, METH_VARARGS, (char *)"btkStringArray_assign(self, n, x)"},
	 { (char *)"btkStringArray_resize", _wrap_btkStringArray_resize, METH_VARARGS, (char *)"\n"
		"resize(new_size)\n"
		"btkStringArray_resize(self, new_size, x)\n"
		""},
	 { (char *)"btkStringArray_insert", _wrap_btkStringArray_insert, METH_VARARGS, (char *)"\n"
		"insert(pos, x) -> std::vector< std::string >::iterator\n"
		"btkStringArray_insert(self, pos, n, x)\n"
		""},
	 { (char *)"btkStringArray_reserve", _wrap_btkStringArray_reserve, METH_VARARGS, (char *)"btkStringArray_reserve(self, n)"},
	 { (char *)"btkStringArray_capacity", _wrap_btkStringArray_capacity, METH_VARARGS, (char *)"btkStringArray_capacity(self) -> std::vector< std::string >::size_type"},
	 { (char *)"delete_btkStringArray", _wrap_delete_btkStringArray, METH_VARARGS, (char *)"delete_btkStringArray(self)"},
	 { (char *)"btkStringArray_swigregister", btkStringArray_swigregister, METH_VARARGS, NULL},
	 { (char *)"btkIntArray_iterator", _wrap_btkIntArray_iterator, METH_VARARGS, (char *)"btkIntArray_iterator(self) -> SwigPyIterator"},
	 { (char *)"btkIntArray___nonzero__", _wrap_btkIntArray___nonzero__, METH_VARARGS, (char *)"btkIntArray___nonzero__(self) -> bool"},
	 { (char *)"btkIntArray___bool__", _wrap_btkIntArray___bool__, METH_VARARGS, (char *)"btkIntArray___bool__(self) -> bool"},
	 { (char *)"btkIntArray___len__", _wrap_btkIntArray___len__, METH_VARARGS, (char *)"btkIntArray___len__(self) -> std::vector< int >::size_type"},
	 { (char *)"btkIntArray___getslice__", _wrap_btkIntArray___getslice__, METH_VARARGS, (char *)"btkIntArray___getslice__(self, i, j) -> btkIntArray"},
	 { (char *)"btkIntArray___setslice__", _wrap_btkIntArray___setslice__, METH_VARARGS, (char *)"\n"
		"__setslice__(i, j)\n"
		"btkIntArray___setslice__(self, i, j, v)\n"
		""},
	 { (char *)"btkIntArray___delslice__", _wrap_btkIntArray___delslice__, METH_VARARGS, (char *)"btkIntArray___delslice__(self, i, j)"},
	 { (char *)"btkIntArray___delitem__", _wrap_btkIntArray___delitem__, METH_VARARGS, (char *)"\n"
		"__delitem__(i)\n"
		"btkIntArray___delitem__(self, slice)\n"
		""},
	 { (char *)"btkIntArray___getitem__", _wrap_btkIntArray___getitem__, METH_VARARGS, (char *)"\n"
		"__getitem__(slice) -> btkIntArray\n"
		"btkIntArray___getitem__(self, i) -> std::vector< int >::value_type const &\n"
		""},
	 { (char *)"btkIntArray___setitem__", _wrap_btkIntArray___setitem__, METH_VARARGS, (char *)"\n"
		"__setitem__(slice, v)\n"
		"__setitem__(slice)\n"
		"btkIntArray___setitem__(self, i, x)\n"
		""},
	 { (char *)"btkIntArray_pop", _wrap_btkIntArray_pop, METH_VARARGS, (char *)"btkIntArray_pop(self) -> std::vector< int >::value_type"},
	 { (char *)"btkIntArray_append", _wrap_btkIntArray_append, METH_VARARGS, (char *)"btkIntArray_append(self, x)"},
	 { (char *)"btkIntArray_empty", _wrap_btkIntArray_empty, METH_VARARGS, (char *)"btkIntArray_empty(self) -> bool"},
	 { (char *)"btkIntArray_size", _wrap_btkIntArray_size, METH_VARARGS, (char *)"btkIntArray_size(self) -> std::vector< int >::size_type"},
	 { (char *)"btkIntArray_swap", _wrap_btkIntArray_swap, METH_VARARGS, (char *)"btkIntArray_swap(self, v)"},
	 { (char *)"btkIntArray_begin", _wrap_btkIntArray_begin, METH_VARARGS, (char *)"btkIntArray_begin(self) -> std::vector< int >::iterator"},
	 { (char *)"btkIntArray_end", _wrap_btkIntArray_end, METH_VARARGS, (char *)"btkIntArray_end(self) -> std::vector< int >::iterator"},
	 { (char *)"btkIntArray_rbegin", _wrap_btkIntArray_rbegin, METH_VARARGS, (char *)"btkIntArray_rbegin(self) -> std::vector< int >::reverse_iterator"},
	 { (char *)"btkIntArray_rend", _wrap_btkIntArray_rend, METH_VARARGS, (char *)"btkIntArray_rend(self) -> std::vector< int >::reverse_iterator"},
	 { (char *)"btkIntArray_clear", _wrap_btkIntArray_clear, METH_VARARGS, (char *)"btkIntArray_clear(self)"},
	 { (char *)"btkIntArray_get_allocator", _wrap_btkIntArray_get_allocator, METH_VARARGS, (char *)"btkIntArray_get_allocator(self) -> std::vector< int >::allocator_type"},
	 { (char *)"btkIntArray_pop_back", _wrap_btkIntArray_pop_back, METH_VARARGS, (char *)"btkIntArray_pop_back(self)"},
	 { (char *)"btkIntArray_erase", _wrap_btkIntArray_erase, METH_VARARGS, (char *)"\n"
		"erase(pos) -> std::vector< int >::iterator\n"
		"btkIntArray_erase(self, first, last) -> std::vector< int >::iterator\n"
		""},
	 { (char *)"new_btkIntArray", _wrap_new_btkIntArray, METH_VARARGS, (char *)"\n"
		"btkIntArray()\n"
		"btkIntArray(arg2)\n"
		"btkIntArray(size)\n"
		"new_btkIntArray(size, value) -> btkIntArray\n"
		""},
	 { (char *)"btkIntArray_push_back", _wrap_btkIntArray_push_back, METH_VARARGS, (char *)"btkIntArray_push_back(self, x)"},
	 { (char *)"btkIntArray_front", _wrap_btkIntArray_front, METH_VARARGS, (char *)"btkIntArray_front(self) -> std::vector< int >::value_type const &"},
	 { (char *)"btkIntArray_back", _wrap_btkIntArray_back, METH_VARARGS, (char *)"btkIntArray_back(self) -> std::vector< int >::value_type const &"},
	 { (char *)"btkIntArray_assign", _wrap_btkIntArray_assign, METH_VARARGS, (char *)"btkIntArray_assign(self, n, x)"},
	 { (char *)"btkIntArray_resize", _wrap_btkIntArray_resize, METH_VARARGS, (char *)"\n"
		"resize(new_size)\n"
		"btkIntArray_resize(self, new_size, x)\n"
		""},
	 { (char *)"btkIntArray_insert", _wrap_btkIntArray_insert, METH_VARARGS, (char *)"\n"
		"insert(pos, x) -> std::vector< int >::iterator\n"
		"btkIntArray_insert(self, pos, n, x)\n"
		""},
	 { (char *)"btkIntArray_reserve", _wrap_btkIntArray_reserve, METH_VARARGS, (char *)"btkIntArray_reserve(self, n)"},
	 { (char *)"btkIntArray_capacity", _wrap_btkIntArray_capacity, METH_VARARGS, (char *)"btkIntArray_capacity(self) -> std::vector< int >::size_type"},
	 { (char *)"delete_btkIntArray", _wrap_delete_btkIntArray, METH_VARARGS, (char *)"delete_btkIntArray(self)"},
	 { (char *)"btkIntArray_swigregister", btkIntArray_swigregister, METH_VARARGS, NULL},
	 { (char *)"btkDoubleArray_iterator", _wrap_btkDoubleArray_iterator, METH_VARARGS, (char *)"btkDoubleArray_iterator(self) -> SwigPyIterator"},
	 { (char *)"btkDoubleArray___nonzero__", _wrap_btkDoubleArray___nonzero__, METH_VARARGS, (char *)"btkDoubleArray___nonzero__(self) -> bool"},
	 { (char *)"btkDoubleArray___bool__", _wrap_btkDoubleArray___bool__, METH_VARARGS, (char *)"btkDoubleArray___bool__(self) -> bool"},
	 { (char *)"btkDoubleArray___len__", _wrap_btkDoubleArray___len__, METH_VARARGS, (char *)"btkDoubleArray___len__(self) -> std::vector< double >::size_type"},
	 { (char *)"btkDoubleArray___getslice__", _wrap_btkDoubleArray___getslice__, METH_VARARGS, (char *)"btkDoubleArray___getslice__(self, i, j) -> btkDoubleArray"},
	 { (char *)"btkDoubleArray___setslice__", _wrap_btkDoubleArray___setslice__, METH_VARARGS, (char *)"\n"
		"__setslice__(i, j)\n"
		"btkDoubleArray___setslice__(self, i, j, v)\n"
		""},
	 { (char *)"btkDoubleArray___delslice__", _wrap_btkDoubleArray___delslice__, METH_VARARGS, (char *)"btkDoubleArray___delslice__(self, i, j)"},
	 { (char *)"btkDoubleArray___delitem__", _wrap_btkDoubleArray___delitem__, METH_VARARGS, (char *)"\n"
		"__delitem__(i)\n"
		"btkDoubleArray___delitem__(self, slice)\n"
		""},
	 { (char *)"btkDoubleArray___getitem__", _wrap_btkDoubleArray___getitem__, METH_VARARGS, (char *)"\n"
		"__getitem__(slice) -> btkDoubleArray\n"
		"btkDoubleArray___getitem__(self, i) -> std::vector< double >::value_type const &\n"
		""},
	 { (char *)"btkDoubleArray___setitem__", _wrap_btkDoubleArray___setitem__, METH_VARARGS, (char *)"\n"
		"__setitem__(slice, v)\n"
		"__setitem__(slice)\n"
		"btkDoubleArray___setitem__(self, i, x)\n"
		""},
	 { (char *)"btkDoubleArray_pop", _wrap_btkDoubleArray_pop, METH_VARARGS, (char *)"btkDoubleArray_pop(self) -> std::vector< double >::value_type"},
	 { (char *)"btkDoubleArray_append", _wrap_btkDoubleArray_append, METH_VARARGS, (char *)"btkDoubleArray_append(self, x)"},
	 { (char *)"btkDoubleArray_empty", _wrap_btkDoubleArray_empty, METH_VARARGS, (char *)"btkDoubleArray_empty(self) -> bool"},
	 { (char *)"btkDoubleArray_size", _wrap_btkDoubleArray_size, METH_VARARGS, (char *)"btkDoubleArray_size(self) -> std::vector< double >::size_type"},
	 { (char *)"btkDoubleArray_swap", _wrap_btkDoubleArray_swap, METH_VARARGS, (char *)"btkDoubleArray_swap(self, v)"},
	 { (char *)"btkDoubleArray_begin", _wrap_btkDoubleArray_begin, METH_VARARGS, (char *)"btkDoubleArray_begin(self) -> std::vector< double >::iterator"},
	 { (char *)"btkDoubleArray_end", _wrap_btkDoubleArray_end, METH_VARARGS, (char *)"btkDoubleArray_end(self) -> std::vector< double >::iterator"},
	 { (char *)"btkDoubleArray_rbegin", _wrap_btkDoubleArray_rbegin, METH_VARARGS, (char *)"btkDoubleArray_rbegin(self) -> std::vector< double >::reverse_iterator"},
	 { (char *)"btkDoubleArray_rend", _wrap_btkDoubleArray_rend, METH_VARARGS, (char *)"btkDoubleArray_rend(self) -> std::vector< double >::reverse_iterator"},
	 { (char *)"btkDoubleArray_clear", _wrap_btkDoubleArray_clear, METH_VARARGS, (char *)"btkDoubleArray_clear(self)"},
	 { (char *)"btkDoubleArray_get_allocator", _wrap_btkDoubleArray_get_allocator, METH_VARARGS, (char *)"btkDoubleArray_get_allocator(self) -> std::vector< double >::allocator_type"},
	 { (char *)"btkDoubleArray_pop_back", _wrap_btkDoubleArray_pop_back, METH_VARARGS, (char *)"btkDoubleArray_pop_back(self)"},
	 { (char *)"btkDoubleArray_erase", _wrap_btkDoubleArray_erase, METH_VARARGS, (char *)"\n"
		"erase(pos) -> std::vector< double >::iterator\n"
		"btkDoubleArray_erase(self, first, last) -> std::vector< double >::iterator\n"
		""},
	 { (char *)"new_btkDoubleArray", _wrap_new_btkDoubleArray, METH_VARARGS, (char *)"\n"
		"btkDoubleArray()\n"
		"btkDoubleArray(arg2)\n"
		"btkDoubleArray(size)\n"
		"new_btkDoubleArray(size, value) -> btkDoubleArray\n"
		""},
	 { (char *)"btkDoubleArray_push_back", _wrap_btkDoubleArray_push_back, METH_VARARGS, (char *)"btkDoubleArray_push_back(self, x)"},
	 { (char *)"btkDoubleArray_front", _wrap_btkDoubleArray_front, METH_VARARGS, (char *)"btkDoubleArray_front(self) -> std::vector< double >::value_type const &"},
	 { (char *)"btkDoubleArray_back", _wrap_btkDoubleArray_back, METH_VARARGS, (char *)"btkDoubleArray_back(self) -> std::vector< double >::value_type const &"},
	 { (char *)"btkDoubleArray_assign", _wrap_btkDoubleArray_assign, METH_VARARGS, (char *)"btkDoubleArray_assign(self, n, x)"},
	 { (char *)"btkDoubleArray_resize", _wrap_btkDoubleArray_resize, METH_VARARGS, (char *)"\n"
		"resize(new_size)\n"
		"btkDoubleArray_resize(self, new_size, x)\n"
		""},
	 { (char *)"btkDoubleArray_insert", _wrap_btkDoubleArray_insert, METH_VARARGS, (char *)"\n"
		"insert(pos, x) -> std::vector< double >::iterator\n"
		"btkDoubleArray_insert(self, pos, n, x)\n"
		""},
	 { (char *)"btkDoubleArray_reserve", _wrap_btkDoubleArray_reserve, METH_VARARGS, (char *)"btkDoubleArray_reserve(self, n)"},
	 { (char *)"btkDoubleArray_capacity", _wrap_btkDoubleArray_capacity, METH_VARARGS, (char *)"btkDoubleArray_capacity(self) -> std::vector< double >::size_type"},
	 { (char *)"delete_btkDoubleArray", _wrap_delete_btkDoubleArray, METH_VARARGS, (char *)"delete_btkDoubleArray(self)"},
	 { (char *)"btkDoubleArray_swigregister", btkDoubleArray_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_btkMetaDataInfo", _wrap_new_btkMetaDataInfo, METH_VARARGS, (char *)"\n"
		"btkMetaDataInfo(val)\n"
		"btkMetaDataInfo(val)\n"
		"btkMetaDataInfo(val)\n"
		"btkMetaDataInfo(val)\n"
		"btkMetaDataInfo(val)\n"
		"btkMetaDataInfo(val)\n"
		"btkMetaDataInfo(dim, val)\n"
		"btkMetaDataInfo(dim, val)\n"
		"new_btkMetaDataInfo(dim, val) -> btkMetaDataInfo\n"
		"\n"
		"\n"
		"Container class to store data of a MetaData object.\n"
		"\n"
		"You can store integer value(s), real or string. This class has also methods to convert the native type into other, like integer into string.\n"
		"\n"
		"Even if the data extracted are set as native Python type, the internal type are different and set as:\n"
		" - btk.btkMetaDataInfo.Char: Type for the string;\n"
		" - btk.btkMetaDataInfo.Byte: Signed integer type stored only on 8 bit. Possible values between -127 and 128;\n"
		" - btk.btkMetaDataInfo.Integer: Signed integer type stored only on 16 bit. Possible values between -32767 and 32768;\n"
		" - btk.btkMetaDataInfo.Real: Float type. Precision limited to 1e-5.\n"
		"\n"
		"Note: The format btk.btkMetaDataInfo.Byte cannot be set using the method SetValues() do the impossibility to differentiate an integer. You need to use explicitly the method SetFormat().\n"
		""},
	 { (char *)"btkMetaDataInfo_Clone", _wrap_btkMetaDataInfo_Clone, METH_VARARGS, (char *)"\n"
		"btkMetaDataInfo_Clone(self) -> btkMetaDataInfo\n"
		"\n"
		"Deep copy of the object\n"
		""},
	 { (char *)"btkMetaDataInfo___deref__", _wrap_btkMetaDataInfo___deref__, METH_VARARGS, (char *)"btkMetaDataInfo___deref__(self) -> btkMetaDataInfo_impl *"},
	 { (char *)"btkMetaDataInfo_GetDimension", _wrap_btkMetaDataInfo_GetDimension, METH_VARARGS, (char *)"btkMetaDataInfo_GetDimension(self, idx) -> int"},
	 { (char *)"btkMetaDataInfo_SetDimension", _wrap_btkMetaDataInfo_SetDimension, METH_VARARGS, (char *)"btkMetaDataInfo_SetDimension(self, idx, val)"},
	 { (char *)"btkMetaDataInfo_GetDimensions", _wrap_btkMetaDataInfo_GetDimensions, METH_VARARGS, (char *)"btkMetaDataInfo_GetDimensions(self) -> btkIntArray"},
	 { (char *)"btkMetaDataInfo_SetDimensions", _wrap_btkMetaDataInfo_SetDimensions, METH_VARARGS, (char *)"btkMetaDataInfo_SetDimensions(self, dims)"},
	 { (char *)"btkMetaDataInfo_GetValueNumber", _wrap_btkMetaDataInfo_GetValueNumber, METH_VARARGS, (char *)"btkMetaDataInfo_GetValueNumber(self) -> int"},
	 { (char *)"btkMetaDataInfo_SetValue", _wrap_btkMetaDataInfo_SetValue, METH_VARARGS, (char *)"\n"
		"SetValue(idx, val)\n"
		"SetValue(idx, val)\n"
		"btkMetaDataInfo_SetValue(self, idx, val)\n"
		""},
	 { (char *)"btkMetaDataInfo_SetValues", _wrap_btkMetaDataInfo_SetValues, METH_VARARGS, (char *)"\n"
		"SetValues(val)\n"
		"SetValues(val)\n"
		"SetValues(val)\n"
		"SetValues(val)\n"
		"SetValues(val)\n"
		"SetValues(val)\n"
		"SetValues(dims, val)\n"
		"SetValues(dims, val)\n"
		"btkMetaDataInfo_SetValues(self, dims, val)\n"
		""},
	 { (char *)"btkMetaDataInfo___eq__", _wrap_btkMetaDataInfo___eq__, METH_VARARGS, (char *)"btkMetaDataInfo___eq__(self, rRHS) -> bool"},
	 { (char *)"btkMetaDataInfo___ne__", _wrap_btkMetaDataInfo___ne__, METH_VARARGS, (char *)"btkMetaDataInfo___ne__(self, rRHS) -> bool"},
	 { (char *)"delete_btkMetaDataInfo", _wrap_delete_btkMetaDataInfo, METH_VARARGS, (char *)"delete_btkMetaDataInfo(self)"},
	 { (char *)"btkMetaDataInfo_GetFormat", _wrap_btkMetaDataInfo_GetFormat, METH_VARARGS, (char *)"\n"
		"btkMetaDataInfo_GetFormat(self) -> btkMetaDataInfo_impl::Format\n"
		"\n"
		"Returns the internal format of the values.\n"
		""},
	 { (char *)"btkMetaDataInfo_GetFormatAsString", _wrap_btkMetaDataInfo_GetFormatAsString, METH_VARARGS, (char *)"\n"
		"btkMetaDataInfo_GetFormatAsString(self) -> std::string\n"
		"\n"
		"Returns the format of the values as a string.\n"
		""},
	 { (char *)"btkMetaDataInfo_SetFormat", _wrap_btkMetaDataInfo_SetFormat, METH_VARARGS, (char *)"\n"
		"SetFormat(self, btk.btkMetaDataInfo.Format)\n"
		"\n"
		"Sets the format of the values and adapt the values. This method erases the values and set default values ('0' or a string with white spaces).\n"
		""},
	 { (char *)"btkMetaDataInfo_GetDimensionsProduct", _wrap_btkMetaDataInfo_GetDimensionsProduct, METH_VARARGS, (char *)"\n"
		"GetDimensionsProduct(start=0) -> int\n"
		"btkMetaDataInfo_GetDimensionsProduct(self) -> int\n"
		"\n"
		"Compute the product of the dimensions from the given start index.\n"
		""},
	 { (char *)"btkMetaDataInfo_ResizeDimensions", _wrap_btkMetaDataInfo_ResizeDimensions, METH_VARARGS, (char *)"\n"
		"btkMetaDataInfo_ResizeDimensions(self, nb)\n"
		"\n"
		"Resize the dimensions and adapt the values and their structure. If the number of dimensions is greater, then the new dimensions are equal to 1. If the number of dimensions is lower, then the value are shrunken.\n"
		""},
	 { (char *)"btkMetaDataInfo_ToString", _wrap_btkMetaDataInfo_ToString, METH_VARARGS, (char *)"\n"
		"ToString(idx) -> std::string const\n"
		"btkMetaDataInfo_ToString(self) -> btkStringArray\n"
		"\n"
		"Convert stored value(s) into string(s).\n"
		""},
	 { (char *)"btkMetaDataInfo_ToInt", _wrap_btkMetaDataInfo_ToInt, METH_VARARGS, (char *)"\n"
		"ToInt(idx) -> int\n"
		"btkMetaDataInfo_ToInt(self) -> btkIntArray\n"
		"\n"
		"Convert stored value(s) into integer(s).\n"
		""},
	 { (char *)"btkMetaDataInfo_ToDouble", _wrap_btkMetaDataInfo_ToDouble, METH_VARARGS, (char *)"\n"
		"ToDouble(idx) -> double\n"
		"btkMetaDataInfo_ToDouble(self) -> btkDoubleArray\n"
		"\n"
		"Convert stored value(s) into double(s).\n"
		""},
	 { (char *)"btkMetaDataInfo_swigregister", btkMetaDataInfo_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_btkMetaData", _wrap_new_btkMetaData, METH_VARARGS, (char *)"\n"
		"btkMetaData(label)\n"
		"btkMetaData(label, val, desc, isUnlocked=True)\n"
		"btkMetaData(label, val, desc)\n"
		"btkMetaData(label, val)\n"
		"btkMetaData(label, val, desc, isUnlocked=True)\n"
		"btkMetaData(label, val, desc)\n"
		"btkMetaData(label, val)\n"
		"btkMetaData(label, val, desc, isUnlocked=True)\n"
		"btkMetaData(label, val, desc)\n"
		"btkMetaData(label, val)\n"
		"btkMetaData(label, val, desc, isUnlocked=True)\n"
		"btkMetaData(label, val, desc)\n"
		"btkMetaData(label, val)\n"
		"btkMetaData(label, val, desc, isUnlocked=True)\n"
		"btkMetaData(label, val, desc)\n"
		"btkMetaData(label, val)\n"
		"btkMetaData(label, val, desc, isUnlocked=True)\n"
		"btkMetaData(label, val, desc)\n"
		"btkMetaData(label, val)\n"
		"btkMetaData(label, dim, val, desc, isUnlocked=True)\n"
		"btkMetaData(label, dim, val, desc)\n"
		"btkMetaData(label, dim, val)\n"
		"btkMetaData(label, dim, val, desc, isUnlocked=True)\n"
		"btkMetaData(label, dim, val, desc)\n"
		"btkMetaData(label, dim, val)\n"
		"btkMetaData(label, dim, val, desc, isUnlocked=True)\n"
		"btkMetaData(label, dim, val, desc)\n"
		"new_btkMetaData(label, dim, val) -> btkMetaData\n"
		"\n"
		"\n"
		"Store data which cannot be embedded within timeseries data (calibration matrix, subject informations, ...).\n"
		"\n"
		"Each object can store children metadata. Theoretically, the number of sub-level is infinite. However, the main common use of the metadata is to use 2 levels. This use was introduced in the C3D format.\n"
		"The values in a metadata are stored in a MetaDataInfo object and are accessible using the method GetInfo().\n"
		"\n"
		"The unlock member accessible using the methods GetUnlock() and SetUnlock() doesn't affect the setting of the values, but is used only to inform the user/developer.\n"
		""},
	 { (char *)"btkMetaData_Clone", _wrap_btkMetaData_Clone, METH_VARARGS, (char *)"\n"
		"btkMetaData_Clone(self) -> btkMetaData\n"
		"\n"
		"Deep copy of the object\n"
		""},
	 { (char *)"btkMetaData___deref__", _wrap_btkMetaData___deref__, METH_VARARGS, (char *)"btkMetaData___deref__(self) -> btkMetaData_impl *"},
	 { (char *)"btkMetaData___eq__", _wrap_btkMetaData___eq__, METH_VARARGS, (char *)"btkMetaData___eq__(self, rRHS) -> bool"},
	 { (char *)"btkMetaData___ne__", _wrap_btkMetaData___ne__, METH_VARARGS, (char *)"btkMetaData___ne__(self, rRHS) -> bool"},
	 { (char *)"delete_btkMetaData", _wrap_delete_btkMetaData, METH_VARARGS, (char *)"delete_btkMetaData(self)"},
	 { (char *)"btkMetaData_GetLabel", _wrap_btkMetaData_GetLabel, METH_VARARGS, (char *)"btkMetaData_GetLabel(self) -> std::string const &"},
	 { (char *)"btkMetaData_SetLabel", _wrap_btkMetaData_SetLabel, METH_VARARGS, (char *)"\n"
		"SetLabel(self, string)\n"
		"\n"
		"Sets the label of the entry. If label already exist in the parent's list, then an exception is thrown.\n"
		""},
	 { (char *)"btkMetaData_GetDescription", _wrap_btkMetaData_GetDescription, METH_VARARGS, (char *)"btkMetaData_GetDescription(self) -> std::string const &"},
	 { (char *)"btkMetaData_SetDescription", _wrap_btkMetaData_SetDescription, METH_VARARGS, (char *)"SetDescription(self, string)"},
	 { (char *)"btkMetaData_GetUnlockState", _wrap_btkMetaData_GetUnlockState, METH_VARARGS, (char *)"\n"
		"btkMetaData_GetUnlockState(self) -> bool const\n"
		"\n"
		"Gets the unlock state of the entry.\n"
		""},
	 { (char *)"btkMetaData_SetUnlockState", _wrap_btkMetaData_SetUnlockState, METH_VARARGS, (char *)"\n"
		"btkMetaData_SetUnlockState(self, arg3)\n"
		"\n"
		"Sets the unlock state of the entry.\n"
		""},
	 { (char *)"btkMetaData_GetInfo", _wrap_btkMetaData_GetInfo, METH_VARARGS, (char *)"\n"
		"btkMetaData_GetInfo(self) -> btkMetaDataInfo\n"
		"\n"
		"Gets the btkMetaDataInfo associated to the entry.\n"
		""},
	 { (char *)"btkMetaData_SetInfo", _wrap_btkMetaData_SetInfo, METH_VARARGS, (char *)"\n"
		"btkMetaData_SetInfo(self, arg3)\n"
		"\n"
		"Sets the btkMetaDataInfo associated to the entry.\n"
		""},
	 { (char *)"btkMetaData_HasInfo", _wrap_btkMetaData_HasInfo, METH_VARARGS, (char *)"\n"
		"btkMetaData_HasInfo(self) -> bool\n"
		"\n"
		"Checks if a btkMetaDataInfo is associated with the entry.\n"
		""},
	 { (char *)"btkMetaData_ExtractChildInfo", _wrap_btkMetaData_ExtractChildInfo, METH_VARARGS, (char *)"\n"
		"ExtractChildInfo(self, label, format, numdims, noPossibleEmptyValue = True) -> btkMetaDataInfo\n"
		"ExtractChildInfo(self, label, format, numdims, noPossibleEmptyValue = True) -> btkMetaDataInfo\n"
		"\n"
		"Check if a child exists with the given label and correspond to the given format plus the number of dimensions with or without values (noPossibleEmptyValue). The informations of the metadata are extracted if all the checks are ok. Otherwise, the methods return an empty pointer.\n"
		""},
	 { (char *)"btkMetaData_HasMetaDataAsParent", _wrap_btkMetaData_HasMetaDataAsParent, METH_VARARGS, (char *)"\n"
		"btkMetaData_HasMetaDataAsParent(self) -> bool\n"
		"\n"
		"Checks if this object has a MetaData object as parents.\n"
		""},
	 { (char *)"btkMetaData_Begin", _wrap_btkMetaData_Begin, METH_VARARGS, (char *)"\n"
		"btkMetaData_Begin(self) -> btkMetaDataIterator\n"
		"\n"
		"Returns an iterator to the beginning of the list of children.\n"
		""},
	 { (char *)"btkMetaData_End", _wrap_btkMetaData_End, METH_VARARGS, (char *)"\n"
		"btkMetaData_End(self) -> btkMetaDataIterator\n"
		"\n"
		"Returns an iterator just past the last child.\n"
		""},
	 { (char *)"btkMetaData_GetChild", _wrap_btkMetaData_GetChild, METH_VARARGS, (char *)"\n"
		"GetChild(self, index) -> btkMetaData\n"
		"GetChild(self, index) -> btkMetaData\n"
		"\n"
		"Gets the entry for the given index or label. An exception is thrown is the given input doesn't correspond to any entry.\n"
		""},
	 { (char *)"btkMetaData_AppendChild", _wrap_btkMetaData_AppendChild, METH_VARARGS, (char *)"\n"
		"btkMetaData_AppendChild(self, arg3) -> bool\n"
		"\n"
		"Append the child entry. If entry has a label which already exists in the parent's list, then it is not inserted. Returns True if child has been inserted or False.\n"
		""},
	 { (char *)"btkMetaData_InsertChild", _wrap_btkMetaData_InsertChild, METH_VARARGS, (char *)"\n"
		"InsertChild(self, btkMetaDataIterator, btkMetaData) -> bool\n"
		"InsertChild(self, int, btkMetaData) -> bool\n"
		"\n"
		"Insert the child entry for the given location. If the entry has a label which already exists in the parent's list, then it is not inserted. Returns True if child has been inserted or False.\n"
		""},
	 { (char *)"btkMetaData_SetChild", _wrap_btkMetaData_SetChild, METH_VARARGS, (char *)"\n"
		"SetChild(self, int, btkMetaData)\n"
		"\n"
		"Sets the child entry for the given index\n"
		""},
	 { (char *)"btkMetaData_TakeChild", _wrap_btkMetaData_TakeChild, METH_VARARGS, (char *)"\n"
		"TakeChild(self, btkMetaDataIterator) -> btkMetaData\n"
		"TakeChild(self, int) -> btkMetaData\n"
		"TakeChild(self, string) -> btkMetaData\n"
		"\n"
		"Removes the child entry which has the given index, label or corresponding iterator. If there is no child with the specified label, then an empty pointer is returned.\n"
		""},
	 { (char *)"btkMetaData_RemoveChild", _wrap_btkMetaData_RemoveChild, METH_VARARGS, (char *)"\n"
		"RemoveChild(self, btkMetaDataIterator) -> btkMetaDataIterator\n"
		"RemoveChild(self, int)\n"
		"btkMetaData_RemoveChild(self, arg3)\n"
		"\n"
		"Removes the child entry which has the given index, label or corresponding iterator.\n"
		""},
	 { (char *)"btkMetaData_ClearChildren", _wrap_btkMetaData_ClearChildren, METH_VARARGS, (char *)"\n"
		"btkMetaData_ClearChildren(self)\n"
		"\n"
		"Removes every children.\n"
		""},
	 { (char *)"btkMetaData_HasChildren", _wrap_btkMetaData_HasChildren, METH_VARARGS, (char *)"\n"
		"btkMetaData_HasChildren(self) -> bool\n"
		"\n"
		"Checks if the entry has children \n"
		""},
	 { (char *)"btkMetaData_GetChildNumber", _wrap_btkMetaData_GetChildNumber, METH_VARARGS, (char *)"\n"
		"btkMetaData_GetChildNumber(self) -> int\n"
		"\n"
		"Returns the number of children \n"
		""},
	 { (char *)"btkMetaData_FindChild", _wrap_btkMetaData_FindChild, METH_VARARGS, (char *)"\n"
		"FindChild(self, label) -> btkMetaDataIterator\n"
		"\n"
		"Finds the children which has the given label and return it as an iterator.\n"
		""},
	 { (char *)"btkMetaData_Update", _wrap_btkMetaData_Update, METH_VARARGS, (char *)"\n"
		"btkMetaData_Update(self)\n"
		"\n"
		"Updates the ProcessObject associated with this DataObject.\n"
		""},
	 { (char *)"btkMetaData_GetTimestamp", _wrap_btkMetaData_GetTimestamp, METH_VARARGS, (char *)"\n"
		"btkMetaData_GetTimestamp(self) -> unsigned long\n"
		"\n"
		"Returns the timestamp of the object.\n"
		""},
	 { (char *)"btkMetaData_swigregister", btkMetaData_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_btkMetaDataIterator", _wrap_new_btkMetaDataIterator, METH_VARARGS, (char *)"new_btkMetaDataIterator() -> btkMetaDataIterator"},
	 { (char *)"btkMetaDataIterator_incr", _wrap_btkMetaDataIterator_incr, METH_VARARGS, (char *)"btkMetaDataIterator_incr(self)"},
	 { (char *)"btkMetaDataIterator_decr", _wrap_btkMetaDataIterator_decr, METH_VARARGS, (char *)"btkMetaDataIterator_decr(self)"},
	 { (char *)"btkMetaDataIterator_value", _wrap_btkMetaDataIterator_value, METH_VARARGS, (char *)"btkMetaDataIterator_value(self) -> btkMetaData"},
	 { (char *)"btkMetaDataIterator___eq__", _wrap_btkMetaDataIterator___eq__, METH_VARARGS, (char *)"btkMetaDataIterator___eq__(self, rhs) -> bool"},
	 { (char *)"btkMetaDataIterator___ne__", _wrap_btkMetaDataIterator___ne__, METH_VARARGS, (char *)"btkMetaDataIterator___ne__(self, rhs) -> bool"},
	 { (char *)"delete_btkMetaDataIterator", _wrap_delete_btkMetaDataIterator, METH_VARARGS, (char *)"delete_btkMetaDataIterator(self)"},
	 { (char *)"btkMetaDataIterator_swigregister", btkMetaDataIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"btkMetaDataCreateChild", _wrap_btkMetaDataCreateChild, METH_VARARGS, (char *)"\n"
		"btkMetaDataCreateChild(parent, label) -> btkMetaData\n"
		"btkMetaDataCreateChild(parent , label , int )\n"
		"btkMetaDataCreateChild(parent , label , double )\n"
		"btkMetaDataCreateChild(parent , label , string )\n"
		"btkMetaDataCreateChild(parent , label , btkIntArray)\n"
		"btkMetaDataCreateChild(parent , label , btkDoubleArray)\n"
		"btkMetaDataCreateChild(parent , label , btkStringArray)\n"
		"btkMetaDataCreateChild(parent , label , btkIntArray , numCol)\n"
		"btkMetaDataCreateChild(parent , label , btkDoubleArray , numCol)\n"
		"btkMetaDataCreateChild(parent , label , btkStringArray , numCol)\n"
		"\n"
		"Function to create/set easily a metadata containing a 2D array as value, from a given label into a given parent.\n"
		""},
	 { (char *)"btkMetaDataCollapseChildrenValuesInt", _wrap_btkMetaDataCollapseChildrenValuesInt, METH_VARARGS, (char *)"\n"
		"btkMetaDataCollapseChildrenValuesInt(parent, baselabel, targetFinalSize=-1, blankReplacement=0) -> btkIntArray\n"
		"btkMetaDataCollapseChildrenValuesInt(parent, baselabel, targetFinalSize=-1) -> btkIntArray\n"
		"btkMetaDataCollapseChildrenValuesInt(parent, baselabel) -> btkIntArray\n"
		"\n"
		"Convenient method to extract the values of a metadata as an array of integers.\n"
		"Collapse the parent children entries' values starting with the string 'baselabel' and incrementing (for example: LABELS, LABELS2, LABELS3).\n"
		""},
	 { (char *)"btkMetaDataCollapseChildrenValuesDouble", _wrap_btkMetaDataCollapseChildrenValuesDouble, METH_VARARGS, (char *)"\n"
		"btkMetaDataCollapseChildrenValuesDouble(parent, baselabel, targetFinalSize=-1, blankReplacement=0.0) -> btkDoubleArray\n"
		"btkMetaDataCollapseChildrenValuesDouble(parent, baselabel, targetFinalSize=-1) -> btkDoubleArray\n"
		"btkMetaDataCollapseChildrenValuesDouble(parent, baselabel) -> btkDoubleArray\n"
		"\n"
		"Convenient method to extract the values of a metadata as an array of doubles.\n"
		"Collapse the parent children entries' values starting with the string 'baselabel' and incrementing (for example: LABELS, LABELS2, LABELS3).\n"
		""},
	 { (char *)"btkMetaDataCollapseChildrenValuesString", _wrap_btkMetaDataCollapseChildrenValuesString, METH_VARARGS, (char *)"\n"
		"btkMetaDataCollapseChildrenValuesString(parent, baselabel, targetFinalSize=-1, blankReplacement) -> btkStringArray\n"
		"btkMetaDataCollapseChildrenValuesString(parent, baselabel, targetFinalSize=-1) -> btkStringArray\n"
		"btkMetaDataCollapseChildrenValuesString(parent, baselabel) -> btkStringArray\n"
		"\n"
		"Convenient method to extract the values of a metadata as an array of strings.\n"
		"Collapse the parent children entries' values starting with the string 'baselabel' and incrementing (for example: LABELS, LABELS2, LABELS3).\n"
		""},
	 { (char *)"new_btkAcquisition", _wrap_new_btkAcquisition, METH_VARARGS, (char *)"\n"
		"new_btkAcquisition() -> btkAcquisition\n"
		"\n"
		"\n"
		"Contains the data related to a biomechanical acquisition.\n"
		"\n"
		"A biomechanical acquisition can contains:\n"
		"  - 3D data (makers, points, forces, moments, ...) ;\n"
		"  - analog channels (force platform, emg, ...) ;\n"
		"  - events\n"
		"  - acquisition's setup ;\n"
		"  - subject's informations.\n"
		"\n"
		"By default, the first frame is set to 1, the analog resolution is set to 12-bit, the maximum interpolation gap to 10 frames and the units are:\n"
		" - Marker: millimeters ;\n"
		" - Angle: degrees ;\n"
		" - Force: newtons ;\n"
		" - Moment: millimeter-newtons ;\n"
		" - Power: watts ;\n"
		" - Scalar: millimeters ;\n"
		" - Reaction: (nothing).\n"
		"\n"
		"After the creation of the acquisition, you should use the Init() method to populate the acquisition. \n"
		"\n"
		"The member used for the maximum interpolation gap is only for information and is not used in the acquisition. It could be used later in a filter to fill gap.\n"
		"\n"
		"The analog resolution can be set to the following values:\n"
		" - btk.btkAcquisition.Bit8 ;\n"
		" - btk.btkAcquisition.Bit10 ;\n"
		" - btk.btkAcquisition.Bit12 ;\n"
		" - btk.btkAcquisition.Bit14 ;\n"
		" - btk.btkAcquisition.Bit16.\n"
		""},
	 { (char *)"btkAcquisition_Clone", _wrap_btkAcquisition_Clone, METH_VARARGS, (char *)"\n"
		"btkAcquisition_Clone(self) -> btkAcquisition\n"
		"\n"
		"Deep copy of the object\n"
		""},
	 { (char *)"btkAcquisition___deref__", _wrap_btkAcquisition___deref__, METH_VARARGS, (char *)"btkAcquisition___deref__(self) -> btkAcquisition_impl *"},
	 { (char *)"delete_btkAcquisition", _wrap_delete_btkAcquisition, METH_VARARGS, (char *)"delete_btkAcquisition(self)"},
	 { (char *)"btkAcquisition_BeginMetaData", _wrap_btkAcquisition_BeginMetaData, METH_VARARGS, (char *)"\n"
		"btkAcquisition_BeginMetaData(self) -> btkMetaDataIterator\n"
		"\n"
		"Returns an iterator to the beginning of the list of metadata.\n"
		""},
	 { (char *)"btkAcquisition_EndMetaData", _wrap_btkAcquisition_EndMetaData, METH_VARARGS, (char *)"\n"
		"btkAcquisition_EndMetaData(self) -> btkMetaDataIterator\n"
		"\n"
		"Returns an iterator just past the last metadata.\n"
		""},
	 { (char *)"btkAcquisition_GetMetaData", _wrap_btkAcquisition_GetMetaData, METH_VARARGS, (char *)"\n"
		"btkAcquisition_GetMetaData(self) -> btkMetaData\n"
		"\n"
		"Returns the metadata.\n"
		""},
	 { (char *)"btkAcquisition_SetMetaData", _wrap_btkAcquisition_SetMetaData, METH_VARARGS, (char *)"\n"
		"SetMetaData(self, btkMetaData)\n"
		"\n"
		"Sets the metadata of the acquisition.\n"
		""},
	 { (char *)"btkAcquisition_BeginEvent", _wrap_btkAcquisition_BeginEvent, METH_VARARGS, (char *)"\n"
		"btkAcquisition_BeginEvent(self) -> btkEventCollectionIterator\n"
		"\n"
		"Returns an iterator to the beginning of the list of events.\n"
		""},
	 { (char *)"btkAcquisition_EndEvent", _wrap_btkAcquisition_EndEvent, METH_VARARGS, (char *)"\n"
		"btkAcquisition_EndEvent(self) -> btkEventCollectionIterator\n"
		"\n"
		"Returns a const iterator just past the last event.\n"
		""},
	 { (char *)"btkAcquisition_GetEvent", _wrap_btkAcquisition_GetEvent, METH_VARARGS, (char *)"\n"
		"GetEvent(self, int) -> btkEvent\n"
		"\n"
		"Gets the event at the given index.\n"
		""},
	 { (char *)"btkAcquisition_SetEvent", _wrap_btkAcquisition_SetEvent, METH_VARARGS, (char *)"\n"
		"SetEvent(self, int, btkEvent)\n"
		"\n"
		"Sets the content of event at the given index.\n"
		""},
	 { (char *)"btkAcquisition_GetEvents", _wrap_btkAcquisition_GetEvents, METH_VARARGS, (char *)"\n"
		"btkAcquisition_GetEvents(self) -> btkEventCollection\n"
		"\n"
		"Returns the collection of events.\n"
		""},
	 { (char *)"btkAcquisition_SetEvents", _wrap_btkAcquisition_SetEvents, METH_VARARGS, (char *)"\n"
		"SetEvents(self, btkEventCollection)\n"
		"\n"
		"Sets events for this acquisition.\n"
		""},
	 { (char *)"btkAcquisition_IsEmptyEvent", _wrap_btkAcquisition_IsEmptyEvent, METH_VARARGS, (char *)"\n"
		"btkAcquisition_IsEmptyEvent(self) -> bool\n"
		"\n"
		"Checks if the events' list is empty.\n"
		""},
	 { (char *)"btkAcquisition_GetEventNumber", _wrap_btkAcquisition_GetEventNumber, METH_VARARGS, (char *)"\n"
		"btkAcquisition_GetEventNumber(self) -> int\n"
		"\n"
		"Returns the number of events.\n"
		""},
	 { (char *)"btkAcquisition_SetEventNumber", _wrap_btkAcquisition_SetEventNumber, METH_VARARGS, (char *)"\n"
		"SetEventNumber(self, int)\n"
		"\n"
		"Sets the number of events.\n"
		""},
	 { (char *)"btkAcquisition_ClearEvents", _wrap_btkAcquisition_ClearEvents, METH_VARARGS, (char *)"\n"
		"btkAcquisition_ClearEvents(self)\n"
		"\n"
		"Clear events.\n"
		""},
	 { (char *)"btkAcquisition_FindEvent", _wrap_btkAcquisition_FindEvent, METH_VARARGS, (char *)"\n"
		"FindEvent(self, string) -> btkEventIterator\n"
		"\n"
		"Finds the event with the proposed label and returns the iterator associated with it.\n"
		"If no event has the given label, an iterator pointing to the end of the collection is returned.\n"
		""},
	 { (char *)"btkAcquisition_AppendEvent", _wrap_btkAcquisition_AppendEvent, METH_VARARGS, (char *)"\n"
		"AppendEvent(self, btkEvent)\n"
		"\n"
		"Appends the given event in the acquisition.\n"
		""},
	 { (char *)"btkAcquisition_RemoveEvent", _wrap_btkAcquisition_RemoveEvent, METH_VARARGS, (char *)"\n"
		"RemoveAnalog(self, int)\n"
		"RemoveEvent(self, btkEventCollectionIterator) -> btkEventCollectionIterator\n"
		"\n"
		"Removes the event associated with the given index or the given iterator.\n"
		""},
	 { (char *)"btkAcquisition_BeginPoint", _wrap_btkAcquisition_BeginPoint, METH_VARARGS, (char *)"\n"
		"btkAcquisition_BeginPoint(self) -> btkPointCollectionIterator\n"
		"\n"
		"Returns an iterator to the beginning of the list of points.\n"
		""},
	 { (char *)"btkAcquisition_EndPoint", _wrap_btkAcquisition_EndPoint, METH_VARARGS, (char *)"\n"
		"btkAcquisition_EndPoint(self) -> btkPointCollectionIterator\n"
		"\n"
		"Returns an iterator just past the last point.\n"
		""},
	 { (char *)"btkAcquisition_GetPoint", _wrap_btkAcquisition_GetPoint, METH_VARARGS, (char *)"\n"
		"GetPoint(self, int) -> btkPoint\n"
		"GetPoint(self, string) -> btkPoint\n"
		"\n"
		"Gets the point at the given index or label. If no Point exists, then an exception is thrown.\n"
		""},
	 { (char *)"btkAcquisition_SetPoint", _wrap_btkAcquisition_SetPoint, METH_VARARGS, (char *)"\n"
		"SetPoint(self, int, btkPoint)\n"
		"\n"
		"Sets the content of a point at the given index.\n"
		""},
	 { (char *)"btkAcquisition_GetPoints", _wrap_btkAcquisition_GetPoints, METH_VARARGS, (char *)"\n"
		"btkAcquisition_GetPoints(self) -> btkPointCollection\n"
		"\n"
		"Returns the collection of points.\n"
		""},
	 { (char *)"btkAcquisition_SetPoints", _wrap_btkAcquisition_SetPoints, METH_VARARGS, (char *)"\n"
		"SetPoints(self, btkPointCollection)\n"
		"\n"
		"Sets points for this acquisition.\n"
		""},
	 { (char *)"btkAcquisition_IsEmptyPoint", _wrap_btkAcquisition_IsEmptyPoint, METH_VARARGS, (char *)"\n"
		"btkAcquisition_IsEmptyPoint(self) -> bool\n"
		"\n"
		"Checks if the points' list is empty.\n"
		""},
	 { (char *)"btkAcquisition_GetPointNumber", _wrap_btkAcquisition_GetPointNumber, METH_VARARGS, (char *)"\n"
		"btkAcquisition_GetPointNumber(self) -> int\n"
		"\n"
		"Returns the number of points.\n"
		""},
	 { (char *)"btkAcquisition_SetPointNumber", _wrap_btkAcquisition_SetPointNumber, METH_VARARGS, (char *)"\n"
		"SetPointNumber(self, int)\n"
		"\n"
		"Sets the number of points.\n"
		""},
	 { (char *)"btkAcquisition_ClearPoints", _wrap_btkAcquisition_ClearPoints, METH_VARARGS, (char *)"\n"
		"btkAcquisition_ClearPoints(self)\n"
		"\n"
		"Clear points.\n"
		""},
	 { (char *)"btkAcquisition_FindPoint", _wrap_btkAcquisition_FindPoint, METH_VARARGS, (char *)"\n"
		"FindPoint(self, string) -> btkPointIterator\n"
		"\n"
		"Finds the point with the proposed label and returns the iterator associated with it.\n"
		"If no point has the given label, an iterator pointing to the end of the collection is returned.\n"
		""},
	 { (char *)"btkAcquisition_AppendPoint", _wrap_btkAcquisition_AppendPoint, METH_VARARGS, (char *)"\n"
		"AppendPoint(self, btkPoint)\n"
		"\n"
		"Convenient method to append a point in the acquisition. This method also resizes the frame number of the inserted point if necessary.\n"
		""},
	 { (char *)"btkAcquisition_RemovePoint", _wrap_btkAcquisition_RemovePoint, METH_VARARGS, (char *)"\n"
		"RemovePoint(self, string)\n"
		"RemovePoint(self, int)\n"
		"RemovePoint(self, btkPointCollectionIterator) -> btkPointCollectionIterator\n"
		"\n"
		"Convenient method to delete a point from the acquisition.\n"
		""},
	 { (char *)"btkAcquisition_BeginAnalog", _wrap_btkAcquisition_BeginAnalog, METH_VARARGS, (char *)"\n"
		"btkAcquisition_BeginAnalog(self) -> btkAnalogCollectionIterator\n"
		"\n"
		"Returns an iterator to the beginning of the list of analog channels.\n"
		""},
	 { (char *)"btkAcquisition_EndAnalog", _wrap_btkAcquisition_EndAnalog, METH_VARARGS, (char *)"\n"
		"btkAcquisition_EndAnalog(self) -> btkAnalogCollectionIterator\n"
		"\n"
		"Returns an iterator just past the last analog channel.\n"
		""},
	 { (char *)"btkAcquisition_IsEmptyAnalog", _wrap_btkAcquisition_IsEmptyAnalog, METH_VARARGS, (char *)"\n"
		"btkAcquisition_IsEmptyAnalog(self) -> bool\n"
		"\n"
		"Checks if the analogs' list is empty.\n"
		""},
	 { (char *)"btkAcquisition_GetAnalogNumber", _wrap_btkAcquisition_GetAnalogNumber, METH_VARARGS, (char *)"\n"
		"btkAcquisition_GetAnalogNumber(self) -> int\n"
		"\n"
		"Returns the number of analog channels.\n"
		""},
	 { (char *)"btkAcquisition_SetAnalogNumber", _wrap_btkAcquisition_SetAnalogNumber, METH_VARARGS, (char *)"\n"
		"SetAnalogNumber(self, int)\n"
		"\n"
		"Sets the number of analog channels.\n"
		""},
	 { (char *)"btkAcquisition_GetAnalog", _wrap_btkAcquisition_GetAnalog, METH_VARARGS, (char *)"\n"
		"GetAnalog(self, int) -> btkAnalog\n"
		"GetAnalog(self, string) -> btkAnalog\n"
		"\n"
		"Gets the analog channel at the given index or label. If no Analog exists, then an exception is thrown.\n"
		""},
	 { (char *)"btkAcquisition_SetAnalog", _wrap_btkAcquisition_SetAnalog, METH_VARARGS, (char *)"\n"
		"SetAnalog(self, int, btkAnalog)\n"
		"\n"
		"Sets the analog channel at the given index by the content of the given analog channel.\n"
		""},
	 { (char *)"btkAcquisition_GetAnalogs", _wrap_btkAcquisition_GetAnalogs, METH_VARARGS, (char *)"\n"
		"btkAcquisition_GetAnalogs(self) -> btkAnalogCollection\n"
		"\n"
		"Returns the collection of analog channels.\n"
		""},
	 { (char *)"btkAcquisition_SetAnalogs", _wrap_btkAcquisition_SetAnalogs, METH_VARARGS, (char *)"\n"
		"SetAnalogs(self, btkAnalogCollection)\n"
		"\n"
		"Sets analog channels for this acquisition.\n"
		""},
	 { (char *)"btkAcquisition_ClearAnalogs", _wrap_btkAcquisition_ClearAnalogs, METH_VARARGS, (char *)"\n"
		"btkAcquisition_ClearAnalogs(self)\n"
		"\n"
		"Clear analogs channels.\n"
		""},
	 { (char *)"btkAcquisition_FindAnalog", _wrap_btkAcquisition_FindAnalog, METH_VARARGS, (char *)"\n"
		"FindAnalog(self, string) -> btkAnalogIterator\n"
		"\n"
		"Finds the analog channel with the proposed label and returns the iterator associated with it.\n"
		"If no analog channel has the given label, an iterator pointing to the end of the collection is returned.\n"
		""},
	 { (char *)"btkAcquisition_AppendAnalog", _wrap_btkAcquisition_AppendAnalog, METH_VARARGS, (char *)"\n"
		"AppendAnalog(self, btkAnalog)\n"
		"\n"
		"Append the analog channel ac in the acquisition This method also resizes the frame number of the inserted analog channel if necessary.\n"
		""},
	 { (char *)"btkAcquisition_RemoveAnalog", _wrap_btkAcquisition_RemoveAnalog, METH_VARARGS, (char *)"\n"
		"RemoveAnalog(self, string)\n"
		"RemoveAnalog(self, int)\n"
		"RemoveAnalog(self, btkAnalogCollectionIterator) -> btkAnalogCollectionIterator\n"
		"\n"
		"Convenient method to delete an analog channel from the acquisition.\n"
		""},
	 { (char *)"btkAcquisition_Init", _wrap_btkAcquisition_Init, METH_VARARGS, (char *)"\n"
		"Init(self, pointNumber, frameNumber, analogNumber = 0, , analogSampleNumberPerPointFrame = 1)\n"
		"Init(self, pointNumber, frameNumber, analogNumber = 0)\n"
		"Init(self, pointNumber, frameNumber)\n"
		"\n"
		"Initialize the acquisition with the given number of point which have each the given number of frames.\n"
		"You can set also the number of analog channels and their number of frames corresponds to the given integer factor multiplied by the number of frames for the points.\n"
		"This method label added points and analog channels using the string 'uname*' concatenated with the index of the channel.\n"
		""},
	 { (char *)"btkAcquisition_Resize", _wrap_btkAcquisition_Resize, METH_VARARGS, (char *)"\n"
		"Resize(self, pointNumber, frameNumber, analogNumber = 0, , analogSampleNumberPerPointFrame = 1)\n"
		"Resize(self, pointNumber, frameNumber, analogNumber = 0)\n"
		"Resize(self, pointNumber, frameNumber)\n"
		"\n"
		"Resize the acquisition. Same as the method Init(), but does not label added points and analog channels\n"
		""},
	 { (char *)"btkAcquisition_ResizePointNumber", _wrap_btkAcquisition_ResizePointNumber, METH_VARARGS, (char *)"\n"
		"ResizePointNumber(self, int)\n"
		"\n"
		"Resize the number of points.\n"
		""},
	 { (char *)"btkAcquisition_ResizeAnalogNumber", _wrap_btkAcquisition_ResizeAnalogNumber, METH_VARARGS, (char *)"\n"
		"ResizeAnalogNumber(self, int)\n"
		"\n"
		"Resize the number of analog channels.\n"
		""},
	 { (char *)"btkAcquisition_ResizeFrameNumber", _wrap_btkAcquisition_ResizeFrameNumber, METH_VARARGS, (char *)"\n"
		"ResizeFrameNumber(self, int)\n"
		"\n"
		"Resize the number of frames.\n"
		""},
	 { (char *)"btkAcquisition_ResizeFrameNumberFromEnd", _wrap_btkAcquisition_ResizeFrameNumberFromEnd, METH_VARARGS, (char *)"\n"
		"ResizeFrameNumberFromEnd(self, int)\n"
		"\n"
		"Resize the number of frames by adding new (or removing) frames at the beginning of the acquisition and set automatically the new first frame index.\n"
		""},
	 { (char *)"btkAcquisition_Reset", _wrap_btkAcquisition_Reset, METH_VARARGS, (char *)"\n"
		"btkAcquisition_Reset(self)\n"
		"\n"
		"Resets the acquisition as an empty acquisition.\n"
		"To re-populate this acquisition, you need to re-use the Init() method to set the point and analog number and their frame number.\n"
		""},
	 { (char *)"btkAcquisition_GetDuration", _wrap_btkAcquisition_GetDuration, METH_VARARGS, (char *)"\n"
		"btkAcquisition_GetDuration(self) -> double\n"
		"\n"
		"Returns the duration of the acquisition. The duration is computed as the multiplication of the points' frequency with the points frame number.\n"
		""},
	 { (char *)"btkAcquisition_GetFirstFrame", _wrap_btkAcquisition_GetFirstFrame, METH_VARARGS, (char *)"\n"
		"btkAcquisition_GetFirstFrame(self) -> int\n"
		"\n"
		"Return the first frame index of the acquisition.\n"
		""},
	 { (char *)"btkAcquisition_SetFirstFrame", _wrap_btkAcquisition_SetFirstFrame, METH_VARARGS, (char *)"\n"
		"SetFirstFrame(self, int, adaptEvents)\n"
		"SetFirstFrame(self, int)\n"
		"\n"
		"Sets the first frame index. If the third argument is given and set to true, then events' frame/time will be shifted by the difference between the new first frame and the old one.\n"
		""},
	 { (char *)"btkAcquisition_GetLastFrame", _wrap_btkAcquisition_GetLastFrame, METH_VARARGS, (char *)"\n"
		"btkAcquisition_GetLastFrame(self) -> int\n"
		"\n"
		"Returns the last frame index of the acquisition base on the first frame index and the frame number.\n"
		""},
	 { (char *)"btkAcquisition_GetPointUnit", _wrap_btkAcquisition_GetPointUnit, METH_VARARGS, (char *)"\n"
		"GetPointUnit() -> std::string const\n"
		"btkAcquisition_GetPointUnit(self, arg3) -> std::string const\n"
		"\n"
		"Returns the unit for points which have the given type.\n"
		""},
	 { (char *)"btkAcquisition_SetPointUnit", _wrap_btkAcquisition_SetPointUnit, METH_VARARGS, (char *)"\n"
		"SetPointUnit(units)\n"
		"SetPointUnit()\n"
		"btkAcquisition_SetPointUnit(self, arg3, arg4)\n"
		"\n"
		"Sets the point's unit for the given point's type. The type btk.btkPoint.Reaction cannot have any unit. You cannot set it.\n"
		""},
	 { (char *)"btkAcquisition_GetPointFrameNumber", _wrap_btkAcquisition_GetPointFrameNumber, METH_VARARGS, (char *)"\n"
		"btkAcquisition_GetPointFrameNumber(self) -> int\n"
		"\n"
		"Returns the number of frames for the points.\n"
		""},
	 { (char *)"btkAcquisition_GetPointFrequency", _wrap_btkAcquisition_GetPointFrequency, METH_VARARGS, (char *)"\n"
		"btkAcquisition_GetPointFrequency(self) -> double\n"
		"\n"
		"Returns the point's frequency.\n"
		""},
	 { (char *)"btkAcquisition_SetPointFrequency", _wrap_btkAcquisition_SetPointFrequency, METH_VARARGS, (char *)"\n"
		"SetPointFrequency(self, double)\n"
		"\n"
		"Sets the points sample rate.\n"
		""},
	 { (char *)"btkAcquisition_GetAnalogFrameNumber", _wrap_btkAcquisition_GetAnalogFrameNumber, METH_VARARGS, (char *)"\n"
		"btkAcquisition_GetAnalogFrameNumber(self) -> int\n"
		"\n"
		"Returns the number of frames for the analog channels.\n"
		""},
	 { (char *)"btkAcquisition_GetNumberAnalogSamplePerFrame", _wrap_btkAcquisition_GetNumberAnalogSamplePerFrame, METH_VARARGS, (char *)"\n"
		"btkAcquisition_GetNumberAnalogSamplePerFrame(self) -> int\n"
		"\n"
		"Returns the number of analog sample (acquired by each channel) per point frame.\n"
		""},
	 { (char *)"btkAcquisition_GetAnalogFrequency", _wrap_btkAcquisition_GetAnalogFrequency, METH_VARARGS, (char *)"\n"
		"btkAcquisition_GetAnalogFrequency(self) -> double\n"
		"\n"
		"Returns the analogs sample rate.\n"
		""},
	 { (char *)"btkAcquisition_GetAnalogResolution", _wrap_btkAcquisition_GetAnalogResolution, METH_VARARGS, (char *)"\n"
		"GetAnalogResolution(self) -> btk.btkAcquisition.AnalogResolution\n"
		"\n"
		"Returns the analog resolution.\n"
		""},
	 { (char *)"btkAcquisition_SetAnalogResolution", _wrap_btkAcquisition_SetAnalogResolution, METH_VARARGS, (char *)"\n"
		"SetAnalogResolution(self, btk.btkAcquisition.AnalogResolution)\n"
		"\n"
		"Sets the analog resolution.\n"
		""},
	 { (char *)"btkAcquisition_GetMaxInterpolationGap", _wrap_btkAcquisition_GetMaxInterpolationGap, METH_VARARGS, (char *)"\n"
		"btkAcquisition_GetMaxInterpolationGap(self) -> int\n"
		"\n"
		"Gets the maximum gap length that any interpolation method would fill for the 3D point data.\n"
		"Warning: Only for information. Could be use later by a filter to fill gap 3D trajectories.\n"
		""},
	 { (char *)"btkAcquisition_SetMaxInterpolationGap", _wrap_btkAcquisition_SetMaxInterpolationGap, METH_VARARGS, (char *)"\n"
		"SetMaxInterpolationGap(self, int)\n"
		"\n"
		"Sets the maximum gap length that any interpolation method would fill for the 3D point data.\n"
		"Warning: Only for information. Could be use later by a filter to fill gap 3D trajectories.\n"
		""},
	 { (char *)"btkAcquisition_Update", _wrap_btkAcquisition_Update, METH_VARARGS, (char *)"\n"
		"btkAcquisition_Update(self)\n"
		"\n"
		"Updates the ProcessObject associated with this DataObject.\n"
		""},
	 { (char *)"btkAcquisition_GetTimestamp", _wrap_btkAcquisition_GetTimestamp, METH_VARARGS, (char *)"\n"
		"btkAcquisition_GetTimestamp(self) -> unsigned long\n"
		"\n"
		"Returns the timestamp of the object.\n"
		""},
	 { (char *)"btkAcquisition_swigregister", btkAcquisition_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_btkAcquisitionFileIO", _wrap_new_btkAcquisitionFileIO, METH_VARARGS, (char *)"\n"
		"new_btkAcquisitionFileIO(toCopy) -> btkAcquisitionFileIO\n"
		"\n"
		"\n"
		"Interface to read/write acquisition's files, cannot be instanced.\n"
		""},
	 { (char *)"btkAcquisitionFileIO___deref__", _wrap_btkAcquisitionFileIO___deref__, METH_VARARGS, (char *)"btkAcquisitionFileIO___deref__(self) -> btkAcquisitionFileIO_impl *"},
	 { (char *)"delete_btkAcquisitionFileIO", _wrap_delete_btkAcquisitionFileIO, METH_VARARGS, (char *)"delete_btkAcquisitionFileIO(self)"},
	 { (char *)"btkAcquisitionFileIO_GetFileType", _wrap_btkAcquisitionFileIO_GetFileType, METH_VARARGS, (char *)"\n"
		"btkAcquisitionFileIO_GetFileType(self) -> btkAcquisitionFileIO_impl::FileType\n"
		"\n"
		"Gets the type of the file.\n"
		""},
	 { (char *)"btkAcquisitionFileIO_GetByteOrder", _wrap_btkAcquisitionFileIO_GetByteOrder, METH_VARARGS, (char *)"\n"
		"btkAcquisitionFileIO_GetByteOrder(self) -> btkAcquisitionFileIO_impl::ByteOrder\n"
		"\n"
		"Gets the byte order of the file (only for binary file).\n"
		""},
	 { (char *)"btkAcquisitionFileIO_GetByteOrderAsString", _wrap_btkAcquisitionFileIO_GetByteOrderAsString, METH_VARARGS, (char *)"\n"
		"btkAcquisitionFileIO_GetByteOrderAsString(self) -> std::string\n"
		"\n"
		"Gets the byte order as a string.\n"
		""},
	 { (char *)"btkAcquisitionFileIO_SetByteOrder", _wrap_btkAcquisitionFileIO_SetByteOrder, METH_VARARGS, (char *)"\n"
		"btkAcquisitionFileIO_SetByteOrder(self, b)\n"
		"\n"
		"Sets the byte order of the file.\n"
		""},
	 { (char *)"btkAcquisitionFileIO_GetStorageFormat", _wrap_btkAcquisitionFileIO_GetStorageFormat, METH_VARARGS, (char *)"\n"
		"btkAcquisitionFileIO_GetStorageFormat(self) -> btkAcquisitionFileIO_impl::StorageFormat\n"
		"\n"
		"Return the format used to store points and analog channels.\n"
		""},
	 { (char *)"btkAcquisitionFileIO_GetStorageFormatAsString", _wrap_btkAcquisitionFileIO_GetStorageFormatAsString, METH_VARARGS, (char *)"\n"
		"btkAcquisitionFileIO_GetStorageFormatAsString(self) -> std::string\n"
		"\n"
		"Gets the storage format as a string.\n"
		""},
	 { (char *)"btkAcquisitionFileIO_SetStorageFormat", _wrap_btkAcquisitionFileIO_SetStorageFormat, METH_VARARGS, (char *)"\n"
		"btkAcquisitionFileIO_SetStorageFormat(self, s)\n"
		"\n"
		"Set the format used to store points and analog channels.\n"
		""},
	 { (char *)"btkAcquisitionFileIO_GetInternalsUpdateOptions", _wrap_btkAcquisitionFileIO_GetInternalsUpdateOptions, METH_VARARGS, (char *)"\n"
		"btkAcquisitionFileIO_GetInternalsUpdateOptions(self) -> int\n"
		"\n"
		"Returns the option(s) used to update internals.\n"
		""},
	 { (char *)"btkAcquisitionFileIO_SetInternalsUpdateOptions", _wrap_btkAcquisitionFileIO_SetInternalsUpdateOptions, METH_VARARGS, (char *)"\n"
		"btkAcquisitionFileIO_SetInternalsUpdateOptions(self, options)\n"
		"\n"
		"Sets the option(s) used to update internals.\n"
		""},
	 { (char *)"btkAcquisitionFileIO_HasInternalsUpdateOption", _wrap_btkAcquisitionFileIO_HasInternalsUpdateOption, METH_VARARGS, (char *)"\n"
		"btkAcquisitionFileIO_HasInternalsUpdateOption(self, option) -> bool\n"
		"\n"
		"Returns true if the given @a option is used or false if not.\n"
		""},
	 { (char *)"btkAcquisitionFileIO_CanReadFile", _wrap_btkAcquisitionFileIO_CanReadFile, METH_VARARGS, (char *)"\n"
		"btkAcquisitionFileIO_CanReadFile(self, filename) -> bool\n"
		"\n"
		"Checks if the given filename can be read by this AcquisitionFileIO. This methods should try to read the file header instead to check the file's suffix.\n"
		""},
	 { (char *)"btkAcquisitionFileIO_CanWriteFile", _wrap_btkAcquisitionFileIO_CanWriteFile, METH_VARARGS, (char *)"\n"
		"btkAcquisitionFileIO_CanWriteFile(self, filename) -> bool\n"
		"\n"
		"Checks if the given filename can be write by this AcquisitionFileIO. \n"
		"This method should try to determine if the file's suffix corresponds to one of the supported file's suffixes by this btkAcquisitionFileIO.\n"
		""},
	 { (char *)"btkAcquisitionFileIO_Read", _wrap_btkAcquisitionFileIO_Read, METH_VARARGS, (char *)"\n"
		"btkAcquisitionFileIO_Read(self, filename, output)\n"
		"\n"
		"Read the file designated by the given filename and fill the given btkAcquisition\n"
		""},
	 { (char *)"btkAcquisitionFileIO_Write", _wrap_btkAcquisitionFileIO_Write, METH_VARARGS, (char *)"\n"
		"btkAcquisitionFileIO_Write(self, filename, input)\n"
		"\n"
		"Write the file designated by the given filename with the content of the given btkAcquisition.\n"
		""},
	 { (char *)"btkAcquisitionFileIO_swigregister", btkAcquisitionFileIO_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_btkAcquisitionFileReader", _wrap_new_btkAcquisitionFileReader, METH_VARARGS, (char *)"\n"
		"new_btkAcquisitionFileReader() -> btkAcquisitionFileReader\n"
		"\n"
		"\n"
		"Reader for files which contain acquisition data (C3D, TRC, ...).\n"
		"\n"
		"This class uses a btkAcquisitionFileIO object to read the data from the file corresponding to the given filename.\n"
		"You have two ways to set this object.\n"
		"First, you can set it manually by using the method btkAcquisitionFileReader::SetAcquisitionIO(),\n"
		"Second, the correct object can be detected automatically, by checking in each registered btkAcquisitionFileIO if it can read or not the file.\n"
		"\n"
		"The use of the manual setting should be only used if you want to read a file with a selected file format. To go back to the automatic mode \n"
		"from the manual mode, you only have to use the method btkAcquisitionFileReader::SetAcquisitionIO() without any argument.\n"
		""},
	 { (char *)"btkAcquisitionFileReader___deref__", _wrap_btkAcquisitionFileReader___deref__, METH_VARARGS, (char *)"btkAcquisitionFileReader___deref__(self) -> btkAcquisitionFileReader_impl *"},
	 { (char *)"btkAcquisitionFileReader_GetAcquisitionIO", _wrap_btkAcquisitionFileReader_GetAcquisitionIO, METH_VARARGS, (char *)"\n"
		"btkAcquisitionFileReader_GetAcquisitionIO(self) -> btkAcquisitionFileIO\n"
		"\n"
		"Returns the btkAcquisitionIO used to read the given file.\n"
		""},
	 { (char *)"btkAcquisitionFileReader__reset", _wrap_btkAcquisitionFileReader__reset, METH_VARARGS, (char *)"btkAcquisitionFileReader__reset(self)"},
	 { (char *)"delete_btkAcquisitionFileReader", _wrap_delete_btkAcquisitionFileReader, METH_VARARGS, (char *)"delete_btkAcquisitionFileReader(self)"},
	 { (char *)"btkAcquisitionFileReader_GetOutput", _wrap_btkAcquisitionFileReader_GetOutput, METH_VARARGS, (char *)"\n"
		"btkAcquisitionFileReader_GetOutput(self) -> btkAcquisition\n"
		"\n"
		"Returns the btkAcquisition read from the btkAcquisitionIO helper class.\n"
		""},
	 { (char *)"btkAcquisitionFileReader_GetDisableFilenameExceptionState", _wrap_btkAcquisitionFileReader_GetDisableFilenameExceptionState, METH_VARARGS, (char *)"\n"
		"btkAcquisitionFileReader_GetDisableFilenameExceptionState(self) -> bool\n"
		"\n"
		"Returns state of the disabling of the exception for missing filename.\n"
		""},
	 { (char *)"btkAcquisitionFileReader_SetDisableFilenameExceptionState", _wrap_btkAcquisitionFileReader_SetDisableFilenameExceptionState, METH_VARARGS, (char *)"\n"
		"SetDisableFilenameExceptionState(self, bool)\n"
		"\n"
		"Enable/disable exception for the missing of the filename.\n"
		""},
	 { (char *)"btkAcquisitionFileReader_GetFilename", _wrap_btkAcquisitionFileReader_GetFilename, METH_VARARGS, (char *)"\n"
		"btkAcquisitionFileReader_GetFilename(self) -> std::string const &\n"
		"\n"
		"Gets the filename of the file to read.\n"
		""},
	 { (char *)"btkAcquisitionFileReader_SetFilename", _wrap_btkAcquisitionFileReader_SetFilename, METH_VARARGS, (char *)"\n"
		"SetFilename(self, string)\n"
		"\n"
		"Specifies the file to read. This is forwarded to the IO instance.\n"
		""},
	 { (char *)"btkAcquisitionFileReader_SetAcquisitionIO", _wrap_btkAcquisitionFileReader_SetAcquisitionIO, METH_VARARGS, (char *)"\n"
		"SetAcquisitionIO(io)\n"
		"btkAcquisitionFileReader_SetAcquisitionIO(self)\n"
		"\n"
		"Set the btkAcquisitionIO helper class. This method forces the btkAcquisitionIO to be used to read a particular file.\n"
		"The btkAcquisitionIO is ofently created via the object factory mechanism that determines whether a particular btkAcquisitionIO can read a certain file.\n"
		""},
	 { (char *)"btkAcquisitionFileReader_GetInputNumber", _wrap_btkAcquisitionFileReader_GetInputNumber, METH_VARARGS, (char *)"\n"
		"btkAcquisitionFileReader_GetInputNumber(self) -> int\n"
		"\n"
		"Returns the number of inputs.\n"
		""},
	 { (char *)"btkAcquisitionFileReader_GetValidInputNumber", _wrap_btkAcquisitionFileReader_GetValidInputNumber, METH_VARARGS, (char *)"\n"
		"btkAcquisitionFileReader_GetValidInputNumber(self) -> int\n"
		"\n"
		"Returns the number of inputs which are valid (i.e. not null).\n"
		""},
	 { (char *)"btkAcquisitionFileReader_GetOutputNumber", _wrap_btkAcquisitionFileReader_GetOutputNumber, METH_VARARGS, (char *)"\n"
		"btkAcquisitionFileReader_GetOutputNumber(self) -> int\n"
		"\n"
		"Returns the number of outputs.\n"
		""},
	 { (char *)"btkAcquisitionFileReader_ResetState", _wrap_btkAcquisitionFileReader_ResetState, METH_VARARGS, (char *)"\n"
		"btkAcquisitionFileReader_ResetState(self)\n"
		"\n"
		"Reset the state of the process. Usefull when an exception was thrown during the generation of the data.\n"
		""},
	 { (char *)"btkAcquisitionFileReader_Update", _wrap_btkAcquisitionFileReader_Update, METH_VARARGS, (char *)"\n"
		"btkAcquisitionFileReader_Update(self)\n"
		"\n"
		"Update the pipeline and then all the data inside. Recursive method which\n"
		" 1) determines the processes to update\n"
		" 2) generate the data by using the GenerateData() method.\n"
		""},
	 { (char *)"btkAcquisitionFileReader_GetTimestamp", _wrap_btkAcquisitionFileReader_GetTimestamp, METH_VARARGS, (char *)"\n"
		"btkAcquisitionFileReader_GetTimestamp(self) -> unsigned long\n"
		"\n"
		"Returns the timestamp of the object.\n"
		""},
	 { (char *)"btkAcquisitionFileReader_swigregister", btkAcquisitionFileReader_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_btkAcquisitionFileWriter", _wrap_new_btkAcquisitionFileWriter, METH_VARARGS, (char *)"\n"
		"new_btkAcquisitionFileWriter() -> btkAcquisitionFileWriter\n"
		"\n"
		"\n"
		"Writer of acquisition data into acquisition file (C3D, TRC, ...).\n"
		""},
	 { (char *)"btkAcquisitionFileWriter___deref__", _wrap_btkAcquisitionFileWriter___deref__, METH_VARARGS, (char *)"btkAcquisitionFileWriter___deref__(self) -> btkAcquisitionFileWriter_impl *"},
	 { (char *)"btkAcquisitionFileWriter_GetAcquisitionIO", _wrap_btkAcquisitionFileWriter_GetAcquisitionIO, METH_VARARGS, (char *)"\n"
		"btkAcquisitionFileWriter_GetAcquisitionIO(self) -> btkAcquisitionFileIO\n"
		"\n"
		"Returns the btkAcquisitionIO used to write the given acquisition\n"
		""},
	 { (char *)"delete_btkAcquisitionFileWriter", _wrap_delete_btkAcquisitionFileWriter, METH_VARARGS, (char *)"delete_btkAcquisitionFileWriter(self)"},
	 { (char *)"btkAcquisitionFileWriter_GetInput", _wrap_btkAcquisitionFileWriter_GetInput, METH_VARARGS, (char *)"\n"
		"btkAcquisitionFileWriter_GetInput(self) -> btkAcquisition\n"
		"\n"
		"Returns the btkAcquisition to write by a btkAcquisitionIO helper class\n"
		""},
	 { (char *)"btkAcquisitionFileWriter_SetInput", _wrap_btkAcquisitionFileWriter_SetInput, METH_VARARGS, (char *)"\n"
		"btkAcquisitionFileWriter_SetInput(self, arg3)\n"
		"\n"
		"Sets the btkAcquisition to write by a btkAcquisitionIO helper class\n"
		""},
	 { (char *)"btkAcquisitionFileWriter_GetFilename", _wrap_btkAcquisitionFileWriter_GetFilename, METH_VARARGS, (char *)"\n"
		"btkAcquisitionFileWriter_GetFilename(self) -> std::string const &\n"
		"\n"
		"Gets the filename of the file to write.\n"
		""},
	 { (char *)"btkAcquisitionFileWriter_SetFilename", _wrap_btkAcquisitionFileWriter_SetFilename, METH_VARARGS, (char *)"\n"
		"btkAcquisitionFileWriter_SetFilename(self, arg3)\n"
		"\n"
		"Specifies the file to write. This is forwarded to the IO instance.\n"
		""},
	 { (char *)"btkAcquisitionFileWriter_SetAcquisitionIO", _wrap_btkAcquisitionFileWriter_SetAcquisitionIO, METH_VARARGS, (char *)"\n"
		"SetAcquisitionIO(io)\n"
		"btkAcquisitionFileWriter_SetAcquisitionIO(self)\n"
		"\n"
		"Set the btkAcquisitionIO helper class. This method forces the btkAcquisitionIO to be used to write a particular file.\n"
		"The btkAcquisitionIO is ofently created via the object factory mechanism that determines whether a particular btkAcquisitionIO can write a certain file\n"
		""},
	 { (char *)"btkAcquisitionFileWriter_GetInputNumber", _wrap_btkAcquisitionFileWriter_GetInputNumber, METH_VARARGS, (char *)"\n"
		"btkAcquisitionFileWriter_GetInputNumber(self) -> int\n"
		"\n"
		"Returns the number of inputs.\n"
		""},
	 { (char *)"btkAcquisitionFileWriter_GetValidInputNumber", _wrap_btkAcquisitionFileWriter_GetValidInputNumber, METH_VARARGS, (char *)"\n"
		"btkAcquisitionFileWriter_GetValidInputNumber(self) -> int\n"
		"\n"
		"Returns the number of inputs which are valid (i.e. not null).\n"
		""},
	 { (char *)"btkAcquisitionFileWriter_GetOutputNumber", _wrap_btkAcquisitionFileWriter_GetOutputNumber, METH_VARARGS, (char *)"\n"
		"btkAcquisitionFileWriter_GetOutputNumber(self) -> int\n"
		"\n"
		"Returns the number of outputs.\n"
		""},
	 { (char *)"btkAcquisitionFileWriter_ResetState", _wrap_btkAcquisitionFileWriter_ResetState, METH_VARARGS, (char *)"\n"
		"btkAcquisitionFileWriter_ResetState(self)\n"
		"\n"
		"Reset the state of the process. Usefull when an exception was thrown during the generation of the data.\n"
		""},
	 { (char *)"btkAcquisitionFileWriter_Update", _wrap_btkAcquisitionFileWriter_Update, METH_VARARGS, (char *)"\n"
		"btkAcquisitionFileWriter_Update(self)\n"
		"\n"
		"Update the pipeline and then all the data inside. Recursive method which\n"
		" 1) determines the processes to update\n"
		" 2) generate the data by using the GenerateData() method.\n"
		""},
	 { (char *)"btkAcquisitionFileWriter_GetTimestamp", _wrap_btkAcquisitionFileWriter_GetTimestamp, METH_VARARGS, (char *)"\n"
		"btkAcquisitionFileWriter_GetTimestamp(self) -> unsigned long\n"
		"\n"
		"Returns the timestamp of the object.\n"
		""},
	 { (char *)"btkAcquisitionFileWriter_swigregister", btkAcquisitionFileWriter_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_btkC3DFileIO", _wrap_new_btkC3DFileIO, METH_VARARGS, (char *)"\n"
		"btkC3DFileIO()\n"
		"new_btkC3DFileIO(toCopy) -> btkC3DFileIO\n"
		"\n"
		"\n"
		"Interface to read/write C3D files.\n"
		"\n"
		"All the informations related to the acquisition are stored in the output object.\n"
		"Few data, like the byte order, the points' scale, the analog universal scale, the integer analog storage format are \n"
		"available as member of this class. These informations are extracted when a C3D file is read or can be \n"
		"filled/modified to write a new C3D file. All these members can be accessed or modified using dedicated methods.\n"
		"\n"
		"Compared to the C3DServer API, all the data in BTK extracted from a C3D file are already scaled and available in the \n"
		"children of the output Acquisition. You don't need to access to the groups/parameters for that. However, if you have \n"
		"some custom parameters, then you can access them from the metadata stored in the output Acquisition using the method \n"
		"btkAcquisition::GetMetadata().\n"
		"\n"
		"Moreover, there are several options to create a C3D file from an acquisition:\n"
		" - DataBasedUpdate;\n"
		" - MetaDataBasedUpdate;\n"
		" - CompatibleVicon.\n"
		"\n"
		"By default, the writer is set with the options ScalesFromDataUpdate, MetaDataFromDataUpdate and CompatibleVicon.\n"
		"These options give you the possibility to create a C3D file from any kind of acquisition (created from raw or extracted from another file format).\n"
		"\n"
		"To write a C3D file with a given processor architecture (called byte order in BTK), you have to use the method btkC3DFileIO::SetByteOrder().\n"
		"\n"
		"For more informations on this file's format: http:://www.c3d.org\n"
		""},
	 { (char *)"btkC3DFileIO___deref__", _wrap_btkC3DFileIO___deref__, METH_VARARGS, (char *)"btkC3DFileIO___deref__(self) -> btkC3DFileIO_impl *"},
	 { (char *)"delete_btkC3DFileIO", _wrap_delete_btkC3DFileIO, METH_VARARGS, (char *)"delete_btkC3DFileIO(self)"},
	 { (char *)"btkC3DFileIO_GetPointScale", _wrap_btkC3DFileIO_GetPointScale, METH_VARARGS, (char *)"\n"
		"btkC3DFileIO_GetPointScale(self) -> double\n"
		"\n"
		"Returns the scale for the points obtains from the POINT:SCALE parameter or from its determination for a created acquisition.\n"
		""},
	 { (char *)"btkC3DFileIO_SetPointScale", _wrap_btkC3DFileIO_SetPointScale, METH_VARARGS, (char *)"\n"
		"btkC3DFileIO_SetPointScale(self, arg3)\n"
		"\n"
		"Sets the scale for the points.\n"
		""},
	 { (char *)"btkC3DFileIO_GetAnalogIntegerFormat", _wrap_btkC3DFileIO_GetAnalogIntegerFormat, METH_VARARGS, (char *)"\n"
		"btkC3DFileIO_GetAnalogIntegerFormat(self) -> btkC3DFileIO_impl::AnalogIntegerFormat\n"
		"\n"
		"Return the integer format (signed/unsigned).\n"
		""},
	 { (char *)"btkC3DFileIO_SetAnalogIntegerFormat", _wrap_btkC3DFileIO_SetAnalogIntegerFormat, METH_VARARGS, (char *)"\n"
		"btkC3DFileIO_SetAnalogIntegerFormat(self, arg3)\n"
		"\n"
		"Sets the integer format used to store analog channels data.\n"
		""},
	 { (char *)"btkC3DFileIO_GetAnalogChannelScale", _wrap_btkC3DFileIO_GetAnalogChannelScale, METH_VARARGS, (char *)"\n"
		"btkC3DFileIO_GetAnalogChannelScale(self) -> btkDoubleArray\n"
		"\n"
		"Returns the vector of scales used for the analog channels' scaling (parameter ANALOG:SCALE).\n"
		""},
	 { (char *)"btkC3DFileIO_SetAnalogChannelScale", _wrap_btkC3DFileIO_SetAnalogChannelScale, METH_VARARGS, (char *)"\n"
		"btkC3DFileIO_SetAnalogChannelScale(self, arg3)\n"
		"\n"
		"Sets the vector of scales used for the analog channels' scaling.\n"
		""},
	 { (char *)"btkC3DFileIO_GetAnalogZeroOffset", _wrap_btkC3DFileIO_GetAnalogZeroOffset, METH_VARARGS, (char *)"\n"
		"btkC3DFileIO_GetAnalogZeroOffset(self) -> btkDoubleArray\n"
		"\n"
		"Returns the vector of offsets used for the analog channels' scaling (parameter ANALOG:OFFSET).\n"
		""},
	 { (char *)"btkC3DFileIO_SetAnalogZeroOffset", _wrap_btkC3DFileIO_SetAnalogZeroOffset, METH_VARARGS, (char *)"\n"
		"btkC3DFileIO_SetAnalogZeroOffset(self, arg3)\n"
		"\n"
		"Sets the vector of offsets used for the analog channels' scaling.\n"
		""},
	 { (char *)"btkC3DFileIO_GetAnalogUniversalScale", _wrap_btkC3DFileIO_GetAnalogUniversalScale, METH_VARARGS, (char *)"\n"
		"btkC3DFileIO_GetAnalogUniversalScale(self) -> double\n"
		"\n"
		"Returns the universal scale factor used to scale analog channels (parameter ANALOG:GEN_SCALE).\n"
		""},
	 { (char *)"btkC3DFileIO_SetAnalogUniversalScale", _wrap_btkC3DFileIO_SetAnalogUniversalScale, METH_VARARGS, (char *)"\n"
		"btkC3DFileIO_SetAnalogUniversalScale(self, arg3)\n"
		"\n"
		"Sets Returns the universal scale factor used to scale analog channels.\n"
		""},
	 { (char *)"btkC3DFileIO_GetFileType", _wrap_btkC3DFileIO_GetFileType, METH_VARARGS, (char *)"\n"
		"btkC3DFileIO_GetFileType(self) -> btkAcquisitionFileIO_impl::FileType\n"
		"\n"
		"Gets the type of the file.\n"
		""},
	 { (char *)"btkC3DFileIO_GetByteOrder", _wrap_btkC3DFileIO_GetByteOrder, METH_VARARGS, (char *)"\n"
		"btkC3DFileIO_GetByteOrder(self) -> btkAcquisitionFileIO_impl::ByteOrder\n"
		"\n"
		"Gets the byte order of the file (only for binary file).\n"
		""},
	 { (char *)"btkC3DFileIO_GetByteOrderAsString", _wrap_btkC3DFileIO_GetByteOrderAsString, METH_VARARGS, (char *)"\n"
		"btkC3DFileIO_GetByteOrderAsString(self) -> std::string\n"
		"\n"
		"Gets the byte order as a string.\n"
		""},
	 { (char *)"btkC3DFileIO_SetByteOrder", _wrap_btkC3DFileIO_SetByteOrder, METH_VARARGS, (char *)"\n"
		"btkC3DFileIO_SetByteOrder(self, b)\n"
		"\n"
		"Sets the byte order of the file.\n"
		""},
	 { (char *)"btkC3DFileIO_GetStorageFormat", _wrap_btkC3DFileIO_GetStorageFormat, METH_VARARGS, (char *)"\n"
		"btkC3DFileIO_GetStorageFormat(self) -> btkAcquisitionFileIO_impl::StorageFormat\n"
		"\n"
		"Return the format used to store points and analog channels.\n"
		""},
	 { (char *)"btkC3DFileIO_GetStorageFormatAsString", _wrap_btkC3DFileIO_GetStorageFormatAsString, METH_VARARGS, (char *)"\n"
		"btkC3DFileIO_GetStorageFormatAsString(self) -> std::string\n"
		"\n"
		"Gets the storage format as a string.\n"
		""},
	 { (char *)"btkC3DFileIO_SetStorageFormat", _wrap_btkC3DFileIO_SetStorageFormat, METH_VARARGS, (char *)"\n"
		"btkC3DFileIO_SetStorageFormat(self, s)\n"
		"\n"
		"Set the format used to store points and analog channels.\n"
		""},
	 { (char *)"btkC3DFileIO_GetInternalsUpdateOptions", _wrap_btkC3DFileIO_GetInternalsUpdateOptions, METH_VARARGS, (char *)"\n"
		"btkC3DFileIO_GetInternalsUpdateOptions(self) -> int\n"
		"\n"
		"Returns the option(s) used to update internals.\n"
		""},
	 { (char *)"btkC3DFileIO_SetInternalsUpdateOptions", _wrap_btkC3DFileIO_SetInternalsUpdateOptions, METH_VARARGS, (char *)"\n"
		"btkC3DFileIO_SetInternalsUpdateOptions(self, options)\n"
		"\n"
		"Sets the option(s) used to update internals.\n"
		""},
	 { (char *)"btkC3DFileIO_HasInternalsUpdateOption", _wrap_btkC3DFileIO_HasInternalsUpdateOption, METH_VARARGS, (char *)"\n"
		"btkC3DFileIO_HasInternalsUpdateOption(self, option) -> bool\n"
		"\n"
		"Returns true if the given @a option is used or false if not.\n"
		""},
	 { (char *)"btkC3DFileIO_CanReadFile", _wrap_btkC3DFileIO_CanReadFile, METH_VARARGS, (char *)"\n"
		"btkC3DFileIO_CanReadFile(self, filename) -> bool\n"
		"\n"
		"Checks if the given filename can be read by this AcquisitionFileIO. This methods should try to read the file header instead to check the file's suffix.\n"
		""},
	 { (char *)"btkC3DFileIO_CanWriteFile", _wrap_btkC3DFileIO_CanWriteFile, METH_VARARGS, (char *)"\n"
		"btkC3DFileIO_CanWriteFile(self, filename) -> bool\n"
		"\n"
		"Checks if the given filename can be write by this AcquisitionFileIO. \n"
		"This method should try to determine if the file's suffix corresponds to one of the supported file's suffixes by this btkAcquisitionFileIO.\n"
		""},
	 { (char *)"btkC3DFileIO_Read", _wrap_btkC3DFileIO_Read, METH_VARARGS, (char *)"\n"
		"btkC3DFileIO_Read(self, filename, output)\n"
		"\n"
		"Read the file designated by the given filename and fill the given btkAcquisition\n"
		""},
	 { (char *)"btkC3DFileIO_Write", _wrap_btkC3DFileIO_Write, METH_VARARGS, (char *)"\n"
		"btkC3DFileIO_Write(self, filename, input)\n"
		"\n"
		"Write the file designated by the given filename with the content of the given btkAcquisition.\n"
		""},
	 { (char *)"btkC3DFileIO_swigregister", btkC3DFileIO_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_btkANBFileIO", _wrap_new_btkANBFileIO, METH_VARARGS, (char *)"\n"
		"btkANBFileIO()\n"
		"new_btkANBFileIO(toCopy) -> btkANBFileIO\n"
		"\n"
		"\n"
		"Interface to read/write ANB files (Motion Analysis Corp.).\n"
		""},
	 { (char *)"btkANBFileIO___deref__", _wrap_btkANBFileIO___deref__, METH_VARARGS, (char *)"btkANBFileIO___deref__(self) -> btkANBFileIO_impl *"},
	 { (char *)"delete_btkANBFileIO", _wrap_delete_btkANBFileIO, METH_VARARGS, (char *)"delete_btkANBFileIO(self)"},
	 { (char *)"btkANBFileIO_GetFileType", _wrap_btkANBFileIO_GetFileType, METH_VARARGS, (char *)"\n"
		"btkANBFileIO_GetFileType(self) -> btkAcquisitionFileIO_impl::FileType\n"
		"\n"
		"Gets the type of the file.\n"
		""},
	 { (char *)"btkANBFileIO_GetByteOrder", _wrap_btkANBFileIO_GetByteOrder, METH_VARARGS, (char *)"\n"
		"btkANBFileIO_GetByteOrder(self) -> btkAcquisitionFileIO_impl::ByteOrder\n"
		"\n"
		"Gets the byte order of the file (only for binary file).\n"
		""},
	 { (char *)"btkANBFileIO_GetByteOrderAsString", _wrap_btkANBFileIO_GetByteOrderAsString, METH_VARARGS, (char *)"\n"
		"btkANBFileIO_GetByteOrderAsString(self) -> std::string\n"
		"\n"
		"Gets the byte order as a string.\n"
		""},
	 { (char *)"btkANBFileIO_SetByteOrder", _wrap_btkANBFileIO_SetByteOrder, METH_VARARGS, (char *)"\n"
		"btkANBFileIO_SetByteOrder(self, b)\n"
		"\n"
		"Sets the byte order of the file.\n"
		""},
	 { (char *)"btkANBFileIO_GetStorageFormat", _wrap_btkANBFileIO_GetStorageFormat, METH_VARARGS, (char *)"\n"
		"btkANBFileIO_GetStorageFormat(self) -> btkAcquisitionFileIO_impl::StorageFormat\n"
		"\n"
		"Return the format used to store points and analog channels.\n"
		""},
	 { (char *)"btkANBFileIO_GetStorageFormatAsString", _wrap_btkANBFileIO_GetStorageFormatAsString, METH_VARARGS, (char *)"\n"
		"btkANBFileIO_GetStorageFormatAsString(self) -> std::string\n"
		"\n"
		"Gets the storage format as a string.\n"
		""},
	 { (char *)"btkANBFileIO_SetStorageFormat", _wrap_btkANBFileIO_SetStorageFormat, METH_VARARGS, (char *)"\n"
		"btkANBFileIO_SetStorageFormat(self, s)\n"
		"\n"
		"Set the format used to store points and analog channels.\n"
		""},
	 { (char *)"btkANBFileIO_GetInternalsUpdateOptions", _wrap_btkANBFileIO_GetInternalsUpdateOptions, METH_VARARGS, (char *)"\n"
		"btkANBFileIO_GetInternalsUpdateOptions(self) -> int\n"
		"\n"
		"Returns the option(s) used to update internals.\n"
		""},
	 { (char *)"btkANBFileIO_SetInternalsUpdateOptions", _wrap_btkANBFileIO_SetInternalsUpdateOptions, METH_VARARGS, (char *)"\n"
		"btkANBFileIO_SetInternalsUpdateOptions(self, options)\n"
		"\n"
		"Sets the option(s) used to update internals.\n"
		""},
	 { (char *)"btkANBFileIO_HasInternalsUpdateOption", _wrap_btkANBFileIO_HasInternalsUpdateOption, METH_VARARGS, (char *)"\n"
		"btkANBFileIO_HasInternalsUpdateOption(self, option) -> bool\n"
		"\n"
		"Returns true if the given @a option is used or false if not.\n"
		""},
	 { (char *)"btkANBFileIO_CanReadFile", _wrap_btkANBFileIO_CanReadFile, METH_VARARGS, (char *)"\n"
		"btkANBFileIO_CanReadFile(self, filename) -> bool\n"
		"\n"
		"Checks if the given filename can be read by this AcquisitionFileIO. This methods should try to read the file header instead to check the file's suffix.\n"
		""},
	 { (char *)"btkANBFileIO_CanWriteFile", _wrap_btkANBFileIO_CanWriteFile, METH_VARARGS, (char *)"\n"
		"btkANBFileIO_CanWriteFile(self, filename) -> bool\n"
		"\n"
		"Checks if the given filename can be write by this AcquisitionFileIO. \n"
		"This method should try to determine if the file's suffix corresponds to one of the supported file's suffixes by this btkAcquisitionFileIO.\n"
		""},
	 { (char *)"btkANBFileIO_Read", _wrap_btkANBFileIO_Read, METH_VARARGS, (char *)"\n"
		"btkANBFileIO_Read(self, filename, output)\n"
		"\n"
		"Read the file designated by the given filename and fill the given btkAcquisition\n"
		""},
	 { (char *)"btkANBFileIO_Write", _wrap_btkANBFileIO_Write, METH_VARARGS, (char *)"\n"
		"btkANBFileIO_Write(self, filename, input)\n"
		"\n"
		"Write the file designated by the given filename with the content of the given btkAcquisition.\n"
		""},
	 { (char *)"btkANBFileIO_swigregister", btkANBFileIO_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_btkANCFileIO", _wrap_new_btkANCFileIO, METH_VARARGS, (char *)"\n"
		"btkANCFileIO()\n"
		"new_btkANCFileIO(toCopy) -> btkANCFileIO\n"
		"\n"
		"\n"
		"Interface to read/write ANC files (Motion Analysis Corp.).\n"
		""},
	 { (char *)"btkANCFileIO___deref__", _wrap_btkANCFileIO___deref__, METH_VARARGS, (char *)"btkANCFileIO___deref__(self) -> btkANCFileIO_impl *"},
	 { (char *)"delete_btkANCFileIO", _wrap_delete_btkANCFileIO, METH_VARARGS, (char *)"delete_btkANCFileIO(self)"},
	 { (char *)"btkANCFileIO_GetFileGeneration", _wrap_btkANCFileIO_GetFileGeneration, METH_VARARGS, (char *)"\n"
		"btkANCFileIO_GetFileGeneration(self) -> int\n"
		"\n"
		"Returns the generation of the ANC file.\n"
		""},
	 { (char *)"btkANCFileIO_SetFileGeneration", _wrap_btkANCFileIO_SetFileGeneration, METH_VARARGS, (char *)"\n"
		"btkANCFileIO_SetFileGeneration(self, gen)\n"
		"\n"
		"Set the generation of the ANC file.\n"
		""},
	 { (char *)"btkANCFileIO_GetFileType", _wrap_btkANCFileIO_GetFileType, METH_VARARGS, (char *)"\n"
		"btkANCFileIO_GetFileType(self) -> btkAcquisitionFileIO_impl::FileType\n"
		"\n"
		"Gets the type of the file.\n"
		""},
	 { (char *)"btkANCFileIO_GetByteOrder", _wrap_btkANCFileIO_GetByteOrder, METH_VARARGS, (char *)"\n"
		"btkANCFileIO_GetByteOrder(self) -> btkAcquisitionFileIO_impl::ByteOrder\n"
		"\n"
		"Gets the byte order of the file (only for binary file).\n"
		""},
	 { (char *)"btkANCFileIO_GetByteOrderAsString", _wrap_btkANCFileIO_GetByteOrderAsString, METH_VARARGS, (char *)"\n"
		"btkANCFileIO_GetByteOrderAsString(self) -> std::string\n"
		"\n"
		"Gets the byte order as a string.\n"
		""},
	 { (char *)"btkANCFileIO_SetByteOrder", _wrap_btkANCFileIO_SetByteOrder, METH_VARARGS, (char *)"\n"
		"btkANCFileIO_SetByteOrder(self, b)\n"
		"\n"
		"Sets the byte order of the file.\n"
		""},
	 { (char *)"btkANCFileIO_GetStorageFormat", _wrap_btkANCFileIO_GetStorageFormat, METH_VARARGS, (char *)"\n"
		"btkANCFileIO_GetStorageFormat(self) -> btkAcquisitionFileIO_impl::StorageFormat\n"
		"\n"
		"Return the format used to store points and analog channels.\n"
		""},
	 { (char *)"btkANCFileIO_GetStorageFormatAsString", _wrap_btkANCFileIO_GetStorageFormatAsString, METH_VARARGS, (char *)"\n"
		"btkANCFileIO_GetStorageFormatAsString(self) -> std::string\n"
		"\n"
		"Gets the storage format as a string.\n"
		""},
	 { (char *)"btkANCFileIO_SetStorageFormat", _wrap_btkANCFileIO_SetStorageFormat, METH_VARARGS, (char *)"\n"
		"btkANCFileIO_SetStorageFormat(self, s)\n"
		"\n"
		"Set the format used to store points and analog channels.\n"
		""},
	 { (char *)"btkANCFileIO_GetInternalsUpdateOptions", _wrap_btkANCFileIO_GetInternalsUpdateOptions, METH_VARARGS, (char *)"\n"
		"btkANCFileIO_GetInternalsUpdateOptions(self) -> int\n"
		"\n"
		"Returns the option(s) used to update internals.\n"
		""},
	 { (char *)"btkANCFileIO_SetInternalsUpdateOptions", _wrap_btkANCFileIO_SetInternalsUpdateOptions, METH_VARARGS, (char *)"\n"
		"btkANCFileIO_SetInternalsUpdateOptions(self, options)\n"
		"\n"
		"Sets the option(s) used to update internals.\n"
		""},
	 { (char *)"btkANCFileIO_HasInternalsUpdateOption", _wrap_btkANCFileIO_HasInternalsUpdateOption, METH_VARARGS, (char *)"\n"
		"btkANCFileIO_HasInternalsUpdateOption(self, option) -> bool\n"
		"\n"
		"Returns true if the given @a option is used or false if not.\n"
		""},
	 { (char *)"btkANCFileIO_CanReadFile", _wrap_btkANCFileIO_CanReadFile, METH_VARARGS, (char *)"\n"
		"btkANCFileIO_CanReadFile(self, filename) -> bool\n"
		"\n"
		"Checks if the given filename can be read by this AcquisitionFileIO. This methods should try to read the file header instead to check the file's suffix.\n"
		""},
	 { (char *)"btkANCFileIO_CanWriteFile", _wrap_btkANCFileIO_CanWriteFile, METH_VARARGS, (char *)"\n"
		"btkANCFileIO_CanWriteFile(self, filename) -> bool\n"
		"\n"
		"Checks if the given filename can be write by this AcquisitionFileIO. \n"
		"This method should try to determine if the file's suffix corresponds to one of the supported file's suffixes by this btkAcquisitionFileIO.\n"
		""},
	 { (char *)"btkANCFileIO_Read", _wrap_btkANCFileIO_Read, METH_VARARGS, (char *)"\n"
		"btkANCFileIO_Read(self, filename, output)\n"
		"\n"
		"Read the file designated by the given filename and fill the given btkAcquisition\n"
		""},
	 { (char *)"btkANCFileIO_Write", _wrap_btkANCFileIO_Write, METH_VARARGS, (char *)"\n"
		"btkANCFileIO_Write(self, filename, input)\n"
		"\n"
		"Write the file designated by the given filename with the content of the given btkAcquisition.\n"
		""},
	 { (char *)"btkANCFileIO_swigregister", btkANCFileIO_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_btkANGFileIO", _wrap_new_btkANGFileIO, METH_VARARGS, (char *)"\n"
		"btkANGFileIO()\n"
		"new_btkANGFileIO(toCopy) -> btkANGFileIO\n"
		"\n"
		"\n"
		"Interface to read ANG files (Elite - BTS Bioengineering).\n"
		""},
	 { (char *)"btkANGFileIO___deref__", _wrap_btkANGFileIO___deref__, METH_VARARGS, (char *)"btkANGFileIO___deref__(self) -> btkANGFileIO_impl *"},
	 { (char *)"delete_btkANGFileIO", _wrap_delete_btkANGFileIO, METH_VARARGS, (char *)"delete_btkANGFileIO(self)"},
	 { (char *)"btkANGFileIO_GetFileType", _wrap_btkANGFileIO_GetFileType, METH_VARARGS, (char *)"\n"
		"btkANGFileIO_GetFileType(self) -> btkAcquisitionFileIO_impl::FileType\n"
		"\n"
		"Gets the type of the file.\n"
		""},
	 { (char *)"btkANGFileIO_GetByteOrder", _wrap_btkANGFileIO_GetByteOrder, METH_VARARGS, (char *)"\n"
		"btkANGFileIO_GetByteOrder(self) -> btkAcquisitionFileIO_impl::ByteOrder\n"
		"\n"
		"Gets the byte order of the file (only for binary file).\n"
		""},
	 { (char *)"btkANGFileIO_GetByteOrderAsString", _wrap_btkANGFileIO_GetByteOrderAsString, METH_VARARGS, (char *)"\n"
		"btkANGFileIO_GetByteOrderAsString(self) -> std::string\n"
		"\n"
		"Gets the byte order as a string.\n"
		""},
	 { (char *)"btkANGFileIO_SetByteOrder", _wrap_btkANGFileIO_SetByteOrder, METH_VARARGS, (char *)"\n"
		"btkANGFileIO_SetByteOrder(self, b)\n"
		"\n"
		"Sets the byte order of the file.\n"
		""},
	 { (char *)"btkANGFileIO_GetStorageFormat", _wrap_btkANGFileIO_GetStorageFormat, METH_VARARGS, (char *)"\n"
		"btkANGFileIO_GetStorageFormat(self) -> btkAcquisitionFileIO_impl::StorageFormat\n"
		"\n"
		"Return the format used to store points and analog channels.\n"
		""},
	 { (char *)"btkANGFileIO_GetStorageFormatAsString", _wrap_btkANGFileIO_GetStorageFormatAsString, METH_VARARGS, (char *)"\n"
		"btkANGFileIO_GetStorageFormatAsString(self) -> std::string\n"
		"\n"
		"Gets the storage format as a string.\n"
		""},
	 { (char *)"btkANGFileIO_SetStorageFormat", _wrap_btkANGFileIO_SetStorageFormat, METH_VARARGS, (char *)"\n"
		"btkANGFileIO_SetStorageFormat(self, s)\n"
		"\n"
		"Set the format used to store points and analog channels.\n"
		""},
	 { (char *)"btkANGFileIO_GetInternalsUpdateOptions", _wrap_btkANGFileIO_GetInternalsUpdateOptions, METH_VARARGS, (char *)"\n"
		"btkANGFileIO_GetInternalsUpdateOptions(self) -> int\n"
		"\n"
		"Returns the option(s) used to update internals.\n"
		""},
	 { (char *)"btkANGFileIO_SetInternalsUpdateOptions", _wrap_btkANGFileIO_SetInternalsUpdateOptions, METH_VARARGS, (char *)"\n"
		"btkANGFileIO_SetInternalsUpdateOptions(self, options)\n"
		"\n"
		"Sets the option(s) used to update internals.\n"
		""},
	 { (char *)"btkANGFileIO_HasInternalsUpdateOption", _wrap_btkANGFileIO_HasInternalsUpdateOption, METH_VARARGS, (char *)"\n"
		"btkANGFileIO_HasInternalsUpdateOption(self, option) -> bool\n"
		"\n"
		"Returns true if the given @a option is used or false if not.\n"
		""},
	 { (char *)"btkANGFileIO_CanReadFile", _wrap_btkANGFileIO_CanReadFile, METH_VARARGS, (char *)"\n"
		"btkANGFileIO_CanReadFile(self, filename) -> bool\n"
		"\n"
		"Checks if the given filename can be read by this AcquisitionFileIO. This methods should try to read the file header instead to check the file's suffix.\n"
		""},
	 { (char *)"btkANGFileIO_CanWriteFile", _wrap_btkANGFileIO_CanWriteFile, METH_VARARGS, (char *)"\n"
		"btkANGFileIO_CanWriteFile(self, filename) -> bool\n"
		"\n"
		"Checks if the given filename can be write by this AcquisitionFileIO. \n"
		"This method should try to determine if the file's suffix corresponds to one of the supported file's suffixes by this btkAcquisitionFileIO.\n"
		""},
	 { (char *)"btkANGFileIO_Read", _wrap_btkANGFileIO_Read, METH_VARARGS, (char *)"\n"
		"btkANGFileIO_Read(self, filename, output)\n"
		"\n"
		"Read the file designated by the given filename and fill the given btkAcquisition\n"
		""},
	 { (char *)"btkANGFileIO_Write", _wrap_btkANGFileIO_Write, METH_VARARGS, (char *)"\n"
		"btkANGFileIO_Write(self, filename, input)\n"
		"\n"
		"Write the file designated by the given filename with the content of the given btkAcquisition.\n"
		""},
	 { (char *)"btkANGFileIO_swigregister", btkANGFileIO_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_btkCALForcePlateFileIO", _wrap_new_btkCALForcePlateFileIO, METH_VARARGS, (char *)"\n"
		"btkCALForcePlateFileIO()\n"
		"new_btkCALForcePlateFileIO(toCopy) -> btkCALForcePlateFileIO\n"
		"\n"
		"\n"
		"Interface to read/write force platform calibration CAL files (Motion Analysis Corp.).\n"
		""},
	 { (char *)"btkCALForcePlateFileIO___deref__", _wrap_btkCALForcePlateFileIO___deref__, METH_VARARGS, (char *)"btkCALForcePlateFileIO___deref__(self) -> btkCALForcePlateFileIO_impl *"},
	 { (char *)"delete_btkCALForcePlateFileIO", _wrap_delete_btkCALForcePlateFileIO, METH_VARARGS, (char *)"delete_btkCALForcePlateFileIO(self)"},
	 { (char *)"btkCALForcePlateFileIO_GetFileType", _wrap_btkCALForcePlateFileIO_GetFileType, METH_VARARGS, (char *)"\n"
		"btkCALForcePlateFileIO_GetFileType(self) -> btkAcquisitionFileIO_impl::FileType\n"
		"\n"
		"Gets the type of the file.\n"
		""},
	 { (char *)"btkCALForcePlateFileIO_GetByteOrder", _wrap_btkCALForcePlateFileIO_GetByteOrder, METH_VARARGS, (char *)"\n"
		"btkCALForcePlateFileIO_GetByteOrder(self) -> btkAcquisitionFileIO_impl::ByteOrder\n"
		"\n"
		"Gets the byte order of the file (only for binary file).\n"
		""},
	 { (char *)"btkCALForcePlateFileIO_GetByteOrderAsString", _wrap_btkCALForcePlateFileIO_GetByteOrderAsString, METH_VARARGS, (char *)"\n"
		"btkCALForcePlateFileIO_GetByteOrderAsString(self) -> std::string\n"
		"\n"
		"Gets the byte order as a string.\n"
		""},
	 { (char *)"btkCALForcePlateFileIO_SetByteOrder", _wrap_btkCALForcePlateFileIO_SetByteOrder, METH_VARARGS, (char *)"\n"
		"btkCALForcePlateFileIO_SetByteOrder(self, b)\n"
		"\n"
		"Sets the byte order of the file.\n"
		""},
	 { (char *)"btkCALForcePlateFileIO_GetStorageFormat", _wrap_btkCALForcePlateFileIO_GetStorageFormat, METH_VARARGS, (char *)"\n"
		"btkCALForcePlateFileIO_GetStorageFormat(self) -> btkAcquisitionFileIO_impl::StorageFormat\n"
		"\n"
		"Return the format used to store points and analog channels.\n"
		""},
	 { (char *)"btkCALForcePlateFileIO_GetStorageFormatAsString", _wrap_btkCALForcePlateFileIO_GetStorageFormatAsString, METH_VARARGS, (char *)"\n"
		"btkCALForcePlateFileIO_GetStorageFormatAsString(self) -> std::string\n"
		"\n"
		"Gets the storage format as a string.\n"
		""},
	 { (char *)"btkCALForcePlateFileIO_SetStorageFormat", _wrap_btkCALForcePlateFileIO_SetStorageFormat, METH_VARARGS, (char *)"\n"
		"btkCALForcePlateFileIO_SetStorageFormat(self, s)\n"
		"\n"
		"Set the format used to store points and analog channels.\n"
		""},
	 { (char *)"btkCALForcePlateFileIO_GetInternalsUpdateOptions", _wrap_btkCALForcePlateFileIO_GetInternalsUpdateOptions, METH_VARARGS, (char *)"\n"
		"btkCALForcePlateFileIO_GetInternalsUpdateOptions(self) -> int\n"
		"\n"
		"Returns the option(s) used to update internals.\n"
		""},
	 { (char *)"btkCALForcePlateFileIO_SetInternalsUpdateOptions", _wrap_btkCALForcePlateFileIO_SetInternalsUpdateOptions, METH_VARARGS, (char *)"\n"
		"btkCALForcePlateFileIO_SetInternalsUpdateOptions(self, options)\n"
		"\n"
		"Sets the option(s) used to update internals.\n"
		""},
	 { (char *)"btkCALForcePlateFileIO_HasInternalsUpdateOption", _wrap_btkCALForcePlateFileIO_HasInternalsUpdateOption, METH_VARARGS, (char *)"\n"
		"btkCALForcePlateFileIO_HasInternalsUpdateOption(self, option) -> bool\n"
		"\n"
		"Returns true if the given @a option is used or false if not.\n"
		""},
	 { (char *)"btkCALForcePlateFileIO_CanReadFile", _wrap_btkCALForcePlateFileIO_CanReadFile, METH_VARARGS, (char *)"\n"
		"btkCALForcePlateFileIO_CanReadFile(self, filename) -> bool\n"
		"\n"
		"Checks if the given filename can be read by this AcquisitionFileIO. This methods should try to read the file header instead to check the file's suffix.\n"
		""},
	 { (char *)"btkCALForcePlateFileIO_CanWriteFile", _wrap_btkCALForcePlateFileIO_CanWriteFile, METH_VARARGS, (char *)"\n"
		"btkCALForcePlateFileIO_CanWriteFile(self, filename) -> bool\n"
		"\n"
		"Checks if the given filename can be write by this AcquisitionFileIO. \n"
		"This method should try to determine if the file's suffix corresponds to one of the supported file's suffixes by this btkAcquisitionFileIO.\n"
		""},
	 { (char *)"btkCALForcePlateFileIO_Read", _wrap_btkCALForcePlateFileIO_Read, METH_VARARGS, (char *)"\n"
		"btkCALForcePlateFileIO_Read(self, filename, output)\n"
		"\n"
		"Read the file designated by the given filename and fill the given btkAcquisition\n"
		""},
	 { (char *)"btkCALForcePlateFileIO_Write", _wrap_btkCALForcePlateFileIO_Write, METH_VARARGS, (char *)"\n"
		"btkCALForcePlateFileIO_Write(self, filename, input)\n"
		"\n"
		"Write the file designated by the given filename with the content of the given btkAcquisition.\n"
		""},
	 { (char *)"btkCALForcePlateFileIO_swigregister", btkCALForcePlateFileIO_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_btkCLBFileIO", _wrap_new_btkCLBFileIO, METH_VARARGS, (char *)"\n"
		"btkCLBFileIO()\n"
		"new_btkCLBFileIO(toCopy) -> btkCLBFileIO\n"
		"\n"
		"\n"
		"Interface to read CLB files (Contec Inc.).\n"
		""},
	 { (char *)"btkCLBFileIO___deref__", _wrap_btkCLBFileIO___deref__, METH_VARARGS, (char *)"btkCLBFileIO___deref__(self) -> btkCLBFileIO_impl *"},
	 { (char *)"delete_btkCLBFileIO", _wrap_delete_btkCLBFileIO, METH_VARARGS, (char *)"delete_btkCLBFileIO(self)"},
	 { (char *)"btkCLBFileIO_GetFileType", _wrap_btkCLBFileIO_GetFileType, METH_VARARGS, (char *)"\n"
		"btkCLBFileIO_GetFileType(self) -> btkAcquisitionFileIO_impl::FileType\n"
		"\n"
		"Gets the type of the file.\n"
		""},
	 { (char *)"btkCLBFileIO_GetByteOrder", _wrap_btkCLBFileIO_GetByteOrder, METH_VARARGS, (char *)"\n"
		"btkCLBFileIO_GetByteOrder(self) -> btkAcquisitionFileIO_impl::ByteOrder\n"
		"\n"
		"Gets the byte order of the file (only for binary file).\n"
		""},
	 { (char *)"btkCLBFileIO_GetByteOrderAsString", _wrap_btkCLBFileIO_GetByteOrderAsString, METH_VARARGS, (char *)"\n"
		"btkCLBFileIO_GetByteOrderAsString(self) -> std::string\n"
		"\n"
		"Gets the byte order as a string.\n"
		""},
	 { (char *)"btkCLBFileIO_SetByteOrder", _wrap_btkCLBFileIO_SetByteOrder, METH_VARARGS, (char *)"\n"
		"btkCLBFileIO_SetByteOrder(self, b)\n"
		"\n"
		"Sets the byte order of the file.\n"
		""},
	 { (char *)"btkCLBFileIO_GetStorageFormat", _wrap_btkCLBFileIO_GetStorageFormat, METH_VARARGS, (char *)"\n"
		"btkCLBFileIO_GetStorageFormat(self) -> btkAcquisitionFileIO_impl::StorageFormat\n"
		"\n"
		"Return the format used to store points and analog channels.\n"
		""},
	 { (char *)"btkCLBFileIO_GetStorageFormatAsString", _wrap_btkCLBFileIO_GetStorageFormatAsString, METH_VARARGS, (char *)"\n"
		"btkCLBFileIO_GetStorageFormatAsString(self) -> std::string\n"
		"\n"
		"Gets the storage format as a string.\n"
		""},
	 { (char *)"btkCLBFileIO_SetStorageFormat", _wrap_btkCLBFileIO_SetStorageFormat, METH_VARARGS, (char *)"\n"
		"btkCLBFileIO_SetStorageFormat(self, s)\n"
		"\n"
		"Set the format used to store points and analog channels.\n"
		""},
	 { (char *)"btkCLBFileIO_GetInternalsUpdateOptions", _wrap_btkCLBFileIO_GetInternalsUpdateOptions, METH_VARARGS, (char *)"\n"
		"btkCLBFileIO_GetInternalsUpdateOptions(self) -> int\n"
		"\n"
		"Returns the option(s) used to update internals.\n"
		""},
	 { (char *)"btkCLBFileIO_SetInternalsUpdateOptions", _wrap_btkCLBFileIO_SetInternalsUpdateOptions, METH_VARARGS, (char *)"\n"
		"btkCLBFileIO_SetInternalsUpdateOptions(self, options)\n"
		"\n"
		"Sets the option(s) used to update internals.\n"
		""},
	 { (char *)"btkCLBFileIO_HasInternalsUpdateOption", _wrap_btkCLBFileIO_HasInternalsUpdateOption, METH_VARARGS, (char *)"\n"
		"btkCLBFileIO_HasInternalsUpdateOption(self, option) -> bool\n"
		"\n"
		"Returns true if the given @a option is used or false if not.\n"
		""},
	 { (char *)"btkCLBFileIO_CanReadFile", _wrap_btkCLBFileIO_CanReadFile, METH_VARARGS, (char *)"\n"
		"btkCLBFileIO_CanReadFile(self, filename) -> bool\n"
		"\n"
		"Checks if the given filename can be read by this AcquisitionFileIO. This methods should try to read the file header instead to check the file's suffix.\n"
		""},
	 { (char *)"btkCLBFileIO_CanWriteFile", _wrap_btkCLBFileIO_CanWriteFile, METH_VARARGS, (char *)"\n"
		"btkCLBFileIO_CanWriteFile(self, filename) -> bool\n"
		"\n"
		"Checks if the given filename can be write by this AcquisitionFileIO. \n"
		"This method should try to determine if the file's suffix corresponds to one of the supported file's suffixes by this btkAcquisitionFileIO.\n"
		""},
	 { (char *)"btkCLBFileIO_Read", _wrap_btkCLBFileIO_Read, METH_VARARGS, (char *)"\n"
		"btkCLBFileIO_Read(self, filename, output)\n"
		"\n"
		"Read the file designated by the given filename and fill the given btkAcquisition\n"
		""},
	 { (char *)"btkCLBFileIO_Write", _wrap_btkCLBFileIO_Write, METH_VARARGS, (char *)"\n"
		"btkCLBFileIO_Write(self, filename, input)\n"
		"\n"
		"Write the file designated by the given filename with the content of the given btkAcquisition.\n"
		""},
	 { (char *)"btkCLBFileIO_swigregister", btkCLBFileIO_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_btkDelsysEMGFileIO", _wrap_new_btkDelsysEMGFileIO, METH_VARARGS, (char *)"\n"
		"btkDelsysEMGFileIO()\n"
		"new_btkDelsysEMGFileIO(toCopy) -> btkDelsysEMGFileIO\n"
		"\n"
		"\n"
		"Interface to read EMG file (Delsys Inc.).\n"
		""},
	 { (char *)"btkDelsysEMGFileIO___deref__", _wrap_btkDelsysEMGFileIO___deref__, METH_VARARGS, (char *)"btkDelsysEMGFileIO___deref__(self) -> btkDelsysEMGFileIO_impl *"},
	 { (char *)"delete_btkDelsysEMGFileIO", _wrap_delete_btkDelsysEMGFileIO, METH_VARARGS, (char *)"delete_btkDelsysEMGFileIO(self)"},
	 { (char *)"btkDelsysEMGFileIO_GetFileType", _wrap_btkDelsysEMGFileIO_GetFileType, METH_VARARGS, (char *)"\n"
		"btkDelsysEMGFileIO_GetFileType(self) -> btkAcquisitionFileIO_impl::FileType\n"
		"\n"
		"Gets the type of the file.\n"
		""},
	 { (char *)"btkDelsysEMGFileIO_GetByteOrder", _wrap_btkDelsysEMGFileIO_GetByteOrder, METH_VARARGS, (char *)"\n"
		"btkDelsysEMGFileIO_GetByteOrder(self) -> btkAcquisitionFileIO_impl::ByteOrder\n"
		"\n"
		"Gets the byte order of the file (only for binary file).\n"
		""},
	 { (char *)"btkDelsysEMGFileIO_GetByteOrderAsString", _wrap_btkDelsysEMGFileIO_GetByteOrderAsString, METH_VARARGS, (char *)"\n"
		"btkDelsysEMGFileIO_GetByteOrderAsString(self) -> std::string\n"
		"\n"
		"Gets the byte order as a string.\n"
		""},
	 { (char *)"btkDelsysEMGFileIO_SetByteOrder", _wrap_btkDelsysEMGFileIO_SetByteOrder, METH_VARARGS, (char *)"\n"
		"btkDelsysEMGFileIO_SetByteOrder(self, b)\n"
		"\n"
		"Sets the byte order of the file.\n"
		""},
	 { (char *)"btkDelsysEMGFileIO_GetStorageFormat", _wrap_btkDelsysEMGFileIO_GetStorageFormat, METH_VARARGS, (char *)"\n"
		"btkDelsysEMGFileIO_GetStorageFormat(self) -> btkAcquisitionFileIO_impl::StorageFormat\n"
		"\n"
		"Return the format used to store points and analog channels.\n"
		""},
	 { (char *)"btkDelsysEMGFileIO_GetStorageFormatAsString", _wrap_btkDelsysEMGFileIO_GetStorageFormatAsString, METH_VARARGS, (char *)"\n"
		"btkDelsysEMGFileIO_GetStorageFormatAsString(self) -> std::string\n"
		"\n"
		"Gets the storage format as a string.\n"
		""},
	 { (char *)"btkDelsysEMGFileIO_SetStorageFormat", _wrap_btkDelsysEMGFileIO_SetStorageFormat, METH_VARARGS, (char *)"\n"
		"btkDelsysEMGFileIO_SetStorageFormat(self, s)\n"
		"\n"
		"Set the format used to store points and analog channels.\n"
		""},
	 { (char *)"btkDelsysEMGFileIO_GetInternalsUpdateOptions", _wrap_btkDelsysEMGFileIO_GetInternalsUpdateOptions, METH_VARARGS, (char *)"\n"
		"btkDelsysEMGFileIO_GetInternalsUpdateOptions(self) -> int\n"
		"\n"
		"Returns the option(s) used to update internals.\n"
		""},
	 { (char *)"btkDelsysEMGFileIO_SetInternalsUpdateOptions", _wrap_btkDelsysEMGFileIO_SetInternalsUpdateOptions, METH_VARARGS, (char *)"\n"
		"btkDelsysEMGFileIO_SetInternalsUpdateOptions(self, options)\n"
		"\n"
		"Sets the option(s) used to update internals.\n"
		""},
	 { (char *)"btkDelsysEMGFileIO_HasInternalsUpdateOption", _wrap_btkDelsysEMGFileIO_HasInternalsUpdateOption, METH_VARARGS, (char *)"\n"
		"btkDelsysEMGFileIO_HasInternalsUpdateOption(self, option) -> bool\n"
		"\n"
		"Returns true if the given @a option is used or false if not.\n"
		""},
	 { (char *)"btkDelsysEMGFileIO_CanReadFile", _wrap_btkDelsysEMGFileIO_CanReadFile, METH_VARARGS, (char *)"\n"
		"btkDelsysEMGFileIO_CanReadFile(self, filename) -> bool\n"
		"\n"
		"Checks if the given filename can be read by this AcquisitionFileIO. This methods should try to read the file header instead to check the file's suffix.\n"
		""},
	 { (char *)"btkDelsysEMGFileIO_CanWriteFile", _wrap_btkDelsysEMGFileIO_CanWriteFile, METH_VARARGS, (char *)"\n"
		"btkDelsysEMGFileIO_CanWriteFile(self, filename) -> bool\n"
		"\n"
		"Checks if the given filename can be write by this AcquisitionFileIO. \n"
		"This method should try to determine if the file's suffix corresponds to one of the supported file's suffixes by this btkAcquisitionFileIO.\n"
		""},
	 { (char *)"btkDelsysEMGFileIO_Read", _wrap_btkDelsysEMGFileIO_Read, METH_VARARGS, (char *)"\n"
		"btkDelsysEMGFileIO_Read(self, filename, output)\n"
		"\n"
		"Read the file designated by the given filename and fill the given btkAcquisition\n"
		""},
	 { (char *)"btkDelsysEMGFileIO_Write", _wrap_btkDelsysEMGFileIO_Write, METH_VARARGS, (char *)"\n"
		"btkDelsysEMGFileIO_Write(self, filename, input)\n"
		"\n"
		"Write the file designated by the given filename with the content of the given btkAcquisition.\n"
		""},
	 { (char *)"btkDelsysEMGFileIO_swigregister", btkDelsysEMGFileIO_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_btkMDFFileIO", _wrap_new_btkMDFFileIO, METH_VARARGS, (char *)"\n"
		"btkMDFFileIO()\n"
		"new_btkMDFFileIO(toCopy) -> btkMDFFileIO\n"
		"\n"
		"\n"
		"Interface to read MDF files (Codamotion).\n"
		""},
	 { (char *)"btkMDFFileIO___deref__", _wrap_btkMDFFileIO___deref__, METH_VARARGS, (char *)"btkMDFFileIO___deref__(self) -> btkMDFFileIO_impl *"},
	 { (char *)"delete_btkMDFFileIO", _wrap_delete_btkMDFFileIO, METH_VARARGS, (char *)"delete_btkMDFFileIO(self)"},
	 { (char *)"btkMDFFileIO_GetFileType", _wrap_btkMDFFileIO_GetFileType, METH_VARARGS, (char *)"\n"
		"btkMDFFileIO_GetFileType(self) -> btkAcquisitionFileIO_impl::FileType\n"
		"\n"
		"Gets the type of the file.\n"
		""},
	 { (char *)"btkMDFFileIO_GetByteOrder", _wrap_btkMDFFileIO_GetByteOrder, METH_VARARGS, (char *)"\n"
		"btkMDFFileIO_GetByteOrder(self) -> btkAcquisitionFileIO_impl::ByteOrder\n"
		"\n"
		"Gets the byte order of the file (only for binary file).\n"
		""},
	 { (char *)"btkMDFFileIO_GetByteOrderAsString", _wrap_btkMDFFileIO_GetByteOrderAsString, METH_VARARGS, (char *)"\n"
		"btkMDFFileIO_GetByteOrderAsString(self) -> std::string\n"
		"\n"
		"Gets the byte order as a string.\n"
		""},
	 { (char *)"btkMDFFileIO_SetByteOrder", _wrap_btkMDFFileIO_SetByteOrder, METH_VARARGS, (char *)"\n"
		"btkMDFFileIO_SetByteOrder(self, b)\n"
		"\n"
		"Sets the byte order of the file.\n"
		""},
	 { (char *)"btkMDFFileIO_GetStorageFormat", _wrap_btkMDFFileIO_GetStorageFormat, METH_VARARGS, (char *)"\n"
		"btkMDFFileIO_GetStorageFormat(self) -> btkAcquisitionFileIO_impl::StorageFormat\n"
		"\n"
		"Return the format used to store points and analog channels.\n"
		""},
	 { (char *)"btkMDFFileIO_GetStorageFormatAsString", _wrap_btkMDFFileIO_GetStorageFormatAsString, METH_VARARGS, (char *)"\n"
		"btkMDFFileIO_GetStorageFormatAsString(self) -> std::string\n"
		"\n"
		"Gets the storage format as a string.\n"
		""},
	 { (char *)"btkMDFFileIO_SetStorageFormat", _wrap_btkMDFFileIO_SetStorageFormat, METH_VARARGS, (char *)"\n"
		"btkMDFFileIO_SetStorageFormat(self, s)\n"
		"\n"
		"Set the format used to store points and analog channels.\n"
		""},
	 { (char *)"btkMDFFileIO_GetInternalsUpdateOptions", _wrap_btkMDFFileIO_GetInternalsUpdateOptions, METH_VARARGS, (char *)"\n"
		"btkMDFFileIO_GetInternalsUpdateOptions(self) -> int\n"
		"\n"
		"Returns the option(s) used to update internals.\n"
		""},
	 { (char *)"btkMDFFileIO_SetInternalsUpdateOptions", _wrap_btkMDFFileIO_SetInternalsUpdateOptions, METH_VARARGS, (char *)"\n"
		"btkMDFFileIO_SetInternalsUpdateOptions(self, options)\n"
		"\n"
		"Sets the option(s) used to update internals.\n"
		""},
	 { (char *)"btkMDFFileIO_HasInternalsUpdateOption", _wrap_btkMDFFileIO_HasInternalsUpdateOption, METH_VARARGS, (char *)"\n"
		"btkMDFFileIO_HasInternalsUpdateOption(self, option) -> bool\n"
		"\n"
		"Returns true if the given @a option is used or false if not.\n"
		""},
	 { (char *)"btkMDFFileIO_CanReadFile", _wrap_btkMDFFileIO_CanReadFile, METH_VARARGS, (char *)"\n"
		"btkMDFFileIO_CanReadFile(self, filename) -> bool\n"
		"\n"
		"Checks if the given filename can be read by this AcquisitionFileIO. This methods should try to read the file header instead to check the file's suffix.\n"
		""},
	 { (char *)"btkMDFFileIO_CanWriteFile", _wrap_btkMDFFileIO_CanWriteFile, METH_VARARGS, (char *)"\n"
		"btkMDFFileIO_CanWriteFile(self, filename) -> bool\n"
		"\n"
		"Checks if the given filename can be write by this AcquisitionFileIO. \n"
		"This method should try to determine if the file's suffix corresponds to one of the supported file's suffixes by this btkAcquisitionFileIO.\n"
		""},
	 { (char *)"btkMDFFileIO_Read", _wrap_btkMDFFileIO_Read, METH_VARARGS, (char *)"\n"
		"btkMDFFileIO_Read(self, filename, output)\n"
		"\n"
		"Read the file designated by the given filename and fill the given btkAcquisition\n"
		""},
	 { (char *)"btkMDFFileIO_Write", _wrap_btkMDFFileIO_Write, METH_VARARGS, (char *)"\n"
		"btkMDFFileIO_Write(self, filename, input)\n"
		"\n"
		"Write the file designated by the given filename with the content of the given btkAcquisition.\n"
		""},
	 { (char *)"btkMDFFileIO_swigregister", btkMDFFileIO_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_btkEMFFileIO", _wrap_new_btkEMFFileIO, METH_VARARGS, (char *)"\n"
		"btkEMFFileIO()\n"
		"new_btkEMFFileIO(toCopy) -> btkEMFFileIO\n"
		"\n"
		"\n"
		"Interface to read EMF files (Ascension Technology Corporation).\n"
		""},
	 { (char *)"btkEMFFileIO___deref__", _wrap_btkEMFFileIO___deref__, METH_VARARGS, (char *)"btkEMFFileIO___deref__(self) -> btkEMFFileIO_impl *"},
	 { (char *)"delete_btkEMFFileIO", _wrap_delete_btkEMFFileIO, METH_VARARGS, (char *)"delete_btkEMFFileIO(self)"},
	 { (char *)"btkEMFFileIO_GetFileType", _wrap_btkEMFFileIO_GetFileType, METH_VARARGS, (char *)"\n"
		"btkEMFFileIO_GetFileType(self) -> btkAcquisitionFileIO_impl::FileType\n"
		"\n"
		"Gets the type of the file.\n"
		""},
	 { (char *)"btkEMFFileIO_GetByteOrder", _wrap_btkEMFFileIO_GetByteOrder, METH_VARARGS, (char *)"\n"
		"btkEMFFileIO_GetByteOrder(self) -> btkAcquisitionFileIO_impl::ByteOrder\n"
		"\n"
		"Gets the byte order of the file (only for binary file).\n"
		""},
	 { (char *)"btkEMFFileIO_GetByteOrderAsString", _wrap_btkEMFFileIO_GetByteOrderAsString, METH_VARARGS, (char *)"\n"
		"btkEMFFileIO_GetByteOrderAsString(self) -> std::string\n"
		"\n"
		"Gets the byte order as a string.\n"
		""},
	 { (char *)"btkEMFFileIO_SetByteOrder", _wrap_btkEMFFileIO_SetByteOrder, METH_VARARGS, (char *)"\n"
		"btkEMFFileIO_SetByteOrder(self, b)\n"
		"\n"
		"Sets the byte order of the file.\n"
		""},
	 { (char *)"btkEMFFileIO_GetStorageFormat", _wrap_btkEMFFileIO_GetStorageFormat, METH_VARARGS, (char *)"\n"
		"btkEMFFileIO_GetStorageFormat(self) -> btkAcquisitionFileIO_impl::StorageFormat\n"
		"\n"
		"Return the format used to store points and analog channels.\n"
		""},
	 { (char *)"btkEMFFileIO_GetStorageFormatAsString", _wrap_btkEMFFileIO_GetStorageFormatAsString, METH_VARARGS, (char *)"\n"
		"btkEMFFileIO_GetStorageFormatAsString(self) -> std::string\n"
		"\n"
		"Gets the storage format as a string.\n"
		""},
	 { (char *)"btkEMFFileIO_SetStorageFormat", _wrap_btkEMFFileIO_SetStorageFormat, METH_VARARGS, (char *)"\n"
		"btkEMFFileIO_SetStorageFormat(self, s)\n"
		"\n"
		"Set the format used to store points and analog channels.\n"
		""},
	 { (char *)"btkEMFFileIO_GetInternalsUpdateOptions", _wrap_btkEMFFileIO_GetInternalsUpdateOptions, METH_VARARGS, (char *)"\n"
		"btkEMFFileIO_GetInternalsUpdateOptions(self) -> int\n"
		"\n"
		"Returns the option(s) used to update internals.\n"
		""},
	 { (char *)"btkEMFFileIO_SetInternalsUpdateOptions", _wrap_btkEMFFileIO_SetInternalsUpdateOptions, METH_VARARGS, (char *)"\n"
		"btkEMFFileIO_SetInternalsUpdateOptions(self, options)\n"
		"\n"
		"Sets the option(s) used to update internals.\n"
		""},
	 { (char *)"btkEMFFileIO_HasInternalsUpdateOption", _wrap_btkEMFFileIO_HasInternalsUpdateOption, METH_VARARGS, (char *)"\n"
		"btkEMFFileIO_HasInternalsUpdateOption(self, option) -> bool\n"
		"\n"
		"Returns true if the given @a option is used or false if not.\n"
		""},
	 { (char *)"btkEMFFileIO_CanReadFile", _wrap_btkEMFFileIO_CanReadFile, METH_VARARGS, (char *)"\n"
		"btkEMFFileIO_CanReadFile(self, filename) -> bool\n"
		"\n"
		"Checks if the given filename can be read by this AcquisitionFileIO. This methods should try to read the file header instead to check the file's suffix.\n"
		""},
	 { (char *)"btkEMFFileIO_CanWriteFile", _wrap_btkEMFFileIO_CanWriteFile, METH_VARARGS, (char *)"\n"
		"btkEMFFileIO_CanWriteFile(self, filename) -> bool\n"
		"\n"
		"Checks if the given filename can be write by this AcquisitionFileIO. \n"
		"This method should try to determine if the file's suffix corresponds to one of the supported file's suffixes by this btkAcquisitionFileIO.\n"
		""},
	 { (char *)"btkEMFFileIO_Read", _wrap_btkEMFFileIO_Read, METH_VARARGS, (char *)"\n"
		"btkEMFFileIO_Read(self, filename, output)\n"
		"\n"
		"Read the file designated by the given filename and fill the given btkAcquisition\n"
		""},
	 { (char *)"btkEMFFileIO_Write", _wrap_btkEMFFileIO_Write, METH_VARARGS, (char *)"\n"
		"btkEMFFileIO_Write(self, filename, input)\n"
		"\n"
		"Write the file designated by the given filename with the content of the given btkAcquisition.\n"
		""},
	 { (char *)"btkEMFFileIO_swigregister", btkEMFFileIO_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_btkEMxFileIO", _wrap_new_btkEMxFileIO, METH_VARARGS, (char *)"\n"
		"btkEMxFileIO()\n"
		"new_btkEMxFileIO(toCopy) -> btkEMxFileIO\n"
		"\n"
		"\n"
		"Interface to read EMG files (Elite - BTS Bioengineering).\n"
		""},
	 { (char *)"btkEMxFileIO___deref__", _wrap_btkEMxFileIO___deref__, METH_VARARGS, (char *)"btkEMxFileIO___deref__(self) -> btkEMxFileIO_impl *"},
	 { (char *)"delete_btkEMxFileIO", _wrap_delete_btkEMxFileIO, METH_VARARGS, (char *)"delete_btkEMxFileIO(self)"},
	 { (char *)"btkEMxFileIO_GetFileType", _wrap_btkEMxFileIO_GetFileType, METH_VARARGS, (char *)"\n"
		"btkEMxFileIO_GetFileType(self) -> btkAcquisitionFileIO_impl::FileType\n"
		"\n"
		"Gets the type of the file.\n"
		""},
	 { (char *)"btkEMxFileIO_GetByteOrder", _wrap_btkEMxFileIO_GetByteOrder, METH_VARARGS, (char *)"\n"
		"btkEMxFileIO_GetByteOrder(self) -> btkAcquisitionFileIO_impl::ByteOrder\n"
		"\n"
		"Gets the byte order of the file (only for binary file).\n"
		""},
	 { (char *)"btkEMxFileIO_GetByteOrderAsString", _wrap_btkEMxFileIO_GetByteOrderAsString, METH_VARARGS, (char *)"\n"
		"btkEMxFileIO_GetByteOrderAsString(self) -> std::string\n"
		"\n"
		"Gets the byte order as a string.\n"
		""},
	 { (char *)"btkEMxFileIO_SetByteOrder", _wrap_btkEMxFileIO_SetByteOrder, METH_VARARGS, (char *)"\n"
		"btkEMxFileIO_SetByteOrder(self, b)\n"
		"\n"
		"Sets the byte order of the file.\n"
		""},
	 { (char *)"btkEMxFileIO_GetStorageFormat", _wrap_btkEMxFileIO_GetStorageFormat, METH_VARARGS, (char *)"\n"
		"btkEMxFileIO_GetStorageFormat(self) -> btkAcquisitionFileIO_impl::StorageFormat\n"
		"\n"
		"Return the format used to store points and analog channels.\n"
		""},
	 { (char *)"btkEMxFileIO_GetStorageFormatAsString", _wrap_btkEMxFileIO_GetStorageFormatAsString, METH_VARARGS, (char *)"\n"
		"btkEMxFileIO_GetStorageFormatAsString(self) -> std::string\n"
		"\n"
		"Gets the storage format as a string.\n"
		""},
	 { (char *)"btkEMxFileIO_SetStorageFormat", _wrap_btkEMxFileIO_SetStorageFormat, METH_VARARGS, (char *)"\n"
		"btkEMxFileIO_SetStorageFormat(self, s)\n"
		"\n"
		"Set the format used to store points and analog channels.\n"
		""},
	 { (char *)"btkEMxFileIO_GetInternalsUpdateOptions", _wrap_btkEMxFileIO_GetInternalsUpdateOptions, METH_VARARGS, (char *)"\n"
		"btkEMxFileIO_GetInternalsUpdateOptions(self) -> int\n"
		"\n"
		"Returns the option(s) used to update internals.\n"
		""},
	 { (char *)"btkEMxFileIO_SetInternalsUpdateOptions", _wrap_btkEMxFileIO_SetInternalsUpdateOptions, METH_VARARGS, (char *)"\n"
		"btkEMxFileIO_SetInternalsUpdateOptions(self, options)\n"
		"\n"
		"Sets the option(s) used to update internals.\n"
		""},
	 { (char *)"btkEMxFileIO_HasInternalsUpdateOption", _wrap_btkEMxFileIO_HasInternalsUpdateOption, METH_VARARGS, (char *)"\n"
		"btkEMxFileIO_HasInternalsUpdateOption(self, option) -> bool\n"
		"\n"
		"Returns true if the given @a option is used or false if not.\n"
		""},
	 { (char *)"btkEMxFileIO_CanReadFile", _wrap_btkEMxFileIO_CanReadFile, METH_VARARGS, (char *)"\n"
		"btkEMxFileIO_CanReadFile(self, filename) -> bool\n"
		"\n"
		"Checks if the given filename can be read by this AcquisitionFileIO. This methods should try to read the file header instead to check the file's suffix.\n"
		""},
	 { (char *)"btkEMxFileIO_CanWriteFile", _wrap_btkEMxFileIO_CanWriteFile, METH_VARARGS, (char *)"\n"
		"btkEMxFileIO_CanWriteFile(self, filename) -> bool\n"
		"\n"
		"Checks if the given filename can be write by this AcquisitionFileIO. \n"
		"This method should try to determine if the file's suffix corresponds to one of the supported file's suffixes by this btkAcquisitionFileIO.\n"
		""},
	 { (char *)"btkEMxFileIO_Read", _wrap_btkEMxFileIO_Read, METH_VARARGS, (char *)"\n"
		"btkEMxFileIO_Read(self, filename, output)\n"
		"\n"
		"Read the file designated by the given filename and fill the given btkAcquisition\n"
		""},
	 { (char *)"btkEMxFileIO_Write", _wrap_btkEMxFileIO_Write, METH_VARARGS, (char *)"\n"
		"btkEMxFileIO_Write(self, filename, input)\n"
		"\n"
		"Write the file designated by the given filename with the content of the given btkAcquisition.\n"
		""},
	 { (char *)"btkEMxFileIO_swigregister", btkEMxFileIO_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_btkGRxFileIO", _wrap_new_btkGRxFileIO, METH_VARARGS, (char *)"\n"
		"btkGRxFileIO()\n"
		"new_btkGRxFileIO(toCopy) -> btkGRxFileIO\n"
		"\n"
		"\n"
		"Interface to read GR* (GR1, GR2, ...) files (Elite - BTS Bioengineering).\n"
		""},
	 { (char *)"btkGRxFileIO___deref__", _wrap_btkGRxFileIO___deref__, METH_VARARGS, (char *)"btkGRxFileIO___deref__(self) -> btkGRxFileIO_impl *"},
	 { (char *)"delete_btkGRxFileIO", _wrap_delete_btkGRxFileIO, METH_VARARGS, (char *)"delete_btkGRxFileIO(self)"},
	 { (char *)"btkGRxFileIO_GetFileType", _wrap_btkGRxFileIO_GetFileType, METH_VARARGS, (char *)"\n"
		"btkGRxFileIO_GetFileType(self) -> btkAcquisitionFileIO_impl::FileType\n"
		"\n"
		"Gets the type of the file.\n"
		""},
	 { (char *)"btkGRxFileIO_GetByteOrder", _wrap_btkGRxFileIO_GetByteOrder, METH_VARARGS, (char *)"\n"
		"btkGRxFileIO_GetByteOrder(self) -> btkAcquisitionFileIO_impl::ByteOrder\n"
		"\n"
		"Gets the byte order of the file (only for binary file).\n"
		""},
	 { (char *)"btkGRxFileIO_GetByteOrderAsString", _wrap_btkGRxFileIO_GetByteOrderAsString, METH_VARARGS, (char *)"\n"
		"btkGRxFileIO_GetByteOrderAsString(self) -> std::string\n"
		"\n"
		"Gets the byte order as a string.\n"
		""},
	 { (char *)"btkGRxFileIO_SetByteOrder", _wrap_btkGRxFileIO_SetByteOrder, METH_VARARGS, (char *)"\n"
		"btkGRxFileIO_SetByteOrder(self, b)\n"
		"\n"
		"Sets the byte order of the file.\n"
		""},
	 { (char *)"btkGRxFileIO_GetStorageFormat", _wrap_btkGRxFileIO_GetStorageFormat, METH_VARARGS, (char *)"\n"
		"btkGRxFileIO_GetStorageFormat(self) -> btkAcquisitionFileIO_impl::StorageFormat\n"
		"\n"
		"Return the format used to store points and analog channels.\n"
		""},
	 { (char *)"btkGRxFileIO_GetStorageFormatAsString", _wrap_btkGRxFileIO_GetStorageFormatAsString, METH_VARARGS, (char *)"\n"
		"btkGRxFileIO_GetStorageFormatAsString(self) -> std::string\n"
		"\n"
		"Gets the storage format as a string.\n"
		""},
	 { (char *)"btkGRxFileIO_SetStorageFormat", _wrap_btkGRxFileIO_SetStorageFormat, METH_VARARGS, (char *)"\n"
		"btkGRxFileIO_SetStorageFormat(self, s)\n"
		"\n"
		"Set the format used to store points and analog channels.\n"
		""},
	 { (char *)"btkGRxFileIO_GetInternalsUpdateOptions", _wrap_btkGRxFileIO_GetInternalsUpdateOptions, METH_VARARGS, (char *)"\n"
		"btkGRxFileIO_GetInternalsUpdateOptions(self) -> int\n"
		"\n"
		"Returns the option(s) used to update internals.\n"
		""},
	 { (char *)"btkGRxFileIO_SetInternalsUpdateOptions", _wrap_btkGRxFileIO_SetInternalsUpdateOptions, METH_VARARGS, (char *)"\n"
		"btkGRxFileIO_SetInternalsUpdateOptions(self, options)\n"
		"\n"
		"Sets the option(s) used to update internals.\n"
		""},
	 { (char *)"btkGRxFileIO_HasInternalsUpdateOption", _wrap_btkGRxFileIO_HasInternalsUpdateOption, METH_VARARGS, (char *)"\n"
		"btkGRxFileIO_HasInternalsUpdateOption(self, option) -> bool\n"
		"\n"
		"Returns true if the given @a option is used or false if not.\n"
		""},
	 { (char *)"btkGRxFileIO_CanReadFile", _wrap_btkGRxFileIO_CanReadFile, METH_VARARGS, (char *)"\n"
		"btkGRxFileIO_CanReadFile(self, filename) -> bool\n"
		"\n"
		"Checks if the given filename can be read by this AcquisitionFileIO. This methods should try to read the file header instead to check the file's suffix.\n"
		""},
	 { (char *)"btkGRxFileIO_CanWriteFile", _wrap_btkGRxFileIO_CanWriteFile, METH_VARARGS, (char *)"\n"
		"btkGRxFileIO_CanWriteFile(self, filename) -> bool\n"
		"\n"
		"Checks if the given filename can be write by this AcquisitionFileIO. \n"
		"This method should try to determine if the file's suffix corresponds to one of the supported file's suffixes by this btkAcquisitionFileIO.\n"
		""},
	 { (char *)"btkGRxFileIO_Read", _wrap_btkGRxFileIO_Read, METH_VARARGS, (char *)"\n"
		"btkGRxFileIO_Read(self, filename, output)\n"
		"\n"
		"Read the file designated by the given filename and fill the given btkAcquisition\n"
		""},
	 { (char *)"btkGRxFileIO_Write", _wrap_btkGRxFileIO_Write, METH_VARARGS, (char *)"\n"
		"btkGRxFileIO_Write(self, filename, input)\n"
		"\n"
		"Write the file designated by the given filename with the content of the given btkAcquisition.\n"
		""},
	 { (char *)"btkGRxFileIO_swigregister", btkGRxFileIO_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_btkMOMFileIO", _wrap_new_btkMOMFileIO, METH_VARARGS, (char *)"\n"
		"btkMOMFileIO()\n"
		"new_btkMOMFileIO(toCopy) -> btkMOMFileIO\n"
		"\n"
		"\n"
		"Interface to read MOM files (Elite - BTS Bioengineering).\n"
		""},
	 { (char *)"btkMOMFileIO___deref__", _wrap_btkMOMFileIO___deref__, METH_VARARGS, (char *)"btkMOMFileIO___deref__(self) -> btkMOMFileIO_impl *"},
	 { (char *)"delete_btkMOMFileIO", _wrap_delete_btkMOMFileIO, METH_VARARGS, (char *)"delete_btkMOMFileIO(self)"},
	 { (char *)"btkMOMFileIO_GetFileType", _wrap_btkMOMFileIO_GetFileType, METH_VARARGS, (char *)"\n"
		"btkMOMFileIO_GetFileType(self) -> btkAcquisitionFileIO_impl::FileType\n"
		"\n"
		"Gets the type of the file.\n"
		""},
	 { (char *)"btkMOMFileIO_GetByteOrder", _wrap_btkMOMFileIO_GetByteOrder, METH_VARARGS, (char *)"\n"
		"btkMOMFileIO_GetByteOrder(self) -> btkAcquisitionFileIO_impl::ByteOrder\n"
		"\n"
		"Gets the byte order of the file (only for binary file).\n"
		""},
	 { (char *)"btkMOMFileIO_GetByteOrderAsString", _wrap_btkMOMFileIO_GetByteOrderAsString, METH_VARARGS, (char *)"\n"
		"btkMOMFileIO_GetByteOrderAsString(self) -> std::string\n"
		"\n"
		"Gets the byte order as a string.\n"
		""},
	 { (char *)"btkMOMFileIO_SetByteOrder", _wrap_btkMOMFileIO_SetByteOrder, METH_VARARGS, (char *)"\n"
		"btkMOMFileIO_SetByteOrder(self, b)\n"
		"\n"
		"Sets the byte order of the file.\n"
		""},
	 { (char *)"btkMOMFileIO_GetStorageFormat", _wrap_btkMOMFileIO_GetStorageFormat, METH_VARARGS, (char *)"\n"
		"btkMOMFileIO_GetStorageFormat(self) -> btkAcquisitionFileIO_impl::StorageFormat\n"
		"\n"
		"Return the format used to store points and analog channels.\n"
		""},
	 { (char *)"btkMOMFileIO_GetStorageFormatAsString", _wrap_btkMOMFileIO_GetStorageFormatAsString, METH_VARARGS, (char *)"\n"
		"btkMOMFileIO_GetStorageFormatAsString(self) -> std::string\n"
		"\n"
		"Gets the storage format as a string.\n"
		""},
	 { (char *)"btkMOMFileIO_SetStorageFormat", _wrap_btkMOMFileIO_SetStorageFormat, METH_VARARGS, (char *)"\n"
		"btkMOMFileIO_SetStorageFormat(self, s)\n"
		"\n"
		"Set the format used to store points and analog channels.\n"
		""},
	 { (char *)"btkMOMFileIO_GetInternalsUpdateOptions", _wrap_btkMOMFileIO_GetInternalsUpdateOptions, METH_VARARGS, (char *)"\n"
		"btkMOMFileIO_GetInternalsUpdateOptions(self) -> int\n"
		"\n"
		"Returns the option(s) used to update internals.\n"
		""},
	 { (char *)"btkMOMFileIO_SetInternalsUpdateOptions", _wrap_btkMOMFileIO_SetInternalsUpdateOptions, METH_VARARGS, (char *)"\n"
		"btkMOMFileIO_SetInternalsUpdateOptions(self, options)\n"
		"\n"
		"Sets the option(s) used to update internals.\n"
		""},
	 { (char *)"btkMOMFileIO_HasInternalsUpdateOption", _wrap_btkMOMFileIO_HasInternalsUpdateOption, METH_VARARGS, (char *)"\n"
		"btkMOMFileIO_HasInternalsUpdateOption(self, option) -> bool\n"
		"\n"
		"Returns true if the given @a option is used or false if not.\n"
		""},
	 { (char *)"btkMOMFileIO_CanReadFile", _wrap_btkMOMFileIO_CanReadFile, METH_VARARGS, (char *)"\n"
		"btkMOMFileIO_CanReadFile(self, filename) -> bool\n"
		"\n"
		"Checks if the given filename can be read by this AcquisitionFileIO. This methods should try to read the file header instead to check the file's suffix.\n"
		""},
	 { (char *)"btkMOMFileIO_CanWriteFile", _wrap_btkMOMFileIO_CanWriteFile, METH_VARARGS, (char *)"\n"
		"btkMOMFileIO_CanWriteFile(self, filename) -> bool\n"
		"\n"
		"Checks if the given filename can be write by this AcquisitionFileIO. \n"
		"This method should try to determine if the file's suffix corresponds to one of the supported file's suffixes by this btkAcquisitionFileIO.\n"
		""},
	 { (char *)"btkMOMFileIO_Read", _wrap_btkMOMFileIO_Read, METH_VARARGS, (char *)"\n"
		"btkMOMFileIO_Read(self, filename, output)\n"
		"\n"
		"Read the file designated by the given filename and fill the given btkAcquisition\n"
		""},
	 { (char *)"btkMOMFileIO_Write", _wrap_btkMOMFileIO_Write, METH_VARARGS, (char *)"\n"
		"btkMOMFileIO_Write(self, filename, input)\n"
		"\n"
		"Write the file designated by the given filename with the content of the given btkAcquisition.\n"
		""},
	 { (char *)"btkMOMFileIO_swigregister", btkMOMFileIO_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_btkPWRFileIO", _wrap_new_btkPWRFileIO, METH_VARARGS, (char *)"\n"
		"btkPWRFileIO()\n"
		"new_btkPWRFileIO(toCopy) -> btkPWRFileIO\n"
		"\n"
		"\n"
		"Interface to read PWR files (Elite - BTS Bioengineering).\n"
		""},
	 { (char *)"btkPWRFileIO___deref__", _wrap_btkPWRFileIO___deref__, METH_VARARGS, (char *)"btkPWRFileIO___deref__(self) -> btkPWRFileIO_impl *"},
	 { (char *)"delete_btkPWRFileIO", _wrap_delete_btkPWRFileIO, METH_VARARGS, (char *)"delete_btkPWRFileIO(self)"},
	 { (char *)"btkPWRFileIO_GetFileType", _wrap_btkPWRFileIO_GetFileType, METH_VARARGS, (char *)"\n"
		"btkPWRFileIO_GetFileType(self) -> btkAcquisitionFileIO_impl::FileType\n"
		"\n"
		"Gets the type of the file.\n"
		""},
	 { (char *)"btkPWRFileIO_GetByteOrder", _wrap_btkPWRFileIO_GetByteOrder, METH_VARARGS, (char *)"\n"
		"btkPWRFileIO_GetByteOrder(self) -> btkAcquisitionFileIO_impl::ByteOrder\n"
		"\n"
		"Gets the byte order of the file (only for binary file).\n"
		""},
	 { (char *)"btkPWRFileIO_GetByteOrderAsString", _wrap_btkPWRFileIO_GetByteOrderAsString, METH_VARARGS, (char *)"\n"
		"btkPWRFileIO_GetByteOrderAsString(self) -> std::string\n"
		"\n"
		"Gets the byte order as a string.\n"
		""},
	 { (char *)"btkPWRFileIO_SetByteOrder", _wrap_btkPWRFileIO_SetByteOrder, METH_VARARGS, (char *)"\n"
		"btkPWRFileIO_SetByteOrder(self, b)\n"
		"\n"
		"Sets the byte order of the file.\n"
		""},
	 { (char *)"btkPWRFileIO_GetStorageFormat", _wrap_btkPWRFileIO_GetStorageFormat, METH_VARARGS, (char *)"\n"
		"btkPWRFileIO_GetStorageFormat(self) -> btkAcquisitionFileIO_impl::StorageFormat\n"
		"\n"
		"Return the format used to store points and analog channels.\n"
		""},
	 { (char *)"btkPWRFileIO_GetStorageFormatAsString", _wrap_btkPWRFileIO_GetStorageFormatAsString, METH_VARARGS, (char *)"\n"
		"btkPWRFileIO_GetStorageFormatAsString(self) -> std::string\n"
		"\n"
		"Gets the storage format as a string.\n"
		""},
	 { (char *)"btkPWRFileIO_SetStorageFormat", _wrap_btkPWRFileIO_SetStorageFormat, METH_VARARGS, (char *)"\n"
		"btkPWRFileIO_SetStorageFormat(self, s)\n"
		"\n"
		"Set the format used to store points and analog channels.\n"
		""},
	 { (char *)"btkPWRFileIO_GetInternalsUpdateOptions", _wrap_btkPWRFileIO_GetInternalsUpdateOptions, METH_VARARGS, (char *)"\n"
		"btkPWRFileIO_GetInternalsUpdateOptions(self) -> int\n"
		"\n"
		"Returns the option(s) used to update internals.\n"
		""},
	 { (char *)"btkPWRFileIO_SetInternalsUpdateOptions", _wrap_btkPWRFileIO_SetInternalsUpdateOptions, METH_VARARGS, (char *)"\n"
		"btkPWRFileIO_SetInternalsUpdateOptions(self, options)\n"
		"\n"
		"Sets the option(s) used to update internals.\n"
		""},
	 { (char *)"btkPWRFileIO_HasInternalsUpdateOption", _wrap_btkPWRFileIO_HasInternalsUpdateOption, METH_VARARGS, (char *)"\n"
		"btkPWRFileIO_HasInternalsUpdateOption(self, option) -> bool\n"
		"\n"
		"Returns true if the given @a option is used or false if not.\n"
		""},
	 { (char *)"btkPWRFileIO_CanReadFile", _wrap_btkPWRFileIO_CanReadFile, METH_VARARGS, (char *)"\n"
		"btkPWRFileIO_CanReadFile(self, filename) -> bool\n"
		"\n"
		"Checks if the given filename can be read by this AcquisitionFileIO. This methods should try to read the file header instead to check the file's suffix.\n"
		""},
	 { (char *)"btkPWRFileIO_CanWriteFile", _wrap_btkPWRFileIO_CanWriteFile, METH_VARARGS, (char *)"\n"
		"btkPWRFileIO_CanWriteFile(self, filename) -> bool\n"
		"\n"
		"Checks if the given filename can be write by this AcquisitionFileIO. \n"
		"This method should try to determine if the file's suffix corresponds to one of the supported file's suffixes by this btkAcquisitionFileIO.\n"
		""},
	 { (char *)"btkPWRFileIO_Read", _wrap_btkPWRFileIO_Read, METH_VARARGS, (char *)"\n"
		"btkPWRFileIO_Read(self, filename, output)\n"
		"\n"
		"Read the file designated by the given filename and fill the given btkAcquisition\n"
		""},
	 { (char *)"btkPWRFileIO_Write", _wrap_btkPWRFileIO_Write, METH_VARARGS, (char *)"\n"
		"btkPWRFileIO_Write(self, filename, input)\n"
		"\n"
		"Write the file designated by the given filename with the content of the given btkAcquisition.\n"
		""},
	 { (char *)"btkPWRFileIO_swigregister", btkPWRFileIO_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_btkRAxFileIO", _wrap_new_btkRAxFileIO, METH_VARARGS, (char *)"\n"
		"btkRAxFileIO()\n"
		"new_btkRAxFileIO(toCopy) -> btkRAxFileIO\n"
		"\n"
		"\n"
		"Interface to read RAW, RAH files (Elite - BTS Bioengineering).\n"
		""},
	 { (char *)"btkRAxFileIO___deref__", _wrap_btkRAxFileIO___deref__, METH_VARARGS, (char *)"btkRAxFileIO___deref__(self) -> btkRAxFileIO_impl *"},
	 { (char *)"delete_btkRAxFileIO", _wrap_delete_btkRAxFileIO, METH_VARARGS, (char *)"delete_btkRAxFileIO(self)"},
	 { (char *)"btkRAxFileIO_GetFileType", _wrap_btkRAxFileIO_GetFileType, METH_VARARGS, (char *)"\n"
		"btkRAxFileIO_GetFileType(self) -> btkAcquisitionFileIO_impl::FileType\n"
		"\n"
		"Gets the type of the file.\n"
		""},
	 { (char *)"btkRAxFileIO_GetByteOrder", _wrap_btkRAxFileIO_GetByteOrder, METH_VARARGS, (char *)"\n"
		"btkRAxFileIO_GetByteOrder(self) -> btkAcquisitionFileIO_impl::ByteOrder\n"
		"\n"
		"Gets the byte order of the file (only for binary file).\n"
		""},
	 { (char *)"btkRAxFileIO_GetByteOrderAsString", _wrap_btkRAxFileIO_GetByteOrderAsString, METH_VARARGS, (char *)"\n"
		"btkRAxFileIO_GetByteOrderAsString(self) -> std::string\n"
		"\n"
		"Gets the byte order as a string.\n"
		""},
	 { (char *)"btkRAxFileIO_SetByteOrder", _wrap_btkRAxFileIO_SetByteOrder, METH_VARARGS, (char *)"\n"
		"btkRAxFileIO_SetByteOrder(self, b)\n"
		"\n"
		"Sets the byte order of the file.\n"
		""},
	 { (char *)"btkRAxFileIO_GetStorageFormat", _wrap_btkRAxFileIO_GetStorageFormat, METH_VARARGS, (char *)"\n"
		"btkRAxFileIO_GetStorageFormat(self) -> btkAcquisitionFileIO_impl::StorageFormat\n"
		"\n"
		"Return the format used to store points and analog channels.\n"
		""},
	 { (char *)"btkRAxFileIO_GetStorageFormatAsString", _wrap_btkRAxFileIO_GetStorageFormatAsString, METH_VARARGS, (char *)"\n"
		"btkRAxFileIO_GetStorageFormatAsString(self) -> std::string\n"
		"\n"
		"Gets the storage format as a string.\n"
		""},
	 { (char *)"btkRAxFileIO_SetStorageFormat", _wrap_btkRAxFileIO_SetStorageFormat, METH_VARARGS, (char *)"\n"
		"btkRAxFileIO_SetStorageFormat(self, s)\n"
		"\n"
		"Set the format used to store points and analog channels.\n"
		""},
	 { (char *)"btkRAxFileIO_GetInternalsUpdateOptions", _wrap_btkRAxFileIO_GetInternalsUpdateOptions, METH_VARARGS, (char *)"\n"
		"btkRAxFileIO_GetInternalsUpdateOptions(self) -> int\n"
		"\n"
		"Returns the option(s) used to update internals.\n"
		""},
	 { (char *)"btkRAxFileIO_SetInternalsUpdateOptions", _wrap_btkRAxFileIO_SetInternalsUpdateOptions, METH_VARARGS, (char *)"\n"
		"btkRAxFileIO_SetInternalsUpdateOptions(self, options)\n"
		"\n"
		"Sets the option(s) used to update internals.\n"
		""},
	 { (char *)"btkRAxFileIO_HasInternalsUpdateOption", _wrap_btkRAxFileIO_HasInternalsUpdateOption, METH_VARARGS, (char *)"\n"
		"btkRAxFileIO_HasInternalsUpdateOption(self, option) -> bool\n"
		"\n"
		"Returns true if the given @a option is used or false if not.\n"
		""},
	 { (char *)"btkRAxFileIO_CanReadFile", _wrap_btkRAxFileIO_CanReadFile, METH_VARARGS, (char *)"\n"
		"btkRAxFileIO_CanReadFile(self, filename) -> bool\n"
		"\n"
		"Checks if the given filename can be read by this AcquisitionFileIO. This methods should try to read the file header instead to check the file's suffix.\n"
		""},
	 { (char *)"btkRAxFileIO_CanWriteFile", _wrap_btkRAxFileIO_CanWriteFile, METH_VARARGS, (char *)"\n"
		"btkRAxFileIO_CanWriteFile(self, filename) -> bool\n"
		"\n"
		"Checks if the given filename can be write by this AcquisitionFileIO. \n"
		"This method should try to determine if the file's suffix corresponds to one of the supported file's suffixes by this btkAcquisitionFileIO.\n"
		""},
	 { (char *)"btkRAxFileIO_Read", _wrap_btkRAxFileIO_Read, METH_VARARGS, (char *)"\n"
		"btkRAxFileIO_Read(self, filename, output)\n"
		"\n"
		"Read the file designated by the given filename and fill the given btkAcquisition\n"
		""},
	 { (char *)"btkRAxFileIO_Write", _wrap_btkRAxFileIO_Write, METH_VARARGS, (char *)"\n"
		"btkRAxFileIO_Write(self, filename, input)\n"
		"\n"
		"Write the file designated by the given filename with the content of the given btkAcquisition.\n"
		""},
	 { (char *)"btkRAxFileIO_swigregister", btkRAxFileIO_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_btkRICFileIO", _wrap_new_btkRICFileIO, METH_VARARGS, (char *)"\n"
		"btkRICFileIO()\n"
		"new_btkRICFileIO(toCopy) -> btkRICFileIO\n"
		"\n"
		"\n"
		"Interface to read RIC files (Elite - BTS Bioengineering).\n"
		""},
	 { (char *)"btkRICFileIO___deref__", _wrap_btkRICFileIO___deref__, METH_VARARGS, (char *)"btkRICFileIO___deref__(self) -> btkRICFileIO_impl *"},
	 { (char *)"delete_btkRICFileIO", _wrap_delete_btkRICFileIO, METH_VARARGS, (char *)"delete_btkRICFileIO(self)"},
	 { (char *)"btkRICFileIO_GetFileType", _wrap_btkRICFileIO_GetFileType, METH_VARARGS, (char *)"\n"
		"btkRICFileIO_GetFileType(self) -> btkAcquisitionFileIO_impl::FileType\n"
		"\n"
		"Gets the type of the file.\n"
		""},
	 { (char *)"btkRICFileIO_GetByteOrder", _wrap_btkRICFileIO_GetByteOrder, METH_VARARGS, (char *)"\n"
		"btkRICFileIO_GetByteOrder(self) -> btkAcquisitionFileIO_impl::ByteOrder\n"
		"\n"
		"Gets the byte order of the file (only for binary file).\n"
		""},
	 { (char *)"btkRICFileIO_GetByteOrderAsString", _wrap_btkRICFileIO_GetByteOrderAsString, METH_VARARGS, (char *)"\n"
		"btkRICFileIO_GetByteOrderAsString(self) -> std::string\n"
		"\n"
		"Gets the byte order as a string.\n"
		""},
	 { (char *)"btkRICFileIO_SetByteOrder", _wrap_btkRICFileIO_SetByteOrder, METH_VARARGS, (char *)"\n"
		"btkRICFileIO_SetByteOrder(self, b)\n"
		"\n"
		"Sets the byte order of the file.\n"
		""},
	 { (char *)"btkRICFileIO_GetStorageFormat", _wrap_btkRICFileIO_GetStorageFormat, METH_VARARGS, (char *)"\n"
		"btkRICFileIO_GetStorageFormat(self) -> btkAcquisitionFileIO_impl::StorageFormat\n"
		"\n"
		"Return the format used to store points and analog channels.\n"
		""},
	 { (char *)"btkRICFileIO_GetStorageFormatAsString", _wrap_btkRICFileIO_GetStorageFormatAsString, METH_VARARGS, (char *)"\n"
		"btkRICFileIO_GetStorageFormatAsString(self) -> std::string\n"
		"\n"
		"Gets the storage format as a string.\n"
		""},
	 { (char *)"btkRICFileIO_SetStorageFormat", _wrap_btkRICFileIO_SetStorageFormat, METH_VARARGS, (char *)"\n"
		"btkRICFileIO_SetStorageFormat(self, s)\n"
		"\n"
		"Set the format used to store points and analog channels.\n"
		""},
	 { (char *)"btkRICFileIO_GetInternalsUpdateOptions", _wrap_btkRICFileIO_GetInternalsUpdateOptions, METH_VARARGS, (char *)"\n"
		"btkRICFileIO_GetInternalsUpdateOptions(self) -> int\n"
		"\n"
		"Returns the option(s) used to update internals.\n"
		""},
	 { (char *)"btkRICFileIO_SetInternalsUpdateOptions", _wrap_btkRICFileIO_SetInternalsUpdateOptions, METH_VARARGS, (char *)"\n"
		"btkRICFileIO_SetInternalsUpdateOptions(self, options)\n"
		"\n"
		"Sets the option(s) used to update internals.\n"
		""},
	 { (char *)"btkRICFileIO_HasInternalsUpdateOption", _wrap_btkRICFileIO_HasInternalsUpdateOption, METH_VARARGS, (char *)"\n"
		"btkRICFileIO_HasInternalsUpdateOption(self, option) -> bool\n"
		"\n"
		"Returns true if the given @a option is used or false if not.\n"
		""},
	 { (char *)"btkRICFileIO_CanReadFile", _wrap_btkRICFileIO_CanReadFile, METH_VARARGS, (char *)"\n"
		"btkRICFileIO_CanReadFile(self, filename) -> bool\n"
		"\n"
		"Checks if the given filename can be read by this AcquisitionFileIO. This methods should try to read the file header instead to check the file's suffix.\n"
		""},
	 { (char *)"btkRICFileIO_CanWriteFile", _wrap_btkRICFileIO_CanWriteFile, METH_VARARGS, (char *)"\n"
		"btkRICFileIO_CanWriteFile(self, filename) -> bool\n"
		"\n"
		"Checks if the given filename can be write by this AcquisitionFileIO. \n"
		"This method should try to determine if the file's suffix corresponds to one of the supported file's suffixes by this btkAcquisitionFileIO.\n"
		""},
	 { (char *)"btkRICFileIO_Read", _wrap_btkRICFileIO_Read, METH_VARARGS, (char *)"\n"
		"btkRICFileIO_Read(self, filename, output)\n"
		"\n"
		"Read the file designated by the given filename and fill the given btkAcquisition\n"
		""},
	 { (char *)"btkRICFileIO_Write", _wrap_btkRICFileIO_Write, METH_VARARGS, (char *)"\n"
		"btkRICFileIO_Write(self, filename, input)\n"
		"\n"
		"Write the file designated by the given filename with the content of the given btkAcquisition.\n"
		""},
	 { (char *)"btkRICFileIO_swigregister", btkRICFileIO_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_btkTDFFileIO", _wrap_new_btkTDFFileIO, METH_VARARGS, (char *)"\n"
		"btkTDFFileIO()\n"
		"new_btkTDFFileIO(toCopy) -> btkTDFFileIO\n"
		"\n"
		"\n"
		"Interface to read TDF files (BTS Bioengineering).\n"
		""},
	 { (char *)"btkTDFFileIO___deref__", _wrap_btkTDFFileIO___deref__, METH_VARARGS, (char *)"btkTDFFileIO___deref__(self) -> btkTDFFileIO_impl *"},
	 { (char *)"delete_btkTDFFileIO", _wrap_delete_btkTDFFileIO, METH_VARARGS, (char *)"delete_btkTDFFileIO(self)"},
	 { (char *)"btkTDFFileIO_GetFileType", _wrap_btkTDFFileIO_GetFileType, METH_VARARGS, (char *)"\n"
		"btkTDFFileIO_GetFileType(self) -> btkAcquisitionFileIO_impl::FileType\n"
		"\n"
		"Gets the type of the file.\n"
		""},
	 { (char *)"btkTDFFileIO_GetByteOrder", _wrap_btkTDFFileIO_GetByteOrder, METH_VARARGS, (char *)"\n"
		"btkTDFFileIO_GetByteOrder(self) -> btkAcquisitionFileIO_impl::ByteOrder\n"
		"\n"
		"Gets the byte order of the file (only for binary file).\n"
		""},
	 { (char *)"btkTDFFileIO_GetByteOrderAsString", _wrap_btkTDFFileIO_GetByteOrderAsString, METH_VARARGS, (char *)"\n"
		"btkTDFFileIO_GetByteOrderAsString(self) -> std::string\n"
		"\n"
		"Gets the byte order as a string.\n"
		""},
	 { (char *)"btkTDFFileIO_SetByteOrder", _wrap_btkTDFFileIO_SetByteOrder, METH_VARARGS, (char *)"\n"
		"btkTDFFileIO_SetByteOrder(self, b)\n"
		"\n"
		"Sets the byte order of the file.\n"
		""},
	 { (char *)"btkTDFFileIO_GetStorageFormat", _wrap_btkTDFFileIO_GetStorageFormat, METH_VARARGS, (char *)"\n"
		"btkTDFFileIO_GetStorageFormat(self) -> btkAcquisitionFileIO_impl::StorageFormat\n"
		"\n"
		"Return the format used to store points and analog channels.\n"
		""},
	 { (char *)"btkTDFFileIO_GetStorageFormatAsString", _wrap_btkTDFFileIO_GetStorageFormatAsString, METH_VARARGS, (char *)"\n"
		"btkTDFFileIO_GetStorageFormatAsString(self) -> std::string\n"
		"\n"
		"Gets the storage format as a string.\n"
		""},
	 { (char *)"btkTDFFileIO_SetStorageFormat", _wrap_btkTDFFileIO_SetStorageFormat, METH_VARARGS, (char *)"\n"
		"btkTDFFileIO_SetStorageFormat(self, s)\n"
		"\n"
		"Set the format used to store points and analog channels.\n"
		""},
	 { (char *)"btkTDFFileIO_GetInternalsUpdateOptions", _wrap_btkTDFFileIO_GetInternalsUpdateOptions, METH_VARARGS, (char *)"\n"
		"btkTDFFileIO_GetInternalsUpdateOptions(self) -> int\n"
		"\n"
		"Returns the option(s) used to update internals.\n"
		""},
	 { (char *)"btkTDFFileIO_SetInternalsUpdateOptions", _wrap_btkTDFFileIO_SetInternalsUpdateOptions, METH_VARARGS, (char *)"\n"
		"btkTDFFileIO_SetInternalsUpdateOptions(self, options)\n"
		"\n"
		"Sets the option(s) used to update internals.\n"
		""},
	 { (char *)"btkTDFFileIO_HasInternalsUpdateOption", _wrap_btkTDFFileIO_HasInternalsUpdateOption, METH_VARARGS, (char *)"\n"
		"btkTDFFileIO_HasInternalsUpdateOption(self, option) -> bool\n"
		"\n"
		"Returns true if the given @a option is used or false if not.\n"
		""},
	 { (char *)"btkTDFFileIO_CanReadFile", _wrap_btkTDFFileIO_CanReadFile, METH_VARARGS, (char *)"\n"
		"btkTDFFileIO_CanReadFile(self, filename) -> bool\n"
		"\n"
		"Checks if the given filename can be read by this AcquisitionFileIO. This methods should try to read the file header instead to check the file's suffix.\n"
		""},
	 { (char *)"btkTDFFileIO_CanWriteFile", _wrap_btkTDFFileIO_CanWriteFile, METH_VARARGS, (char *)"\n"
		"btkTDFFileIO_CanWriteFile(self, filename) -> bool\n"
		"\n"
		"Checks if the given filename can be write by this AcquisitionFileIO. \n"
		"This method should try to determine if the file's suffix corresponds to one of the supported file's suffixes by this btkAcquisitionFileIO.\n"
		""},
	 { (char *)"btkTDFFileIO_Read", _wrap_btkTDFFileIO_Read, METH_VARARGS, (char *)"\n"
		"btkTDFFileIO_Read(self, filename, output)\n"
		"\n"
		"Read the file designated by the given filename and fill the given btkAcquisition\n"
		""},
	 { (char *)"btkTDFFileIO_Write", _wrap_btkTDFFileIO_Write, METH_VARARGS, (char *)"\n"
		"btkTDFFileIO_Write(self, filename, input)\n"
		"\n"
		"Write the file designated by the given filename with the content of the given btkAcquisition.\n"
		""},
	 { (char *)"btkTDFFileIO_swigregister", btkTDFFileIO_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_btkTRBFileIO", _wrap_new_btkTRBFileIO, METH_VARARGS, (char *)"\n"
		"btkTRBFileIO()\n"
		"new_btkTRBFileIO(toCopy) -> btkTRBFileIO\n"
		"\n"
		"\n"
		"Interface to read/write TRB files (Motion Analysis Corp.).\n"
		""},
	 { (char *)"btkTRBFileIO___deref__", _wrap_btkTRBFileIO___deref__, METH_VARARGS, (char *)"btkTRBFileIO___deref__(self) -> btkTRBFileIO_impl *"},
	 { (char *)"delete_btkTRBFileIO", _wrap_delete_btkTRBFileIO, METH_VARARGS, (char *)"delete_btkTRBFileIO(self)"},
	 { (char *)"btkTRBFileIO_GetFileType", _wrap_btkTRBFileIO_GetFileType, METH_VARARGS, (char *)"\n"
		"btkTRBFileIO_GetFileType(self) -> btkAcquisitionFileIO_impl::FileType\n"
		"\n"
		"Gets the type of the file.\n"
		""},
	 { (char *)"btkTRBFileIO_GetByteOrder", _wrap_btkTRBFileIO_GetByteOrder, METH_VARARGS, (char *)"\n"
		"btkTRBFileIO_GetByteOrder(self) -> btkAcquisitionFileIO_impl::ByteOrder\n"
		"\n"
		"Gets the byte order of the file (only for binary file).\n"
		""},
	 { (char *)"btkTRBFileIO_GetByteOrderAsString", _wrap_btkTRBFileIO_GetByteOrderAsString, METH_VARARGS, (char *)"\n"
		"btkTRBFileIO_GetByteOrderAsString(self) -> std::string\n"
		"\n"
		"Gets the byte order as a string.\n"
		""},
	 { (char *)"btkTRBFileIO_SetByteOrder", _wrap_btkTRBFileIO_SetByteOrder, METH_VARARGS, (char *)"\n"
		"btkTRBFileIO_SetByteOrder(self, b)\n"
		"\n"
		"Sets the byte order of the file.\n"
		""},
	 { (char *)"btkTRBFileIO_GetStorageFormat", _wrap_btkTRBFileIO_GetStorageFormat, METH_VARARGS, (char *)"\n"
		"btkTRBFileIO_GetStorageFormat(self) -> btkAcquisitionFileIO_impl::StorageFormat\n"
		"\n"
		"Return the format used to store points and analog channels.\n"
		""},
	 { (char *)"btkTRBFileIO_GetStorageFormatAsString", _wrap_btkTRBFileIO_GetStorageFormatAsString, METH_VARARGS, (char *)"\n"
		"btkTRBFileIO_GetStorageFormatAsString(self) -> std::string\n"
		"\n"
		"Gets the storage format as a string.\n"
		""},
	 { (char *)"btkTRBFileIO_SetStorageFormat", _wrap_btkTRBFileIO_SetStorageFormat, METH_VARARGS, (char *)"\n"
		"btkTRBFileIO_SetStorageFormat(self, s)\n"
		"\n"
		"Set the format used to store points and analog channels.\n"
		""},
	 { (char *)"btkTRBFileIO_GetInternalsUpdateOptions", _wrap_btkTRBFileIO_GetInternalsUpdateOptions, METH_VARARGS, (char *)"\n"
		"btkTRBFileIO_GetInternalsUpdateOptions(self) -> int\n"
		"\n"
		"Returns the option(s) used to update internals.\n"
		""},
	 { (char *)"btkTRBFileIO_SetInternalsUpdateOptions", _wrap_btkTRBFileIO_SetInternalsUpdateOptions, METH_VARARGS, (char *)"\n"
		"btkTRBFileIO_SetInternalsUpdateOptions(self, options)\n"
		"\n"
		"Sets the option(s) used to update internals.\n"
		""},
	 { (char *)"btkTRBFileIO_HasInternalsUpdateOption", _wrap_btkTRBFileIO_HasInternalsUpdateOption, METH_VARARGS, (char *)"\n"
		"btkTRBFileIO_HasInternalsUpdateOption(self, option) -> bool\n"
		"\n"
		"Returns true if the given @a option is used or false if not.\n"
		""},
	 { (char *)"btkTRBFileIO_CanReadFile", _wrap_btkTRBFileIO_CanReadFile, METH_VARARGS, (char *)"\n"
		"btkTRBFileIO_CanReadFile(self, filename) -> bool\n"
		"\n"
		"Checks if the given filename can be read by this AcquisitionFileIO. This methods should try to read the file header instead to check the file's suffix.\n"
		""},
	 { (char *)"btkTRBFileIO_CanWriteFile", _wrap_btkTRBFileIO_CanWriteFile, METH_VARARGS, (char *)"\n"
		"btkTRBFileIO_CanWriteFile(self, filename) -> bool\n"
		"\n"
		"Checks if the given filename can be write by this AcquisitionFileIO. \n"
		"This method should try to determine if the file's suffix corresponds to one of the supported file's suffixes by this btkAcquisitionFileIO.\n"
		""},
	 { (char *)"btkTRBFileIO_Read", _wrap_btkTRBFileIO_Read, METH_VARARGS, (char *)"\n"
		"btkTRBFileIO_Read(self, filename, output)\n"
		"\n"
		"Read the file designated by the given filename and fill the given btkAcquisition\n"
		""},
	 { (char *)"btkTRBFileIO_Write", _wrap_btkTRBFileIO_Write, METH_VARARGS, (char *)"\n"
		"btkTRBFileIO_Write(self, filename, input)\n"
		"\n"
		"Write the file designated by the given filename with the content of the given btkAcquisition.\n"
		""},
	 { (char *)"btkTRBFileIO_swigregister", btkTRBFileIO_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_btkTRCFileIO", _wrap_new_btkTRCFileIO, METH_VARARGS, (char *)"\n"
		"btkTRCFileIO()\n"
		"new_btkTRCFileIO(toCopy) -> btkTRCFileIO\n"
		"\n"
		"\n"
		"Interface to read/write TRC files (Motion Analysis Corp.).\n"
		""},
	 { (char *)"btkTRCFileIO___deref__", _wrap_btkTRCFileIO___deref__, METH_VARARGS, (char *)"btkTRCFileIO___deref__(self) -> btkTRCFileIO_impl *"},
	 { (char *)"delete_btkTRCFileIO", _wrap_delete_btkTRCFileIO, METH_VARARGS, (char *)"delete_btkTRCFileIO(self)"},
	 { (char *)"btkTRCFileIO_GetFileType", _wrap_btkTRCFileIO_GetFileType, METH_VARARGS, (char *)"\n"
		"btkTRCFileIO_GetFileType(self) -> btkAcquisitionFileIO_impl::FileType\n"
		"\n"
		"Gets the type of the file.\n"
		""},
	 { (char *)"btkTRCFileIO_GetByteOrder", _wrap_btkTRCFileIO_GetByteOrder, METH_VARARGS, (char *)"\n"
		"btkTRCFileIO_GetByteOrder(self) -> btkAcquisitionFileIO_impl::ByteOrder\n"
		"\n"
		"Gets the byte order of the file (only for binary file).\n"
		""},
	 { (char *)"btkTRCFileIO_GetByteOrderAsString", _wrap_btkTRCFileIO_GetByteOrderAsString, METH_VARARGS, (char *)"\n"
		"btkTRCFileIO_GetByteOrderAsString(self) -> std::string\n"
		"\n"
		"Gets the byte order as a string.\n"
		""},
	 { (char *)"btkTRCFileIO_SetByteOrder", _wrap_btkTRCFileIO_SetByteOrder, METH_VARARGS, (char *)"\n"
		"btkTRCFileIO_SetByteOrder(self, b)\n"
		"\n"
		"Sets the byte order of the file.\n"
		""},
	 { (char *)"btkTRCFileIO_GetStorageFormat", _wrap_btkTRCFileIO_GetStorageFormat, METH_VARARGS, (char *)"\n"
		"btkTRCFileIO_GetStorageFormat(self) -> btkAcquisitionFileIO_impl::StorageFormat\n"
		"\n"
		"Return the format used to store points and analog channels.\n"
		""},
	 { (char *)"btkTRCFileIO_GetStorageFormatAsString", _wrap_btkTRCFileIO_GetStorageFormatAsString, METH_VARARGS, (char *)"\n"
		"btkTRCFileIO_GetStorageFormatAsString(self) -> std::string\n"
		"\n"
		"Gets the storage format as a string.\n"
		""},
	 { (char *)"btkTRCFileIO_SetStorageFormat", _wrap_btkTRCFileIO_SetStorageFormat, METH_VARARGS, (char *)"\n"
		"btkTRCFileIO_SetStorageFormat(self, s)\n"
		"\n"
		"Set the format used to store points and analog channels.\n"
		""},
	 { (char *)"btkTRCFileIO_GetInternalsUpdateOptions", _wrap_btkTRCFileIO_GetInternalsUpdateOptions, METH_VARARGS, (char *)"\n"
		"btkTRCFileIO_GetInternalsUpdateOptions(self) -> int\n"
		"\n"
		"Returns the option(s) used to update internals.\n"
		""},
	 { (char *)"btkTRCFileIO_SetInternalsUpdateOptions", _wrap_btkTRCFileIO_SetInternalsUpdateOptions, METH_VARARGS, (char *)"\n"
		"btkTRCFileIO_SetInternalsUpdateOptions(self, options)\n"
		"\n"
		"Sets the option(s) used to update internals.\n"
		""},
	 { (char *)"btkTRCFileIO_HasInternalsUpdateOption", _wrap_btkTRCFileIO_HasInternalsUpdateOption, METH_VARARGS, (char *)"\n"
		"btkTRCFileIO_HasInternalsUpdateOption(self, option) -> bool\n"
		"\n"
		"Returns true if the given @a option is used or false if not.\n"
		""},
	 { (char *)"btkTRCFileIO_CanReadFile", _wrap_btkTRCFileIO_CanReadFile, METH_VARARGS, (char *)"\n"
		"btkTRCFileIO_CanReadFile(self, filename) -> bool\n"
		"\n"
		"Checks if the given filename can be read by this AcquisitionFileIO. This methods should try to read the file header instead to check the file's suffix.\n"
		""},
	 { (char *)"btkTRCFileIO_CanWriteFile", _wrap_btkTRCFileIO_CanWriteFile, METH_VARARGS, (char *)"\n"
		"btkTRCFileIO_CanWriteFile(self, filename) -> bool\n"
		"\n"
		"Checks if the given filename can be write by this AcquisitionFileIO. \n"
		"This method should try to determine if the file's suffix corresponds to one of the supported file's suffixes by this btkAcquisitionFileIO.\n"
		""},
	 { (char *)"btkTRCFileIO_Read", _wrap_btkTRCFileIO_Read, METH_VARARGS, (char *)"\n"
		"btkTRCFileIO_Read(self, filename, output)\n"
		"\n"
		"Read the file designated by the given filename and fill the given btkAcquisition\n"
		""},
	 { (char *)"btkTRCFileIO_Write", _wrap_btkTRCFileIO_Write, METH_VARARGS, (char *)"\n"
		"btkTRCFileIO_Write(self, filename, input)\n"
		"\n"
		"Write the file designated by the given filename with the content of the given btkAcquisition.\n"
		""},
	 { (char *)"btkTRCFileIO_swigregister", btkTRCFileIO_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_btkXLSOrthoTrakFileIO", _wrap_new_btkXLSOrthoTrakFileIO, METH_VARARGS, (char *)"\n"
		"btkXLSOrthoTrakFileIO()\n"
		"new_btkXLSOrthoTrakFileIO(toCopy) -> btkXLSOrthoTrakFileIO\n"
		"\n"
		"\n"
		"Interface to read XLS OrthoTrak files (Motion Analysis Corp.).\n"
		""},
	 { (char *)"btkXLSOrthoTrakFileIO___deref__", _wrap_btkXLSOrthoTrakFileIO___deref__, METH_VARARGS, (char *)"btkXLSOrthoTrakFileIO___deref__(self) -> btkXLSOrthoTrakFileIO_impl *"},
	 { (char *)"delete_btkXLSOrthoTrakFileIO", _wrap_delete_btkXLSOrthoTrakFileIO, METH_VARARGS, (char *)"delete_btkXLSOrthoTrakFileIO(self)"},
	 { (char *)"btkXLSOrthoTrakFileIO_GetFileType", _wrap_btkXLSOrthoTrakFileIO_GetFileType, METH_VARARGS, (char *)"\n"
		"btkXLSOrthoTrakFileIO_GetFileType(self) -> btkAcquisitionFileIO_impl::FileType\n"
		"\n"
		"Gets the type of the file.\n"
		""},
	 { (char *)"btkXLSOrthoTrakFileIO_GetByteOrder", _wrap_btkXLSOrthoTrakFileIO_GetByteOrder, METH_VARARGS, (char *)"\n"
		"btkXLSOrthoTrakFileIO_GetByteOrder(self) -> btkAcquisitionFileIO_impl::ByteOrder\n"
		"\n"
		"Gets the byte order of the file (only for binary file).\n"
		""},
	 { (char *)"btkXLSOrthoTrakFileIO_GetByteOrderAsString", _wrap_btkXLSOrthoTrakFileIO_GetByteOrderAsString, METH_VARARGS, (char *)"\n"
		"btkXLSOrthoTrakFileIO_GetByteOrderAsString(self) -> std::string\n"
		"\n"
		"Gets the byte order as a string.\n"
		""},
	 { (char *)"btkXLSOrthoTrakFileIO_SetByteOrder", _wrap_btkXLSOrthoTrakFileIO_SetByteOrder, METH_VARARGS, (char *)"\n"
		"btkXLSOrthoTrakFileIO_SetByteOrder(self, b)\n"
		"\n"
		"Sets the byte order of the file.\n"
		""},
	 { (char *)"btkXLSOrthoTrakFileIO_GetStorageFormat", _wrap_btkXLSOrthoTrakFileIO_GetStorageFormat, METH_VARARGS, (char *)"\n"
		"btkXLSOrthoTrakFileIO_GetStorageFormat(self) -> btkAcquisitionFileIO_impl::StorageFormat\n"
		"\n"
		"Return the format used to store points and analog channels.\n"
		""},
	 { (char *)"btkXLSOrthoTrakFileIO_GetStorageFormatAsString", _wrap_btkXLSOrthoTrakFileIO_GetStorageFormatAsString, METH_VARARGS, (char *)"\n"
		"btkXLSOrthoTrakFileIO_GetStorageFormatAsString(self) -> std::string\n"
		"\n"
		"Gets the storage format as a string.\n"
		""},
	 { (char *)"btkXLSOrthoTrakFileIO_SetStorageFormat", _wrap_btkXLSOrthoTrakFileIO_SetStorageFormat, METH_VARARGS, (char *)"\n"
		"btkXLSOrthoTrakFileIO_SetStorageFormat(self, s)\n"
		"\n"
		"Set the format used to store points and analog channels.\n"
		""},
	 { (char *)"btkXLSOrthoTrakFileIO_GetInternalsUpdateOptions", _wrap_btkXLSOrthoTrakFileIO_GetInternalsUpdateOptions, METH_VARARGS, (char *)"\n"
		"btkXLSOrthoTrakFileIO_GetInternalsUpdateOptions(self) -> int\n"
		"\n"
		"Returns the option(s) used to update internals.\n"
		""},
	 { (char *)"btkXLSOrthoTrakFileIO_SetInternalsUpdateOptions", _wrap_btkXLSOrthoTrakFileIO_SetInternalsUpdateOptions, METH_VARARGS, (char *)"\n"
		"btkXLSOrthoTrakFileIO_SetInternalsUpdateOptions(self, options)\n"
		"\n"
		"Sets the option(s) used to update internals.\n"
		""},
	 { (char *)"btkXLSOrthoTrakFileIO_HasInternalsUpdateOption", _wrap_btkXLSOrthoTrakFileIO_HasInternalsUpdateOption, METH_VARARGS, (char *)"\n"
		"btkXLSOrthoTrakFileIO_HasInternalsUpdateOption(self, option) -> bool\n"
		"\n"
		"Returns true if the given @a option is used or false if not.\n"
		""},
	 { (char *)"btkXLSOrthoTrakFileIO_CanReadFile", _wrap_btkXLSOrthoTrakFileIO_CanReadFile, METH_VARARGS, (char *)"\n"
		"btkXLSOrthoTrakFileIO_CanReadFile(self, filename) -> bool\n"
		"\n"
		"Checks if the given filename can be read by this AcquisitionFileIO. This methods should try to read the file header instead to check the file's suffix.\n"
		""},
	 { (char *)"btkXLSOrthoTrakFileIO_CanWriteFile", _wrap_btkXLSOrthoTrakFileIO_CanWriteFile, METH_VARARGS, (char *)"\n"
		"btkXLSOrthoTrakFileIO_CanWriteFile(self, filename) -> bool\n"
		"\n"
		"Checks if the given filename can be write by this AcquisitionFileIO. \n"
		"This method should try to determine if the file's suffix corresponds to one of the supported file's suffixes by this btkAcquisitionFileIO.\n"
		""},
	 { (char *)"btkXLSOrthoTrakFileIO_Read", _wrap_btkXLSOrthoTrakFileIO_Read, METH_VARARGS, (char *)"\n"
		"btkXLSOrthoTrakFileIO_Read(self, filename, output)\n"
		"\n"
		"Read the file designated by the given filename and fill the given btkAcquisition\n"
		""},
	 { (char *)"btkXLSOrthoTrakFileIO_Write", _wrap_btkXLSOrthoTrakFileIO_Write, METH_VARARGS, (char *)"\n"
		"btkXLSOrthoTrakFileIO_Write(self, filename, input)\n"
		"\n"
		"Write the file designated by the given filename with the content of the given btkAcquisition.\n"
		""},
	 { (char *)"btkXLSOrthoTrakFileIO_swigregister", btkXLSOrthoTrakFileIO_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_btkXMOVEFileIO", _wrap_new_btkXMOVEFileIO, METH_VARARGS, (char *)"\n"
		"btkXMOVEFileIO()\n"
		"new_btkXMOVEFileIO(toCopy) -> btkXMOVEFileIO\n"
		"\n"
		"\n"
		"Interface to read XMOVE files (Codamotion).\n"
		""},
	 { (char *)"btkXMOVEFileIO___deref__", _wrap_btkXMOVEFileIO___deref__, METH_VARARGS, (char *)"btkXMOVEFileIO___deref__(self) -> btkXMOVEFileIO_impl *"},
	 { (char *)"delete_btkXMOVEFileIO", _wrap_delete_btkXMOVEFileIO, METH_VARARGS, (char *)"delete_btkXMOVEFileIO(self)"},
	 { (char *)"btkXMOVEFileIO_GetFileType", _wrap_btkXMOVEFileIO_GetFileType, METH_VARARGS, (char *)"\n"
		"btkXMOVEFileIO_GetFileType(self) -> btkAcquisitionFileIO_impl::FileType\n"
		"\n"
		"Gets the type of the file.\n"
		""},
	 { (char *)"btkXMOVEFileIO_GetByteOrder", _wrap_btkXMOVEFileIO_GetByteOrder, METH_VARARGS, (char *)"\n"
		"btkXMOVEFileIO_GetByteOrder(self) -> btkAcquisitionFileIO_impl::ByteOrder\n"
		"\n"
		"Gets the byte order of the file (only for binary file).\n"
		""},
	 { (char *)"btkXMOVEFileIO_GetByteOrderAsString", _wrap_btkXMOVEFileIO_GetByteOrderAsString, METH_VARARGS, (char *)"\n"
		"btkXMOVEFileIO_GetByteOrderAsString(self) -> std::string\n"
		"\n"
		"Gets the byte order as a string.\n"
		""},
	 { (char *)"btkXMOVEFileIO_SetByteOrder", _wrap_btkXMOVEFileIO_SetByteOrder, METH_VARARGS, (char *)"\n"
		"btkXMOVEFileIO_SetByteOrder(self, b)\n"
		"\n"
		"Sets the byte order of the file.\n"
		""},
	 { (char *)"btkXMOVEFileIO_GetStorageFormat", _wrap_btkXMOVEFileIO_GetStorageFormat, METH_VARARGS, (char *)"\n"
		"btkXMOVEFileIO_GetStorageFormat(self) -> btkAcquisitionFileIO_impl::StorageFormat\n"
		"\n"
		"Return the format used to store points and analog channels.\n"
		""},
	 { (char *)"btkXMOVEFileIO_GetStorageFormatAsString", _wrap_btkXMOVEFileIO_GetStorageFormatAsString, METH_VARARGS, (char *)"\n"
		"btkXMOVEFileIO_GetStorageFormatAsString(self) -> std::string\n"
		"\n"
		"Gets the storage format as a string.\n"
		""},
	 { (char *)"btkXMOVEFileIO_SetStorageFormat", _wrap_btkXMOVEFileIO_SetStorageFormat, METH_VARARGS, (char *)"\n"
		"btkXMOVEFileIO_SetStorageFormat(self, s)\n"
		"\n"
		"Set the format used to store points and analog channels.\n"
		""},
	 { (char *)"btkXMOVEFileIO_GetInternalsUpdateOptions", _wrap_btkXMOVEFileIO_GetInternalsUpdateOptions, METH_VARARGS, (char *)"\n"
		"btkXMOVEFileIO_GetInternalsUpdateOptions(self) -> int\n"
		"\n"
		"Returns the option(s) used to update internals.\n"
		""},
	 { (char *)"btkXMOVEFileIO_SetInternalsUpdateOptions", _wrap_btkXMOVEFileIO_SetInternalsUpdateOptions, METH_VARARGS, (char *)"\n"
		"btkXMOVEFileIO_SetInternalsUpdateOptions(self, options)\n"
		"\n"
		"Sets the option(s) used to update internals.\n"
		""},
	 { (char *)"btkXMOVEFileIO_HasInternalsUpdateOption", _wrap_btkXMOVEFileIO_HasInternalsUpdateOption, METH_VARARGS, (char *)"\n"
		"btkXMOVEFileIO_HasInternalsUpdateOption(self, option) -> bool\n"
		"\n"
		"Returns true if the given @a option is used or false if not.\n"
		""},
	 { (char *)"btkXMOVEFileIO_CanReadFile", _wrap_btkXMOVEFileIO_CanReadFile, METH_VARARGS, (char *)"\n"
		"btkXMOVEFileIO_CanReadFile(self, filename) -> bool\n"
		"\n"
		"Checks if the given filename can be read by this AcquisitionFileIO. This methods should try to read the file header instead to check the file's suffix.\n"
		""},
	 { (char *)"btkXMOVEFileIO_CanWriteFile", _wrap_btkXMOVEFileIO_CanWriteFile, METH_VARARGS, (char *)"\n"
		"btkXMOVEFileIO_CanWriteFile(self, filename) -> bool\n"
		"\n"
		"Checks if the given filename can be write by this AcquisitionFileIO. \n"
		"This method should try to determine if the file's suffix corresponds to one of the supported file's suffixes by this btkAcquisitionFileIO.\n"
		""},
	 { (char *)"btkXMOVEFileIO_Read", _wrap_btkXMOVEFileIO_Read, METH_VARARGS, (char *)"\n"
		"btkXMOVEFileIO_Read(self, filename, output)\n"
		"\n"
		"Read the file designated by the given filename and fill the given btkAcquisition\n"
		""},
	 { (char *)"btkXMOVEFileIO_Write", _wrap_btkXMOVEFileIO_Write, METH_VARARGS, (char *)"\n"
		"btkXMOVEFileIO_Write(self, filename, input)\n"
		"\n"
		"Write the file designated by the given filename with the content of the given btkAcquisition.\n"
		""},
	 { (char *)"btkXMOVEFileIO_swigregister", btkXMOVEFileIO_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_btkAcquisitionUnitConverter", _wrap_new_btkAcquisitionUnitConverter, METH_VARARGS, (char *)"\n"
		"new_btkAcquisitionUnitConverter() -> btkAcquisitionUnitConverter\n"
		"\n"
		"\n"
		"This filter can convert units for trajectory, force, moment, angle and power.\n"
		"The known unit for the trajectory (length) are:\n"
		" - meter (m);\n"
		" - decimeter (dm);\n"
		" - centimeter (cm)\n"
		" - millimeter (mm)\n"
		" - inch (in)\n"
		"The known unit for the force are:\n"
		" - newton (N);\n"
		"The known unit for the moment are:\n"
		" - newton by meter (Nm);\n"
		" - newton by decimeter (Ndm);\n"
		" - newton by centimeter (Ncm);\n"
		" - newton by millimeter (Nmm);\n"
		" - newton by inch (Nin);\n"
		"The known unit for the angle are:\n"
		" - radian (rad);\n"
		" - degree (deg);\n"
		"The known unit for the power are:\n"
		" - watt (W);\n"
		"Moreover, the metadata known to be influenced by these unit (FORCE_PLATFORM, \n"
		"SEG) are also converted. The metadata POINT:*UNITS are not updated as they are not\n"
		"used in BTK (instead, you can use the method btkAcquisition::GetPointUnit()).\n"
		"\n"
		"Use the method btkAcquisitionUnitConverter::SetUnit() with the following enumeration \n"
		"value to select the wanted units:\n"
		" - btk.btkAcquisitionUnitConverter.Length\n"
		" - btk.btkAcquisitionUnitConverter.Angle\n"
		" - btk.btkAcquisitionUnitConverter.Force\n"
		" - btk.btkAcquisitionUnitConverter.Moment\n"
		" - btk.btkAcquisitionUnitConverter.Power\n"
		"\n"
		"By default, the data will be converted in millimeter, newton, newton by millimeter, \n"
		"degree and watt. Even if you could convert trajectories and moments with the desired \n"
		"units, it is recommended to use the same length unit (i.e. mm and Nmm or m with Nm).\n"
		""},
	 { (char *)"btkAcquisitionUnitConverter___deref__", _wrap_btkAcquisitionUnitConverter___deref__, METH_VARARGS, (char *)"btkAcquisitionUnitConverter___deref__(self) -> btkAcquisitionUnitConverter_impl *"},
	 { (char *)"delete_btkAcquisitionUnitConverter", _wrap_delete_btkAcquisitionUnitConverter, METH_VARARGS, (char *)"delete_btkAcquisitionUnitConverter(self)"},
	 { (char *)"btkAcquisitionUnitConverter_GetInput", _wrap_btkAcquisitionUnitConverter_GetInput, METH_VARARGS, (char *)"\n"
		"btkAcquisitionUnitConverter_GetInput(self) -> btkAcquisition\n"
		"\n"
		"Gets the input registered with this process.\n"
		""},
	 { (char *)"btkAcquisitionUnitConverter_SetInput", _wrap_btkAcquisitionUnitConverter_SetInput, METH_VARARGS, (char *)"\n"
		"SetInput(self, btkAcquisition)\n"
		"\n"
		"Sets the input required with this process.\n"
		""},
	 { (char *)"btkAcquisitionUnitConverter_GetOutput", _wrap_btkAcquisitionUnitConverter_GetOutput, METH_VARARGS, (char *)"\n"
		"btkAcquisitionUnitConverter_GetOutput(self) -> btkAcquisition\n"
		"\n"
		"Returns the output created with this process.\n"
		""},
	 { (char *)"btkAcquisitionUnitConverter_SetUnit", _wrap_btkAcquisitionUnitConverter_SetUnit, METH_VARARGS, (char *)"\n"
		"SetUnit(self, btk.btkAcquisitionUnitConverter.Unit, string)\n"
		"\n"
		"Set the given unit with the given string\n"
		""},
	 { (char *)"btkAcquisitionUnitConverter_GetUnit", _wrap_btkAcquisitionUnitConverter_GetUnit, METH_VARARGS, (char *)"\n"
		"GetUnit(self, btk.btkAcquisitionUnitConverter.Unit) -> string\n"
		"\n"
		"Returns the string corresponding to the given unit\n"
		""},
	 { (char *)"btkAcquisitionUnitConverter_GetInputNumber", _wrap_btkAcquisitionUnitConverter_GetInputNumber, METH_VARARGS, (char *)"\n"
		"btkAcquisitionUnitConverter_GetInputNumber(self) -> int\n"
		"\n"
		"Returns the number of inputs.\n"
		""},
	 { (char *)"btkAcquisitionUnitConverter_GetValidInputNumber", _wrap_btkAcquisitionUnitConverter_GetValidInputNumber, METH_VARARGS, (char *)"\n"
		"btkAcquisitionUnitConverter_GetValidInputNumber(self) -> int\n"
		"\n"
		"Returns the number of inputs which are valid (i.e. not null).\n"
		""},
	 { (char *)"btkAcquisitionUnitConverter_GetOutputNumber", _wrap_btkAcquisitionUnitConverter_GetOutputNumber, METH_VARARGS, (char *)"\n"
		"btkAcquisitionUnitConverter_GetOutputNumber(self) -> int\n"
		"\n"
		"Returns the number of outputs.\n"
		""},
	 { (char *)"btkAcquisitionUnitConverter_ResetState", _wrap_btkAcquisitionUnitConverter_ResetState, METH_VARARGS, (char *)"\n"
		"btkAcquisitionUnitConverter_ResetState(self)\n"
		"\n"
		"Reset the state of the process. Usefull when an exception was thrown during the generation of the data.\n"
		""},
	 { (char *)"btkAcquisitionUnitConverter_Update", _wrap_btkAcquisitionUnitConverter_Update, METH_VARARGS, (char *)"\n"
		"btkAcquisitionUnitConverter_Update(self)\n"
		"\n"
		"Update the pipeline and then all the data inside. Recursive method which\n"
		" 1) determines the processes to update\n"
		" 2) generate the data by using the GenerateData() method.\n"
		""},
	 { (char *)"btkAcquisitionUnitConverter_GetTimestamp", _wrap_btkAcquisitionUnitConverter_GetTimestamp, METH_VARARGS, (char *)"\n"
		"btkAcquisitionUnitConverter_GetTimestamp(self) -> unsigned long\n"
		"\n"
		"Returns the timestamp of the object.\n"
		""},
	 { (char *)"btkAcquisitionUnitConverter_swigregister", btkAcquisitionUnitConverter_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_btkAnalogOffsetRemover", _wrap_new_btkAnalogOffsetRemover, METH_VARARGS, (char *)"\n"
		"new_btkAnalogOffsetRemover() -> btkAnalogOffsetRemover\n"
		"\n"
		"\n"
		"Remove a possible analog offset to the selected analog channels\n"
		"\n"
		"Based on the given offset input (see the method SetOffsetInput()), each analog signals\n"
		"are averaged and removed from the raw input (see the method SetRawInput()). The analog signals set in the raw input which\n"
		"are not given to the offset input are not processed but will be available in the output.\n"
		""},
	 { (char *)"btkAnalogOffsetRemover___deref__", _wrap_btkAnalogOffsetRemover___deref__, METH_VARARGS, (char *)"btkAnalogOffsetRemover___deref__(self) -> btkAnalogOffsetRemover_impl *"},
	 { (char *)"delete_btkAnalogOffsetRemover", _wrap_delete_btkAnalogOffsetRemover, METH_VARARGS, (char *)"delete_btkAnalogOffsetRemover(self)"},
	 { (char *)"btkAnalogOffsetRemover_SetRawInput", _wrap_btkAnalogOffsetRemover_SetRawInput, METH_VARARGS, (char *)"\n"
		"SetRawInput(self, btkAcquisition)\n"
		"\n"
		"Sets the input required with this process which is used as the input to process.\n"
		""},
	 { (char *)"btkAnalogOffsetRemover_GetRawInput", _wrap_btkAnalogOffsetRemover_GetRawInput, METH_VARARGS, (char *)"\n"
		"btkAnalogOffsetRemover_GetRawInput(self) -> btkAcquisition\n"
		"\n"
		"Gets the input registered with this process which is used as the input to process.\n"
		""},
	 { (char *)"btkAnalogOffsetRemover_SetOffsetInput", _wrap_btkAnalogOffsetRemover_SetOffsetInput, METH_VARARGS, (char *)"\n"
		"SetOffsetInput(self, btkAcquisition)\n"
		"\n"
		"Sets the input required with this process which corresponds to the offsets to remove.\n"
		""},
	 { (char *)"btkAnalogOffsetRemover_GetOffsetInput", _wrap_btkAnalogOffsetRemover_GetOffsetInput, METH_VARARGS, (char *)"\n"
		"btkAnalogOffsetRemover_GetOffsetInput(self) -> btkAcquisition\n"
		"\n"
		"Gets the input registered with this process which corresponds to the offsets to remove.\n"
		""},
	 { (char *)"btkAnalogOffsetRemover_GetOutput", _wrap_btkAnalogOffsetRemover_GetOutput, METH_VARARGS, (char *)"\n"
		"btkAnalogOffsetRemover_GetOutput(self) -> btkAcquisition\n"
		"\n"
		"Returns the output created with this process.\n"
		""},
	 { (char *)"btkAnalogOffsetRemover_GetInputNumber", _wrap_btkAnalogOffsetRemover_GetInputNumber, METH_VARARGS, (char *)"\n"
		"btkAnalogOffsetRemover_GetInputNumber(self) -> int\n"
		"\n"
		"Returns the number of inputs.\n"
		""},
	 { (char *)"btkAnalogOffsetRemover_GetValidInputNumber", _wrap_btkAnalogOffsetRemover_GetValidInputNumber, METH_VARARGS, (char *)"\n"
		"btkAnalogOffsetRemover_GetValidInputNumber(self) -> int\n"
		"\n"
		"Returns the number of inputs which are valid (i.e. not null).\n"
		""},
	 { (char *)"btkAnalogOffsetRemover_GetOutputNumber", _wrap_btkAnalogOffsetRemover_GetOutputNumber, METH_VARARGS, (char *)"\n"
		"btkAnalogOffsetRemover_GetOutputNumber(self) -> int\n"
		"\n"
		"Returns the number of outputs.\n"
		""},
	 { (char *)"btkAnalogOffsetRemover_ResetState", _wrap_btkAnalogOffsetRemover_ResetState, METH_VARARGS, (char *)"\n"
		"btkAnalogOffsetRemover_ResetState(self)\n"
		"\n"
		"Reset the state of the process. Usefull when an exception was thrown during the generation of the data.\n"
		""},
	 { (char *)"btkAnalogOffsetRemover_Update", _wrap_btkAnalogOffsetRemover_Update, METH_VARARGS, (char *)"\n"
		"btkAnalogOffsetRemover_Update(self)\n"
		"\n"
		"Update the pipeline and then all the data inside. Recursive method which\n"
		" 1) determines the processes to update\n"
		" 2) generate the data by using the GenerateData() method.\n"
		""},
	 { (char *)"btkAnalogOffsetRemover_GetTimestamp", _wrap_btkAnalogOffsetRemover_GetTimestamp, METH_VARARGS, (char *)"\n"
		"btkAnalogOffsetRemover_GetTimestamp(self) -> unsigned long\n"
		"\n"
		"Returns the timestamp of the object.\n"
		""},
	 { (char *)"btkAnalogOffsetRemover_swigregister", btkAnalogOffsetRemover_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_btkWrenchDownsampleFilter", _wrap_new_btkWrenchDownsampleFilter, METH_VARARGS, (char *)"\n"
		"new_btkWrenchDownsampleFilter() -> btkWrenchDownsampleFilter\n"
		"\n"
		"\n"
		"Downsample data stored in a wrench\n"
		"\n"
		"To downsample data, you need to set the up/down sample ratio using the method SetUpDownRatio().\n"
		"The given value is an integer corresponding to the ratio used to extract only the value of interest.\n"
		"For example, if you have 200 frames and a ratio of 10, then 20 frames will be extracted (one frame each 10 frames).\n"
		""},
	 { (char *)"btkWrenchDownsampleFilter___deref__", _wrap_btkWrenchDownsampleFilter___deref__, METH_VARARGS, (char *)"btkWrenchDownsampleFilter___deref__(self) -> btkWrenchDownsampleFilter_impl *"},
	 { (char *)"delete_btkWrenchDownsampleFilter", _wrap_delete_btkWrenchDownsampleFilter, METH_VARARGS, (char *)"delete_btkWrenchDownsampleFilter(self)"},
	 { (char *)"btkWrenchDownsampleFilter_GetInput", _wrap_btkWrenchDownsampleFilter_GetInput, METH_VARARGS, (char *)"\n"
		"btkWrenchDownsampleFilter_GetInput(self) -> btkWrench\n"
		"\n"
		"Gets the input registered with this process.\n"
		""},
	 { (char *)"btkWrenchDownsampleFilter_SetInput", _wrap_btkWrenchDownsampleFilter_SetInput, METH_VARARGS, (char *)"\n"
		"SetInput(self, btkWrench)\n"
		"\n"
		"Sets the input required with this process.\n"
		""},
	 { (char *)"btkWrenchDownsampleFilter_GetOutput", _wrap_btkWrenchDownsampleFilter_GetOutput, METH_VARARGS, (char *)"\n"
		"btkWrenchDownsampleFilter_GetOutput(self) -> btkWrench\n"
		"\n"
		"Returns the output created with this process.\n"
		""},
	 { (char *)"btkWrenchDownsampleFilter_GetUpDownRatio", _wrap_btkWrenchDownsampleFilter_GetUpDownRatio, METH_VARARGS, (char *)"\n"
		"btkWrenchDownsampleFilter_GetUpDownRatio(self) -> int\n"
		"\n"
		"Gets the ratio used to downsample the data.\n"
		""},
	 { (char *)"btkWrenchDownsampleFilter_SetUpDownRatio", _wrap_btkWrenchDownsampleFilter_SetUpDownRatio, METH_VARARGS, (char *)"\n"
		"SetUpDownRatio(self, int)\n"
		"\n"
		"Sets the ratio used to downsample the data.\n"
		""},
	 { (char *)"btkWrenchDownsampleFilter_GetInputNumber", _wrap_btkWrenchDownsampleFilter_GetInputNumber, METH_VARARGS, (char *)"\n"
		"btkWrenchDownsampleFilter_GetInputNumber(self) -> int\n"
		"\n"
		"Returns the number of inputs.\n"
		""},
	 { (char *)"btkWrenchDownsampleFilter_GetValidInputNumber", _wrap_btkWrenchDownsampleFilter_GetValidInputNumber, METH_VARARGS, (char *)"\n"
		"btkWrenchDownsampleFilter_GetValidInputNumber(self) -> int\n"
		"\n"
		"Returns the number of inputs which are valid (i.e. not null).\n"
		""},
	 { (char *)"btkWrenchDownsampleFilter_GetOutputNumber", _wrap_btkWrenchDownsampleFilter_GetOutputNumber, METH_VARARGS, (char *)"\n"
		"btkWrenchDownsampleFilter_GetOutputNumber(self) -> int\n"
		"\n"
		"Returns the number of outputs.\n"
		""},
	 { (char *)"btkWrenchDownsampleFilter_ResetState", _wrap_btkWrenchDownsampleFilter_ResetState, METH_VARARGS, (char *)"\n"
		"btkWrenchDownsampleFilter_ResetState(self)\n"
		"\n"
		"Reset the state of the process. Usefull when an exception was thrown during the generation of the data.\n"
		""},
	 { (char *)"btkWrenchDownsampleFilter_Update", _wrap_btkWrenchDownsampleFilter_Update, METH_VARARGS, (char *)"\n"
		"btkWrenchDownsampleFilter_Update(self)\n"
		"\n"
		"Update the pipeline and then all the data inside. Recursive method which\n"
		" 1) determines the processes to update\n"
		" 2) generate the data by using the GenerateData() method.\n"
		""},
	 { (char *)"btkWrenchDownsampleFilter_GetTimestamp", _wrap_btkWrenchDownsampleFilter_GetTimestamp, METH_VARARGS, (char *)"\n"
		"btkWrenchDownsampleFilter_GetTimestamp(self) -> unsigned long\n"
		"\n"
		"Returns the timestamp of the object.\n"
		""},
	 { (char *)"btkWrenchDownsampleFilter_swigregister", btkWrenchDownsampleFilter_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_btkWrenchCollectionDownsampleFilter", _wrap_new_btkWrenchCollectionDownsampleFilter, METH_VARARGS, (char *)"\n"
		"new_btkWrenchCollectionDownsampleFilter() -> btkWrenchCollectionDownsampleFilter\n"
		"\n"
		"\n"
		"Downsample data stored in a collection of wrenches.\n"
		"\n"
		"To downsample data, you need to set the up/down sample ratio using the method SetUpDownRatio().\n"
		"The given value is an integer corresponding to the ratio used to extract only the value of interest.\n"
		"For example, if you have 200 frames and a ratio of 10, then 20 frames will be extracted (one frame each 10 frames).\n"
		""},
	 { (char *)"btkWrenchCollectionDownsampleFilter___deref__", _wrap_btkWrenchCollectionDownsampleFilter___deref__, METH_VARARGS, (char *)"btkWrenchCollectionDownsampleFilter___deref__(self) -> btkWrenchCollectionDownsampleFilter_impl *"},
	 { (char *)"delete_btkWrenchCollectionDownsampleFilter", _wrap_delete_btkWrenchCollectionDownsampleFilter, METH_VARARGS, (char *)"delete_btkWrenchCollectionDownsampleFilter(self)"},
	 { (char *)"btkWrenchCollectionDownsampleFilter_GetInput", _wrap_btkWrenchCollectionDownsampleFilter_GetInput, METH_VARARGS, (char *)"\n"
		"btkWrenchCollectionDownsampleFilter_GetInput(self) -> btkWrenchCollection\n"
		"\n"
		"Gets the input registered with this process.\n"
		""},
	 { (char *)"btkWrenchCollectionDownsampleFilter_SetInput", _wrap_btkWrenchCollectionDownsampleFilter_SetInput, METH_VARARGS, (char *)"\n"
		"SetInput(self, btkWrenchCollection)\n"
		"\n"
		"Sets the input required with this process.\n"
		""},
	 { (char *)"btkWrenchCollectionDownsampleFilter_GetOutput", _wrap_btkWrenchCollectionDownsampleFilter_GetOutput, METH_VARARGS, (char *)"\n"
		"btkWrenchCollectionDownsampleFilter_GetOutput(self) -> btkWrenchCollection\n"
		"\n"
		"Returns the output created with this process.\n"
		""},
	 { (char *)"btkWrenchCollectionDownsampleFilter_GetUpDownRatio", _wrap_btkWrenchCollectionDownsampleFilter_GetUpDownRatio, METH_VARARGS, (char *)"\n"
		"btkWrenchCollectionDownsampleFilter_GetUpDownRatio(self) -> int\n"
		"\n"
		"Gets the ratio used to downsample the data.\n"
		""},
	 { (char *)"btkWrenchCollectionDownsampleFilter_SetUpDownRatio", _wrap_btkWrenchCollectionDownsampleFilter_SetUpDownRatio, METH_VARARGS, (char *)"\n"
		"SetUpDownRatio(self, int)\n"
		"\n"
		"Sets the ratio used to downsample the data.\n"
		""},
	 { (char *)"btkWrenchCollectionDownsampleFilter_GetInputNumber", _wrap_btkWrenchCollectionDownsampleFilter_GetInputNumber, METH_VARARGS, (char *)"\n"
		"btkWrenchCollectionDownsampleFilter_GetInputNumber(self) -> int\n"
		"\n"
		"Returns the number of inputs.\n"
		""},
	 { (char *)"btkWrenchCollectionDownsampleFilter_GetValidInputNumber", _wrap_btkWrenchCollectionDownsampleFilter_GetValidInputNumber, METH_VARARGS, (char *)"\n"
		"btkWrenchCollectionDownsampleFilter_GetValidInputNumber(self) -> int\n"
		"\n"
		"Returns the number of inputs which are valid (i.e. not null).\n"
		""},
	 { (char *)"btkWrenchCollectionDownsampleFilter_GetOutputNumber", _wrap_btkWrenchCollectionDownsampleFilter_GetOutputNumber, METH_VARARGS, (char *)"\n"
		"btkWrenchCollectionDownsampleFilter_GetOutputNumber(self) -> int\n"
		"\n"
		"Returns the number of outputs.\n"
		""},
	 { (char *)"btkWrenchCollectionDownsampleFilter_ResetState", _wrap_btkWrenchCollectionDownsampleFilter_ResetState, METH_VARARGS, (char *)"\n"
		"btkWrenchCollectionDownsampleFilter_ResetState(self)\n"
		"\n"
		"Reset the state of the process. Usefull when an exception was thrown during the generation of the data.\n"
		""},
	 { (char *)"btkWrenchCollectionDownsampleFilter_Update", _wrap_btkWrenchCollectionDownsampleFilter_Update, METH_VARARGS, (char *)"\n"
		"btkWrenchCollectionDownsampleFilter_Update(self)\n"
		"\n"
		"Update the pipeline and then all the data inside. Recursive method which\n"
		" 1) determines the processes to update\n"
		" 2) generate the data by using the GenerateData() method.\n"
		""},
	 { (char *)"btkWrenchCollectionDownsampleFilter_GetTimestamp", _wrap_btkWrenchCollectionDownsampleFilter_GetTimestamp, METH_VARARGS, (char *)"\n"
		"btkWrenchCollectionDownsampleFilter_GetTimestamp(self) -> unsigned long\n"
		"\n"
		"Returns the timestamp of the object.\n"
		""},
	 { (char *)"btkWrenchCollectionDownsampleFilter_swigregister", btkWrenchCollectionDownsampleFilter_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_btkForcePlatformsExtractor", _wrap_new_btkForcePlatformsExtractor, METH_VARARGS, (char *)"\n"
		"new_btkForcePlatformsExtractor() -> btkForcePlatformsExtractor\n"
		"\n"
		"\n"
		"Based on the content of the metadata FORCE_PLATFORM and the analog channels stored in the given \n"
		"acquisition, this filter creates a collection of btkForcePlatform returned in the output.\n"
		"\n"
		"Depending of the type of the force platform, the analog channels' data are transformed to take into account a calibration matrix.\n"
		"\n"
		"The metadata FORCE_PLATFORM must be structured as the following:\n"
		" - FORCE_PLATFORM:USED: single integer storing the number of force plates ;\n"
		" - FORCE_PLATFORM:TYPE: 1D array of integer containing the type of force plates contained in the acquisition (see below for the supported types) ;\n"
		" - FORCE_PLATFORM:CHANNEL: 2D array of integer containing of 1-based indices of the analog channels used ;\n"
		" - FORCE_PLATFORM:LABELS: 1D array of strings containing the force plates' label ;\n"
		" - FORCE_PLATFORM:DESCRIPTIONS: 1D array of strings containing the force plates' description ;\n"
		" - FORCE_PLATFORM:ORIGIN: 2D array of reals (float) containing the coordinates of the origin of the surface of each force platform expressed in their frame ;\n"
		" - FORCE_PLATFORM:CORNERS: 3D array of reals containing the coordinates of the corners. The third dimensions corresponds to the number of force platforms ;\n"
		" - FORCE_PLATFORM:CAL_MATRIX: (could be optional, depend on the FP type). 3D array containing the calibration to transform the volts into forces and moments ;\n"
		"You can have more details on each metadata by following this link: http://www.c3d.org/HTML/theforceplatformgroup.htm\n"
		"\n"
		"This filter is able to manage the following force platform's type:\n"
		" - Type 1: 6 channels with Forces X,Y,Z Position X,Y of the COP, and Moment Z around the COP ;\n"
		" - Type 2: 6 channels (FX, FY, FZ, MX, MY, MZ) ;\n"
		" - Type 3: 8 channels (FZ1, FZ2, FZ3, FZ4, FX12, FX34, FY14, FY23) ;\n"
		" - Type 4: Same as Type-2 + calibration matrix 6 (columns) by 6 (rows) ;\n"
		" - Type 5: Same as Type-3 + calibration matrix 6 (columns) by 8 (rows).\n"
		"\n"
		"However, some other types are not yet supported due to the lack of information and data on them:\n"
		" - Type 6: 12 channels (FX[1,2,3,4], FY[1,2,3,4], FZ[1,2,3,4]) + calibration matrix 12 by 12 ;\n"
		" - Type 7: 8 channels (FZ1, FZ2, FZ3, FZ4, FX12, FX34, FY14, FY23) + calibration matrix 8 by 8 ;\n"
		" - Type 11: Kistler Split Belt Treadmill: 8 channels + calibration matrix 8X8 + polynomial correction matrix 2x6 + COP translation + COP rotation ;\n"
		" - Type 12: Gaitway treadmill: 8 channels (Fz11, Fz12, Fz13, Fz14, Fz21, Fz22, Fz23, and Fz24) + calibration matrix 8X8 ;\n"
		" - Type 21: AMTI-Stairs: 2 force plates with 6 channels + a calibration matrix 6x6 + data to locate the corners of the 4 steps.\n"
		""},
	 { (char *)"btkForcePlatformsExtractor___deref__", _wrap_btkForcePlatformsExtractor___deref__, METH_VARARGS, (char *)"btkForcePlatformsExtractor___deref__(self) -> btkForcePlatformsExtractor_impl *"},
	 { (char *)"delete_btkForcePlatformsExtractor", _wrap_delete_btkForcePlatformsExtractor, METH_VARARGS, (char *)"delete_btkForcePlatformsExtractor(self)"},
	 { (char *)"btkForcePlatformsExtractor_GetInput", _wrap_btkForcePlatformsExtractor_GetInput, METH_VARARGS, (char *)"\n"
		"btkForcePlatformsExtractor_GetInput(self) -> btkAcquisition\n"
		"\n"
		"Gets the input registered with this process.\n"
		""},
	 { (char *)"btkForcePlatformsExtractor_SetInput", _wrap_btkForcePlatformsExtractor_SetInput, METH_VARARGS, (char *)"\n"
		"btkForcePlatformsExtractor_SetInput(self, arg3)\n"
		"\n"
		"Sets the input required with this process.\n"
		""},
	 { (char *)"btkForcePlatformsExtractor_GetOutput", _wrap_btkForcePlatformsExtractor_GetOutput, METH_VARARGS, (char *)"\n"
		"btkForcePlatformsExtractor_GetOutput(self) -> btkForcePlatformCollection\n"
		"\n"
		"Returns the output created with this process.\n"
		""},
	 { (char *)"btkForcePlatformsExtractor_GetInputNumber", _wrap_btkForcePlatformsExtractor_GetInputNumber, METH_VARARGS, (char *)"\n"
		"btkForcePlatformsExtractor_GetInputNumber(self) -> int\n"
		"\n"
		"Returns the number of inputs.\n"
		""},
	 { (char *)"btkForcePlatformsExtractor_GetValidInputNumber", _wrap_btkForcePlatformsExtractor_GetValidInputNumber, METH_VARARGS, (char *)"\n"
		"btkForcePlatformsExtractor_GetValidInputNumber(self) -> int\n"
		"\n"
		"Returns the number of inputs which are valid (i.e. not null).\n"
		""},
	 { (char *)"btkForcePlatformsExtractor_GetOutputNumber", _wrap_btkForcePlatformsExtractor_GetOutputNumber, METH_VARARGS, (char *)"\n"
		"btkForcePlatformsExtractor_GetOutputNumber(self) -> int\n"
		"\n"
		"Returns the number of outputs.\n"
		""},
	 { (char *)"btkForcePlatformsExtractor_ResetState", _wrap_btkForcePlatformsExtractor_ResetState, METH_VARARGS, (char *)"\n"
		"btkForcePlatformsExtractor_ResetState(self)\n"
		"\n"
		"Reset the state of the process. Usefull when an exception was thrown during the generation of the data.\n"
		""},
	 { (char *)"btkForcePlatformsExtractor_Update", _wrap_btkForcePlatformsExtractor_Update, METH_VARARGS, (char *)"\n"
		"btkForcePlatformsExtractor_Update(self)\n"
		"\n"
		"Update the pipeline and then all the data inside. Recursive method which\n"
		" 1) determines the processes to update\n"
		" 2) generate the data by using the GenerateData() method.\n"
		""},
	 { (char *)"btkForcePlatformsExtractor_GetTimestamp", _wrap_btkForcePlatformsExtractor_GetTimestamp, METH_VARARGS, (char *)"\n"
		"btkForcePlatformsExtractor_GetTimestamp(self) -> unsigned long\n"
		"\n"
		"Returns the timestamp of the object.\n"
		""},
	 { (char *)"btkForcePlatformsExtractor_swigregister", btkForcePlatformsExtractor_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_btkForcePlatformWrenchFilter", _wrap_new_btkForcePlatformWrenchFilter, METH_VARARGS, (char *)"\n"
		"new_btkForcePlatformWrenchFilter() -> btkForcePlatformWrenchFilter\n"
		"\n"
		"\n"
		"Based on the given collection of forceplate set in input, this filter transform the associated analog channels in forces and moments.\n"
		"This transformation take into account the type of each force platform.\n"
		"\n"
		"You can use the method btkForcePlatformWrenchFilter::SetTransformToGlobalFrame() to have the wrench expressed in the frame of the force platform.\n"
		""},
	 { (char *)"btkForcePlatformWrenchFilter___deref__", _wrap_btkForcePlatformWrenchFilter___deref__, METH_VARARGS, (char *)"btkForcePlatformWrenchFilter___deref__(self) -> btkForcePlatformWrenchFilter_impl *"},
	 { (char *)"delete_btkForcePlatformWrenchFilter", _wrap_delete_btkForcePlatformWrenchFilter, METH_VARARGS, (char *)"delete_btkForcePlatformWrenchFilter(self)"},
	 { (char *)"btkForcePlatformWrenchFilter_GetInput", _wrap_btkForcePlatformWrenchFilter_GetInput, METH_VARARGS, (char *)"\n"
		"btkForcePlatformWrenchFilter_GetInput(self) -> btkForcePlatformCollection\n"
		"\n"
		"Gets the input registered with this process.\n"
		""},
	 { (char *)"btkForcePlatformWrenchFilter_SetInput", _wrap_btkForcePlatformWrenchFilter_SetInput, METH_VARARGS, (char *)"\n"
		"SetInput(self, btkForcePlatform)\n"
		"SetInput(self, btkForcePlatformCollection)\n"
		"\n"
		"Sets a force platform as input of this this process.\n"
		""},
	 { (char *)"btkForcePlatformWrenchFilter_GetOutput", _wrap_btkForcePlatformWrenchFilter_GetOutput, METH_VARARGS, (char *)"\n"
		"btkForcePlatformWrenchFilter_GetOutput(self) -> btkWrenchCollection\n"
		"\n"
		"Returns the output created with this process.\n"
		""},
	 { (char *)"btkForcePlatformWrenchFilter_SetTransformToGlobalFrame", _wrap_btkForcePlatformWrenchFilter_SetTransformToGlobalFrame, METH_VARARGS, (char *)"\n"
		"SetTransformToGlobalFrame(activation=False)\n"
		"btkForcePlatformWrenchFilter_SetTransformToGlobalFrame(self)\n"
		"\n"
		"Activate or deactivate the computation of the wrenches in the global frame.\n"
		""},
	 { (char *)"btkForcePlatformWrenchFilter_GetTransformToGlobalFrame", _wrap_btkForcePlatformWrenchFilter_GetTransformToGlobalFrame, METH_VARARGS, (char *)"\n"
		"btkForcePlatformWrenchFilter_GetTransformToGlobalFrame(self) -> bool\n"
		"\n"
		"Returns the state of the activation for the computation of the wrenches in the global frame.\n"
		""},
	 { (char *)"btkForcePlatformWrenchFilter_GetInputNumber", _wrap_btkForcePlatformWrenchFilter_GetInputNumber, METH_VARARGS, (char *)"\n"
		"btkForcePlatformWrenchFilter_GetInputNumber(self) -> int\n"
		"\n"
		"Returns the number of inputs.\n"
		""},
	 { (char *)"btkForcePlatformWrenchFilter_GetValidInputNumber", _wrap_btkForcePlatformWrenchFilter_GetValidInputNumber, METH_VARARGS, (char *)"\n"
		"btkForcePlatformWrenchFilter_GetValidInputNumber(self) -> int\n"
		"\n"
		"Returns the number of inputs which are valid (i.e. not null).\n"
		""},
	 { (char *)"btkForcePlatformWrenchFilter_GetOutputNumber", _wrap_btkForcePlatformWrenchFilter_GetOutputNumber, METH_VARARGS, (char *)"\n"
		"btkForcePlatformWrenchFilter_GetOutputNumber(self) -> int\n"
		"\n"
		"Returns the number of outputs.\n"
		""},
	 { (char *)"btkForcePlatformWrenchFilter_ResetState", _wrap_btkForcePlatformWrenchFilter_ResetState, METH_VARARGS, (char *)"\n"
		"btkForcePlatformWrenchFilter_ResetState(self)\n"
		"\n"
		"Reset the state of the process. Usefull when an exception was thrown during the generation of the data.\n"
		""},
	 { (char *)"btkForcePlatformWrenchFilter_Update", _wrap_btkForcePlatformWrenchFilter_Update, METH_VARARGS, (char *)"\n"
		"btkForcePlatformWrenchFilter_Update(self)\n"
		"\n"
		"Update the pipeline and then all the data inside. Recursive method which\n"
		" 1) determines the processes to update\n"
		" 2) generate the data by using the GenerateData() method.\n"
		""},
	 { (char *)"btkForcePlatformWrenchFilter_GetTimestamp", _wrap_btkForcePlatformWrenchFilter_GetTimestamp, METH_VARARGS, (char *)"\n"
		"btkForcePlatformWrenchFilter_GetTimestamp(self) -> unsigned long\n"
		"\n"
		"Returns the timestamp of the object.\n"
		""},
	 { (char *)"btkForcePlatformWrenchFilter_swigregister", btkForcePlatformWrenchFilter_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_btkGroundReactionWrenchFilter", _wrap_new_btkGroundReactionWrenchFilter, METH_VARARGS, (char *)"\n"
		"new_btkGroundReactionWrenchFilter() -> btkGroundReactionWrenchFilter\n"
		"\n"
		"\n"
		"Transform force platform data into ground reaction wrenches.\n"
		"\n"
		"Theses wrenches are expressed in the global frame. The point of application (PWA)\n"
		"of each wrench is calculated from the paper of Shimba (1984). \n"
		"Compared to the center of pressure (COP), the PWA take into account all the forces\n"
		"and moments (and does not assume any null forces).\n"
		"\n"
		"Note: For gait analysis, the COP and PWA are very similar.\n"
		"Because the computation of the PWA (as the COP) is sensitive to small (vertical) forces, the methods \n"
		"SetThresholdValue and SetThresholdState() are provided to not compute the PWA if the vertical forces is\n"
		"the threshold. You first need to set the value and then activate the threshold method.\n"
		"By default, this threshold is not activated and the values is set to 0.\n"
		"\n"
		"# Example\n"
		"grwf = btk.btkGroundReactionWrenchFilter()\n"
		"grwf.SetThresholdValue(5.0); # 5 newtons\n"
		"grwf.SetThresholdState(true);\n"
		"\n"
		"Finally, you can also use the method btkGroundReactionWrenchFilter::SetTransformToGlobalFrame() to have the wrench expressed in the frame of the force platform.\n"
		""},
	 { (char *)"btkGroundReactionWrenchFilter___deref__", _wrap_btkGroundReactionWrenchFilter___deref__, METH_VARARGS, (char *)"btkGroundReactionWrenchFilter___deref__(self) -> btkGroundReactionWrenchFilter_impl *"},
	 { (char *)"delete_btkGroundReactionWrenchFilter", _wrap_delete_btkGroundReactionWrenchFilter, METH_VARARGS, (char *)"delete_btkGroundReactionWrenchFilter(self)"},
	 { (char *)"btkGroundReactionWrenchFilter_GetInput", _wrap_btkGroundReactionWrenchFilter_GetInput, METH_VARARGS, (char *)"\n"
		"btkGroundReactionWrenchFilter_GetInput(self) -> btkForcePlatformCollection\n"
		"\n"
		"Gets the input registered with this process.\n"
		""},
	 { (char *)"btkGroundReactionWrenchFilter_SetInput", _wrap_btkGroundReactionWrenchFilter_SetInput, METH_VARARGS, (char *)"\n"
		"SetInput(self, btkForcePlatform)\n"
		"SetInput(self, btkForcePlatformCollection)\n"
		"\n"
		"Sets the input required with this process.\n"
		""},
	 { (char *)"btkGroundReactionWrenchFilter_GetOutput", _wrap_btkGroundReactionWrenchFilter_GetOutput, METH_VARARGS, (char *)"\n"
		"btkGroundReactionWrenchFilter_GetOutput(self) -> btkWrenchCollection\n"
		"\n"
		"Returns the output created with this process.\n"
		""},
	 { (char *)"btkGroundReactionWrenchFilter_SetTransformToGlobalFrame", _wrap_btkGroundReactionWrenchFilter_SetTransformToGlobalFrame, METH_VARARGS, (char *)"\n"
		"SetTransformToGlobalFrame(activation=False)\n"
		"btkGroundReactionWrenchFilter_SetTransformToGlobalFrame(self)\n"
		"\n"
		"Activate or deactivate the computation of the wrenches in the global frame.\n"
		""},
	 { (char *)"btkGroundReactionWrenchFilter_GetTransformToGlobalFrame", _wrap_btkGroundReactionWrenchFilter_GetTransformToGlobalFrame, METH_VARARGS, (char *)"\n"
		"btkGroundReactionWrenchFilter_GetTransformToGlobalFrame(self) -> bool\n"
		"\n"
		"Returns the state of the activation for the computation of the wrenches in the global frame.\n"
		""},
	 { (char *)"btkGroundReactionWrenchFilter_GetThresholdState", _wrap_btkGroundReactionWrenchFilter_GetThresholdState, METH_VARARGS, (char *)"\n"
		"btkGroundReactionWrenchFilter_GetThresholdState(self) -> bool\n"
		"\n"
		"Returns the state of the threshold used to suppress false PWA.\n"
		""},
	 { (char *)"btkGroundReactionWrenchFilter_SetThresholdState", _wrap_btkGroundReactionWrenchFilter_SetThresholdState, METH_VARARGS, (char *)"\n"
		"SetThresholdState(activated=False)\n"
		"btkGroundReactionWrenchFilter_SetThresholdState(self)\n"
		"\n"
		"Sets the threshold state.\n"
		""},
	 { (char *)"btkGroundReactionWrenchFilter_GetThresholdValue", _wrap_btkGroundReactionWrenchFilter_GetThresholdValue, METH_VARARGS, (char *)"\n"
		"btkGroundReactionWrenchFilter_GetThresholdValue(self) -> double\n"
		"\n"
		"Returns the value used to suppress PWA computed with a Fz value lower or equal than it.\n"
		""},
	 { (char *)"btkGroundReactionWrenchFilter_SetThresholdValue", _wrap_btkGroundReactionWrenchFilter_SetThresholdValue, METH_VARARGS, (char *)"\n"
		"SetThresholdValue(self, double)\n"
		"\n"
		"Sets the threshold value.\n"
		""},
	 { (char *)"btkGroundReactionWrenchFilter_GetInputNumber", _wrap_btkGroundReactionWrenchFilter_GetInputNumber, METH_VARARGS, (char *)"\n"
		"btkGroundReactionWrenchFilter_GetInputNumber(self) -> int\n"
		"\n"
		"Returns the number of inputs.\n"
		""},
	 { (char *)"btkGroundReactionWrenchFilter_GetValidInputNumber", _wrap_btkGroundReactionWrenchFilter_GetValidInputNumber, METH_VARARGS, (char *)"\n"
		"btkGroundReactionWrenchFilter_GetValidInputNumber(self) -> int\n"
		"\n"
		"Returns the number of inputs which are valid (i.e. not null).\n"
		""},
	 { (char *)"btkGroundReactionWrenchFilter_GetOutputNumber", _wrap_btkGroundReactionWrenchFilter_GetOutputNumber, METH_VARARGS, (char *)"\n"
		"btkGroundReactionWrenchFilter_GetOutputNumber(self) -> int\n"
		"\n"
		"Returns the number of outputs.\n"
		""},
	 { (char *)"btkGroundReactionWrenchFilter_ResetState", _wrap_btkGroundReactionWrenchFilter_ResetState, METH_VARARGS, (char *)"\n"
		"btkGroundReactionWrenchFilter_ResetState(self)\n"
		"\n"
		"Reset the state of the process. Usefull when an exception was thrown during the generation of the data.\n"
		""},
	 { (char *)"btkGroundReactionWrenchFilter_Update", _wrap_btkGroundReactionWrenchFilter_Update, METH_VARARGS, (char *)"\n"
		"btkGroundReactionWrenchFilter_Update(self)\n"
		"\n"
		"Update the pipeline and then all the data inside. Recursive method which\n"
		" 1) determines the processes to update\n"
		" 2) generate the data by using the GenerateData() method.\n"
		""},
	 { (char *)"btkGroundReactionWrenchFilter_GetTimestamp", _wrap_btkGroundReactionWrenchFilter_GetTimestamp, METH_VARARGS, (char *)"\n"
		"btkGroundReactionWrenchFilter_GetTimestamp(self) -> unsigned long\n"
		"\n"
		"Returns the timestamp of the object.\n"
		""},
	 { (char *)"btkGroundReactionWrenchFilter_swigregister", btkGroundReactionWrenchFilter_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_btkIMUsExtractor", _wrap_new_btkIMUsExtractor, METH_VARARGS, (char *)"\n"
		"new_btkIMUsExtractor() -> btkIMUsExtractor\n"
		"\n"
		"\n"
		"Extracts inertial measurement units (IMUs) from a btkAcquisition object. \n"
		"\n"
		"Based on the content of the metadata IMU and the analog channels stored in the given acquisition(s),\n"
		"this filter creates a collection of btkIMU returned in the output.\n"
		"\n"
		"The metadata IMU must be structured as the following:\n"
		" - IMU:USED: single integer storing the number of IMUs ;\n"
		" - IMU:TYPE: 1D array of integer containing the type of IMU contained in the acquisition (see below for the supported types) ;\n"
		" - IMU:CHANNEL: 2D array of integer containing of 1-based indices of the analog channels used ;\n"
		" - IMU:LABELS: 1D array of strings containing the force plates' label ;\n"
		" - IMU:DESCRIPTIONS: 1D array of strings containing the force plates' description ;\n"
		"\n"
		"The supported types are the following:\n"
		" - Type 1: 6D IMU with a 3D accelerometer and 3D gyroscope.\n"
		"\n"
		"Note: This class is still experimental and could be modified in the next release.\n"
		""},
	 { (char *)"btkIMUsExtractor___deref__", _wrap_btkIMUsExtractor___deref__, METH_VARARGS, (char *)"btkIMUsExtractor___deref__(self) -> btkIMUsExtractor_impl *"},
	 { (char *)"delete_btkIMUsExtractor", _wrap_delete_btkIMUsExtractor, METH_VARARGS, (char *)"delete_btkIMUsExtractor(self)"},
	 { (char *)"btkIMUsExtractor_GetInput", _wrap_btkIMUsExtractor_GetInput, METH_VARARGS, (char *)"\n"
		"GetInput() -> btkAcquisition\n"
		"GetInput(self, int) -> btkAcquisition\n"
		"\n"
		"Gets the input registered with this process.\n"
		""},
	 { (char *)"btkIMUsExtractor_SetInput", _wrap_btkIMUsExtractor_SetInput, METH_VARARGS, (char *)"\n"
		"SetInput(self, btkAcquisition)\n"
		"SetInput(self, int, btkAcquisition)\n"
		"\n"
		"Sets the input required with this process.\n"
		""},
	 { (char *)"btkIMUsExtractor_GetOutput", _wrap_btkIMUsExtractor_GetOutput, METH_VARARGS, (char *)"\n"
		"btkIMUsExtractor_GetOutput(self) -> btkIMUCollection\n"
		"\n"
		"Returns the output created with this process.\n"
		""},
	 { (char *)"btkIMUsExtractor_GetInputNumber", _wrap_btkIMUsExtractor_GetInputNumber, METH_VARARGS, (char *)"\n"
		"btkIMUsExtractor_GetInputNumber(self) -> int\n"
		"\n"
		"Returns the number of inputs.\n"
		""},
	 { (char *)"btkIMUsExtractor_GetValidInputNumber", _wrap_btkIMUsExtractor_GetValidInputNumber, METH_VARARGS, (char *)"\n"
		"btkIMUsExtractor_GetValidInputNumber(self) -> int\n"
		"\n"
		"Returns the number of inputs which are valid (i.e. not null).\n"
		""},
	 { (char *)"btkIMUsExtractor_GetOutputNumber", _wrap_btkIMUsExtractor_GetOutputNumber, METH_VARARGS, (char *)"\n"
		"btkIMUsExtractor_GetOutputNumber(self) -> int\n"
		"\n"
		"Returns the number of outputs.\n"
		""},
	 { (char *)"btkIMUsExtractor_ResetState", _wrap_btkIMUsExtractor_ResetState, METH_VARARGS, (char *)"\n"
		"btkIMUsExtractor_ResetState(self)\n"
		"\n"
		"Reset the state of the process. Usefull when an exception was thrown during the generation of the data.\n"
		""},
	 { (char *)"btkIMUsExtractor_Update", _wrap_btkIMUsExtractor_Update, METH_VARARGS, (char *)"\n"
		"btkIMUsExtractor_Update(self)\n"
		"\n"
		"Update the pipeline and then all the data inside. Recursive method which\n"
		" 1) determines the processes to update\n"
		" 2) generate the data by using the GenerateData() method.\n"
		""},
	 { (char *)"btkIMUsExtractor_GetTimestamp", _wrap_btkIMUsExtractor_GetTimestamp, METH_VARARGS, (char *)"\n"
		"btkIMUsExtractor_GetTimestamp(self) -> unsigned long\n"
		"\n"
		"Returns the timestamp of the object.\n"
		""},
	 { (char *)"btkIMUsExtractor_swigregister", btkIMUsExtractor_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_btkMergeAcquisitionFilter", _wrap_new_btkMergeAcquisitionFilter, METH_VARARGS, (char *)"\n"
		"new_btkMergeAcquisitionFilter() -> btkMergeAcquisitionFilter\n"
		"\n"
		"\n"
		"Merges or concatenates two or more btkAcquisition objects into a single new one.\n"
		"\n"
		"The difference between the merging or the concatenating depends of the acquisitions' informations.\n"
		"\n"
		"If the acquisitions are exactly the same (same label for points and analog channels) and the first \n"
		"frame of the n+1th acquisition corresponds to the last frame of the nth acquisition, then the \n"
		"acquisitions are merged, otherwise, the data are concatenated. Merged acquisitions means that the \n"
		"output will have the same number of points, analog channels, events than each output but the number\n"
		"of frames corresponds to the sum of the input's frame number. \n"
		"\n"
		"Rules to merge/concatenate acquisitions are:\n"
		" - Must have the same acquisition frequency (or 0).\n"
		" - Must have the same number of analog samples per point frame (if there are points and analog channels).\n"
		" - Must have the same analog resolution.\n"
		" - Must have the same units (Use btkAcquisitionUnitConvert to convert them).\n"
		" - Must have the same global frame orientation (check POINT:X_SCREEN and POINT:Y_SCREEN)\n"
		" - The first input which has a non-zero acquisition frequency is used.\n"
		" - The first input which has analog channels is used to set the analog resolution of the output.\n"
		"\n"
		"Actions during the merging/concatenation:\n"
		" - If the first frame of the nth acquisition correspond to the last frame + 1 of the nth-1 acquisition, \n"
		"   AND the points / analog channels correspond exactly, then acquisitions are truncated.\n"
		" - If the first frame of two inputs are not the same, the final acquisition is adapted to contain the number of frames plus\n"
		"   the difference between the first frame of each input.\n"
		" - If points have the same label (and the first frames doesn't correspond), then, the second and more are incremented (i.e. from Heel to Heel_2).\n"
		" - Idem for the analog channels.\n"
		" - Events with the same label, context, id and time are merged.\n"
		" - Metadata (if number of inputs greater than 1):\n"
		"    - Only metadata defined by the user are inserted (i.e. POINT, ANALOG, EVENTS, etc. are not inserted as they are only used in a C3D file.).\n"
		"    - If metadata are equivalent or equal, then they are merged, else the metadata is appended with a suffix\n"
		"      (i.e. from STATIC_CALIBRATION:USED to STATIC_CALIBRATION:USED_2)\n"
		"\n"
		"Moreover, you can set a rule to keep only the data from the higher or the lower first frame.\n"
		"Use the method SetFirstFrameRule() with the values KeepAllFrames or KeepFromHighestFirstFrame.\n"
		""},
	 { (char *)"btkMergeAcquisitionFilter___deref__", _wrap_btkMergeAcquisitionFilter___deref__, METH_VARARGS, (char *)"btkMergeAcquisitionFilter___deref__(self) -> btkMergeAcquisitionFilter_impl *"},
	 { (char *)"delete_btkMergeAcquisitionFilter", _wrap_delete_btkMergeAcquisitionFilter, METH_VARARGS, (char *)"delete_btkMergeAcquisitionFilter(self)"},
	 { (char *)"btkMergeAcquisitionFilter_GetFirstFrameRule", _wrap_btkMergeAcquisitionFilter_GetFirstFrameRule, METH_VARARGS, (char *)"\n"
		"btkMergeAcquisitionFilter_GetFirstFrameRule(self) -> int\n"
		"\n"
		"Sets the rule for the first frame kept. Two rules are available:\n"
		" - KeepAllFrames: Use the lower first frame;\n"
		" - KeepFromHighestFirstFrame: Use the higher first frame.\n"
		""},
	 { (char *)"btkMergeAcquisitionFilter_SetFirstFrameRule", _wrap_btkMergeAcquisitionFilter_SetFirstFrameRule, METH_VARARGS, (char *)"\n"
		"SetFirstFrameRule(self, int)\n"
		"\n"
		"Returns the rule for the first frame kept.\n"
		""},
	 { (char *)"btkMergeAcquisitionFilter_GetInput", _wrap_btkMergeAcquisitionFilter_GetInput, METH_VARARGS, (char *)"\n"
		"GetInput(self, int) -> btkAcquisition\n"
		"\n"
		"Gets the input registered with this process.\n"
		""},
	 { (char *)"btkMergeAcquisitionFilter_SetInput", _wrap_btkMergeAcquisitionFilter_SetInput, METH_VARARGS, (char *)"\n"
		"SetInput(self, int, btkAcquisition)\n"
		"\n"
		"Sets the input required with this process.\n"
		""},
	 { (char *)"btkMergeAcquisitionFilter_GetOutput", _wrap_btkMergeAcquisitionFilter_GetOutput, METH_VARARGS, (char *)"\n"
		"btkMergeAcquisitionFilter_GetOutput(self) -> btkAcquisition\n"
		"\n"
		"Returns the output created with this process.\n"
		""},
	 { (char *)"btkMergeAcquisitionFilter_GetInputNumber", _wrap_btkMergeAcquisitionFilter_GetInputNumber, METH_VARARGS, (char *)"\n"
		"btkMergeAcquisitionFilter_GetInputNumber(self) -> int\n"
		"\n"
		"Returns the number of inputs.\n"
		""},
	 { (char *)"btkMergeAcquisitionFilter_GetValidInputNumber", _wrap_btkMergeAcquisitionFilter_GetValidInputNumber, METH_VARARGS, (char *)"\n"
		"btkMergeAcquisitionFilter_GetValidInputNumber(self) -> int\n"
		"\n"
		"Returns the number of inputs which are valid (i.e. not null).\n"
		""},
	 { (char *)"btkMergeAcquisitionFilter_GetOutputNumber", _wrap_btkMergeAcquisitionFilter_GetOutputNumber, METH_VARARGS, (char *)"\n"
		"btkMergeAcquisitionFilter_GetOutputNumber(self) -> int\n"
		"\n"
		"Returns the number of outputs.\n"
		""},
	 { (char *)"btkMergeAcquisitionFilter_ResetState", _wrap_btkMergeAcquisitionFilter_ResetState, METH_VARARGS, (char *)"\n"
		"btkMergeAcquisitionFilter_ResetState(self)\n"
		"\n"
		"Reset the state of the process. Usefull when an exception was thrown during the generation of the data.\n"
		""},
	 { (char *)"btkMergeAcquisitionFilter_Update", _wrap_btkMergeAcquisitionFilter_Update, METH_VARARGS, (char *)"\n"
		"btkMergeAcquisitionFilter_Update(self)\n"
		"\n"
		"Update the pipeline and then all the data inside. Recursive method which\n"
		" 1) determines the processes to update\n"
		" 2) generate the data by using the GenerateData() method.\n"
		""},
	 { (char *)"btkMergeAcquisitionFilter_GetTimestamp", _wrap_btkMergeAcquisitionFilter_GetTimestamp, METH_VARARGS, (char *)"\n"
		"btkMergeAcquisitionFilter_GetTimestamp(self) -> unsigned long\n"
		"\n"
		"Returns the timestamp of the object.\n"
		""},
	 { (char *)"btkMergeAcquisitionFilter_swigregister", btkMergeAcquisitionFilter_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_btkSeparateKnownVirtualMarkersFilter", _wrap_new_btkSeparateKnownVirtualMarkersFilter, METH_VARARGS, (char *)"\n"
		"new_btkSeparateKnownVirtualMarkersFilter() -> btkSeparateKnownVirtualMarkersFilter\n"
		"\n"
		"\n"
		"Separate a collection of points in five categories to be able to distinguish real markers from the others.\n"
		"\n"
		"These categories are:\n"
		" - all kind of markers (real and virtual) as stored in the acquisition\n"
		" - markers\n"
		" - virtual markers used to construct refence frames\n"
		" - other virtual markers (CenterOfMass, ...)\n"
		" - other points (angle, force, moment, power, ...)\n"
		"\n"
		"To select the output corresponding to the chosen category, you can use the method GetOutput() \n"
		"with one of these enum values: AllMarkers, Markers, VirtualReferenceFrames, VirtualMarkers, OtherPoints.\n"
		"\n"
		"By default, the list of labels known as virtual markers used for frame is:\n"
		" - HED(O|A|L|P): HEDO, HEDA, HEDL, HELP\n"
		" - LCL(O|A|L|P)\n"
		" - LFE(O|A|L|P)\n"
		" - LFO(O|A|L|P)\n"
		" - LHN(O|A|L|P)\n"
		" - LHU(O|A|L|P)\n"
		" - LRA(O|A|L|P)\n"
		" - LTI(O|A|L|P)\n"
		" - LTO(O|A|L|P)\n"
		" - PEL(O|A|L|P)\n"
		" - RCL(O|A|L|P)\n"
		" - RFE(O|A|L|P)\n"
		" - RFO(O|A|L|P)\n"
		" - RHN(O|A|L|P)\n"
		" - RHU(O|A|L|P)\n"
		" - RRA(O|A|L|P)\n"
		" - RTI(O|A|L|P)\n"
		" - RTO(O|A|L|P)\n"
		" - TRX(O|A|L|P)\n"
		"\n"
		"By default, the list of labels known as other virtual markers is:\n"
		" - CenterOfMass\n"
		" - CenterOfMassFloor\n"
		"\n"
		"You can also add a prefix for the markers' label by using the method SetLabelPrefix. This prefix will be concatenated to the markers' label during the separation.\n"
		"\n"
		"This filter only copies the pointer associated which each point instead of using a deep copy of it.\n"
		""},
	 { (char *)"btkSeparateKnownVirtualMarkersFilter___deref__", _wrap_btkSeparateKnownVirtualMarkersFilter___deref__, METH_VARARGS, (char *)"btkSeparateKnownVirtualMarkersFilter___deref__(self) -> btkSeparateKnownVirtualMarkersFilter_impl *"},
	 { (char *)"delete_btkSeparateKnownVirtualMarkersFilter", _wrap_delete_btkSeparateKnownVirtualMarkersFilter, METH_VARARGS, (char *)"delete_btkSeparateKnownVirtualMarkersFilter(self)"},
	 { (char *)"btkSeparateKnownVirtualMarkersFilter_AppendVirtualReferenceFrame", _wrap_btkSeparateKnownVirtualMarkersFilter_AppendVirtualReferenceFrame, METH_VARARGS, (char *)"\n"
		"AppendVirtualReferenceFrame(self, string, string, string, string)\n"
		"AppendVirtualReferenceFrame(self, btkStringAxes)\n"
		"\n"
		"Append a new set of labels for a virtual frame. The labels correspond to the origin, the axis X, Y and Z respectively.\n"
		""},
	 { (char *)"btkSeparateKnownVirtualMarkersFilter_AppendVirtualReferenceFrames", _wrap_btkSeparateKnownVirtualMarkersFilter_AppendVirtualReferenceFrames, METH_VARARGS, (char *)"\n"
		"AppendKnownVirtualMarkerLabelForAxes(self, btkStringAxesList)\n"
		"\n"
		"Append a list of axes' definition in the category of the virtual markers used to defined frames.\n"
		""},
	 { (char *)"btkSeparateKnownVirtualMarkersFilter_SetVirtualReferenceFrames", _wrap_btkSeparateKnownVirtualMarkersFilter_SetVirtualReferenceFrames, METH_VARARGS, (char *)"\n"
		"SetKnownVirtualMarkerLabelsForAxes(self, btkStringAxesList)\n"
		"\n"
		"Sets the list of labels for the virtual markers used to create frames.\n"
		""},
	 { (char *)"btkSeparateKnownVirtualMarkersFilter_GetVirtualReferenceFrames", _wrap_btkSeparateKnownVirtualMarkersFilter_GetVirtualReferenceFrames, METH_VARARGS, (char *)"\n"
		"btkSeparateKnownVirtualMarkersFilter_GetVirtualReferenceFrames(self) -> btkStringAxesList\n"
		"\n"
		"Returns the list of labels for the virtual markers used to create frame.\n"
		""},
	 { (char *)"btkSeparateKnownVirtualMarkersFilter_AppendVirtualMarker", _wrap_btkSeparateKnownVirtualMarkersFilter_AppendVirtualMarker, METH_VARARGS, (char *)"\n"
		"AppendVirtualMarker(self, string)\n"
		"\n"
		"Append a label in the category of the other virtual markers.\n"
		""},
	 { (char *)"btkSeparateKnownVirtualMarkersFilter_AppendVirtualMarkers", _wrap_btkSeparateKnownVirtualMarkersFilter_AppendVirtualMarkers, METH_VARARGS, (char *)"\n"
		"AppendVirtualMarkers(self, btkStringList)\n"
		"\n"
		"Append a list of labels in the category of the other virtual markers.\n"
		""},
	 { (char *)"btkSeparateKnownVirtualMarkersFilter_SetVirtualMarkers", _wrap_btkSeparateKnownVirtualMarkersFilter_SetVirtualMarkers, METH_VARARGS, (char *)"\n"
		"SetKnownVirtualMarkerLabelsForOthers(self, btkStringList)\n"
		"\n"
		"Sets the list of labels for the virtual markers used in another context than virtual frames. Each label is checked before to be inserted to not have duplication.\n"
		""},
	 { (char *)"btkSeparateKnownVirtualMarkersFilter_GetVirtualMarkers", _wrap_btkSeparateKnownVirtualMarkersFilter_GetVirtualMarkers, METH_VARARGS, (char *)"\n"
		"btkSeparateKnownVirtualMarkersFilter_GetVirtualMarkers(self) -> btkStringList\n"
		"\n"
		"Returns the list of labels for the virtual markers used in another context than virtual frames\n"
		""},
	 { (char *)"btkSeparateKnownVirtualMarkersFilter_SetLabelPrefix", _wrap_btkSeparateKnownVirtualMarkersFilter_SetLabelPrefix, METH_VARARGS, (char *)"\n"
		"SetLabelPrefix(self, string)\n"
		"\n"
		"Sets the prefix which will be concatenated to the markers' label during the separation.\n"
		""},
	 { (char *)"btkSeparateKnownVirtualMarkersFilter_GetLabelPrefix", _wrap_btkSeparateKnownVirtualMarkersFilter_GetLabelPrefix, METH_VARARGS, (char *)"\n"
		"btkSeparateKnownVirtualMarkersFilter_GetLabelPrefix(self) -> std::string const &\n"
		"\n"
		"Returns the prefix which will be concatenated to the markers' label during the separation.\n"
		""},
	 { (char *)"btkSeparateKnownVirtualMarkersFilter_GetInput", _wrap_btkSeparateKnownVirtualMarkersFilter_GetInput, METH_VARARGS, (char *)"\n"
		"btkSeparateKnownVirtualMarkersFilter_GetInput(self) -> btkPointCollection\n"
		"\n"
		"Gets the input registered with this process.\n"
		""},
	 { (char *)"btkSeparateKnownVirtualMarkersFilter_SetInput", _wrap_btkSeparateKnownVirtualMarkersFilter_SetInput, METH_VARARGS, (char *)"\n"
		"SetInput(self, btkAcquisition)\n"
		"\n"
		"Sets the input required with this process.\n"
		""},
	 { (char *)"btkSeparateKnownVirtualMarkersFilter_GetOutput", _wrap_btkSeparateKnownVirtualMarkersFilter_GetOutput, METH_VARARGS, (char *)"\n"
		"GetOutput(self, int) -> btkPointCollection\n"
		"\n"
		"Returns the output created with this process.\n"
		""},
	 { (char *)"btkSeparateKnownVirtualMarkersFilter_GetInputNumber", _wrap_btkSeparateKnownVirtualMarkersFilter_GetInputNumber, METH_VARARGS, (char *)"\n"
		"btkSeparateKnownVirtualMarkersFilter_GetInputNumber(self) -> int\n"
		"\n"
		"Returns the number of inputs.\n"
		""},
	 { (char *)"btkSeparateKnownVirtualMarkersFilter_GetValidInputNumber", _wrap_btkSeparateKnownVirtualMarkersFilter_GetValidInputNumber, METH_VARARGS, (char *)"\n"
		"btkSeparateKnownVirtualMarkersFilter_GetValidInputNumber(self) -> int\n"
		"\n"
		"Returns the number of inputs which are valid (i.e. not null).\n"
		""},
	 { (char *)"btkSeparateKnownVirtualMarkersFilter_GetOutputNumber", _wrap_btkSeparateKnownVirtualMarkersFilter_GetOutputNumber, METH_VARARGS, (char *)"\n"
		"btkSeparateKnownVirtualMarkersFilter_GetOutputNumber(self) -> int\n"
		"\n"
		"Returns the number of outputs.\n"
		""},
	 { (char *)"btkSeparateKnownVirtualMarkersFilter_ResetState", _wrap_btkSeparateKnownVirtualMarkersFilter_ResetState, METH_VARARGS, (char *)"\n"
		"btkSeparateKnownVirtualMarkersFilter_ResetState(self)\n"
		"\n"
		"Reset the state of the process. Usefull when an exception was thrown during the generation of the data.\n"
		""},
	 { (char *)"btkSeparateKnownVirtualMarkersFilter_Update", _wrap_btkSeparateKnownVirtualMarkersFilter_Update, METH_VARARGS, (char *)"\n"
		"btkSeparateKnownVirtualMarkersFilter_Update(self)\n"
		"\n"
		"Update the pipeline and then all the data inside. Recursive method which\n"
		" 1) determines the processes to update\n"
		" 2) generate the data by using the GenerateData() method.\n"
		""},
	 { (char *)"btkSeparateKnownVirtualMarkersFilter_GetTimestamp", _wrap_btkSeparateKnownVirtualMarkersFilter_GetTimestamp, METH_VARARGS, (char *)"\n"
		"btkSeparateKnownVirtualMarkersFilter_GetTimestamp(self) -> unsigned long\n"
		"\n"
		"Returns the timestamp of the object.\n"
		""},
	 { (char *)"btkSeparateKnownVirtualMarkersFilter_swigregister", btkSeparateKnownVirtualMarkersFilter_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_btkSpecializedPointsExtractor", _wrap_new_btkSpecializedPointsExtractor, METH_VARARGS, (char *)"\n"
		"new_btkSpecializedPointsExtractor() -> btkSpecializedPointsExtractor\n"
		"\n"
		"\n"
		"Extracts only the points corresponding to the given type (without cloning the extracted points).\n"
		"\n"
		"The type is set by the SetPointType() method. By default, if no type is set, this filter extract markers.\n"
		""},
	 { (char *)"btkSpecializedPointsExtractor___deref__", _wrap_btkSpecializedPointsExtractor___deref__, METH_VARARGS, (char *)"btkSpecializedPointsExtractor___deref__(self) -> btkSpecializedPointsExtractor_impl *"},
	 { (char *)"delete_btkSpecializedPointsExtractor", _wrap_delete_btkSpecializedPointsExtractor, METH_VARARGS, (char *)"delete_btkSpecializedPointsExtractor(self)"},
	 { (char *)"btkSpecializedPointsExtractor_GetInput", _wrap_btkSpecializedPointsExtractor_GetInput, METH_VARARGS, (char *)"\n"
		"btkSpecializedPointsExtractor_GetInput(self) -> btkAcquisition\n"
		"\n"
		"Gets the input registered with this process.\n"
		""},
	 { (char *)"btkSpecializedPointsExtractor_SetInput", _wrap_btkSpecializedPointsExtractor_SetInput, METH_VARARGS, (char *)"\n"
		"btkSpecializedPointsExtractor_SetInput(self, input)\n"
		"\n"
		"Sets the input required with this process.\n"
		""},
	 { (char *)"btkSpecializedPointsExtractor_GetOutput", _wrap_btkSpecializedPointsExtractor_GetOutput, METH_VARARGS, (char *)"\n"
		"btkSpecializedPointsExtractor_GetOutput(self) -> btkPointCollection\n"
		"\n"
		"Returns the output created with this process.\n"
		""},
	 { (char *)"btkSpecializedPointsExtractor_GetPointType", _wrap_btkSpecializedPointsExtractor_GetPointType, METH_VARARGS, (char *)"\n"
		"btkSpecializedPointsExtractor_GetPointType(self) -> btkPoint_impl::Type\n"
		"\n"
		"Returns the type of points to extract.\n"
		""},
	 { (char *)"btkSpecializedPointsExtractor_SetPointType", _wrap_btkSpecializedPointsExtractor_SetPointType, METH_VARARGS, (char *)"\n"
		"SetPointType(self, btk.btkPoint.Type)\n"
		"\n"
		"Sets the type of points to extract.\n"
		""},
	 { (char *)"btkSpecializedPointsExtractor_GetInputNumber", _wrap_btkSpecializedPointsExtractor_GetInputNumber, METH_VARARGS, (char *)"\n"
		"btkSpecializedPointsExtractor_GetInputNumber(self) -> int\n"
		"\n"
		"Returns the number of inputs.\n"
		""},
	 { (char *)"btkSpecializedPointsExtractor_GetValidInputNumber", _wrap_btkSpecializedPointsExtractor_GetValidInputNumber, METH_VARARGS, (char *)"\n"
		"btkSpecializedPointsExtractor_GetValidInputNumber(self) -> int\n"
		"\n"
		"Returns the number of inputs which are valid (i.e. not null).\n"
		""},
	 { (char *)"btkSpecializedPointsExtractor_GetOutputNumber", _wrap_btkSpecializedPointsExtractor_GetOutputNumber, METH_VARARGS, (char *)"\n"
		"btkSpecializedPointsExtractor_GetOutputNumber(self) -> int\n"
		"\n"
		"Returns the number of outputs.\n"
		""},
	 { (char *)"btkSpecializedPointsExtractor_ResetState", _wrap_btkSpecializedPointsExtractor_ResetState, METH_VARARGS, (char *)"\n"
		"btkSpecializedPointsExtractor_ResetState(self)\n"
		"\n"
		"Reset the state of the process. Usefull when an exception was thrown during the generation of the data.\n"
		""},
	 { (char *)"btkSpecializedPointsExtractor_Update", _wrap_btkSpecializedPointsExtractor_Update, METH_VARARGS, (char *)"\n"
		"btkSpecializedPointsExtractor_Update(self)\n"
		"\n"
		"Update the pipeline and then all the data inside. Recursive method which\n"
		" 1) determines the processes to update\n"
		" 2) generate the data by using the GenerateData() method.\n"
		""},
	 { (char *)"btkSpecializedPointsExtractor_GetTimestamp", _wrap_btkSpecializedPointsExtractor_GetTimestamp, METH_VARARGS, (char *)"\n"
		"btkSpecializedPointsExtractor_GetTimestamp(self) -> unsigned long\n"
		"\n"
		"Returns the timestamp of the object.\n"
		""},
	 { (char *)"btkSpecializedPointsExtractor_swigregister", btkSpecializedPointsExtractor_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_btkSubAcquisitionFilter", _wrap_new_btkSubAcquisitionFilter, METH_VARARGS, (char *)"\n"
		"new_btkSubAcquisitionFilter() -> btkSubAcquisitionFilter\n"
		"\n"
		"\n"
		"Detect heel strike and toe-off events during gait from vertical ground reaction wrench.\n"
		"\n"
		"To fill exactly the detected events, you need to give some extra information to this filter:\n"
		" - The value of the first frame of the acquisition where the force platform data were extracted (to be added to the detected frames' index).\n"
		" - The acquisition's frequency used by the force platform data (to calculate the time related to the event's frame).\n"
		" - The subject's label (optional).\n"
		"All these informations have to be given to the method SetAcquisitionInformation().\n"
		"\n"
		"To detect the heel strike and toe-off events you can set some options:\n"
		" - The threshold value used to known when an event occurred (see SetThresholdValue()).\n"
		" - The mapping between the force plates and the side (left, right, general)  of the events detected (see SetForceplateContextMapping()).\n"
		" - The region of interest where to detect the events (see SetRegionOfInterest()).\n"
		"\n"
		"The algorithm works as following: Based on the region of interest, the maximum is searched. \n"
		"If the maximum is higher than the threshold set, then the frame of the value on the left side of \n"
		"this maximum lower than the threshold is used to create a heel strike event. On the other hand, \n"
		"the value on the right side of the maximum lower than the threshold is used to create a toe-off event.\n"
		"\n"
		"Note: The design of this class is not perfect as it cannot be used in a pipeline without \n"
		"to update the part before to know some acquisition's information (first frame, sample frequency, subject's name).\n"
		"This class (or the pipeline mechanism) could be modified in a future version of BTK to make up this problem.\n"
		""},
	 { (char *)"btkSubAcquisitionFilter___deref__", _wrap_btkSubAcquisitionFilter___deref__, METH_VARARGS, (char *)"btkSubAcquisitionFilter___deref__(self) -> btkSubAcquisitionFilter_impl *"},
	 { (char *)"btkSubAcquisitionFilter_GetExtractionOption", _wrap_btkSubAcquisitionFilter_GetExtractionOption, METH_VARARGS, (char *)"\n"
		"GetExtractionOption() -> btkSubAcquisitionFilter::ExtractionOption\n"
		"btkSubAcquisitionFilter_GetExtractionOption(self, ids) -> btkSubAcquisitionFilter::ExtractionOption\n"
		""},
	 { (char *)"btkSubAcquisitionFilter_SetExtractionOption", _wrap_btkSubAcquisitionFilter_SetExtractionOption, METH_VARARGS, (char *)"\n"
		"SetExtractionOption(option)\n"
		"btkSubAcquisitionFilter_SetExtractionOption(self, option, ids)\n"
		""},
	 { (char *)"delete_btkSubAcquisitionFilter", _wrap_delete_btkSubAcquisitionFilter, METH_VARARGS, (char *)"delete_btkSubAcquisitionFilter(self)"},
	 { (char *)"btkSubAcquisitionFilter_SetInput", _wrap_btkSubAcquisitionFilter_SetInput, METH_VARARGS, (char *)"\n"
		"SetInput(self, btkAcquisition)\n"
		"\n"
		"Sets the input required with this process.\n"
		""},
	 { (char *)"btkSubAcquisitionFilter_GetInput", _wrap_btkSubAcquisitionFilter_GetInput, METH_VARARGS, (char *)"\n"
		"btkSubAcquisitionFilter_GetInput(self) -> btkAcquisition\n"
		"\n"
		"Gets the input registered with this process.\n"
		""},
	 { (char *)"btkSubAcquisitionFilter_GetOutput", _wrap_btkSubAcquisitionFilter_GetOutput, METH_VARARGS, (char *)"\n"
		"btkSubAcquisitionFilter_GetOutput(self) -> btkAcquisition\n"
		"\n"
		"Returns the output created with this process.\n"
		""},
	 { (char *)"btkSubAcquisitionFilter_GetFramesIndex", _wrap_btkSubAcquisitionFilter_GetFramesIndex, METH_VARARGS, (char *)"\n"
		"btkSubAcquisitionFilter_GetFramesIndex(self) -> int const *\n"
		"\n"
		"Returns the index of the frames to extract. The returned array contains two values, where the first one is the low bound while the second value is the high bound.\n"
		"The index starts from 0 and correspond to the first frame of the acquisition. By default, all the frames are extracted and boundaries are set to -1.\n"
		""},
	 { (char *)"btkSubAcquisitionFilter_SetFramesIndex", _wrap_btkSubAcquisitionFilter_SetFramesIndex, METH_VARARGS, (char *)"\n"
		"SetFramesIndex(lb=-1, ub=-1)\n"
		"SetFramesIndex(lb=-1)\n"
		"btkSubAcquisitionFilter_SetFramesIndex(self)\n"
		"\n"
		"Set the boundaries of the frames to extract. The default values (-1) reset the extraction to take all the frames.\n"
		""},
	 { (char *)"btkSubAcquisitionFilter_GetInputNumber", _wrap_btkSubAcquisitionFilter_GetInputNumber, METH_VARARGS, (char *)"\n"
		"btkSubAcquisitionFilter_GetInputNumber(self) -> int\n"
		"\n"
		"Returns the number of inputs.\n"
		""},
	 { (char *)"btkSubAcquisitionFilter_GetValidInputNumber", _wrap_btkSubAcquisitionFilter_GetValidInputNumber, METH_VARARGS, (char *)"\n"
		"btkSubAcquisitionFilter_GetValidInputNumber(self) -> int\n"
		"\n"
		"Returns the number of inputs which are valid (i.e. not null).\n"
		""},
	 { (char *)"btkSubAcquisitionFilter_GetOutputNumber", _wrap_btkSubAcquisitionFilter_GetOutputNumber, METH_VARARGS, (char *)"\n"
		"btkSubAcquisitionFilter_GetOutputNumber(self) -> int\n"
		"\n"
		"Returns the number of outputs.\n"
		""},
	 { (char *)"btkSubAcquisitionFilter_ResetState", _wrap_btkSubAcquisitionFilter_ResetState, METH_VARARGS, (char *)"\n"
		"btkSubAcquisitionFilter_ResetState(self)\n"
		"\n"
		"Reset the state of the process. Usefull when an exception was thrown during the generation of the data.\n"
		""},
	 { (char *)"btkSubAcquisitionFilter_Update", _wrap_btkSubAcquisitionFilter_Update, METH_VARARGS, (char *)"\n"
		"btkSubAcquisitionFilter_Update(self)\n"
		"\n"
		"Update the pipeline and then all the data inside. Recursive method which\n"
		" 1) determines the processes to update\n"
		" 2) generate the data by using the GenerateData() method.\n"
		""},
	 { (char *)"btkSubAcquisitionFilter_GetTimestamp", _wrap_btkSubAcquisitionFilter_GetTimestamp, METH_VARARGS, (char *)"\n"
		"btkSubAcquisitionFilter_GetTimestamp(self) -> unsigned long\n"
		"\n"
		"Returns the timestamp of the object.\n"
		""},
	 { (char *)"btkSubAcquisitionFilter_swigregister", btkSubAcquisitionFilter_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_btkVerticalGroundReactionForceGaitEventDetector", _wrap_new_btkVerticalGroundReactionForceGaitEventDetector, METH_VARARGS, (char *)"new_btkVerticalGroundReactionForceGaitEventDetector() -> btkVerticalGroundReactionForceGaitEventDetector"},
	 { (char *)"btkVerticalGroundReactionForceGaitEventDetector___deref__", _wrap_btkVerticalGroundReactionForceGaitEventDetector___deref__, METH_VARARGS, (char *)"btkVerticalGroundReactionForceGaitEventDetector___deref__(self) -> btkVerticalGroundReactionForceGaitEventDetector_impl *"},
	 { (char *)"delete_btkVerticalGroundReactionForceGaitEventDetector", _wrap_delete_btkVerticalGroundReactionForceGaitEventDetector, METH_VARARGS, (char *)"delete_btkVerticalGroundReactionForceGaitEventDetector(self)"},
	 { (char *)"btkVerticalGroundReactionForceGaitEventDetector_GetInput", _wrap_btkVerticalGroundReactionForceGaitEventDetector_GetInput, METH_VARARGS, (char *)"\n"
		"btkVerticalGroundReactionForceGaitEventDetector_GetInput(self) -> btkWrenchCollection\n"
		"\n"
		"Gets the input registered with this process.\n"
		""},
	 { (char *)"btkVerticalGroundReactionForceGaitEventDetector_SetInput", _wrap_btkVerticalGroundReactionForceGaitEventDetector_SetInput, METH_VARARGS, (char *)"\n"
		"SetInput(arg2)\n"
		"btkVerticalGroundReactionForceGaitEventDetector_SetInput(self, arg3)\n"
		"\n"
		"Sets the input required with this process.\n"
		""},
	 { (char *)"btkVerticalGroundReactionForceGaitEventDetector_GetOutput", _wrap_btkVerticalGroundReactionForceGaitEventDetector_GetOutput, METH_VARARGS, (char *)"\n"
		"btkVerticalGroundReactionForceGaitEventDetector_GetOutput(self) -> btkEventCollection\n"
		"\n"
		"Gets the output created with this process.\n"
		""},
	 { (char *)"btkVerticalGroundReactionForceGaitEventDetector_SetThresholdValue", _wrap_btkVerticalGroundReactionForceGaitEventDetector_SetThresholdValue, METH_VARARGS, (char *)"\n"
		"btkVerticalGroundReactionForceGaitEventDetector_SetThresholdValue(self, arg3)\n"
		"\n"
		"Sets the threshold used to detect gait events.\n"
		""},
	 { (char *)"btkVerticalGroundReactionForceGaitEventDetector_GetThresholdValue", _wrap_btkVerticalGroundReactionForceGaitEventDetector_GetThresholdValue, METH_VARARGS, (char *)"\n"
		"btkVerticalGroundReactionForceGaitEventDetector_GetThresholdValue(self) -> int\n"
		"\n"
		"Returns the threshold used to detect gait events.\n"
		""},
	 { (char *)"btkVerticalGroundReactionForceGaitEventDetector_SetForceplateContextMapping", _wrap_btkVerticalGroundReactionForceGaitEventDetector_SetForceplateContextMapping, METH_VARARGS, (char *)"\n"
		"btkVerticalGroundReactionForceGaitEventDetector_SetForceplateContextMapping(self, arg3)\n"
		"\n"
		"Sets the mapping between the given wrenches and the side of the detected events. If no mapping is given, then all the detected events will be set as 'General' events.\n"
		""},
	 { (char *)"btkVerticalGroundReactionForceGaitEventDetector_GetForceplateContextMapping", _wrap_btkVerticalGroundReactionForceGaitEventDetector_GetForceplateContextMapping, METH_VARARGS, (char *)"\n"
		"btkVerticalGroundReactionForceGaitEventDetector_GetForceplateContextMapping(self) -> btkStringArray\n"
		"\n"
		"Returns the mapping between the wrenches in the input and the gait events to detect.\n"
		""},
	 { (char *)"btkVerticalGroundReactionForceGaitEventDetector_SetRegionOfInterest", _wrap_btkVerticalGroundReactionForceGaitEventDetector_SetRegionOfInterest, METH_VARARGS, (char *)"\n"
		"SetRegionOfInterest(lb=-1, ub=-1)\n"
		"SetRegionOfInterest(lb=-1)\n"
		"btkVerticalGroundReactionForceGaitEventDetector_SetRegionOfInterest(self)\n"
		"\n"
		"Sets the region of interest to use to detect gait events.\n"
		"WARNING: The boundaries must be set using zero-based indices.\n"
		""},
	 { (char *)"btkVerticalGroundReactionForceGaitEventDetector_GetRegionOfInterest", _wrap_btkVerticalGroundReactionForceGaitEventDetector_GetRegionOfInterest, METH_VARARGS, (char *)"\n"
		"btkVerticalGroundReactionForceGaitEventDetector_GetRegionOfInterest(self) -> int const *\n"
		"\n"
		"Returns the region of interest to use to detect gait events.\n"
		""},
	 { (char *)"btkVerticalGroundReactionForceGaitEventDetector_SetAcquisitionInformation", _wrap_btkVerticalGroundReactionForceGaitEventDetector_SetAcquisitionInformation, METH_VARARGS, (char *)"\n"
		"SetAcquisitionInformation(int& ff, double& sampleRate, string& subjectLabel)\n"
		"\n"
		"Set the informations required to set correctly the detected events.\n"
		""},
	 { (char *)"btkVerticalGroundReactionForceGaitEventDetector_GetAcquisitionInformation", _wrap_btkVerticalGroundReactionForceGaitEventDetector_GetAcquisitionInformation, METH_VARARGS, (char *)"\n"
		"GetAcquisitionInformation(int& ff, double& sampleRate, string& subjectLabel)\n"
		"\n"
		"Returns the informations required to set correctly the detected events.\n"
		""},
	 { (char *)"btkVerticalGroundReactionForceGaitEventDetector_GetInputNumber", _wrap_btkVerticalGroundReactionForceGaitEventDetector_GetInputNumber, METH_VARARGS, (char *)"\n"
		"btkVerticalGroundReactionForceGaitEventDetector_GetInputNumber(self) -> int\n"
		"\n"
		"Returns the number of inputs.\n"
		""},
	 { (char *)"btkVerticalGroundReactionForceGaitEventDetector_GetValidInputNumber", _wrap_btkVerticalGroundReactionForceGaitEventDetector_GetValidInputNumber, METH_VARARGS, (char *)"\n"
		"btkVerticalGroundReactionForceGaitEventDetector_GetValidInputNumber(self) -> int\n"
		"\n"
		"Returns the number of inputs which are valid (i.e. not null).\n"
		""},
	 { (char *)"btkVerticalGroundReactionForceGaitEventDetector_GetOutputNumber", _wrap_btkVerticalGroundReactionForceGaitEventDetector_GetOutputNumber, METH_VARARGS, (char *)"\n"
		"btkVerticalGroundReactionForceGaitEventDetector_GetOutputNumber(self) -> int\n"
		"\n"
		"Returns the number of outputs.\n"
		""},
	 { (char *)"btkVerticalGroundReactionForceGaitEventDetector_ResetState", _wrap_btkVerticalGroundReactionForceGaitEventDetector_ResetState, METH_VARARGS, (char *)"\n"
		"btkVerticalGroundReactionForceGaitEventDetector_ResetState(self)\n"
		"\n"
		"Reset the state of the process. Usefull when an exception was thrown during the generation of the data.\n"
		""},
	 { (char *)"btkVerticalGroundReactionForceGaitEventDetector_Update", _wrap_btkVerticalGroundReactionForceGaitEventDetector_Update, METH_VARARGS, (char *)"\n"
		"btkVerticalGroundReactionForceGaitEventDetector_Update(self)\n"
		"\n"
		"Update the pipeline and then all the data inside. Recursive method which\n"
		" 1) determines the processes to update\n"
		" 2) generate the data by using the GenerateData() method.\n"
		""},
	 { (char *)"btkVerticalGroundReactionForceGaitEventDetector_GetTimestamp", _wrap_btkVerticalGroundReactionForceGaitEventDetector_GetTimestamp, METH_VARARGS, (char *)"\n"
		"btkVerticalGroundReactionForceGaitEventDetector_GetTimestamp(self) -> unsigned long\n"
		"\n"
		"Returns the timestamp of the object.\n"
		""},
	 { (char *)"btkVerticalGroundReactionForceGaitEventDetector_swigregister", btkVerticalGroundReactionForceGaitEventDetector_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_btkWrenchDirectionAngleFilter", _wrap_new_btkWrenchDirectionAngleFilter, METH_VARARGS, (char *)"\n"
		"new_btkWrenchDirectionAngleFilter() -> btkWrenchDirectionAngleFilter\n"
		"\n"
		"\n"
		"Calculate the direction angle of the force vector for each wrench.\n"
		"\n"
		"The direction angle is projected on each plane of the global frame in this order:\n"
		" - Angle yOz: set in the X component of the output ;\n"
		" - Angle xOz: set in the Y component of the output ;\n"
		" - Angle xOy: set in the Z component of the output.\n"
		"\n"
		"The output angles are expressed in degrees and the range is between 0 and 360 degrees. \n"
		"Then a shift from 360 to 0 is possible if the force turns around itself.\n"
		""},
	 { (char *)"btkWrenchDirectionAngleFilter___deref__", _wrap_btkWrenchDirectionAngleFilter___deref__, METH_VARARGS, (char *)"btkWrenchDirectionAngleFilter___deref__(self) -> btkWrenchDirectionAngleFilter_impl *"},
	 { (char *)"delete_btkWrenchDirectionAngleFilter", _wrap_delete_btkWrenchDirectionAngleFilter, METH_VARARGS, (char *)"delete_btkWrenchDirectionAngleFilter(self)"},
	 { (char *)"btkWrenchDirectionAngleFilter_GetInput", _wrap_btkWrenchDirectionAngleFilter_GetInput, METH_VARARGS, (char *)"\n"
		"btkWrenchDirectionAngleFilter_GetInput(self) -> btkWrenchCollection\n"
		"\n"
		"Gets the input registered with this process.\n"
		""},
	 { (char *)"btkWrenchDirectionAngleFilter_SetInput", _wrap_btkWrenchDirectionAngleFilter_SetInput, METH_VARARGS, (char *)"\n"
		"btkWrenchDirectionAngleFilter_SetInput(self, input)\n"
		"\n"
		"Sets the input required with this process.\n"
		""},
	 { (char *)"btkWrenchDirectionAngleFilter_GetOutput", _wrap_btkWrenchDirectionAngleFilter_GetOutput, METH_VARARGS, (char *)"\n"
		"btkWrenchDirectionAngleFilter_GetOutput(self) -> btkPointCollection\n"
		"\n"
		"Returns the output created with this process.\n"
		""},
	 { (char *)"btkWrenchDirectionAngleFilter_GetInputNumber", _wrap_btkWrenchDirectionAngleFilter_GetInputNumber, METH_VARARGS, (char *)"\n"
		"btkWrenchDirectionAngleFilter_GetInputNumber(self) -> int\n"
		"\n"
		"Returns the number of inputs.\n"
		""},
	 { (char *)"btkWrenchDirectionAngleFilter_GetValidInputNumber", _wrap_btkWrenchDirectionAngleFilter_GetValidInputNumber, METH_VARARGS, (char *)"\n"
		"btkWrenchDirectionAngleFilter_GetValidInputNumber(self) -> int\n"
		"\n"
		"Returns the number of inputs which are valid (i.e. not null).\n"
		""},
	 { (char *)"btkWrenchDirectionAngleFilter_GetOutputNumber", _wrap_btkWrenchDirectionAngleFilter_GetOutputNumber, METH_VARARGS, (char *)"\n"
		"btkWrenchDirectionAngleFilter_GetOutputNumber(self) -> int\n"
		"\n"
		"Returns the number of outputs.\n"
		""},
	 { (char *)"btkWrenchDirectionAngleFilter_ResetState", _wrap_btkWrenchDirectionAngleFilter_ResetState, METH_VARARGS, (char *)"\n"
		"btkWrenchDirectionAngleFilter_ResetState(self)\n"
		"\n"
		"Reset the state of the process. Usefull when an exception was thrown during the generation of the data.\n"
		""},
	 { (char *)"btkWrenchDirectionAngleFilter_Update", _wrap_btkWrenchDirectionAngleFilter_Update, METH_VARARGS, (char *)"\n"
		"btkWrenchDirectionAngleFilter_Update(self)\n"
		"\n"
		"Update the pipeline and then all the data inside. Recursive method which\n"
		" 1) determines the processes to update\n"
		" 2) generate the data by using the GenerateData() method.\n"
		""},
	 { (char *)"btkWrenchDirectionAngleFilter_GetTimestamp", _wrap_btkWrenchDirectionAngleFilter_GetTimestamp, METH_VARARGS, (char *)"\n"
		"btkWrenchDirectionAngleFilter_GetTimestamp(self) -> unsigned long\n"
		"\n"
		"Returns the timestamp of the object.\n"
		""},
	 { (char *)"btkWrenchDirectionAngleFilter_swigregister", btkWrenchDirectionAngleFilter_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_btkStringAxes", _wrap_new_btkStringAxes, METH_VARARGS, (char *)"\n"
		"new_btkStringAxes(o, a1, a2, a3) -> btkStringAxes\n"
		"\n"
		"\n"
		"Workaround to represent the C++ class btk::SeparateKnownVirtualMarkersFilter::StringAxes with SWIG.\n"
		"\n"
		"Store four labels corresponding to markers used to define a frame.\n"
		""},
	 { (char *)"btkStringAxes_Origin_set", _wrap_btkStringAxes_Origin_set, METH_VARARGS, (char *)"btkStringAxes_Origin_set(self, Origin)"},
	 { (char *)"btkStringAxes_Origin_get", _wrap_btkStringAxes_Origin_get, METH_VARARGS, (char *)"btkStringAxes_Origin_get(self) -> std::string const &"},
	 { (char *)"btkStringAxes_Axis1_set", _wrap_btkStringAxes_Axis1_set, METH_VARARGS, (char *)"btkStringAxes_Axis1_set(self, Axis1)"},
	 { (char *)"btkStringAxes_Axis1_get", _wrap_btkStringAxes_Axis1_get, METH_VARARGS, (char *)"btkStringAxes_Axis1_get(self) -> std::string const &"},
	 { (char *)"btkStringAxes_Axis2_set", _wrap_btkStringAxes_Axis2_set, METH_VARARGS, (char *)"btkStringAxes_Axis2_set(self, Axis2)"},
	 { (char *)"btkStringAxes_Axis2_get", _wrap_btkStringAxes_Axis2_get, METH_VARARGS, (char *)"btkStringAxes_Axis2_get(self) -> std::string const &"},
	 { (char *)"btkStringAxes_Axis3_set", _wrap_btkStringAxes_Axis3_set, METH_VARARGS, (char *)"btkStringAxes_Axis3_set(self, Axis3)"},
	 { (char *)"btkStringAxes_Axis3_get", _wrap_btkStringAxes_Axis3_get, METH_VARARGS, (char *)"btkStringAxes_Axis3_get(self) -> std::string const &"},
	 { (char *)"delete_btkStringAxes", _wrap_delete_btkStringAxes, METH_VARARGS, (char *)"delete_btkStringAxes(self)"},
	 { (char *)"btkStringAxes_swigregister", btkStringAxes_swigregister, METH_VARARGS, NULL},
	 { (char *)"btkStringAxesList_iterator", _wrap_btkStringAxesList_iterator, METH_VARARGS, (char *)"btkStringAxesList_iterator(self) -> SwigPyIterator"},
	 { (char *)"btkStringAxesList___nonzero__", _wrap_btkStringAxesList___nonzero__, METH_VARARGS, (char *)"btkStringAxesList___nonzero__(self) -> bool"},
	 { (char *)"btkStringAxesList___bool__", _wrap_btkStringAxesList___bool__, METH_VARARGS, (char *)"btkStringAxesList___bool__(self) -> bool"},
	 { (char *)"btkStringAxesList___len__", _wrap_btkStringAxesList___len__, METH_VARARGS, (char *)"btkStringAxesList___len__(self) -> std::list< btkStringAxes >::size_type"},
	 { (char *)"btkStringAxesList___getslice__", _wrap_btkStringAxesList___getslice__, METH_VARARGS, (char *)"btkStringAxesList___getslice__(self, i, j) -> btkStringAxesList"},
	 { (char *)"btkStringAxesList___setslice__", _wrap_btkStringAxesList___setslice__, METH_VARARGS, (char *)"\n"
		"__setslice__(i, j)\n"
		"btkStringAxesList___setslice__(self, i, j, v)\n"
		""},
	 { (char *)"btkStringAxesList___delslice__", _wrap_btkStringAxesList___delslice__, METH_VARARGS, (char *)"btkStringAxesList___delslice__(self, i, j)"},
	 { (char *)"btkStringAxesList___delitem__", _wrap_btkStringAxesList___delitem__, METH_VARARGS, (char *)"\n"
		"__delitem__(i)\n"
		"btkStringAxesList___delitem__(self, slice)\n"
		""},
	 { (char *)"btkStringAxesList___getitem__", _wrap_btkStringAxesList___getitem__, METH_VARARGS, (char *)"\n"
		"__getitem__(slice) -> btkStringAxesList\n"
		"btkStringAxesList___getitem__(self, i) -> btkStringAxes\n"
		""},
	 { (char *)"btkStringAxesList___setitem__", _wrap_btkStringAxesList___setitem__, METH_VARARGS, (char *)"\n"
		"__setitem__(slice, v)\n"
		"__setitem__(slice)\n"
		"btkStringAxesList___setitem__(self, i, x)\n"
		""},
	 { (char *)"btkStringAxesList_pop", _wrap_btkStringAxesList_pop, METH_VARARGS, (char *)"btkStringAxesList_pop(self) -> btkStringAxes"},
	 { (char *)"btkStringAxesList_append", _wrap_btkStringAxesList_append, METH_VARARGS, (char *)"btkStringAxesList_append(self, x)"},
	 { (char *)"btkStringAxesList_empty", _wrap_btkStringAxesList_empty, METH_VARARGS, (char *)"btkStringAxesList_empty(self) -> bool"},
	 { (char *)"btkStringAxesList_size", _wrap_btkStringAxesList_size, METH_VARARGS, (char *)"btkStringAxesList_size(self) -> std::list< btkStringAxes >::size_type"},
	 { (char *)"btkStringAxesList_swap", _wrap_btkStringAxesList_swap, METH_VARARGS, (char *)"btkStringAxesList_swap(self, v)"},
	 { (char *)"btkStringAxesList_begin", _wrap_btkStringAxesList_begin, METH_VARARGS, (char *)"btkStringAxesList_begin(self) -> std::list< btkStringAxes >::iterator"},
	 { (char *)"btkStringAxesList_end", _wrap_btkStringAxesList_end, METH_VARARGS, (char *)"btkStringAxesList_end(self) -> std::list< btkStringAxes >::iterator"},
	 { (char *)"btkStringAxesList_rbegin", _wrap_btkStringAxesList_rbegin, METH_VARARGS, (char *)"btkStringAxesList_rbegin(self) -> std::list< btkStringAxes >::reverse_iterator"},
	 { (char *)"btkStringAxesList_rend", _wrap_btkStringAxesList_rend, METH_VARARGS, (char *)"btkStringAxesList_rend(self) -> std::list< btkStringAxes >::reverse_iterator"},
	 { (char *)"btkStringAxesList_clear", _wrap_btkStringAxesList_clear, METH_VARARGS, (char *)"btkStringAxesList_clear(self)"},
	 { (char *)"btkStringAxesList_get_allocator", _wrap_btkStringAxesList_get_allocator, METH_VARARGS, (char *)"btkStringAxesList_get_allocator(self) -> std::list< btkStringAxes >::allocator_type"},
	 { (char *)"btkStringAxesList_pop_back", _wrap_btkStringAxesList_pop_back, METH_VARARGS, (char *)"btkStringAxesList_pop_back(self)"},
	 { (char *)"btkStringAxesList_erase", _wrap_btkStringAxesList_erase, METH_VARARGS, (char *)"\n"
		"erase(pos) -> std::list< btkStringAxes >::iterator\n"
		"btkStringAxesList_erase(self, first, last) -> std::list< btkStringAxes >::iterator\n"
		""},
	 { (char *)"new_btkStringAxesList", _wrap_new_btkStringAxesList, METH_VARARGS, (char *)"\n"
		"btkStringAxesList()\n"
		"btkStringAxesList(arg2)\n"
		"btkStringAxesList(size)\n"
		"new_btkStringAxesList(size, value) -> btkStringAxesList\n"
		""},
	 { (char *)"btkStringAxesList_push_back", _wrap_btkStringAxesList_push_back, METH_VARARGS, (char *)"btkStringAxesList_push_back(self, x)"},
	 { (char *)"btkStringAxesList_front", _wrap_btkStringAxesList_front, METH_VARARGS, (char *)"btkStringAxesList_front(self) -> btkStringAxes"},
	 { (char *)"btkStringAxesList_back", _wrap_btkStringAxesList_back, METH_VARARGS, (char *)"btkStringAxesList_back(self) -> btkStringAxes"},
	 { (char *)"btkStringAxesList_assign", _wrap_btkStringAxesList_assign, METH_VARARGS, (char *)"btkStringAxesList_assign(self, n, x)"},
	 { (char *)"btkStringAxesList_resize", _wrap_btkStringAxesList_resize, METH_VARARGS, (char *)"\n"
		"resize(new_size)\n"
		"btkStringAxesList_resize(self, new_size, x)\n"
		""},
	 { (char *)"btkStringAxesList_insert", _wrap_btkStringAxesList_insert, METH_VARARGS, (char *)"\n"
		"insert(pos, x) -> std::list< btkStringAxes >::iterator\n"
		"btkStringAxesList_insert(self, pos, n, x)\n"
		""},
	 { (char *)"btkStringAxesList_pop_front", _wrap_btkStringAxesList_pop_front, METH_VARARGS, (char *)"btkStringAxesList_pop_front(self)"},
	 { (char *)"btkStringAxesList_push_front", _wrap_btkStringAxesList_push_front, METH_VARARGS, (char *)"btkStringAxesList_push_front(self, x)"},
	 { (char *)"btkStringAxesList_reverse", _wrap_btkStringAxesList_reverse, METH_VARARGS, (char *)"btkStringAxesList_reverse(self)"},
	 { (char *)"delete_btkStringAxesList", _wrap_delete_btkStringAxesList, METH_VARARGS, (char *)"delete_btkStringAxesList(self)"},
	 { (char *)"btkStringAxesList_swigregister", btkStringAxesList_swigregister, METH_VARARGS, NULL},
	 { (char *)"btkStringList_iterator", _wrap_btkStringList_iterator, METH_VARARGS, (char *)"btkStringList_iterator(self) -> SwigPyIterator"},
	 { (char *)"btkStringList___nonzero__", _wrap_btkStringList___nonzero__, METH_VARARGS, (char *)"btkStringList___nonzero__(self) -> bool"},
	 { (char *)"btkStringList___bool__", _wrap_btkStringList___bool__, METH_VARARGS, (char *)"btkStringList___bool__(self) -> bool"},
	 { (char *)"btkStringList___len__", _wrap_btkStringList___len__, METH_VARARGS, (char *)"btkStringList___len__(self) -> std::list< std::string >::size_type"},
	 { (char *)"btkStringList___getslice__", _wrap_btkStringList___getslice__, METH_VARARGS, (char *)"btkStringList___getslice__(self, i, j) -> btkStringList"},
	 { (char *)"btkStringList___setslice__", _wrap_btkStringList___setslice__, METH_VARARGS, (char *)"\n"
		"__setslice__(i, j)\n"
		"btkStringList___setslice__(self, i, j, v)\n"
		""},
	 { (char *)"btkStringList___delslice__", _wrap_btkStringList___delslice__, METH_VARARGS, (char *)"btkStringList___delslice__(self, i, j)"},
	 { (char *)"btkStringList___delitem__", _wrap_btkStringList___delitem__, METH_VARARGS, (char *)"\n"
		"__delitem__(i)\n"
		"btkStringList___delitem__(self, slice)\n"
		""},
	 { (char *)"btkStringList___getitem__", _wrap_btkStringList___getitem__, METH_VARARGS, (char *)"\n"
		"__getitem__(slice) -> btkStringList\n"
		"btkStringList___getitem__(self, i) -> std::list< std::string >::value_type const &\n"
		""},
	 { (char *)"btkStringList___setitem__", _wrap_btkStringList___setitem__, METH_VARARGS, (char *)"\n"
		"__setitem__(slice, v)\n"
		"__setitem__(slice)\n"
		"btkStringList___setitem__(self, i, x)\n"
		""},
	 { (char *)"btkStringList_pop", _wrap_btkStringList_pop, METH_VARARGS, (char *)"btkStringList_pop(self) -> std::list< std::string >::value_type"},
	 { (char *)"btkStringList_append", _wrap_btkStringList_append, METH_VARARGS, (char *)"btkStringList_append(self, x)"},
	 { (char *)"btkStringList_empty", _wrap_btkStringList_empty, METH_VARARGS, (char *)"btkStringList_empty(self) -> bool"},
	 { (char *)"btkStringList_size", _wrap_btkStringList_size, METH_VARARGS, (char *)"btkStringList_size(self) -> std::list< std::string >::size_type"},
	 { (char *)"btkStringList_swap", _wrap_btkStringList_swap, METH_VARARGS, (char *)"btkStringList_swap(self, v)"},
	 { (char *)"btkStringList_begin", _wrap_btkStringList_begin, METH_VARARGS, (char *)"btkStringList_begin(self) -> std::list< std::string >::iterator"},
	 { (char *)"btkStringList_end", _wrap_btkStringList_end, METH_VARARGS, (char *)"btkStringList_end(self) -> std::list< std::string >::iterator"},
	 { (char *)"btkStringList_rbegin", _wrap_btkStringList_rbegin, METH_VARARGS, (char *)"btkStringList_rbegin(self) -> std::list< std::string >::reverse_iterator"},
	 { (char *)"btkStringList_rend", _wrap_btkStringList_rend, METH_VARARGS, (char *)"btkStringList_rend(self) -> std::list< std::string >::reverse_iterator"},
	 { (char *)"btkStringList_clear", _wrap_btkStringList_clear, METH_VARARGS, (char *)"btkStringList_clear(self)"},
	 { (char *)"btkStringList_get_allocator", _wrap_btkStringList_get_allocator, METH_VARARGS, (char *)"btkStringList_get_allocator(self) -> std::list< std::string >::allocator_type"},
	 { (char *)"btkStringList_pop_back", _wrap_btkStringList_pop_back, METH_VARARGS, (char *)"btkStringList_pop_back(self)"},
	 { (char *)"btkStringList_erase", _wrap_btkStringList_erase, METH_VARARGS, (char *)"\n"
		"erase(pos) -> std::list< std::string >::iterator\n"
		"btkStringList_erase(self, first, last) -> std::list< std::string >::iterator\n"
		""},
	 { (char *)"new_btkStringList", _wrap_new_btkStringList, METH_VARARGS, (char *)"\n"
		"btkStringList()\n"
		"btkStringList(arg2)\n"
		"btkStringList(size)\n"
		"new_btkStringList(size, value) -> btkStringList\n"
		""},
	 { (char *)"btkStringList_push_back", _wrap_btkStringList_push_back, METH_VARARGS, (char *)"btkStringList_push_back(self, x)"},
	 { (char *)"btkStringList_front", _wrap_btkStringList_front, METH_VARARGS, (char *)"btkStringList_front(self) -> std::list< std::string >::value_type const &"},
	 { (char *)"btkStringList_back", _wrap_btkStringList_back, METH_VARARGS, (char *)"btkStringList_back(self) -> std::list< std::string >::value_type const &"},
	 { (char *)"btkStringList_assign", _wrap_btkStringList_assign, METH_VARARGS, (char *)"btkStringList_assign(self, n, x)"},
	 { (char *)"btkStringList_resize", _wrap_btkStringList_resize, METH_VARARGS, (char *)"\n"
		"resize(new_size)\n"
		"btkStringList_resize(self, new_size, x)\n"
		""},
	 { (char *)"btkStringList_insert", _wrap_btkStringList_insert, METH_VARARGS, (char *)"\n"
		"insert(pos, x) -> std::list< std::string >::iterator\n"
		"btkStringList_insert(self, pos, n, x)\n"
		""},
	 { (char *)"btkStringList_pop_front", _wrap_btkStringList_pop_front, METH_VARARGS, (char *)"btkStringList_pop_front(self)"},
	 { (char *)"btkStringList_push_front", _wrap_btkStringList_push_front, METH_VARARGS, (char *)"btkStringList_push_front(self, x)"},
	 { (char *)"btkStringList_reverse", _wrap_btkStringList_reverse, METH_VARARGS, (char *)"btkStringList_reverse(self)"},
	 { (char *)"delete_btkStringList", _wrap_delete_btkStringList, METH_VARARGS, (char *)"delete_btkStringList(self)"},
	 { (char *)"btkStringList_swigregister", btkStringList_swigregister, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_btkIMU_implTo_p_btkDataObject_impl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkDataObject_impl *)  ((btkIMU_impl *) x));
}
static void *_p_btkForcePlatform_implTo_p_btkDataObject_impl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkDataObject_impl *)  ((btkForcePlatform_impl *) x));
}
static void *_p_btkIMUCollection_implTo_p_btkDataObject_impl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkDataObject_impl *)  ((btkIMUCollection_impl *) x));
}
static void *_p_btkWrenchCollection_implTo_p_btkDataObject_impl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkDataObject_impl *)  ((btkWrenchCollection_impl *) x));
}
static void *_p_btkForcePlatformCollection_implTo_p_btkDataObject_impl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkDataObject_impl *)  ((btkForcePlatformCollection_impl *) x));
}
static void *_p_btkPointCollection_implTo_p_btkDataObject_impl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkDataObject_impl *)  ((btkPointCollection_impl *) x));
}
static void *_p_btkAnalogCollection_implTo_p_btkDataObject_impl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkDataObject_impl *)  ((btkAnalogCollection_impl *) x));
}
static void *_p_btkEventCollection_implTo_p_btkDataObject_impl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkDataObject_impl *)  ((btkEventCollection_impl *) x));
}
static void *_p_btkAcquisition_implTo_p_btkDataObject_impl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkDataObject_impl *)  ((btkAcquisition_impl *) x));
}
static void *_p_btkAnalog_implTo_p_btkDataObject_impl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkDataObject_impl *)  ((btkAnalog_impl *) x));
}
static void *_p_btkPointData_implTo_p_btkDataObject_impl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkDataObject_impl *)  ((btkPointData_impl *) x));
}
static void *_p_btkAnalogData_implTo_p_btkDataObject_impl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkDataObject_impl *)  ((btkAnalogData_impl *) x));
}
static void *_p_btkMetaData_implTo_p_btkDataObject_impl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkDataObject_impl *)  ((btkMetaData_impl *) x));
}
static void *_p_btkWrench_implTo_p_btkDataObject_impl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkDataObject_impl *)  ((btkWrench_impl *) x));
}
static void *_p_btkPoint_implTo_p_btkDataObject_impl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkDataObject_impl *)  ((btkPoint_impl *) x));
}
static void *_p_btkEvent_implTo_p_btkDataObject_impl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkDataObject_impl *)  ((btkEvent_impl *) x));
}
static void *_p_btkVerticalGroundReactionForceGaitEventDetector_implTo_p_btkProcessObject_impl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkProcessObject_impl *)  ((btkVerticalGroundReactionForceGaitEventDetector_impl *) x));
}
static void *_p_btkSubAcquisitionFilter_implTo_p_btkProcessObject_impl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkProcessObject_impl *)  ((btkSubAcquisitionFilter_impl *) x));
}
static void *_p_btkSpecializedPointsExtractor_implTo_p_btkProcessObject_impl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkProcessObject_impl *)  ((btkSpecializedPointsExtractor_impl *) x));
}
static void *_p_btkSeparateKnownVirtualMarkersFilter_implTo_p_btkProcessObject_impl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkProcessObject_impl *)  ((btkSeparateKnownVirtualMarkersFilter_impl *) x));
}
static void *_p_btkMergeAcquisitionFilter_implTo_p_btkProcessObject_impl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkProcessObject_impl *)  ((btkMergeAcquisitionFilter_impl *) x));
}
static void *_p_btkIMUsExtractor_implTo_p_btkProcessObject_impl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkProcessObject_impl *)  ((btkIMUsExtractor_impl *) x));
}
static void *_p_btkGroundReactionWrenchFilter_implTo_p_btkProcessObject_impl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkProcessObject_impl *)  ((btkGroundReactionWrenchFilter_impl *) x));
}
static void *_p_btkForcePlatformWrenchFilter_implTo_p_btkProcessObject_impl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkProcessObject_impl *)  ((btkForcePlatformWrenchFilter_impl *) x));
}
static void *_p_btkForcePlatformsExtractor_implTo_p_btkProcessObject_impl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkProcessObject_impl *)  ((btkForcePlatformsExtractor_impl *) x));
}
static void *_p_btkWrenchCollectionDownsampleFilter_implTo_p_btkProcessObject_impl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkProcessObject_impl *)  ((btkWrenchCollectionDownsampleFilter_impl *) x));
}
static void *_p_btkWrenchDownsampleFilter_implTo_p_btkProcessObject_impl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkProcessObject_impl *)  ((btkWrenchDownsampleFilter_impl *) x));
}
static void *_p_btkAnalogOffsetRemover_implTo_p_btkProcessObject_impl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkProcessObject_impl *)  ((btkAnalogOffsetRemover_impl *) x));
}
static void *_p_btkAcquisitionUnitConverter_implTo_p_btkProcessObject_impl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkProcessObject_impl *)  ((btkAcquisitionUnitConverter_impl *) x));
}
static void *_p_btkAcquisitionFileWriter_implTo_p_btkProcessObject_impl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkProcessObject_impl *)  ((btkAcquisitionFileWriter_impl *) x));
}
static void *_p_btkAcquisitionFileReader_implTo_p_btkProcessObject_impl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkProcessObject_impl *)  ((btkAcquisitionFileReader_impl *) x));
}
static void *_p_btkWrenchDirectionAngleFilter_implTo_p_btkProcessObject_impl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkProcessObject_impl *)  ((btkWrenchDirectionAngleFilter_impl *) x));
}
static void *_p_btkMOMFileIOTo_p_btkAcquisitionFileIO(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkAcquisitionFileIO *)  ((btkMOMFileIO *) x));
}
static void *_p_btkDelsysEMGFileIOTo_p_btkAcquisitionFileIO(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkAcquisitionFileIO *)  ((btkDelsysEMGFileIO *) x));
}
static void *_p_btkCALForcePlateFileIOTo_p_btkAcquisitionFileIO(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkAcquisitionFileIO *)  ((btkCALForcePlateFileIO *) x));
}
static void *_p_btkANGFileIOTo_p_btkAcquisitionFileIO(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkAcquisitionFileIO *)  ((btkANGFileIO *) x));
}
static void *_p_btkANCFileIOTo_p_btkAcquisitionFileIO(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkAcquisitionFileIO *)  ((btkANCFileIO *) x));
}
static void *_p_btkRICFileIOTo_p_btkAcquisitionFileIO(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkAcquisitionFileIO *)  ((btkRICFileIO *) x));
}
static void *_p_btkTRCFileIOTo_p_btkAcquisitionFileIO(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkAcquisitionFileIO *)  ((btkTRCFileIO *) x));
}
static void *_p_btkXLSOrthoTrakFileIOTo_p_btkAcquisitionFileIO(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkAcquisitionFileIO *)  ((btkXLSOrthoTrakFileIO *) x));
}
static void *_p_btkXMOVEFileIOTo_p_btkAcquisitionFileIO(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkAcquisitionFileIO *)  ((btkXMOVEFileIO *) x));
}
static void *_p_btkRAxFileIOTo_p_btkAcquisitionFileIO(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkAcquisitionFileIO *)  ((btkRAxFileIO *) x));
}
static void *_p_btkPWRFileIOTo_p_btkAcquisitionFileIO(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkAcquisitionFileIO *)  ((btkPWRFileIO *) x));
}
static void *_p_btkGRxFileIOTo_p_btkAcquisitionFileIO(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkAcquisitionFileIO *)  ((btkGRxFileIO *) x));
}
static void *_p_btkEMxFileIOTo_p_btkAcquisitionFileIO(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkAcquisitionFileIO *)  ((btkEMxFileIO *) x));
}
static void *_p_btkEMFFileIOTo_p_btkAcquisitionFileIO(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkAcquisitionFileIO *)  ((btkEMFFileIO *) x));
}
static void *_p_btkMDFFileIOTo_p_btkAcquisitionFileIO(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkAcquisitionFileIO *)  ((btkMDFFileIO *) x));
}
static void *_p_btkCLBFileIOTo_p_btkAcquisitionFileIO(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkAcquisitionFileIO *)  ((btkCLBFileIO *) x));
}
static void *_p_btkANBFileIOTo_p_btkAcquisitionFileIO(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkAcquisitionFileIO *)  ((btkANBFileIO *) x));
}
static void *_p_btkC3DFileIOTo_p_btkAcquisitionFileIO(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkAcquisitionFileIO *)  ((btkC3DFileIO *) x));
}
static void *_p_btkTDFFileIOTo_p_btkAcquisitionFileIO(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkAcquisitionFileIO *)  ((btkTDFFileIO *) x));
}
static void *_p_btkTRBFileIOTo_p_btkAcquisitionFileIO(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkAcquisitionFileIO *)  ((btkTRBFileIO *) x));
}
static void *_p_btkRAxFileIO_implTo_p_btkAcquisitionFileIO_impl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkAcquisitionFileIO_impl *)  ((btkRAxFileIO_impl *) x));
}
static void *_p_btkPWRFileIO_implTo_p_btkAcquisitionFileIO_impl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkAcquisitionFileIO_impl *)  ((btkPWRFileIO_impl *) x));
}
static void *_p_btkMOMFileIO_implTo_p_btkAcquisitionFileIO_impl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkAcquisitionFileIO_impl *)  ((btkMOMFileIO_impl *) x));
}
static void *_p_btkMDFFileIO_implTo_p_btkAcquisitionFileIO_impl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkAcquisitionFileIO_impl *)  ((btkMDFFileIO_impl *) x));
}
static void *_p_btkGRxFileIO_implTo_p_btkAcquisitionFileIO_impl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkAcquisitionFileIO_impl *)  ((btkGRxFileIO_impl *) x));
}
static void *_p_btkEMxFileIO_implTo_p_btkAcquisitionFileIO_impl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkAcquisitionFileIO_impl *)  ((btkEMxFileIO_impl *) x));
}
static void *_p_btkEMFFileIO_implTo_p_btkAcquisitionFileIO_impl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkAcquisitionFileIO_impl *)  ((btkEMFFileIO_impl *) x));
}
static void *_p_btkDelsysEMGFileIO_implTo_p_btkAcquisitionFileIO_impl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkAcquisitionFileIO_impl *)  ((btkDelsysEMGFileIO_impl *) x));
}
static void *_p_btkCALForcePlateFileIO_implTo_p_btkAcquisitionFileIO_impl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkAcquisitionFileIO_impl *)  ((btkCALForcePlateFileIO_impl *) x));
}
static void *_p_btkCLBFileIO_implTo_p_btkAcquisitionFileIO_impl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkAcquisitionFileIO_impl *)  ((btkCLBFileIO_impl *) x));
}
static void *_p_btkANGFileIO_implTo_p_btkAcquisitionFileIO_impl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkAcquisitionFileIO_impl *)  ((btkANGFileIO_impl *) x));
}
static void *_p_btkANCFileIO_implTo_p_btkAcquisitionFileIO_impl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkAcquisitionFileIO_impl *)  ((btkANCFileIO_impl *) x));
}
static void *_p_btkANBFileIO_implTo_p_btkAcquisitionFileIO_impl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkAcquisitionFileIO_impl *)  ((btkANBFileIO_impl *) x));
}
static void *_p_btkC3DFileIO_implTo_p_btkAcquisitionFileIO_impl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkAcquisitionFileIO_impl *)  ((btkC3DFileIO_impl *) x));
}
static void *_p_btkRICFileIO_implTo_p_btkAcquisitionFileIO_impl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkAcquisitionFileIO_impl *)  ((btkRICFileIO_impl *) x));
}
static void *_p_btkTRBFileIO_implTo_p_btkAcquisitionFileIO_impl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkAcquisitionFileIO_impl *)  ((btkTRBFileIO_impl *) x));
}
static void *_p_btkTRCFileIO_implTo_p_btkAcquisitionFileIO_impl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkAcquisitionFileIO_impl *)  ((btkTRCFileIO_impl *) x));
}
static void *_p_btkTDFFileIO_implTo_p_btkAcquisitionFileIO_impl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkAcquisitionFileIO_impl *)  ((btkTDFFileIO_impl *) x));
}
static void *_p_btkXLSOrthoTrakFileIO_implTo_p_btkAcquisitionFileIO_impl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkAcquisitionFileIO_impl *)  ((btkXLSOrthoTrakFileIO_impl *) x));
}
static void *_p_btkXMOVEFileIO_implTo_p_btkAcquisitionFileIO_impl(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((btkAcquisitionFileIO_impl *)  ((btkXMOVEFileIO_impl *) x));
}
static swig_type_info _swigt__p_ExtractionOption = {"_p_ExtractionOption", "ExtractionOption *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkANBFileIO = {"_p_btkANBFileIO", "btkANBFileIO *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkANBFileIO_impl = {"_p_btkANBFileIO_impl", "btkANBFileIO_impl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkANCFileIO = {"_p_btkANCFileIO", "btkANCFileIO *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkANCFileIO_impl = {"_p_btkANCFileIO_impl", "btkANCFileIO_impl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkANGFileIO = {"_p_btkANGFileIO", "btkANGFileIO *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkANGFileIO_impl = {"_p_btkANGFileIO_impl", "btkANGFileIO_impl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkAcquisition = {"_p_btkAcquisition", "btkAcquisition *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkAcquisitionFileIO = {"_p_btkAcquisitionFileIO", "btkAcquisitionFileIO *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkAcquisitionFileIO_impl = {"_p_btkAcquisitionFileIO_impl", "btkAcquisitionFileIO_impl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkAcquisitionFileIO_shared = {"_p_btkAcquisitionFileIO_shared", "btkAcquisitionFileIO_shared *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkAcquisitionFileReader = {"_p_btkAcquisitionFileReader", "btkAcquisitionFileReader *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkAcquisitionFileReader_impl = {"_p_btkAcquisitionFileReader_impl", "btkAcquisitionFileReader_impl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkAcquisitionFileWriter = {"_p_btkAcquisitionFileWriter", "btkAcquisitionFileWriter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkAcquisitionFileWriter_impl = {"_p_btkAcquisitionFileWriter_impl", "btkAcquisitionFileWriter_impl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkAcquisitionUnitConverter = {"_p_btkAcquisitionUnitConverter", "btkAcquisitionUnitConverter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkAcquisitionUnitConverter_impl = {"_p_btkAcquisitionUnitConverter_impl", "btkAcquisitionUnitConverter_impl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkAcquisition_impl = {"_p_btkAcquisition_impl", "btkAcquisition_impl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkAnalog = {"_p_btkAnalog", "btkAnalogCollection_impl::ItemPointer *|btkAnalog *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkAnalogCollection = {"_p_btkAnalogCollection", "btkAnalogCollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkAnalogCollectionIterator = {"_p_btkAnalogCollectionIterator", "btkAnalogCollectionIterator *|btkAnalogCollection_impl::Iterator *|btkAcquisition_impl::AnalogIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkAnalogCollection_impl = {"_p_btkAnalogCollection_impl", "btkAnalogCollection_impl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkAnalogData = {"_p_btkAnalogData", "btkAnalogData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkAnalogData_impl = {"_p_btkAnalogData_impl", "btkAnalogData_impl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkAnalogIterator = {"_p_btkAnalogIterator", "btkAnalogIterator *|btkForcePlatform_impl::Iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkAnalogOffsetRemover = {"_p_btkAnalogOffsetRemover", "btkAnalogOffsetRemover *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkAnalogOffsetRemover_impl = {"_p_btkAnalogOffsetRemover_impl", "btkAnalogOffsetRemover_impl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkAnalog_impl = {"_p_btkAnalog_impl", "btkAnalog_impl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkC3DFileIO = {"_p_btkC3DFileIO", "btkC3DFileIO *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkC3DFileIO_impl = {"_p_btkC3DFileIO_impl", "btkC3DFileIO_impl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkCALForcePlateFileIO = {"_p_btkCALForcePlateFileIO", "btkCALForcePlateFileIO *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkCALForcePlateFileIO_impl = {"_p_btkCALForcePlateFileIO_impl", "btkCALForcePlateFileIO_impl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkCLBFileIO = {"_p_btkCLBFileIO", "btkCLBFileIO *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkCLBFileIO_impl = {"_p_btkCLBFileIO_impl", "btkCLBFileIO_impl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkDataObject_impl = {"_p_btkDataObject_impl", "btkDataObject_impl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkDelsysEMGFileIO = {"_p_btkDelsysEMGFileIO", "btkDelsysEMGFileIO *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkDelsysEMGFileIO_impl = {"_p_btkDelsysEMGFileIO_impl", "btkDelsysEMGFileIO_impl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkEMFFileIO = {"_p_btkEMFFileIO", "btkEMFFileIO *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkEMFFileIO_impl = {"_p_btkEMFFileIO_impl", "btkEMFFileIO_impl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkEMxFileIO = {"_p_btkEMxFileIO", "btkEMxFileIO *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkEMxFileIO_impl = {"_p_btkEMxFileIO_impl", "btkEMxFileIO_impl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkEvent = {"_p_btkEvent", "btkEvent *|btkEventCollection_impl::ItemPointer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkEventCollection = {"_p_btkEventCollection", "btkEventCollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkEventCollectionIterator = {"_p_btkEventCollectionIterator", "btkEventCollectionIterator *|btkEventCollection_impl::Iterator *|btkAcquisition_impl::EventIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkEventCollection_impl = {"_p_btkEventCollection_impl", "btkEventCollection_impl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkEvent_impl = {"_p_btkEvent_impl", "btkEvent_impl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkForcePlatform = {"_p_btkForcePlatform", "btkForcePlatform *|btkForcePlatformCollection_impl::ItemPointer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkForcePlatformCollection = {"_p_btkForcePlatformCollection", "btkForcePlatformCollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkForcePlatformCollectionIterator = {"_p_btkForcePlatformCollectionIterator", "btkForcePlatformCollectionIterator *|btkForcePlatformCollection_impl::Iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkForcePlatformCollection_impl = {"_p_btkForcePlatformCollection_impl", "btkForcePlatformCollection_impl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkForcePlatformWrenchFilter = {"_p_btkForcePlatformWrenchFilter", "btkForcePlatformWrenchFilter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkForcePlatformWrenchFilter_impl = {"_p_btkForcePlatformWrenchFilter_impl", "btkForcePlatformWrenchFilter_impl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkForcePlatform_impl = {"_p_btkForcePlatform_impl", "btkForcePlatform_impl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkForcePlatformsExtractor = {"_p_btkForcePlatformsExtractor", "btkForcePlatformsExtractor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkForcePlatformsExtractor_impl = {"_p_btkForcePlatformsExtractor_impl", "btkForcePlatformsExtractor_impl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkGRxFileIO = {"_p_btkGRxFileIO", "btkGRxFileIO *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkGRxFileIO_impl = {"_p_btkGRxFileIO_impl", "btkGRxFileIO_impl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkGroundReactionWrenchFilter = {"_p_btkGroundReactionWrenchFilter", "btkGroundReactionWrenchFilter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkGroundReactionWrenchFilter_impl = {"_p_btkGroundReactionWrenchFilter_impl", "btkGroundReactionWrenchFilter_impl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkIMU = {"_p_btkIMU", "btkIMU *|btkIMUCollection_impl::ItemPointer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkIMUCollection = {"_p_btkIMUCollection", "btkIMUCollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkIMUCollectionIterator = {"_p_btkIMUCollectionIterator", "btkIMUCollectionIterator *|btkIMUCollection_impl::Iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkIMUCollection_impl = {"_p_btkIMUCollection_impl", "btkIMUCollection_impl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkIMU_impl = {"_p_btkIMU_impl", "btkIMU_impl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkIMUsExtractor = {"_p_btkIMUsExtractor", "btkIMUsExtractor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkIMUsExtractor_impl = {"_p_btkIMUsExtractor_impl", "btkIMUsExtractor_impl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkMDFFileIO = {"_p_btkMDFFileIO", "btkMDFFileIO *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkMDFFileIO_impl = {"_p_btkMDFFileIO_impl", "btkMDFFileIO_impl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkMOMFileIO = {"_p_btkMOMFileIO", "btkMOMFileIO *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkMOMFileIO_impl = {"_p_btkMOMFileIO_impl", "btkMOMFileIO_impl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkMergeAcquisitionFilter = {"_p_btkMergeAcquisitionFilter", "btkMergeAcquisitionFilter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkMergeAcquisitionFilter_impl = {"_p_btkMergeAcquisitionFilter_impl", "btkMergeAcquisitionFilter_impl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkMetaData = {"_p_btkMetaData", "btkMetaData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkMetaDataInfo = {"_p_btkMetaDataInfo", "btkMetaDataInfo *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkMetaDataInfo_impl = {"_p_btkMetaDataInfo_impl", "btkMetaDataInfo_impl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkMetaDataIterator = {"_p_btkMetaDataIterator", "btkMetaDataIterator *|btkMetaData_impl::Iterator *|btkAcquisition_impl::MetaDataIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkMetaData_impl = {"_p_btkMetaData_impl", "btkMetaData_impl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkPWRFileIO = {"_p_btkPWRFileIO", "btkPWRFileIO *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkPWRFileIO_impl = {"_p_btkPWRFileIO_impl", "btkPWRFileIO_impl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkPoint = {"_p_btkPoint", "btkPoint *|btkPointCollection_impl::ItemPointer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkPointCollection = {"_p_btkPointCollection", "btkPointCollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkPointCollectionIterator = {"_p_btkPointCollectionIterator", "btkPointCollectionIterator *|btkPointCollection_impl::Iterator *|btkAcquisition_impl::PointIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkPointCollection_impl = {"_p_btkPointCollection_impl", "btkPointCollection_impl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkPointData = {"_p_btkPointData", "btkPointData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkPointData_impl = {"_p_btkPointData_impl", "btkPointData_impl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkPoint_impl = {"_p_btkPoint_impl", "btkPoint_impl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkProcessObject_impl = {"_p_btkProcessObject_impl", "btkProcessObject_impl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkRAxFileIO = {"_p_btkRAxFileIO", "btkRAxFileIO *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkRAxFileIO_impl = {"_p_btkRAxFileIO_impl", "btkRAxFileIO_impl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkRICFileIO = {"_p_btkRICFileIO", "btkRICFileIO *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkRICFileIO_impl = {"_p_btkRICFileIO_impl", "btkRICFileIO_impl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkSeparateKnownVirtualMarkersFilter = {"_p_btkSeparateKnownVirtualMarkersFilter", "btkSeparateKnownVirtualMarkersFilter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkSeparateKnownVirtualMarkersFilter_impl = {"_p_btkSeparateKnownVirtualMarkersFilter_impl", "btkSeparateKnownVirtualMarkersFilter_impl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkSpecializedPointsExtractor = {"_p_btkSpecializedPointsExtractor", "btkSpecializedPointsExtractor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkSpecializedPointsExtractor_impl = {"_p_btkSpecializedPointsExtractor_impl", "btkSpecializedPointsExtractor_impl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkStringAxes = {"_p_btkStringAxes", "std::list< btkStringAxes >::value_type *|btkStringAxes *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkSubAcquisitionFilter = {"_p_btkSubAcquisitionFilter", "btkSubAcquisitionFilter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkSubAcquisitionFilter_impl = {"_p_btkSubAcquisitionFilter_impl", "btkSubAcquisitionFilter_impl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkTDFFileIO = {"_p_btkTDFFileIO", "btkTDFFileIO *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkTDFFileIO_impl = {"_p_btkTDFFileIO_impl", "btkTDFFileIO_impl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkTRBFileIO = {"_p_btkTRBFileIO", "btkTRBFileIO *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkTRBFileIO_impl = {"_p_btkTRBFileIO_impl", "btkTRBFileIO_impl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkTRCFileIO = {"_p_btkTRCFileIO", "btkTRCFileIO *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkTRCFileIO_impl = {"_p_btkTRCFileIO_impl", "btkTRCFileIO_impl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkVerticalGroundReactionForceGaitEventDetector = {"_p_btkVerticalGroundReactionForceGaitEventDetector", "btkVerticalGroundReactionForceGaitEventDetector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkVerticalGroundReactionForceGaitEventDetector_impl = {"_p_btkVerticalGroundReactionForceGaitEventDetector_impl", "btkVerticalGroundReactionForceGaitEventDetector_impl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkWrench = {"_p_btkWrench", "btkWrench *|btkWrenchCollection_impl::ItemPointer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkWrenchCollection = {"_p_btkWrenchCollection", "btkWrenchCollection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkWrenchCollectionDownsampleFilter = {"_p_btkWrenchCollectionDownsampleFilter", "btkWrenchCollectionDownsampleFilter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkWrenchCollectionDownsampleFilter_impl = {"_p_btkWrenchCollectionDownsampleFilter_impl", "btkWrenchCollectionDownsampleFilter_impl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkWrenchCollectionIterator = {"_p_btkWrenchCollectionIterator", "btkWrenchCollectionIterator *|btkWrenchCollection_impl::Iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkWrenchCollection_impl = {"_p_btkWrenchCollection_impl", "btkWrenchCollection_impl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkWrenchDirectionAngleFilter = {"_p_btkWrenchDirectionAngleFilter", "btkWrenchDirectionAngleFilter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkWrenchDirectionAngleFilter_impl = {"_p_btkWrenchDirectionAngleFilter_impl", "btkWrenchDirectionAngleFilter_impl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkWrenchDownsampleFilter = {"_p_btkWrenchDownsampleFilter", "btkWrenchDownsampleFilter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkWrenchDownsampleFilter_impl = {"_p_btkWrenchDownsampleFilter_impl", "btkWrenchDownsampleFilter_impl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkWrench_impl = {"_p_btkWrench_impl", "btkWrench_impl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkXLSOrthoTrakFileIO = {"_p_btkXLSOrthoTrakFileIO", "btkXLSOrthoTrakFileIO *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkXLSOrthoTrakFileIO_impl = {"_p_btkXLSOrthoTrakFileIO_impl", "btkXLSOrthoTrakFileIO_impl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkXMOVEFileIO = {"_p_btkXMOVEFileIO", "btkXMOVEFileIO *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btkXMOVEFileIO_impl = {"_p_btkXMOVEFileIO_impl", "btkXMOVEFileIO_impl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btk__Analog__Values = {"_p_btk__Analog__Values", "btk::Analog::Values *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btk__ForcePlatform__CalMatrix = {"_p_btk__ForcePlatform__CalMatrix", "btk::ForcePlatform::CalMatrix *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btk__ForcePlatform__Corner = {"_p_btk__ForcePlatform__Corner", "btk::ForcePlatform::Corner *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btk__ForcePlatform__Corners = {"_p_btk__ForcePlatform__Corners", "btk::ForcePlatform::Corners *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btk__ForcePlatform__Origin = {"_p_btk__ForcePlatform__Origin", "btk::ForcePlatform::Origin *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btk__IMU__CalMatrix = {"_p_btk__IMU__CalMatrix", "btk::IMU::CalMatrix *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btk__IMU__Rotation = {"_p_btk__IMU__Rotation", "btk::IMU::Rotation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btk__MetaDataInfo__Format = {"_p_btk__MetaDataInfo__Format", "btk::MetaDataInfo::Format *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btk__Point__Residuals = {"_p_btk__Point__Residuals", "btk::Point::Residuals *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btk__Point__Values = {"_p_btk__Point__Values", "btk::Point::Values *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_PyObject = {"_p_p_PyObject", "PyObject **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_btkStringAxes_t = {"_p_std__allocatorT_btkStringAxes_t", "std::list< btkStringAxes >::allocator_type *|std::allocator< btkStringAxes > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_double_t = {"_p_std__allocatorT_double_t", "std::vector< double >::allocator_type *|std::allocator< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_int_t = {"_p_std__allocatorT_int_t", "std::vector< int >::allocator_type *|std::allocator< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__string_t = {"_p_std__allocatorT_std__string_t", "std::vector< std::string >::allocator_type *|std::list< std::string >::allocator_type *|std::allocator< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__invalid_argument = {"_p_std__invalid_argument", "std::invalid_argument *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_btkStringAxes_std__allocatorT_btkStringAxes_t_t = {"_p_std__listT_btkStringAxes_std__allocatorT_btkStringAxes_t_t", "std::list< btkStringAxes,std::allocator< btkStringAxes > > *|std::list< btkStringAxes > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_std__string_std__allocatorT_std__string_t_t = {"_p_std__listT_std__string_std__allocatorT_std__string_t_t", "std::list< std::string > *|std::list< std::string,std::allocator< std::string > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_std__allocatorT_double_t_t = {"_p_std__vectorT_double_std__allocatorT_double_t_t", "std::vector< double,std::allocator< double > > *|std::vector< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_int_std__allocatorT_int_t_t = {"_p_std__vectorT_int_std__allocatorT_int_t_t", "std::vector< int,std::allocator< int > > *|std::vector< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t = {"_p_std__vectorT_std__string_std__allocatorT_std__string_t_t", "std::vector< std::string,std::allocator< std::string > > *|std::vector< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__SwigPyIterator = {"_p_swig__SwigPyIterator", "swig::SwigPyIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_ExtractionOption,
  &_swigt__p_allocator_type,
  &_swigt__p_btkANBFileIO,
  &_swigt__p_btkANBFileIO_impl,
  &_swigt__p_btkANCFileIO,
  &_swigt__p_btkANCFileIO_impl,
  &_swigt__p_btkANGFileIO,
  &_swigt__p_btkANGFileIO_impl,
  &_swigt__p_btkAcquisition,
  &_swigt__p_btkAcquisitionFileIO,
  &_swigt__p_btkAcquisitionFileIO_impl,
  &_swigt__p_btkAcquisitionFileIO_shared,
  &_swigt__p_btkAcquisitionFileReader,
  &_swigt__p_btkAcquisitionFileReader_impl,
  &_swigt__p_btkAcquisitionFileWriter,
  &_swigt__p_btkAcquisitionFileWriter_impl,
  &_swigt__p_btkAcquisitionUnitConverter,
  &_swigt__p_btkAcquisitionUnitConverter_impl,
  &_swigt__p_btkAcquisition_impl,
  &_swigt__p_btkAnalog,
  &_swigt__p_btkAnalogCollection,
  &_swigt__p_btkAnalogCollectionIterator,
  &_swigt__p_btkAnalogCollection_impl,
  &_swigt__p_btkAnalogData,
  &_swigt__p_btkAnalogData_impl,
  &_swigt__p_btkAnalogIterator,
  &_swigt__p_btkAnalogOffsetRemover,
  &_swigt__p_btkAnalogOffsetRemover_impl,
  &_swigt__p_btkAnalog_impl,
  &_swigt__p_btkC3DFileIO,
  &_swigt__p_btkC3DFileIO_impl,
  &_swigt__p_btkCALForcePlateFileIO,
  &_swigt__p_btkCALForcePlateFileIO_impl,
  &_swigt__p_btkCLBFileIO,
  &_swigt__p_btkCLBFileIO_impl,
  &_swigt__p_btkDataObject_impl,
  &_swigt__p_btkDelsysEMGFileIO,
  &_swigt__p_btkDelsysEMGFileIO_impl,
  &_swigt__p_btkEMFFileIO,
  &_swigt__p_btkEMFFileIO_impl,
  &_swigt__p_btkEMxFileIO,
  &_swigt__p_btkEMxFileIO_impl,
  &_swigt__p_btkEvent,
  &_swigt__p_btkEventCollection,
  &_swigt__p_btkEventCollectionIterator,
  &_swigt__p_btkEventCollection_impl,
  &_swigt__p_btkEvent_impl,
  &_swigt__p_btkForcePlatform,
  &_swigt__p_btkForcePlatformCollection,
  &_swigt__p_btkForcePlatformCollectionIterator,
  &_swigt__p_btkForcePlatformCollection_impl,
  &_swigt__p_btkForcePlatformWrenchFilter,
  &_swigt__p_btkForcePlatformWrenchFilter_impl,
  &_swigt__p_btkForcePlatform_impl,
  &_swigt__p_btkForcePlatformsExtractor,
  &_swigt__p_btkForcePlatformsExtractor_impl,
  &_swigt__p_btkGRxFileIO,
  &_swigt__p_btkGRxFileIO_impl,
  &_swigt__p_btkGroundReactionWrenchFilter,
  &_swigt__p_btkGroundReactionWrenchFilter_impl,
  &_swigt__p_btkIMU,
  &_swigt__p_btkIMUCollection,
  &_swigt__p_btkIMUCollectionIterator,
  &_swigt__p_btkIMUCollection_impl,
  &_swigt__p_btkIMU_impl,
  &_swigt__p_btkIMUsExtractor,
  &_swigt__p_btkIMUsExtractor_impl,
  &_swigt__p_btkMDFFileIO,
  &_swigt__p_btkMDFFileIO_impl,
  &_swigt__p_btkMOMFileIO,
  &_swigt__p_btkMOMFileIO_impl,
  &_swigt__p_btkMergeAcquisitionFilter,
  &_swigt__p_btkMergeAcquisitionFilter_impl,
  &_swigt__p_btkMetaData,
  &_swigt__p_btkMetaDataInfo,
  &_swigt__p_btkMetaDataInfo_impl,
  &_swigt__p_btkMetaDataIterator,
  &_swigt__p_btkMetaData_impl,
  &_swigt__p_btkPWRFileIO,
  &_swigt__p_btkPWRFileIO_impl,
  &_swigt__p_btkPoint,
  &_swigt__p_btkPointCollection,
  &_swigt__p_btkPointCollectionIterator,
  &_swigt__p_btkPointCollection_impl,
  &_swigt__p_btkPointData,
  &_swigt__p_btkPointData_impl,
  &_swigt__p_btkPoint_impl,
  &_swigt__p_btkProcessObject_impl,
  &_swigt__p_btkRAxFileIO,
  &_swigt__p_btkRAxFileIO_impl,
  &_swigt__p_btkRICFileIO,
  &_swigt__p_btkRICFileIO_impl,
  &_swigt__p_btkSeparateKnownVirtualMarkersFilter,
  &_swigt__p_btkSeparateKnownVirtualMarkersFilter_impl,
  &_swigt__p_btkSpecializedPointsExtractor,
  &_swigt__p_btkSpecializedPointsExtractor_impl,
  &_swigt__p_btkStringAxes,
  &_swigt__p_btkSubAcquisitionFilter,
  &_swigt__p_btkSubAcquisitionFilter_impl,
  &_swigt__p_btkTDFFileIO,
  &_swigt__p_btkTDFFileIO_impl,
  &_swigt__p_btkTRBFileIO,
  &_swigt__p_btkTRBFileIO_impl,
  &_swigt__p_btkTRCFileIO,
  &_swigt__p_btkTRCFileIO_impl,
  &_swigt__p_btkVerticalGroundReactionForceGaitEventDetector,
  &_swigt__p_btkVerticalGroundReactionForceGaitEventDetector_impl,
  &_swigt__p_btkWrench,
  &_swigt__p_btkWrenchCollection,
  &_swigt__p_btkWrenchCollectionDownsampleFilter,
  &_swigt__p_btkWrenchCollectionDownsampleFilter_impl,
  &_swigt__p_btkWrenchCollectionIterator,
  &_swigt__p_btkWrenchCollection_impl,
  &_swigt__p_btkWrenchDirectionAngleFilter,
  &_swigt__p_btkWrenchDirectionAngleFilter_impl,
  &_swigt__p_btkWrenchDownsampleFilter,
  &_swigt__p_btkWrenchDownsampleFilter_impl,
  &_swigt__p_btkWrench_impl,
  &_swigt__p_btkXLSOrthoTrakFileIO,
  &_swigt__p_btkXLSOrthoTrakFileIO_impl,
  &_swigt__p_btkXMOVEFileIO,
  &_swigt__p_btkXMOVEFileIO_impl,
  &_swigt__p_btk__Analog__Values,
  &_swigt__p_btk__ForcePlatform__CalMatrix,
  &_swigt__p_btk__ForcePlatform__Corner,
  &_swigt__p_btk__ForcePlatform__Corners,
  &_swigt__p_btk__ForcePlatform__Origin,
  &_swigt__p_btk__IMU__CalMatrix,
  &_swigt__p_btk__IMU__Rotation,
  &_swigt__p_btk__MetaDataInfo__Format,
  &_swigt__p_btk__Point__Residuals,
  &_swigt__p_btk__Point__Values,
  &_swigt__p_char,
  &_swigt__p_difference_type,
  &_swigt__p_double,
  &_swigt__p_int,
  &_swigt__p_p_PyObject,
  &_swigt__p_size_type,
  &_swigt__p_std__allocatorT_btkStringAxes_t,
  &_swigt__p_std__allocatorT_double_t,
  &_swigt__p_std__allocatorT_int_t,
  &_swigt__p_std__allocatorT_std__string_t,
  &_swigt__p_std__invalid_argument,
  &_swigt__p_std__listT_btkStringAxes_std__allocatorT_btkStringAxes_t_t,
  &_swigt__p_std__listT_std__string_std__allocatorT_std__string_t_t,
  &_swigt__p_std__string,
  &_swigt__p_std__vectorT_double_std__allocatorT_double_t_t,
  &_swigt__p_std__vectorT_int_std__allocatorT_int_t_t,
  &_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t,
  &_swigt__p_swig__SwigPyIterator,
  &_swigt__p_value_type,
};

static swig_cast_info _swigc__p_ExtractionOption[] = {  {&_swigt__p_ExtractionOption, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkANBFileIO[] = {  {&_swigt__p_btkANBFileIO, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkANBFileIO_impl[] = {  {&_swigt__p_btkANBFileIO_impl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkANCFileIO[] = {  {&_swigt__p_btkANCFileIO, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkANCFileIO_impl[] = {  {&_swigt__p_btkANCFileIO_impl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkANGFileIO[] = {  {&_swigt__p_btkANGFileIO, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkANGFileIO_impl[] = {  {&_swigt__p_btkANGFileIO_impl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkAcquisition[] = {  {&_swigt__p_btkAcquisition, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkAcquisitionFileIO[] = {  {&_swigt__p_btkMOMFileIO, _p_btkMOMFileIOTo_p_btkAcquisitionFileIO, 0, 0},  {&_swigt__p_btkDelsysEMGFileIO, _p_btkDelsysEMGFileIOTo_p_btkAcquisitionFileIO, 0, 0},  {&_swigt__p_btkCALForcePlateFileIO, _p_btkCALForcePlateFileIOTo_p_btkAcquisitionFileIO, 0, 0},  {&_swigt__p_btkANGFileIO, _p_btkANGFileIOTo_p_btkAcquisitionFileIO, 0, 0},  {&_swigt__p_btkANCFileIO, _p_btkANCFileIOTo_p_btkAcquisitionFileIO, 0, 0},  {&_swigt__p_btkRICFileIO, _p_btkRICFileIOTo_p_btkAcquisitionFileIO, 0, 0},  {&_swigt__p_btkTRCFileIO, _p_btkTRCFileIOTo_p_btkAcquisitionFileIO, 0, 0},  {&_swigt__p_btkXLSOrthoTrakFileIO, _p_btkXLSOrthoTrakFileIOTo_p_btkAcquisitionFileIO, 0, 0},  {&_swigt__p_btkXMOVEFileIO, _p_btkXMOVEFileIOTo_p_btkAcquisitionFileIO, 0, 0},  {&_swigt__p_btkRAxFileIO, _p_btkRAxFileIOTo_p_btkAcquisitionFileIO, 0, 0},  {&_swigt__p_btkPWRFileIO, _p_btkPWRFileIOTo_p_btkAcquisitionFileIO, 0, 0},  {&_swigt__p_btkGRxFileIO, _p_btkGRxFileIOTo_p_btkAcquisitionFileIO, 0, 0},  {&_swigt__p_btkEMxFileIO, _p_btkEMxFileIOTo_p_btkAcquisitionFileIO, 0, 0},  {&_swigt__p_btkAcquisitionFileIO, 0, 0, 0},  {&_swigt__p_btkEMFFileIO, _p_btkEMFFileIOTo_p_btkAcquisitionFileIO, 0, 0},  {&_swigt__p_btkMDFFileIO, _p_btkMDFFileIOTo_p_btkAcquisitionFileIO, 0, 0},  {&_swigt__p_btkCLBFileIO, _p_btkCLBFileIOTo_p_btkAcquisitionFileIO, 0, 0},  {&_swigt__p_btkANBFileIO, _p_btkANBFileIOTo_p_btkAcquisitionFileIO, 0, 0},  {&_swigt__p_btkC3DFileIO, _p_btkC3DFileIOTo_p_btkAcquisitionFileIO, 0, 0},  {&_swigt__p_btkTDFFileIO, _p_btkTDFFileIOTo_p_btkAcquisitionFileIO, 0, 0},  {&_swigt__p_btkTRBFileIO, _p_btkTRBFileIOTo_p_btkAcquisitionFileIO, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkAcquisitionFileIO_impl[] = {  {&_swigt__p_btkRAxFileIO_impl, _p_btkRAxFileIO_implTo_p_btkAcquisitionFileIO_impl, 0, 0},  {&_swigt__p_btkPWRFileIO_impl, _p_btkPWRFileIO_implTo_p_btkAcquisitionFileIO_impl, 0, 0},  {&_swigt__p_btkMOMFileIO_impl, _p_btkMOMFileIO_implTo_p_btkAcquisitionFileIO_impl, 0, 0},  {&_swigt__p_btkMDFFileIO_impl, _p_btkMDFFileIO_implTo_p_btkAcquisitionFileIO_impl, 0, 0},  {&_swigt__p_btkGRxFileIO_impl, _p_btkGRxFileIO_implTo_p_btkAcquisitionFileIO_impl, 0, 0},  {&_swigt__p_btkEMxFileIO_impl, _p_btkEMxFileIO_implTo_p_btkAcquisitionFileIO_impl, 0, 0},  {&_swigt__p_btkEMFFileIO_impl, _p_btkEMFFileIO_implTo_p_btkAcquisitionFileIO_impl, 0, 0},  {&_swigt__p_btkDelsysEMGFileIO_impl, _p_btkDelsysEMGFileIO_implTo_p_btkAcquisitionFileIO_impl, 0, 0},  {&_swigt__p_btkCALForcePlateFileIO_impl, _p_btkCALForcePlateFileIO_implTo_p_btkAcquisitionFileIO_impl, 0, 0},  {&_swigt__p_btkCLBFileIO_impl, _p_btkCLBFileIO_implTo_p_btkAcquisitionFileIO_impl, 0, 0},  {&_swigt__p_btkANGFileIO_impl, _p_btkANGFileIO_implTo_p_btkAcquisitionFileIO_impl, 0, 0},  {&_swigt__p_btkANCFileIO_impl, _p_btkANCFileIO_implTo_p_btkAcquisitionFileIO_impl, 0, 0},  {&_swigt__p_btkANBFileIO_impl, _p_btkANBFileIO_implTo_p_btkAcquisitionFileIO_impl, 0, 0},  {&_swigt__p_btkAcquisitionFileIO_impl, 0, 0, 0},  {&_swigt__p_btkC3DFileIO_impl, _p_btkC3DFileIO_implTo_p_btkAcquisitionFileIO_impl, 0, 0},  {&_swigt__p_btkRICFileIO_impl, _p_btkRICFileIO_implTo_p_btkAcquisitionFileIO_impl, 0, 0},  {&_swigt__p_btkTRBFileIO_impl, _p_btkTRBFileIO_implTo_p_btkAcquisitionFileIO_impl, 0, 0},  {&_swigt__p_btkTRCFileIO_impl, _p_btkTRCFileIO_implTo_p_btkAcquisitionFileIO_impl, 0, 0},  {&_swigt__p_btkTDFFileIO_impl, _p_btkTDFFileIO_implTo_p_btkAcquisitionFileIO_impl, 0, 0},  {&_swigt__p_btkXLSOrthoTrakFileIO_impl, _p_btkXLSOrthoTrakFileIO_implTo_p_btkAcquisitionFileIO_impl, 0, 0},  {&_swigt__p_btkXMOVEFileIO_impl, _p_btkXMOVEFileIO_implTo_p_btkAcquisitionFileIO_impl, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkAcquisitionFileIO_shared[] = {  {&_swigt__p_btkAcquisitionFileIO_shared, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkAcquisitionFileReader[] = {  {&_swigt__p_btkAcquisitionFileReader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkAcquisitionFileReader_impl[] = {  {&_swigt__p_btkAcquisitionFileReader_impl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkAcquisitionFileWriter[] = {  {&_swigt__p_btkAcquisitionFileWriter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkAcquisitionFileWriter_impl[] = {  {&_swigt__p_btkAcquisitionFileWriter_impl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkAcquisitionUnitConverter[] = {  {&_swigt__p_btkAcquisitionUnitConverter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkAcquisitionUnitConverter_impl[] = {  {&_swigt__p_btkAcquisitionUnitConverter_impl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkAcquisition_impl[] = {  {&_swigt__p_btkAcquisition_impl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkAnalog[] = {  {&_swigt__p_btkAnalog, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkAnalogCollection[] = {  {&_swigt__p_btkAnalogCollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkAnalogCollectionIterator[] = {  {&_swigt__p_btkAnalogCollectionIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkAnalogCollection_impl[] = {  {&_swigt__p_btkAnalogCollection_impl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkAnalogData[] = {  {&_swigt__p_btkAnalogData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkAnalogData_impl[] = {  {&_swigt__p_btkAnalogData_impl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkAnalogIterator[] = {  {&_swigt__p_btkAnalogIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkAnalogOffsetRemover[] = {  {&_swigt__p_btkAnalogOffsetRemover, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkAnalogOffsetRemover_impl[] = {  {&_swigt__p_btkAnalogOffsetRemover_impl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkAnalog_impl[] = {  {&_swigt__p_btkAnalog_impl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkC3DFileIO[] = {  {&_swigt__p_btkC3DFileIO, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkC3DFileIO_impl[] = {  {&_swigt__p_btkC3DFileIO_impl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkCALForcePlateFileIO[] = {  {&_swigt__p_btkCALForcePlateFileIO, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkCALForcePlateFileIO_impl[] = {  {&_swigt__p_btkCALForcePlateFileIO_impl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkCLBFileIO[] = {  {&_swigt__p_btkCLBFileIO, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkCLBFileIO_impl[] = {  {&_swigt__p_btkCLBFileIO_impl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkDataObject_impl[] = {  {&_swigt__p_btkIMU_impl, _p_btkIMU_implTo_p_btkDataObject_impl, 0, 0},  {&_swigt__p_btkForcePlatform_impl, _p_btkForcePlatform_implTo_p_btkDataObject_impl, 0, 0},  {&_swigt__p_btkDataObject_impl, 0, 0, 0},  {&_swigt__p_btkIMUCollection_impl, _p_btkIMUCollection_implTo_p_btkDataObject_impl, 0, 0},  {&_swigt__p_btkWrenchCollection_impl, _p_btkWrenchCollection_implTo_p_btkDataObject_impl, 0, 0},  {&_swigt__p_btkForcePlatformCollection_impl, _p_btkForcePlatformCollection_implTo_p_btkDataObject_impl, 0, 0},  {&_swigt__p_btkPointCollection_impl, _p_btkPointCollection_implTo_p_btkDataObject_impl, 0, 0},  {&_swigt__p_btkAnalogCollection_impl, _p_btkAnalogCollection_implTo_p_btkDataObject_impl, 0, 0},  {&_swigt__p_btkEventCollection_impl, _p_btkEventCollection_implTo_p_btkDataObject_impl, 0, 0},  {&_swigt__p_btkAcquisition_impl, _p_btkAcquisition_implTo_p_btkDataObject_impl, 0, 0},  {&_swigt__p_btkAnalog_impl, _p_btkAnalog_implTo_p_btkDataObject_impl, 0, 0},  {&_swigt__p_btkPointData_impl, _p_btkPointData_implTo_p_btkDataObject_impl, 0, 0},  {&_swigt__p_btkAnalogData_impl, _p_btkAnalogData_implTo_p_btkDataObject_impl, 0, 0},  {&_swigt__p_btkMetaData_impl, _p_btkMetaData_implTo_p_btkDataObject_impl, 0, 0},  {&_swigt__p_btkWrench_impl, _p_btkWrench_implTo_p_btkDataObject_impl, 0, 0},  {&_swigt__p_btkPoint_impl, _p_btkPoint_implTo_p_btkDataObject_impl, 0, 0},  {&_swigt__p_btkEvent_impl, _p_btkEvent_implTo_p_btkDataObject_impl, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkDelsysEMGFileIO[] = {  {&_swigt__p_btkDelsysEMGFileIO, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkDelsysEMGFileIO_impl[] = {  {&_swigt__p_btkDelsysEMGFileIO_impl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkEMFFileIO[] = {  {&_swigt__p_btkEMFFileIO, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkEMFFileIO_impl[] = {  {&_swigt__p_btkEMFFileIO_impl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkEMxFileIO[] = {  {&_swigt__p_btkEMxFileIO, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkEMxFileIO_impl[] = {  {&_swigt__p_btkEMxFileIO_impl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkEvent[] = {  {&_swigt__p_btkEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkEventCollection[] = {  {&_swigt__p_btkEventCollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkEventCollectionIterator[] = {  {&_swigt__p_btkEventCollectionIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkEventCollection_impl[] = {  {&_swigt__p_btkEventCollection_impl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkEvent_impl[] = {  {&_swigt__p_btkEvent_impl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkForcePlatform[] = {  {&_swigt__p_btkForcePlatform, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkForcePlatformCollection[] = {  {&_swigt__p_btkForcePlatformCollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkForcePlatformCollectionIterator[] = {  {&_swigt__p_btkForcePlatformCollectionIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkForcePlatformCollection_impl[] = {  {&_swigt__p_btkForcePlatformCollection_impl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkForcePlatformWrenchFilter[] = {  {&_swigt__p_btkForcePlatformWrenchFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkForcePlatformWrenchFilter_impl[] = {  {&_swigt__p_btkForcePlatformWrenchFilter_impl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkForcePlatform_impl[] = {  {&_swigt__p_btkForcePlatform_impl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkForcePlatformsExtractor[] = {  {&_swigt__p_btkForcePlatformsExtractor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkForcePlatformsExtractor_impl[] = {  {&_swigt__p_btkForcePlatformsExtractor_impl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkGRxFileIO[] = {  {&_swigt__p_btkGRxFileIO, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkGRxFileIO_impl[] = {  {&_swigt__p_btkGRxFileIO_impl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkGroundReactionWrenchFilter[] = {  {&_swigt__p_btkGroundReactionWrenchFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkGroundReactionWrenchFilter_impl[] = {  {&_swigt__p_btkGroundReactionWrenchFilter_impl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkIMU[] = {  {&_swigt__p_btkIMU, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkIMUCollection[] = {  {&_swigt__p_btkIMUCollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkIMUCollectionIterator[] = {  {&_swigt__p_btkIMUCollectionIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkIMUCollection_impl[] = {  {&_swigt__p_btkIMUCollection_impl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkIMU_impl[] = {  {&_swigt__p_btkIMU_impl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkIMUsExtractor[] = {  {&_swigt__p_btkIMUsExtractor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkIMUsExtractor_impl[] = {  {&_swigt__p_btkIMUsExtractor_impl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkMDFFileIO[] = {  {&_swigt__p_btkMDFFileIO, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkMDFFileIO_impl[] = {  {&_swigt__p_btkMDFFileIO_impl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkMOMFileIO[] = {  {&_swigt__p_btkMOMFileIO, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkMOMFileIO_impl[] = {  {&_swigt__p_btkMOMFileIO_impl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkMergeAcquisitionFilter[] = {  {&_swigt__p_btkMergeAcquisitionFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkMergeAcquisitionFilter_impl[] = {  {&_swigt__p_btkMergeAcquisitionFilter_impl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkMetaData[] = {  {&_swigt__p_btkMetaData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkMetaDataInfo[] = {  {&_swigt__p_btkMetaDataInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkMetaDataInfo_impl[] = {  {&_swigt__p_btkMetaDataInfo_impl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkMetaDataIterator[] = {  {&_swigt__p_btkMetaDataIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkMetaData_impl[] = {  {&_swigt__p_btkMetaData_impl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkPWRFileIO[] = {  {&_swigt__p_btkPWRFileIO, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkPWRFileIO_impl[] = {  {&_swigt__p_btkPWRFileIO_impl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkPoint[] = {  {&_swigt__p_btkPoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkPointCollection[] = {  {&_swigt__p_btkPointCollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkPointCollectionIterator[] = {  {&_swigt__p_btkPointCollectionIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkPointCollection_impl[] = {  {&_swigt__p_btkPointCollection_impl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkPointData[] = {  {&_swigt__p_btkPointData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkPointData_impl[] = {  {&_swigt__p_btkPointData_impl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkPoint_impl[] = {  {&_swigt__p_btkPoint_impl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkProcessObject_impl[] = {  {&_swigt__p_btkProcessObject_impl, 0, 0, 0},  {&_swigt__p_btkVerticalGroundReactionForceGaitEventDetector_impl, _p_btkVerticalGroundReactionForceGaitEventDetector_implTo_p_btkProcessObject_impl, 0, 0},  {&_swigt__p_btkSubAcquisitionFilter_impl, _p_btkSubAcquisitionFilter_implTo_p_btkProcessObject_impl, 0, 0},  {&_swigt__p_btkSpecializedPointsExtractor_impl, _p_btkSpecializedPointsExtractor_implTo_p_btkProcessObject_impl, 0, 0},  {&_swigt__p_btkSeparateKnownVirtualMarkersFilter_impl, _p_btkSeparateKnownVirtualMarkersFilter_implTo_p_btkProcessObject_impl, 0, 0},  {&_swigt__p_btkMergeAcquisitionFilter_impl, _p_btkMergeAcquisitionFilter_implTo_p_btkProcessObject_impl, 0, 0},  {&_swigt__p_btkIMUsExtractor_impl, _p_btkIMUsExtractor_implTo_p_btkProcessObject_impl, 0, 0},  {&_swigt__p_btkGroundReactionWrenchFilter_impl, _p_btkGroundReactionWrenchFilter_implTo_p_btkProcessObject_impl, 0, 0},  {&_swigt__p_btkForcePlatformWrenchFilter_impl, _p_btkForcePlatformWrenchFilter_implTo_p_btkProcessObject_impl, 0, 0},  {&_swigt__p_btkForcePlatformsExtractor_impl, _p_btkForcePlatformsExtractor_implTo_p_btkProcessObject_impl, 0, 0},  {&_swigt__p_btkWrenchCollectionDownsampleFilter_impl, _p_btkWrenchCollectionDownsampleFilter_implTo_p_btkProcessObject_impl, 0, 0},  {&_swigt__p_btkWrenchDownsampleFilter_impl, _p_btkWrenchDownsampleFilter_implTo_p_btkProcessObject_impl, 0, 0},  {&_swigt__p_btkAnalogOffsetRemover_impl, _p_btkAnalogOffsetRemover_implTo_p_btkProcessObject_impl, 0, 0},  {&_swigt__p_btkAcquisitionUnitConverter_impl, _p_btkAcquisitionUnitConverter_implTo_p_btkProcessObject_impl, 0, 0},  {&_swigt__p_btkAcquisitionFileWriter_impl, _p_btkAcquisitionFileWriter_implTo_p_btkProcessObject_impl, 0, 0},  {&_swigt__p_btkAcquisitionFileReader_impl, _p_btkAcquisitionFileReader_implTo_p_btkProcessObject_impl, 0, 0},  {&_swigt__p_btkWrenchDirectionAngleFilter_impl, _p_btkWrenchDirectionAngleFilter_implTo_p_btkProcessObject_impl, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkRAxFileIO[] = {  {&_swigt__p_btkRAxFileIO, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkRAxFileIO_impl[] = {  {&_swigt__p_btkRAxFileIO_impl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkRICFileIO[] = {  {&_swigt__p_btkRICFileIO, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkRICFileIO_impl[] = {  {&_swigt__p_btkRICFileIO_impl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkSeparateKnownVirtualMarkersFilter[] = {  {&_swigt__p_btkSeparateKnownVirtualMarkersFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkSeparateKnownVirtualMarkersFilter_impl[] = {  {&_swigt__p_btkSeparateKnownVirtualMarkersFilter_impl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkSpecializedPointsExtractor[] = {  {&_swigt__p_btkSpecializedPointsExtractor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkSpecializedPointsExtractor_impl[] = {  {&_swigt__p_btkSpecializedPointsExtractor_impl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkStringAxes[] = {  {&_swigt__p_btkStringAxes, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkSubAcquisitionFilter[] = {  {&_swigt__p_btkSubAcquisitionFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkSubAcquisitionFilter_impl[] = {  {&_swigt__p_btkSubAcquisitionFilter_impl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkTDFFileIO[] = {  {&_swigt__p_btkTDFFileIO, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkTDFFileIO_impl[] = {  {&_swigt__p_btkTDFFileIO_impl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkTRBFileIO[] = {  {&_swigt__p_btkTRBFileIO, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkTRBFileIO_impl[] = {  {&_swigt__p_btkTRBFileIO_impl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkTRCFileIO[] = {  {&_swigt__p_btkTRCFileIO, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkTRCFileIO_impl[] = {  {&_swigt__p_btkTRCFileIO_impl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkVerticalGroundReactionForceGaitEventDetector[] = {  {&_swigt__p_btkVerticalGroundReactionForceGaitEventDetector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkVerticalGroundReactionForceGaitEventDetector_impl[] = {  {&_swigt__p_btkVerticalGroundReactionForceGaitEventDetector_impl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkWrench[] = {  {&_swigt__p_btkWrench, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkWrenchCollection[] = {  {&_swigt__p_btkWrenchCollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkWrenchCollectionDownsampleFilter[] = {  {&_swigt__p_btkWrenchCollectionDownsampleFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkWrenchCollectionDownsampleFilter_impl[] = {  {&_swigt__p_btkWrenchCollectionDownsampleFilter_impl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkWrenchCollectionIterator[] = {  {&_swigt__p_btkWrenchCollectionIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkWrenchCollection_impl[] = {  {&_swigt__p_btkWrenchCollection_impl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkWrenchDirectionAngleFilter[] = {  {&_swigt__p_btkWrenchDirectionAngleFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkWrenchDirectionAngleFilter_impl[] = {  {&_swigt__p_btkWrenchDirectionAngleFilter_impl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkWrenchDownsampleFilter[] = {  {&_swigt__p_btkWrenchDownsampleFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkWrenchDownsampleFilter_impl[] = {  {&_swigt__p_btkWrenchDownsampleFilter_impl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkWrench_impl[] = {  {&_swigt__p_btkWrench_impl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkXLSOrthoTrakFileIO[] = {  {&_swigt__p_btkXLSOrthoTrakFileIO, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkXLSOrthoTrakFileIO_impl[] = {  {&_swigt__p_btkXLSOrthoTrakFileIO_impl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkXMOVEFileIO[] = {  {&_swigt__p_btkXMOVEFileIO, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btkXMOVEFileIO_impl[] = {  {&_swigt__p_btkXMOVEFileIO_impl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btk__Analog__Values[] = {  {&_swigt__p_btk__Analog__Values, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btk__ForcePlatform__CalMatrix[] = {  {&_swigt__p_btk__ForcePlatform__CalMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btk__ForcePlatform__Corner[] = {  {&_swigt__p_btk__ForcePlatform__Corner, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btk__ForcePlatform__Corners[] = {  {&_swigt__p_btk__ForcePlatform__Corners, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btk__ForcePlatform__Origin[] = {  {&_swigt__p_btk__ForcePlatform__Origin, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btk__IMU__CalMatrix[] = {  {&_swigt__p_btk__IMU__CalMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btk__IMU__Rotation[] = {  {&_swigt__p_btk__IMU__Rotation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btk__MetaDataInfo__Format[] = {  {&_swigt__p_btk__MetaDataInfo__Format, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btk__Point__Residuals[] = {  {&_swigt__p_btk__Point__Residuals, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btk__Point__Values[] = {  {&_swigt__p_btk__Point__Values, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_PyObject[] = {  {&_swigt__p_p_PyObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_btkStringAxes_t[] = {  {&_swigt__p_std__allocatorT_btkStringAxes_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_double_t[] = {  {&_swigt__p_std__allocatorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_int_t[] = {  {&_swigt__p_std__allocatorT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__string_t[] = {  {&_swigt__p_std__allocatorT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__invalid_argument[] = {  {&_swigt__p_std__invalid_argument, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_btkStringAxes_std__allocatorT_btkStringAxes_t_t[] = {  {&_swigt__p_std__listT_btkStringAxes_std__allocatorT_btkStringAxes_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_std__string_std__allocatorT_std__string_t_t[] = {  {&_swigt__p_std__listT_std__string_std__allocatorT_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_std__allocatorT_double_t_t[] = {  {&_swigt__p_std__vectorT_double_std__allocatorT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int_std__allocatorT_int_t_t[] = {  {&_swigt__p_std__vectorT_int_std__allocatorT_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t[] = {  {&_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__SwigPyIterator[] = {  {&_swigt__p_swig__SwigPyIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_ExtractionOption,
  _swigc__p_allocator_type,
  _swigc__p_btkANBFileIO,
  _swigc__p_btkANBFileIO_impl,
  _swigc__p_btkANCFileIO,
  _swigc__p_btkANCFileIO_impl,
  _swigc__p_btkANGFileIO,
  _swigc__p_btkANGFileIO_impl,
  _swigc__p_btkAcquisition,
  _swigc__p_btkAcquisitionFileIO,
  _swigc__p_btkAcquisitionFileIO_impl,
  _swigc__p_btkAcquisitionFileIO_shared,
  _swigc__p_btkAcquisitionFileReader,
  _swigc__p_btkAcquisitionFileReader_impl,
  _swigc__p_btkAcquisitionFileWriter,
  _swigc__p_btkAcquisitionFileWriter_impl,
  _swigc__p_btkAcquisitionUnitConverter,
  _swigc__p_btkAcquisitionUnitConverter_impl,
  _swigc__p_btkAcquisition_impl,
  _swigc__p_btkAnalog,
  _swigc__p_btkAnalogCollection,
  _swigc__p_btkAnalogCollectionIterator,
  _swigc__p_btkAnalogCollection_impl,
  _swigc__p_btkAnalogData,
  _swigc__p_btkAnalogData_impl,
  _swigc__p_btkAnalogIterator,
  _swigc__p_btkAnalogOffsetRemover,
  _swigc__p_btkAnalogOffsetRemover_impl,
  _swigc__p_btkAnalog_impl,
  _swigc__p_btkC3DFileIO,
  _swigc__p_btkC3DFileIO_impl,
  _swigc__p_btkCALForcePlateFileIO,
  _swigc__p_btkCALForcePlateFileIO_impl,
  _swigc__p_btkCLBFileIO,
  _swigc__p_btkCLBFileIO_impl,
  _swigc__p_btkDataObject_impl,
  _swigc__p_btkDelsysEMGFileIO,
  _swigc__p_btkDelsysEMGFileIO_impl,
  _swigc__p_btkEMFFileIO,
  _swigc__p_btkEMFFileIO_impl,
  _swigc__p_btkEMxFileIO,
  _swigc__p_btkEMxFileIO_impl,
  _swigc__p_btkEvent,
  _swigc__p_btkEventCollection,
  _swigc__p_btkEventCollectionIterator,
  _swigc__p_btkEventCollection_impl,
  _swigc__p_btkEvent_impl,
  _swigc__p_btkForcePlatform,
  _swigc__p_btkForcePlatformCollection,
  _swigc__p_btkForcePlatformCollectionIterator,
  _swigc__p_btkForcePlatformCollection_impl,
  _swigc__p_btkForcePlatformWrenchFilter,
  _swigc__p_btkForcePlatformWrenchFilter_impl,
  _swigc__p_btkForcePlatform_impl,
  _swigc__p_btkForcePlatformsExtractor,
  _swigc__p_btkForcePlatformsExtractor_impl,
  _swigc__p_btkGRxFileIO,
  _swigc__p_btkGRxFileIO_impl,
  _swigc__p_btkGroundReactionWrenchFilter,
  _swigc__p_btkGroundReactionWrenchFilter_impl,
  _swigc__p_btkIMU,
  _swigc__p_btkIMUCollection,
  _swigc__p_btkIMUCollectionIterator,
  _swigc__p_btkIMUCollection_impl,
  _swigc__p_btkIMU_impl,
  _swigc__p_btkIMUsExtractor,
  _swigc__p_btkIMUsExtractor_impl,
  _swigc__p_btkMDFFileIO,
  _swigc__p_btkMDFFileIO_impl,
  _swigc__p_btkMOMFileIO,
  _swigc__p_btkMOMFileIO_impl,
  _swigc__p_btkMergeAcquisitionFilter,
  _swigc__p_btkMergeAcquisitionFilter_impl,
  _swigc__p_btkMetaData,
  _swigc__p_btkMetaDataInfo,
  _swigc__p_btkMetaDataInfo_impl,
  _swigc__p_btkMetaDataIterator,
  _swigc__p_btkMetaData_impl,
  _swigc__p_btkPWRFileIO,
  _swigc__p_btkPWRFileIO_impl,
  _swigc__p_btkPoint,
  _swigc__p_btkPointCollection,
  _swigc__p_btkPointCollectionIterator,
  _swigc__p_btkPointCollection_impl,
  _swigc__p_btkPointData,
  _swigc__p_btkPointData_impl,
  _swigc__p_btkPoint_impl,
  _swigc__p_btkProcessObject_impl,
  _swigc__p_btkRAxFileIO,
  _swigc__p_btkRAxFileIO_impl,
  _swigc__p_btkRICFileIO,
  _swigc__p_btkRICFileIO_impl,
  _swigc__p_btkSeparateKnownVirtualMarkersFilter,
  _swigc__p_btkSeparateKnownVirtualMarkersFilter_impl,
  _swigc__p_btkSpecializedPointsExtractor,
  _swigc__p_btkSpecializedPointsExtractor_impl,
  _swigc__p_btkStringAxes,
  _swigc__p_btkSubAcquisitionFilter,
  _swigc__p_btkSubAcquisitionFilter_impl,
  _swigc__p_btkTDFFileIO,
  _swigc__p_btkTDFFileIO_impl,
  _swigc__p_btkTRBFileIO,
  _swigc__p_btkTRBFileIO_impl,
  _swigc__p_btkTRCFileIO,
  _swigc__p_btkTRCFileIO_impl,
  _swigc__p_btkVerticalGroundReactionForceGaitEventDetector,
  _swigc__p_btkVerticalGroundReactionForceGaitEventDetector_impl,
  _swigc__p_btkWrench,
  _swigc__p_btkWrenchCollection,
  _swigc__p_btkWrenchCollectionDownsampleFilter,
  _swigc__p_btkWrenchCollectionDownsampleFilter_impl,
  _swigc__p_btkWrenchCollectionIterator,
  _swigc__p_btkWrenchCollection_impl,
  _swigc__p_btkWrenchDirectionAngleFilter,
  _swigc__p_btkWrenchDirectionAngleFilter_impl,
  _swigc__p_btkWrenchDownsampleFilter,
  _swigc__p_btkWrenchDownsampleFilter_impl,
  _swigc__p_btkWrench_impl,
  _swigc__p_btkXLSOrthoTrakFileIO,
  _swigc__p_btkXLSOrthoTrakFileIO_impl,
  _swigc__p_btkXMOVEFileIO,
  _swigc__p_btkXMOVEFileIO_impl,
  _swigc__p_btk__Analog__Values,
  _swigc__p_btk__ForcePlatform__CalMatrix,
  _swigc__p_btk__ForcePlatform__Corner,
  _swigc__p_btk__ForcePlatform__Corners,
  _swigc__p_btk__ForcePlatform__Origin,
  _swigc__p_btk__IMU__CalMatrix,
  _swigc__p_btk__IMU__Rotation,
  _swigc__p_btk__MetaDataInfo__Format,
  _swigc__p_btk__Point__Residuals,
  _swigc__p_btk__Point__Values,
  _swigc__p_char,
  _swigc__p_difference_type,
  _swigc__p_double,
  _swigc__p_int,
  _swigc__p_p_PyObject,
  _swigc__p_size_type,
  _swigc__p_std__allocatorT_btkStringAxes_t,
  _swigc__p_std__allocatorT_double_t,
  _swigc__p_std__allocatorT_int_t,
  _swigc__p_std__allocatorT_std__string_t,
  _swigc__p_std__invalid_argument,
  _swigc__p_std__listT_btkStringAxes_std__allocatorT_btkStringAxes_t_t,
  _swigc__p_std__listT_std__string_std__allocatorT_std__string_t_t,
  _swigc__p_std__string,
  _swigc__p_std__vectorT_double_std__allocatorT_double_t_t,
  _swigc__p_std__vectorT_int_std__allocatorT_int_t_t,
  _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t,
  _swigc__p_swig__SwigPyIterator,
  _swigc__p_value_type,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
    return PyUnicode_InternFromString("<Swig global variables>");
#else
    return PyString_FromString("<Swig global variables>");
#endif
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *str = PyUnicode_InternFromString("(");
    PyObject *tail;
    PyObject *joined;
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      tail = PyUnicode_FromString(var->name);
      joined = PyUnicode_Concat(str, tail);
      Py_DecRef(str);
      Py_DecRef(tail);
      str = joined;
      if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
      }
    }
    tail = PyUnicode_InternFromString(")");
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
#else
    PyObject *str = PyString_FromString("(");
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
    return str;
  }
  
  SWIGINTERN int
  swig_varlink_print(swig_varlinkobject *v, FILE *fp, int SWIGUNUSEDPARM(flags)) {
    char *tmp;
    PyObject *str = swig_varlink_str(v);
    fprintf(fp,"Swig global variables ");
    fprintf(fp,"%s\n", tmp = SWIG_Python_str_AsChar(str));
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(str);
    return 0;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;
    if (!type_init) {
      const PyTypeObject tmp = {
        /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
        PyVarObject_HEAD_INIT(NULL, 0)
#else
        PyObject_HEAD_INIT(NULL)
        0,                                  /* ob_size */
#endif
        (char *)"swigvarlink",              /* tp_name */
        sizeof(swig_varlinkobject),         /* tp_basicsize */
        0,                                  /* tp_itemsize */
        (destructor) swig_varlink_dealloc,  /* tp_dealloc */
        (printfunc) swig_varlink_print,     /* tp_print */
        (getattrfunc) swig_varlink_getattr, /* tp_getattr */
        (setattrfunc) swig_varlink_setattr, /* tp_setattr */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc) swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
        0,                                  /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
        0,                                  /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
        0,                                  /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
        0,                                  /* tp_allocs */
        0,                                  /* tp_frees */
        0,                                  /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
        0,                                  /* tp_prev */
#endif
        0                                   /* tp_next */
#endif
      };
      varlink_type = tmp;
      type_init = 1;
#if PY_VERSION_HEX < 0x02020000
      varlink_type.ob_type = &PyType_Type;
#else
      if (PyType_Ready(&varlink_type) < 0)
      return NULL;
#endif
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        strncpy(gv->name,name,size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *_SWIG_globals = 0; 
    if (!_SWIG_globals) _SWIG_globals = SWIG_newvarlink();  
    return _SWIG_globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (!c) continue;
      c = strstr(c, "swig_ptr: ");
      if (c) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              strncpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              strncpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md;
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
# if PY_VERSION_HEX >= 0x03020000
    PyModuleDef_HEAD_INIT,
# else
    {
      PyObject_HEAD_INIT(NULL)
      NULL, /* m_init */
      0,    /* m_index */
      NULL, /* m_copy */
    },
# endif
    (char *) SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    (PyCFunction) SwigPyObject_own,
    (PyCFunction) SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyObject *metatype_args;
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  PyObject *self = 0;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  (void)self;
  
  /* metatype is used to implement static member variables. */
  metatype_args = Py_BuildValue("(s(O){})", "SwigPyObjectType", &PyType_Type);
  assert(metatype_args);
  metatype = (PyTypeObject *) PyType_Type.tp_call((PyObject *) &PyType_Type, metatype_args, NULL);
  assert(metatype);
  Py_DECREF(metatype_args);
  metatype->tp_setattro = (setattrofunc) &SwigPyObjectType_setattro;
  assert(PyType_Ready(metatype) >= 0);
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule((char *) SWIG_name, SwigMethods);
#endif
  
  md = d = PyModule_GetDict(m);
  (void)md;
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = SwigPyObject_TypeOnce();
  } else if (SwigPyObject_TypeOnce()->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  
  import_array();
  
  SWIG_Python_SetConstant(d, "btkEvent_Unknown",SWIG_From_int(static_cast< int >(btkEvent::Unknown)));
  SWIG_Python_SetConstant(d, "btkEvent_Manual",SWIG_From_int(static_cast< int >(btkEvent::Manual)));
  SWIG_Python_SetConstant(d, "btkEvent_Automatic",SWIG_From_int(static_cast< int >(btkEvent::Automatic)));
  SWIG_Python_SetConstant(d, "btkEvent_FromForcePlatform",SWIG_From_int(static_cast< int >(btkEvent::FromForcePlatform)));
  SWIG_Python_SetConstant(d, "btkAnalog_Unknown",SWIG_From_int(static_cast< int >(btkAnalog::Unknown)));
  SWIG_Python_SetConstant(d, "btkAnalog_PlusMinus10",SWIG_From_int(static_cast< int >(btkAnalog::PlusMinus10)));
  SWIG_Python_SetConstant(d, "btkAnalog_PlusMinus5",SWIG_From_int(static_cast< int >(btkAnalog::PlusMinus5)));
  SWIG_Python_SetConstant(d, "btkAnalog_PlusMinus2Dot5",SWIG_From_int(static_cast< int >(btkAnalog::PlusMinus2Dot5)));
  SWIG_Python_SetConstant(d, "btkAnalog_PlusMinus1Dot25",SWIG_From_int(static_cast< int >(btkAnalog::PlusMinus1Dot25)));
  SWIG_Python_SetConstant(d, "btkAnalog_PlusMinus1",SWIG_From_int(static_cast< int >(btkAnalog::PlusMinus1)));
  SWIG_Python_SetConstant(d, "btkAnalog_PlusMinus0Dot5",SWIG_From_int(static_cast< int >(btkAnalog::PlusMinus0Dot5)));
  SWIG_Python_SetConstant(d, "btkAnalog_PlusMinus0Dot25",SWIG_From_int(static_cast< int >(btkAnalog::PlusMinus0Dot25)));
  SWIG_Python_SetConstant(d, "btkAnalog_PlusMinus0Dot1",SWIG_From_int(static_cast< int >(btkAnalog::PlusMinus0Dot1)));
  SWIG_Python_SetConstant(d, "btkAnalog_PlusMinus0Dot05",SWIG_From_int(static_cast< int >(btkAnalog::PlusMinus0Dot05)));
  SWIG_Python_SetConstant(d, "btkPoint_Marker",SWIG_From_int(static_cast< int >(btkPoint::Marker)));
  SWIG_Python_SetConstant(d, "btkPoint_Angle",SWIG_From_int(static_cast< int >(btkPoint::Angle)));
  SWIG_Python_SetConstant(d, "btkPoint_Force",SWIG_From_int(static_cast< int >(btkPoint::Force)));
  SWIG_Python_SetConstant(d, "btkPoint_Moment",SWIG_From_int(static_cast< int >(btkPoint::Moment)));
  SWIG_Python_SetConstant(d, "btkPoint_Power",SWIG_From_int(static_cast< int >(btkPoint::Power)));
  SWIG_Python_SetConstant(d, "btkPoint_Scalar",SWIG_From_int(static_cast< int >(btkPoint::Scalar)));
  SWIG_Python_SetConstant(d, "btkPoint_Reaction",SWIG_From_int(static_cast< int >(btkPoint::Reaction)));
  SWIG_Python_SetConstant(d, "btkMetaDataInfo_Char",SWIG_From_int(static_cast< int >(btkMetaDataInfo::Char)));
  SWIG_Python_SetConstant(d, "btkMetaDataInfo_Byte",SWIG_From_int(static_cast< int >(btkMetaDataInfo::Byte)));
  SWIG_Python_SetConstant(d, "btkMetaDataInfo_Integer",SWIG_From_int(static_cast< int >(btkMetaDataInfo::Integer)));
  SWIG_Python_SetConstant(d, "btkMetaDataInfo_Real",SWIG_From_int(static_cast< int >(btkMetaDataInfo::Real)));
  SWIG_Python_SetConstant(d, "btkAcquisition_Bit8",SWIG_From_int(static_cast< int >(btkAcquisition::Bit8)));
  SWIG_Python_SetConstant(d, "btkAcquisition_Bit10",SWIG_From_int(static_cast< int >(btkAcquisition::Bit10)));
  SWIG_Python_SetConstant(d, "btkAcquisition_Bit12",SWIG_From_int(static_cast< int >(btkAcquisition::Bit12)));
  SWIG_Python_SetConstant(d, "btkAcquisition_Bit14",SWIG_From_int(static_cast< int >(btkAcquisition::Bit14)));
  SWIG_Python_SetConstant(d, "btkAcquisition_Bit16",SWIG_From_int(static_cast< int >(btkAcquisition::Bit16)));
  SWIG_Python_SetConstant(d, "btkAcquisitionFileIO_TypeNotApplicable",SWIG_From_int(static_cast< int >(btkAcquisitionFileIO::TypeNotApplicable)));
  SWIG_Python_SetConstant(d, "btkAcquisitionFileIO_ASCII",SWIG_From_int(static_cast< int >(btkAcquisitionFileIO::ASCII)));
  SWIG_Python_SetConstant(d, "btkAcquisitionFileIO_Binary",SWIG_From_int(static_cast< int >(btkAcquisitionFileIO::Binary)));
  SWIG_Python_SetConstant(d, "btkAcquisitionFileIO_OrderNotApplicable",SWIG_From_int(static_cast< int >(btkAcquisitionFileIO::OrderNotApplicable)));
  SWIG_Python_SetConstant(d, "btkAcquisitionFileIO_IEEE_LittleEndian",SWIG_From_int(static_cast< int >(btkAcquisitionFileIO::IEEE_LittleEndian)));
  SWIG_Python_SetConstant(d, "btkAcquisitionFileIO_VAX_LittleEndian",SWIG_From_int(static_cast< int >(btkAcquisitionFileIO::VAX_LittleEndian)));
  SWIG_Python_SetConstant(d, "btkAcquisitionFileIO_IEEE_BigEndian",SWIG_From_int(static_cast< int >(btkAcquisitionFileIO::IEEE_BigEndian)));
  SWIG_Python_SetConstant(d, "btkAcquisitionFileIO_StorageNotApplicable",SWIG_From_int(static_cast< int >(btkAcquisitionFileIO::StorageNotApplicable)));
  SWIG_Python_SetConstant(d, "btkAcquisitionFileIO_Float",SWIG_From_int(static_cast< int >(btkAcquisitionFileIO::Float)));
  SWIG_Python_SetConstant(d, "btkAcquisitionFileIO_Integer",SWIG_From_int(static_cast< int >(btkAcquisitionFileIO::Integer)));
  SWIG_Python_SetConstant(d, "btkAcquisitionFileIO_UpdateNotApplicable",SWIG_From_int(static_cast< int >(btkAcquisitionFileIO::UpdateNotApplicable)));
  SWIG_Python_SetConstant(d, "btkAcquisitionFileIO_NoUpdate",SWIG_From_int(static_cast< int >(btkAcquisitionFileIO::NoUpdate)));
  SWIG_Python_SetConstant(d, "btkAcquisitionFileIO_DataBasedUpdate",SWIG_From_int(static_cast< int >(btkAcquisitionFileIO::DataBasedUpdate)));
  SWIG_Python_SetConstant(d, "btkAcquisitionFileIO_MetaDataBasedUpdate",SWIG_From_int(static_cast< int >(btkAcquisitionFileIO::MetaDataBasedUpdate)));
  SWIG_Python_SetConstant(d, "btkAcquisitionFileIO_FileFormatOption",SWIG_From_int(static_cast< int >(btkAcquisitionFileIO::FileFormatOption)));
  SWIG_Python_SetConstant(d, "btkC3DFileIO_Signed",SWIG_From_int(static_cast< int >(btkC3DFileIO::Signed)));
  SWIG_Python_SetConstant(d, "btkC3DFileIO_Unsigned",SWIG_From_int(static_cast< int >(btkC3DFileIO::Unsigned)));
  SWIG_Python_SetConstant(d, "btkC3DFileIO_CompatibleVicon",SWIG_From_int(static_cast< int >(btkC3DFileIO::CompatibleVicon)));
  SWIG_Python_SetConstant(d, "btkAcquisitionUnitConverter_Length",SWIG_From_int(static_cast< int >(btkAcquisitionUnitConverter::Length)));
  SWIG_Python_SetConstant(d, "btkAcquisitionUnitConverter_Angle",SWIG_From_int(static_cast< int >(btkAcquisitionUnitConverter::Angle)));
  SWIG_Python_SetConstant(d, "btkAcquisitionUnitConverter_Force",SWIG_From_int(static_cast< int >(btkAcquisitionUnitConverter::Force)));
  SWIG_Python_SetConstant(d, "btkAcquisitionUnitConverter_Moment",SWIG_From_int(static_cast< int >(btkAcquisitionUnitConverter::Moment)));
  SWIG_Python_SetConstant(d, "btkAcquisitionUnitConverter_Power",SWIG_From_int(static_cast< int >(btkAcquisitionUnitConverter::Power)));
  SWIG_Python_SetConstant(d, "btkMergeAcquisitionFilter_KeepAllFrames",SWIG_From_int(static_cast< int >(btkMergeAcquisitionFilter::KeepAllFrames)));
  SWIG_Python_SetConstant(d, "btkMergeAcquisitionFilter_KeepFromHighestFirstFrame",SWIG_From_int(static_cast< int >(btkMergeAcquisitionFilter::KeepFromHighestFirstFrame)));
  SWIG_Python_SetConstant(d, "btkSeparateKnownVirtualMarkersFilter_AllMarkers",SWIG_From_int(static_cast< int >(btkSeparateKnownVirtualMarkersFilter::AllMarkers)));
  SWIG_Python_SetConstant(d, "btkSeparateKnownVirtualMarkersFilter_Markers",SWIG_From_int(static_cast< int >(btkSeparateKnownVirtualMarkersFilter::Markers)));
  SWIG_Python_SetConstant(d, "btkSeparateKnownVirtualMarkersFilter_VirtualReferenceFrames",SWIG_From_int(static_cast< int >(btkSeparateKnownVirtualMarkersFilter::VirtualReferenceFrames)));
  SWIG_Python_SetConstant(d, "btkSeparateKnownVirtualMarkersFilter_VirtualMarkers",SWIG_From_int(static_cast< int >(btkSeparateKnownVirtualMarkersFilter::VirtualMarkers)));
  SWIG_Python_SetConstant(d, "btkSeparateKnownVirtualMarkersFilter_OtherPoints",SWIG_From_int(static_cast< int >(btkSeparateKnownVirtualMarkersFilter::OtherPoints)));
  SWIG_Python_SetConstant(d, "btkSubAcquisitionFilter_All",SWIG_From_int(static_cast< int >(btkSubAcquisitionFilter::All)));
  SWIG_Python_SetConstant(d, "btkSubAcquisitionFilter_PointsOnly",SWIG_From_int(static_cast< int >(btkSubAcquisitionFilter::PointsOnly)));
  SWIG_Python_SetConstant(d, "btkSubAcquisitionFilter_AnalogsOnly",SWIG_From_int(static_cast< int >(btkSubAcquisitionFilter::AnalogsOnly)));
  SWIG_Python_SetConstant(d, "btkSubAcquisitionFilter_EventsOnly",SWIG_From_int(static_cast< int >(btkSubAcquisitionFilter::EventsOnly)));
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

